# Generated from VisualFoxpro9.g4 by ANTLR 4.7.1
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3")
        buf.write(u"\u0130\u0855\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6")
        buf.write(u"\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4")
        buf.write(u"\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t")
        buf.write(u"\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27")
        buf.write(u"\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4")
        buf.write(u"\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t")
        buf.write(u"#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4")
        buf.write(u",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62")
        buf.write(u"\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4")
        buf.write(u"8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\3\2\3")
        buf.write(u"\2\3\2\3\3\7\3\u0083\n\3\f\3\16\3\u0086\13\3\3\4\3\4")
        buf.write(u"\3\4\3\4\3\4\5\4\u008d\n\4\3\4\3\4\3\4\3\4\3\4\3\4\5")
        buf.write(u"\4\u0095\n\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\7\4\u009f")
        buf.write(u"\n\4\f\4\16\4\u00a2\13\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write(u"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\7\4\u00b3\n\4\f\4\16")
        buf.write(u"\4\u00b6\13\4\3\4\3\4\3\4\3\4\7\4\u00bc\n\4\f\4\16\4")
        buf.write(u"\u00bf\13\4\3\4\5\4\u00c2\n\4\5\4\u00c4\n\4\3\5\3\5\7")
        buf.write(u"\5\u00c8\n\5\f\5\16\5\u00cb\13\5\3\5\3\5\3\6\3\6\7\6")
        buf.write(u"\u00d1\n\6\f\6\16\6\u00d4\13\6\3\6\3\6\5\6\u00d8\n\6")
        buf.write(u"\3\7\3\7\3\7\5\7\u00dd\n\7\3\7\3\7\5\7\u00e1\n\7\3\b")
        buf.write(u"\3\b\3\t\7\t\u00e6\n\t\f\t\16\t\u00e9\13\t\3\n\7\n\u00ec")
        buf.write(u"\n\n\f\n\16\n\u00ef\13\n\3\13\3\13\3\13\3\13\5\13\u00f5")
        buf.write(u"\n\13\3\13\3\13\3\f\3\f\7\f\u00fb\n\f\f\f\16\f\u00fe")
        buf.write(u"\13\f\3\f\3\f\3\f\7\f\u0103\n\f\f\f\16\f\u0106\13\f\3")
        buf.write(u"\r\3\r\3\r\3\r\3\r\5\r\u010d\n\r\3\16\3\16\5\16\u0111")
        buf.write(u"\n\16\3\17\3\17\3\17\7\17\u0116\n\17\f\17\16\17\u0119")
        buf.write(u"\13\17\3\20\5\20\u011c\n\20\3\20\3\20\3\20\3\20\5\20")
        buf.write(u"\u0122\n\20\3\20\5\20\u0125\n\20\3\20\5\20\u0128\n\20")
        buf.write(u"\3\20\3\20\3\21\3\21\3\21\3\21\3\21\7\21\u0131\n\21\f")
        buf.write(u"\21\16\21\u0134\13\21\5\21\u0136\n\21\3\22\3\22\3\22")
        buf.write(u"\5\22\u013b\n\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\5")
        buf.write(u"\23\u0144\n\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write(u"\3\24\3\24\5\24\u0150\n\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write(u"\24\3\24\3\24\3\24\5\24\u015b\n\24\3\25\3\25\3\25\5\25")
        buf.write(u"\u0160\n\25\5\25\u0162\n\25\3\26\3\26\3\26\3\26\3\27")
        buf.write(u"\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\31\3\31\3")
        buf.write(u"\31\3\31\7\31\u0175\n\31\f\31\16\31\u0178\13\31\3\31")
        buf.write(u"\7\31\u017b\n\31\f\31\16\31\u017e\13\31\3\31\5\31\u0181")
        buf.write(u"\n\31\3\31\3\31\3\32\5\32\u0186\n\32\3\32\3\32\3\32\3")
        buf.write(u"\32\3\33\3\33\3\33\3\33\3\34\3\34\3\34\5\34\u0193\n\34")
        buf.write(u"\3\34\3\34\3\34\3\34\3\35\3\35\5\35\u019b\n\35\3\35\3")
        buf.write(u"\35\5\35\u019f\n\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36")
        buf.write(u"\3\36\3\36\3\36\5\36\u01ab\n\36\3\36\3\36\5\36\u01af")
        buf.write(u"\n\36\3\36\3\36\3\36\5\36\u01b4\n\36\3\36\3\36\3\37\3")
        buf.write(u"\37\3\37\3\37\3\37\3\37\3\37\5\37\u01bf\n\37\3 \3 \3")
        buf.write(u" \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \7 \u01ce\n \f \16 \u01d1")
        buf.write(u"\13 \5 \u01d3\n \3 \3 \3 \3 \3 \3 \5 \u01db\n \3 \3 ")
        buf.write(u"\3 \3 \6 \u01e1\n \r \16 \u01e2\5 \u01e5\n \3 \3 \3 ")
        buf.write(u"\3 \5 \u01eb\n \3 \3 \3 \5 \u01f0\n \3 \3 \3 \3 \3 \7")
        buf.write(u" \u01f7\n \f \16 \u01fa\13 \3 \3 \3 \3 \3 \7 \u0201\n")
        buf.write(u" \f \16 \u0204\13 \5 \u0206\n \3 \3 \3 \3 \3 \3 \7 \u020e")
        buf.write(u"\n \f \16 \u0211\13 \3 \3 \3 \3 \5 \u0217\n \3 \3 \5")
        buf.write(u" \u021b\n \3 \3 \3 \5 \u0220\n \3 \3 \3 \7 \u0225\n ")
        buf.write(u"\f \16 \u0228\13 \3 \3 \3 \5 \u022d\n \3 \3 \5 \u0231")
        buf.write(u"\n \3 \5 \u0234\n \3 \5 \u0237\n \3 \3 \3 \3 \3 \3 \3")
        buf.write(u" \3 \3 \5 \u0242\n \3 \3 \3 \3 \3 \3 \7 \u024a\n \f ")
        buf.write(u"\16 \u024d\13 \3 \3 \3 \5 \u0252\n \3 \3 \5 \u0256\n")
        buf.write(u" \3 \5 \u0259\n \3 \3 \3 \5 \u025e\n \3 \3 \3 \3 \3 ")
        buf.write(u"\3 \3 \3 \5 \u0268\n \3 \3 \3 \3 \3 \3 \5 \u0270\n \5")
        buf.write(u" \u0272\n \3 \3 \3 \3 \5 \u0278\n \3 \5 \u027b\n \3 ")
        buf.write(u"\5 \u027e\n \3 \3 \3 \3 \5 \u0284\n \3 \3 \3 \3 \3 \5")
        buf.write(u" \u028b\n \5 \u028d\n \3 \3 \3 \5 \u0292\n \3 \3 \3 ")
        buf.write(u"\3 \5 \u0298\n \5 \u029a\n \3 \3 \3 \3 \3 \5 \u02a1\n")
        buf.write(u" \3 \3 \5 \u02a5\n \3 \3 \3 \5 \u02aa\n \3 \3 \3 \3 ")
        buf.write(u"\7 \u02b0\n \f \16 \u02b3\13 \3 \3 \5 \u02b7\n \3 \3")
        buf.write(u" \3 \5 \u02bc\n \3 \5 \u02bf\n \3 \3 \3 \3 \3 \3 \3 ")
        buf.write(u"\5 \u02c8\n \3 \3 \3 \5 \u02cd\n \3 \5 \u02d0\n \5 \u02d2")
        buf.write(u"\n \3 \5 \u02d5\n \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \5")
        buf.write(u" \u02e2\n \3 \3 \3 \3 \5 \u02e8\n \3 \3 \3 \3 \5 \u02ee")
        buf.write(u"\n \5 \u02f0\n \3 \3 \3 \3 \3 \3 \3 \3 \5 \u02fa\n \5")
        buf.write(u" \u02fc\n \5 \u02fe\n \5 \u0300\n \3 \3 \5 \u0304\n ")
        buf.write(u"\3 \3 \5 \u0308\n \3 \3 \3 \3 \5 \u030e\n \3 \3 \5 \u0312")
        buf.write(u"\n \5 \u0314\n \3 \3 \5 \u0318\n \3 \3 \3 \5 \u031d\n")
        buf.write(u" \5 \u031f\n \3 \3 \3 \5 \u0324\n \3 \3 \3 \3 \5 \u032a")
        buf.write(u"\n \3 \5 \u032d\n \3 \5 \u0330\n \3 \3 \3 \5 \u0335\n")
        buf.write(u" \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u0340\n \3 \3 \3 \3 ")
        buf.write(u"\5 \u0346\n \3 \3 \5 \u034a\n \3 \3 \5 \u034e\n \5 \u0350")
        buf.write(u"\n \3 \5 \u0353\n \3 \5 \u0356\n \3 \3 \3 \3 \5 \u035c")
        buf.write(u"\n \3 \3 \5 \u0360\n \3 \3 \3 \3 \5 \u0366\n \3 \3 \3")
        buf.write(u" \3 \5 \u036c\n \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 ")
        buf.write(u"\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \7 \u038a")
        buf.write(u"\n \f \16 \u038d\13 \3 \3 \3 \3 \5 \u0393\n \3 \3 \3")
        buf.write(u" \3 \5 \u0399\n \3 \3 \3 \7 \u039e\n \f \16 \u03a1\13")
        buf.write(u" \3 \3 \5 \u03a5\n \3 \3 \5 \u03a9\n \3 \3 \3 \3 \5 ")
        buf.write(u"\u03af\n \3 \3 \3 \3 \7 \u03b5\n \f \16 \u03b8\13 \3")
        buf.write(u" \3 \3 \3 \3 \5 \u03bf\n \3 \3 \3 \3 \3 \3 \3 \3 \3 ")
        buf.write(u"\3 \3 \3 \3 \3 \5 \u03cf\n \7 \u03d1\n \f \16 \u03d4")
        buf.write(u"\13 \3 \3 \3 \5 \u03d9\n \3 \3 \5 \u03dd\n \3 \3 \5 ")
        buf.write(u"\u03e1\n \3 \3 \5 \u03e5\n \3 \3 \3 \5 \u03ea\n \3 \3")
        buf.write(u" \3 \5 \u03ef\n \5 \u03f1\n \3 \3 \3 \3 \3 \5 \u03f8")
        buf.write(u"\n \3 \3 \3 \3 \3 \3 \3 \7 \u0401\n \f \16 \u0404\13")
        buf.write(u" \3 \3 \7 \u0408\n \f \16 \u040b\13 \3 \3 \3 \3 \3 \3")
        buf.write(u" \3 \7 \u0414\n \f \16 \u0417\13 \3 \3 \3 \3 \3 \3 \5")
        buf.write(u" \u041f\n \3 \5 \u0422\n \3 \5 \u0425\n \3 \5 \u0428")
        buf.write(u"\n \3 \3 \3 \3 \7 \u042e\n \f \16 \u0431\13 \3 \3 \3")
        buf.write(u" \3 \3 \7 \u0438\n \f \16 \u043b\13 \3 \3 \3 \3 \3 \3")
        buf.write(u" \3 \7 \u0444\n \f \16 \u0447\13 \3 \3 \3 \3 \7 \u044d")
        buf.write(u"\n \f \16 \u0450\13 \7 \u0452\n \f \16 \u0455\13 \3 ")
        buf.write(u"\3 \3 \3 \5 \u045b\n \3 \3 \7 \u045f\n \f \16 \u0462")
        buf.write(u"\13 \3 \3 \3 \3 \7 \u0468\n \f \16 \u046b\13 \3 \3 \3")
        buf.write(u" \3 \3 \3 \3 \3 \3 \5 \u0476\n \3 \3 \5 \u047a\n \3 ")
        buf.write(u"\3 \5 \u047e\n \3 \3 \3 \3 \3 \3 \5 \u0486\n \3 \3 \3")
        buf.write(u" \3 \3 \3 \3 \3 \3 \5 \u0491\n \3 \3 \3 \3 \5 \u0497")
        buf.write(u"\n \3 \3 \3 \3 \3 \5 \u049e\n \3 \3 \5 \u04a2\n \3 \3")
        buf.write(u" \5 \u04a6\n \3 \3 \3 \5 \u04ab\n \3 \3 \3 \3 \3 \3 ")
        buf.write(u"\3 \5 \u04b4\n \5 \u04b6\n \3 \3 \5 \u04ba\n \3 \3 \3")
        buf.write(u" \3 \3 \3 \3 \3 \5 \u04c4\n \3 \5 \u04c7\n \3 \5 \u04ca")
        buf.write(u"\n \5 \u04cc\n \3 \3 \5 \u04d0\n \3 \3 \3 \3 \3 \3 \3")
        buf.write(u" \3 \3 \3 \3 \7 \u04dd\n \f \16 \u04e0\13 \3 \3 \5 \u04e4")
        buf.write(u"\n \3 \3 \3 \3 \3 \7 \u04eb\n \f \16 \u04ee\13 \3 \3")
        buf.write(u" \3 \3 \5 \u04f4\n \3 \5 \u04f7\n \3 \3 \5 \u04fb\n ")
        buf.write(u"\3 \3 \3 \3 \3 \3 \5 \u0503\n \3 \3 \7 \u0507\n \f \16")
        buf.write(u" \u050a\13 \3 \3 \5 \u050e\n \3 \3 \3 \3 \3 \5 \u0515")
        buf.write(u"\n \3 \3 \7 \u0519\n \f \16 \u051c\13 \3 \3 \3 \5 \u0521")
        buf.write(u"\n \3 \5 \u0524\n \3 \5 \u0527\n \3 \5 \u052a\n \3 \3")
        buf.write(u" \3 \3 \5 \u0530\n \3 \3 \5 \u0534\n \3 \3 \3 \5 \u0539")
        buf.write(u"\n \3 \5 \u053c\n \3 \5 \u053f\n \3 \3 \3 \3 \3 \5 \u0546")
        buf.write(u"\n \3 \3 \3 \5 \u054b\n \3 \5 \u054e\n \3 \3 \5 \u0552")
        buf.write(u"\n \3 \3 \5 \u0556\n \5 \u0558\n \3 \3 \3 \3 \3 \3 \3")
        buf.write(u" \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 ")
        buf.write(u"\u0571\n \3 \3 \3 \3 \5 \u0577\n \3 \3 \3 \3 \5 \u057d")
        buf.write(u"\n \3 \3 \3 \3 \5 \u0583\n \3 \7 \u0586\n \f \16 \u0589")
        buf.write(u"\13 \3 \3 \5 \u058d\n \3 \3 \3 \3 \3 \5 \u0594\n \3 ")
        buf.write(u"\5 \u0597\n \3 \3 \3 \5 \u059c\n \3 \7 \u059f\n \f \16")
        buf.write(u" \u05a2\13 \3 \3 \3 \3 \5 \u05a8\n \3 \3 \5 \u05ac\n")
        buf.write(u" \3 \3 \3 \3 \3 \3 \7 \u05b4\n \f \16 \u05b7\13 \3 \3")
        buf.write(u" \3 \3 \3 \3 \3 \5 \u05c0\n \3 \3 \3 \5 \u05c5\n \3 ")
        buf.write(u"\3 \3 \3 \5 \u05cb\n \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(u" \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u05e6")
        buf.write(u"\n \5 \u05e8\n \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \7 \u05f4")
        buf.write(u"\n \f \16 \u05f7\13 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(u" \5 \u0604\n \3 \3 \3 \5 \u0609\n \3!\3!\3!\3!\3!\3!")
        buf.write(u"\5!\u0611\n!\3\"\7\"\u0614\n\"\f\"\16\"\u0617\13\"\3")
        buf.write(u"#\3#\3#\7#\u061c\n#\f#\16#\u061f\13#\3$\3$\5$\u0623\n")
        buf.write(u"$\3$\5$\u0626\n$\3%\3%\3%\5%\u062b\n%\3&\3&\3&\3&\3&")
        buf.write(u"\3&\5&\u0633\n&\5&\u0635\n&\3&\3&\3&\3&\3&\3&\3&\5&\u063e")
        buf.write(u"\n&\3&\3&\3&\3&\3&\3&\3&\5&\u0647\n&\5&\u0649\n&\5&\u064b")
        buf.write(u"\n&\3&\3&\3&\3&\3&\5&\u0652\n&\3&\3&\5&\u0656\n&\3&\5")
        buf.write(u"&\u0659\n&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0664\n&\5&")
        buf.write(u"\u0666\n&\3&\3&\3&\5&\u066b\n&\3&\3&\3&\3&\5&\u0671\n")
        buf.write(u"&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u067f\n&\5&")
        buf.write(u"\u0681\n&\3&\3&\3&\3&\3&\5&\u0688\n&\3&\3&\5&\u068c\n")
        buf.write(u"&\3&\5&\u068f\n&\3&\3&\3&\5&\u0694\n&\3&\3&\3&\3&\5&")
        buf.write(u"\u069a\n&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u06a5\n&\3&\3")
        buf.write(u"&\3&\3&\3&\5&\u06ac\n&\3&\3&\3&\5&\u06b1\n&\3&\3&\5&")
        buf.write(u"\u06b5\n&\3&\5&\u06b8\n&\5&\u06ba\n&\3&\3&\3&\5&\u06bf")
        buf.write(u"\n&\3&\3&\3&\3&\3&\3&\3&\5&\u06c8\n&\5&\u06ca\n&\5&\u06cc")
        buf.write(u"\n&\3&\3&\3&\3&\3&\7&\u06d3\n&\f&\16&\u06d6\13&\3&\5")
        buf.write(u"&\u06d9\n&\3&\3&\3&\3&\3&\5&\u06e0\n&\3&\3&\3&\3&\3&")
        buf.write(u"\3&\3&\5&\u06e9\n&\3&\5&\u06ec\n&\3&\3&\3&\3&\5&\u06f2")
        buf.write(u"\n&\3&\3&\3&\3&\3&\3&\3&\5&\u06fb\n&\3&\3&\5&\u06ff\n")
        buf.write(u"&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u070a\n&\3\'\3\'\3\'")
        buf.write(u"\3\'\3\'\5\'\u0711\n\'\5\'\u0713\n\'\3(\3(\3(\3)\3)\3")
        buf.write(u")\5)\u071b\n)\3*\3*\5*\u071f\n*\3+\3+\7+\u0723\n+\f+")
        buf.write(u"\16+\u0726\13+\3+\6+\u0729\n+\r+\16+\u072a\5+\u072d\n")
        buf.write(u"+\3,\3,\3,\7,\u0732\n,\f,\16,\u0735\13,\3-\3-\3-\3.\3")
        buf.write(u".\3.\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/")
        buf.write(u"\3/\3/\3/\3/\3/\5/\u0752\n/\3/\3/\5/\u0756\n/\5/\u0758")
        buf.write(u"\n/\3/\3/\3/\3/\5/\u075e\n/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write(u"/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\7/\u0775\n/\f/")
        buf.write(u"\16/\u0778\13/\3\60\3\60\3\61\3\61\3\62\3\62\3\62\3\62")
        buf.write(u"\3\62\5\62\u0783\n\62\3\62\3\62\3\62\3\62\3\62\3\62\3")
        buf.write(u"\62\3\62\5\62\u078d\n\62\3\62\3\62\5\62\u0791\n\62\5")
        buf.write(u"\62\u0793\n\62\3\63\3\63\3\63\5\63\u0798\n\63\3\64\3")
        buf.write(u"\64\5\64\u079c\n\64\3\64\3\64\3\64\5\64\u07a1\n\64\3")
        buf.write(u"\64\5\64\u07a4\n\64\3\64\5\64\u07a7\n\64\3\64\3\64\3")
        buf.write(u"\64\5\64\u07ac\n\64\5\64\u07ae\n\64\3\65\3\65\3\65\5")
        buf.write(u"\65\u07b3\n\65\3\65\6\65\u07b6\n\65\r\65\16\65\u07b7")
        buf.write(u"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3")
        buf.write(u"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66")
        buf.write(u"\3\66\3\66\3\66\3\66\5\66\u07d3\n\66\3\67\3\67\5\67\u07d7")
        buf.write(u"\n\67\38\58\u07da\n8\38\38\38\38\38\58\u07e1\n8\38\3")
        buf.write(u"8\38\38\38\38\38\38\38\38\38\38\38\38\38\58\u07f2\n8")
        buf.write(u"\38\58\u07f5\n8\38\38\38\38\38\58\u07fc\n8\58\u07fe\n")
        buf.write(u"8\38\58\u0801\n8\58\u0803\n8\38\38\38\78\u0808\n8\f8")
        buf.write(u"\168\u080b\138\38\38\38\78\u0810\n8\f8\168\u0813\138")
        buf.write(u"\38\38\38\78\u0818\n8\f8\168\u081b\138\38\58\u081e\n")
        buf.write(u"8\38\58\u0821\n8\39\59\u0824\n9\39\39\39\79\u0829\n9")
        buf.write(u"\f9\169\u082c\139\3:\5:\u082f\n:\3:\3:\5:\u0833\n:\3")
        buf.write(u";\3;\3;\3;\3<\3<\3<\5<\u083c\n<\3<\3<\3<\3<\3<\5<\u0843")
        buf.write(u"\n<\3<\3<\5<\u0847\n<\3=\3=\3>\3>\3>\3>\3>\3>\5>\u0851")
        buf.write(u"\n>\3?\3?\3?\4\u00ed\u07b7\3\\@\2\4\6\b\n\f\16\20\22")
        buf.write(u"\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNP")
        buf.write(u"RTVXZ\\^`bdfhjlnprtvxz|\2)\3\2\u012e\u012e\7\2//\61\62")
        buf.write(u"NN\u00c7\u00c7\u012e\u012e\4\3\30\30\u012e\u012e\4\2")
        buf.write(u"\t\t((\3\3\u012e\u012e\4\288\u00eb\u00eb\5\299ll\u00d2")
        buf.write(u"\u00d2\4\2\u0096\u0097\u00fa\u00fa\4\2\u009c\u009c\u00ad")
        buf.write(u"\u00ad\4\2LL\u00c8\u00c8\4\2wx\u00b4\u00b4\4\2<<\u0114")
        buf.write(u"\u0114\5\2AACC[[\4\2AA[[\4\2++\u00cc\u00cc\3\2\u00ce")
        buf.write(u"\u00cf\4\2\u00ca\u00ca\u00d0\u00d0\3\2\u00fd\u00fe\3")
        buf.write(u"\2:;\4\2CC\u00e9\u00e9\3\2\u00e4\u00e6\4\2\27\27\u00ef")
        buf.write(u"\u00ef\6\2\u0082\u0083\u009a\u009a\u00c8\u00c8\u00e4")
        buf.write(u"\u00e4\3\2\u011b\u011d\3\2\u0123\u0123\3\2\63\64\4\2")
        buf.write(u"\63\64\u0088\u0089\3\2\u0086\u0087\3\2\n\13\4\2\27\27")
        buf.write(u"\u00d3\u00d3\4\2\t\t\f\f\6\2\25\26\30\34\36\36!!\3\2")
        buf.write(u"\u00d4\u00d5\3\2\u00d6\u00d7\3\2\u00da\u00db\4\2%%\u012e")
        buf.write(u"\u012e\4\2$$\u012e\u012e\4\2\17\17\u012e\u012e\f\2()")
        buf.write(u"+ACVX\u00d4\u00d6\u00d6\u00d8\u00ef\u00f1\u00f9\u00fb")
        buf.write(u"\u0102\u0108\u0127\u0129\u012d\2\u0a5d\2~\3\2\2\2\4\u0084")
        buf.write(u"\3\2\2\2\6\u00c3\3\2\2\2\b\u00c9\3\2\2\2\n\u00d7\3\2")
        buf.write(u"\2\2\f\u00e0\3\2\2\2\16\u00e2\3\2\2\2\20\u00e7\3\2\2")
        buf.write(u"\2\22\u00ed\3\2\2\2\24\u00f0\3\2\2\2\26\u00f8\3\2\2\2")
        buf.write(u"\30\u010c\3\2\2\2\32\u010e\3\2\2\2\34\u0112\3\2\2\2\36")
        buf.write(u"\u011b\3\2\2\2 \u012b\3\2\2\2\"\u0137\3\2\2\2$\u013e")
        buf.write(u"\3\2\2\2&\u015a\3\2\2\2(\u0161\3\2\2\2*\u0163\3\2\2\2")
        buf.write(u",\u0167\3\2\2\2.\u016c\3\2\2\2\60\u0170\3\2\2\2\62\u0185")
        buf.write(u"\3\2\2\2\64\u018b\3\2\2\2\66\u018f\3\2\2\28\u0198\3\2")
        buf.write(u"\2\2:\u01a4\3\2\2\2<\u01be\3\2\2\2>\u0608\3\2\2\2@\u0610")
        buf.write(u"\3\2\2\2B\u0615\3\2\2\2D\u0618\3\2\2\2F\u0620\3\2\2\2")
        buf.write(u"H\u0627\3\2\2\2J\u0709\3\2\2\2L\u0712\3\2\2\2N\u0714")
        buf.write(u"\3\2\2\2P\u0717\3\2\2\2R\u071c\3\2\2\2T\u072c\3\2\2\2")
        buf.write(u"V\u072e\3\2\2\2X\u0736\3\2\2\2Z\u0739\3\2\2\2\\\u0757")
        buf.write(u"\3\2\2\2^\u0779\3\2\2\2`\u077b\3\2\2\2b\u0792\3\2\2\2")
        buf.write(u"d\u0797\3\2\2\2f\u07ad\3\2\2\2h\u07b2\3\2\2\2j\u07d2")
        buf.write(u"\3\2\2\2l\u07d6\3\2\2\2n\u0820\3\2\2\2p\u0823\3\2\2\2")
        buf.write(u"r\u082e\3\2\2\2t\u0834\3\2\2\2v\u0846\3\2\2\2x\u0848")
        buf.write(u"\3\2\2\2z\u0850\3\2\2\2|\u0852\3\2\2\2~\177\5\4\3\2\177")
        buf.write(u"\u0080\7\2\2\3\u0080\3\3\2\2\2\u0081\u0083\5\6\4\2\u0082")
        buf.write(u"\u0081\3\2\2\2\u0083\u0086\3\2\2\2\u0084\u0082\3\2\2")
        buf.write(u"\2\u0084\u0085\3\2\2\2\u0085\5\3\2\2\2\u0086\u0084\3")
        buf.write(u"\2\2\2\u0087\u008c\7\30\2\2\u0088\u0089\7/\2\2\u0089")
        buf.write(u"\u008d\5\\/\2\u008a\u008b\7\u00bb\2\2\u008b\u008d\5|")
        buf.write(u"?\2\u008c\u0088\3\2\2\2\u008c\u008a\3\2\2\2\u008d\u008e")
        buf.write(u"\3\2\2\2\u008e\u008f\7\u012e\2\2\u008f\u0094\5\4\3\2")
        buf.write(u"\u0090\u0091\7\30\2\2\u0091\u0092\7\61\2\2\u0092\u0093")
        buf.write(u"\7\u012e\2\2\u0093\u0095\5\4\3\2\u0094\u0090\3\2\2\2")
        buf.write(u"\u0094\u0095\3\2\2\2\u0095\u0096\3\2\2\2\u0096\u0097")
        buf.write(u"\7\30\2\2\u0097\u0098\7\62\2\2\u0098\u0099\5\16\b\2\u0099")
        buf.write(u"\u00c4\3\2\2\2\u009a\u009b\7\30\2\2\u009b\u009c\7N\2")
        buf.write(u"\2\u009c\u00a0\5|?\2\u009d\u009f\n\2\2\2\u009e\u009d")
        buf.write(u"\3\2\2\2\u009f\u00a2\3\2\2\2\u00a0\u009e\3\2\2\2\u00a0")
        buf.write(u"\u00a1\3\2\2\2\u00a1\u00a3\3\2\2\2\u00a2\u00a0\3\2\2")
        buf.write(u"\2\u00a3\u00a4\5\16\b\2\u00a4\u00c4\3\2\2\2\u00a5\u00a6")
        buf.write(u"\7\30\2\2\u00a6\u00a7\7\u00ba\2\2\u00a7\u00a8\5|?\2\u00a8")
        buf.write(u"\u00a9\5\16\b\2\u00a9\u00c4\3\2\2\2\u00aa\u00ab\7\30")
        buf.write(u"\2\2\u00ab\u00ac\7\u00c7\2\2\u00ac\u00ad\5l\67\2\u00ad")
        buf.write(u"\u00ae\5\16\b\2\u00ae\u00c4\3\2\2\2\u00af\u00b0\7\30")
        buf.write(u"\2\2\u00b0\u00b4\n\3\2\2\u00b1\u00b3\n\2\2\2\u00b2\u00b1")
        buf.write(u"\3\2\2\2\u00b3\u00b6\3\2\2\2\u00b4\u00b2\3\2\2\2\u00b4")
        buf.write(u"\u00b5\3\2\2\2\u00b5\u00b7\3\2\2\2\u00b6\u00b4\3\2\2")
        buf.write(u"\2\u00b7\u00c4\5\16\b\2\u00b8\u00c2\7\u012e\2\2\u00b9")
        buf.write(u"\u00bd\n\4\2\2\u00ba\u00bc\n\2\2\2\u00bb\u00ba\3\2\2")
        buf.write(u"\2\u00bc\u00bf\3\2\2\2\u00bd\u00bb\3\2\2\2\u00bd\u00be")
        buf.write(u"\3\2\2\2\u00be\u00c0\3\2\2\2\u00bf\u00bd\3\2\2\2\u00c0")
        buf.write(u"\u00c2\5\16\b\2\u00c1\u00b8\3\2\2\2\u00c1\u00b9\3\2\2")
        buf.write(u"\2\u00c2\u00c4\3\2\2\2\u00c3\u0087\3\2\2\2\u00c3\u009a")
        buf.write(u"\3\2\2\2\u00c3\u00a5\3\2\2\2\u00c3\u00aa\3\2\2\2\u00c3")
        buf.write(u"\u00af\3\2\2\2\u00c3\u00c1\3\2\2\2\u00c4\7\3\2\2\2\u00c5")
        buf.write(u"\u00c8\5\26\f\2\u00c6\u00c8\5 \21\2\u00c7\u00c5\3\2\2")
        buf.write(u"\2\u00c7\u00c6\3\2\2\2\u00c8\u00cb\3\2\2\2\u00c9\u00c7")
        buf.write(u"\3\2\2\2\u00c9\u00ca\3\2\2\2\u00ca\u00cc\3\2\2\2\u00cb")
        buf.write(u"\u00c9\3\2\2\2\u00cc\u00cd\7\2\2\3\u00cd\t\3\2\2\2\u00ce")
        buf.write(u"\u00d2\t\5\2\2\u00cf\u00d1\n\2\2\2\u00d0\u00cf\3\2\2")
        buf.write(u"\2\u00d1\u00d4\3\2\2\2\u00d2\u00d0\3\2\2\2\u00d2\u00d3")
        buf.write(u"\3\2\2\2\u00d3\u00d5\3\2\2\2\u00d4\u00d2\3\2\2\2\u00d5")
        buf.write(u"\u00d8\5\16\b\2\u00d6\u00d8\7\u012e\2\2\u00d7\u00ce\3")
        buf.write(u"\2\2\2\u00d7\u00d6\3\2\2\2\u00d8\13\3\2\2\2\u00d9\u00e1")
        buf.write(u"\5\n\6\2\u00da\u00dd\5<\37\2\u00db\u00dd\5> \2\u00dc")
        buf.write(u"\u00da\3\2\2\2\u00dc\u00db\3\2\2\2\u00dd\u00de\3\2\2")
        buf.write(u"\2\u00de\u00df\5\16\b\2\u00df\u00e1\3\2\2\2\u00e0\u00d9")
        buf.write(u"\3\2\2\2\u00e0\u00dc\3\2\2\2\u00e1\r\3\2\2\2\u00e2\u00e3")
        buf.write(u"\t\6\2\2\u00e3\17\3\2\2\2\u00e4\u00e6\5\f\7\2\u00e5\u00e4")
        buf.write(u"\3\2\2\2\u00e6\u00e9\3\2\2\2\u00e7\u00e5\3\2\2\2\u00e7")
        buf.write(u"\u00e8\3\2\2\2\u00e8\21\3\2\2\2\u00e9\u00e7\3\2\2\2\u00ea")
        buf.write(u"\u00ec\5\f\7\2\u00eb\u00ea\3\2\2\2\u00ec\u00ef\3\2\2")
        buf.write(u"\2\u00ed\u00ee\3\2\2\2\u00ed\u00eb\3\2\2\2\u00ee\23\3")
        buf.write(u"\2\2\2\u00ef\u00ed\3\2\2\2\u00f0\u00f1\7N\2\2\u00f1\u00f2")
        buf.write(u"\7O\2\2\u00f2\u00f4\5|?\2\u00f3\u00f5\5P)\2\u00f4\u00f3")
        buf.write(u"\3\2\2\2\u00f4\u00f5\3\2\2\2\u00f5\u00f6\3\2\2\2\u00f6")
        buf.write(u"\u00f7\7\u012e\2\2\u00f7\25\3\2\2\2\u00f8\u00fc\5\24")
        buf.write(u"\13\2\u00f9\u00fb\5\30\r\2\u00fa\u00f9\3\2\2\2\u00fb")
        buf.write(u"\u00fe\3\2\2\2\u00fc\u00fa\3\2\2\2\u00fc\u00fd\3\2\2")
        buf.write(u"\2\u00fd\u00ff\3\2\2\2\u00fe\u00fc\3\2\2\2\u00ff\u0100")
        buf.write(u"\7P\2\2\u0100\u0104\5\16\b\2\u0101\u0103\5\n\6\2\u0102")
        buf.write(u"\u0101\3\2\2\2\u0103\u0106\3\2\2\2\u0104\u0102\3\2\2")
        buf.write(u"\2\u0104\u0105\3\2\2\2\u0105\27\3\2\2\2\u0106\u0104\3")
        buf.write(u"\2\2\2\u0107\u0108\5> \2\u0108\u0109\7\u012e\2\2\u0109")
        buf.write(u"\u010d\3\2\2\2\u010a\u010d\5\n\6\2\u010b\u010d\5 \21")
        buf.write(u"\2\u010c\u0107\3\2\2\2\u010c\u010a\3\2\2\2\u010c\u010b")
        buf.write(u"\3\2\2\2\u010d\31\3\2\2\2\u010e\u0110\5r:\2\u010f\u0111")
        buf.write(u"\5N(\2\u0110\u010f\3\2\2\2\u0110\u0111\3\2\2\2\u0111")
        buf.write(u"\33\3\2\2\2\u0112\u0117\5\32\16\2\u0113\u0114\7 \2\2")
        buf.write(u"\u0114\u0116\5\32\16\2\u0115\u0113\3\2\2\2\u0116\u0119")
        buf.write(u"\3\2\2\2\u0117\u0115\3\2\2\2\u0117\u0118\3\2\2\2\u0118")
        buf.write(u"\35\3\2\2\2\u0119\u0117\3\2\2\2\u011a\u011c\7\u00eb\2")
        buf.write(u"\2\u011b\u011a\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u011d")
        buf.write(u"\3\2\2\2\u011d\u011e\7L\2\2\u011e\u0124\5p9\2\u011f\u0121")
        buf.write(u"\7\22\2\2\u0120\u0122\5\34\17\2\u0121\u0120\3\2\2\2\u0121")
        buf.write(u"\u0122\3\2\2\2\u0122\u0123\3\2\2\2\u0123\u0125\7\23\2")
        buf.write(u"\2\u0124\u011f\3\2\2\2\u0124\u0125\3\2\2\2\u0125\u0127")
        buf.write(u"\3\2\2\2\u0126\u0128\5N(\2\u0127\u0126\3\2\2\2\u0127")
        buf.write(u"\u0128\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u012a\7\u012e")
        buf.write(u"\2\2\u012a\37\3\2\2\2\u012b\u012c\5\36\20\2\u012c\u0135")
        buf.write(u"\5\20\t\2\u012d\u012e\7M\2\2\u012e\u0132\5\16\b\2\u012f")
        buf.write(u"\u0131\5\n\6\2\u0130\u012f\3\2\2\2\u0131\u0134\3\2\2")
        buf.write(u"\2\u0132\u0130\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0136")
        buf.write(u"\3\2\2\2\u0134\u0132\3\2\2\2\u0135\u012d\3\2\2\2\u0135")
        buf.write(u"\u0136\3\2\2\2\u0136!\3\2\2\2\u0137\u0138\7/\2\2\u0138")
        buf.write(u"\u013a\5\\/\2\u0139\u013b\7\u00b9\2\2\u013a\u0139\3\2")
        buf.write(u"\2\2\u013a\u013b\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u013d")
        buf.write(u"\7\u012e\2\2\u013d#\3\2\2\2\u013e\u013f\5\"\22\2\u013f")
        buf.write(u"\u0143\5\20\t\2\u0140\u0141\7\61\2\2\u0141\u0142\7\u012e")
        buf.write(u"\2\2\u0142\u0144\5\20\t\2\u0143\u0140\3\2\2\2\u0143\u0144")
        buf.write(u"\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0146\7\62\2\2\u0146")
        buf.write(u"%\3\2\2\2\u0147\u0148\7S\2\2\u0148\u0149\5r:\2\u0149")
        buf.write(u"\u014a\7\36\2\2\u014a\u014b\5\\/\2\u014b\u014c\7+\2\2")
        buf.write(u"\u014c\u014f\5\\/\2\u014d\u014e\7\u00b8\2\2\u014e\u0150")
        buf.write(u"\5\\/\2\u014f\u014d\3\2\2\2\u014f\u0150\3\2\2\2\u0150")
        buf.write(u"\u0151\3\2\2\2\u0151\u0152\7\u012e\2\2\u0152\u015b\3")
        buf.write(u"\2\2\2\u0153\u0154\7S\2\2\u0154\u0155\7\u00ed\2\2\u0155")
        buf.write(u"\u0156\5r:\2\u0156\u0157\7-\2\2\u0157\u0158\5\\/\2\u0158")
        buf.write(u"\u0159\7\u012e\2\2\u0159\u015b\3\2\2\2\u015a\u0147\3")
        buf.write(u"\2\2\2\u015a\u0153\3\2\2\2\u015b\'\3\2\2\2\u015c\u0162")
        buf.write(u"\7T\2\2\u015d\u015f\7\u0091\2\2\u015e\u0160\5r:\2\u015f")
        buf.write(u"\u015e\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u0162\3\2\2")
        buf.write(u"\2\u0161\u015c\3\2\2\2\u0161\u015d\3\2\2\2\u0162)\3\2")
        buf.write(u"\2\2\u0163\u0164\5&\24\2\u0164\u0165\5\20\t\2\u0165\u0166")
        buf.write(u"\5(\25\2\u0166+\3\2\2\2\u0167\u0168\7~\2\2\u0168\u0169")
        buf.write(u"\5\\/\2\u0169\u016a\7\u012e\2\2\u016a\u016b\5\22\n\2")
        buf.write(u"\u016b-\3\2\2\2\u016c\u016d\7\u0080\2\2\u016d\u016e\7")
        buf.write(u"\u012e\2\2\u016e\u016f\5\20\t\2\u016f/\3\2\2\2\u0170")
        buf.write(u"\u0171\7,\2\2\u0171\u0172\7~\2\2\u0172\u0176\7\u012e")
        buf.write(u"\2\2\u0173\u0175\5\n\6\2\u0174\u0173\3\2\2\2\u0175\u0178")
        buf.write(u"\3\2\2\2\u0176\u0174\3\2\2\2\u0176\u0177\3\2\2\2\u0177")
        buf.write(u"\u017c\3\2\2\2\u0178\u0176\3\2\2\2\u0179\u017b\5,\27")
        buf.write(u"\2\u017a\u0179\3\2\2\2\u017b\u017e\3\2\2\2\u017c\u017a")
        buf.write(u"\3\2\2\2\u017c\u017d\3\2\2\2\u017d\u0180\3\2\2\2\u017e")
        buf.write(u"\u017c\3\2\2\2\u017f\u0181\5.\30\2\u0180\u017f\3\2\2")
        buf.write(u"\2\u0180\u0181\3\2\2\2\u0181\u0182\3\2\2\2\u0182\u0183")
        buf.write(u"\7\177\2\2\u0183\61\3\2\2\2\u0184\u0186\7,\2\2\u0185")
        buf.write(u"\u0184\3\2\2\2\u0185\u0186\3\2\2\2\u0186\u0187\3\2\2")
        buf.write(u"\2\u0187\u0188\7U\2\2\u0188\u0189\5\\/\2\u0189\u018a")
        buf.write(u"\7\u012e\2\2\u018a\63\3\2\2\2\u018b\u018c\5\62\32\2\u018c")
        buf.write(u"\u018d\5\20\t\2\u018d\u018e\7k\2\2\u018e\65\3\2\2\2\u018f")
        buf.write(u"\u0190\7\66\2\2\u0190\u0192\5r:\2\u0191\u0193\5P)\2\u0192")
        buf.write(u"\u0191\3\2\2\2\u0192\u0193\3\2\2\2\u0193\u0194\3\2\2")
        buf.write(u"\2\u0194\u0195\7\u012e\2\2\u0195\u0196\5\20\t\2\u0196")
        buf.write(u"\u0197\7\u00bf\2\2\u0197\67\3\2\2\2\u0198\u019a\7\u00d8")
        buf.write(u"\2\2\u0199\u019b\5z>\2\u019a\u0199\3\2\2\2\u019a\u019b")
        buf.write(u"\3\2\2\2\u019b\u019e\3\2\2\2\u019c\u019d\7S\2\2\u019d")
        buf.write(u"\u019f\5\\/\2\u019e\u019c\3\2\2\2\u019e\u019f\3\2\2\2")
        buf.write(u"\u019f\u01a0\3\2\2\2\u01a0\u01a1\7\u012e\2\2\u01a1\u01a2")
        buf.write(u"\5\20\t\2\u01a2\u01a3\7\u00d9\2\2\u01a39\3\2\2\2\u01a4")
        buf.write(u"\u01a5\7\u00f1\2\2\u01a5\u01a6\7\u012e\2\2\u01a6\u01ae")
        buf.write(u"\5\20\t\2\u01a7\u01aa\7\u00f2\2\2\u01a8\u01a9\7+\2\2")
        buf.write(u"\u01a9\u01ab\5|?\2\u01aa\u01a8\3\2\2\2\u01aa\u01ab\3")
        buf.write(u"\2\2\2\u01ab\u01ac\3\2\2\2\u01ac\u01ad\7\u012e\2\2\u01ad")
        buf.write(u"\u01af\5\20\t\2\u01ae\u01a7\3\2\2\2\u01ae\u01af\3\2\2")
        buf.write(u"\2\u01af\u01b3\3\2\2\2\u01b0\u01b1\7\u00f3\2\2\u01b1")
        buf.write(u"\u01b2\7\u012e\2\2\u01b2\u01b4\5\20\t\2\u01b3\u01b0\3")
        buf.write(u"\2\2\2\u01b3\u01b4\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5")
        buf.write(u"\u01b6\7\u00f4\2\2\u01b6;\3\2\2\2\u01b7\u01bf\5\64\33")
        buf.write(u"\2\u01b8\u01bf\5$\23\2\u01b9\u01bf\5\60\31\2\u01ba\u01bf")
        buf.write(u"\5*\26\2\u01bb\u01bf\5\66\34\2\u01bc\u01bf\58\35\2\u01bd")
        buf.write(u"\u01bf\5:\36\2\u01be\u01b7\3\2\2\2\u01be\u01b8\3\2\2")
        buf.write(u"\2\u01be\u01b9\3\2\2\2\u01be\u01ba\3\2\2\2\u01be\u01bb")
        buf.write(u"\3\2\2\2\u01be\u01bc\3\2\2\2\u01be\u01bd\3\2\2\2\u01bf")
        buf.write(u"=\3\2\2\2\u01c0\u01c1\7a\2\2\u01c1\u01c2\7b\2\2\u01c2")
        buf.write(u"\u01c3\5|?\2\u01c3\u01d2\5N(\2\u01c4\u01c5\7\66\2\2\u01c5")
        buf.write(u"\u01c6\5r:\2\u01c6\u01c7\7\36\2\2\u01c7\u01cf\5\\/\2")
        buf.write(u"\u01c8\u01c9\7 \2\2\u01c9\u01ca\5r:\2\u01ca\u01cb\7\36")
        buf.write(u"\2\2\u01cb\u01cc\5\\/\2\u01cc\u01ce\3\2\2\2\u01cd\u01c8")
        buf.write(u"\3\2\2\2\u01ce\u01d1\3\2\2\2\u01cf\u01cd\3\2\2\2\u01cf")
        buf.write(u"\u01d0\3\2\2\2\u01d0\u01d3\3\2\2\2\u01d1\u01cf\3\2\2")
        buf.write(u"\2\u01d2\u01c4\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u0609")
        buf.write(u"\3\2\2\2\u01d4\u0609\7\u0110\2\2\u01d5\u01d6\7\b\2\2")
        buf.write(u"\u01d6\u01e4\5T+\2\u01d7\u01da\7K\2\2\u01d8\u01d9\7+")
        buf.write(u"\2\2\u01d9\u01db\5T+\2\u01da\u01d8\3\2\2\2\u01da\u01db")
        buf.write(u"\3\2\2\2\u01db\u01e5\3\2\2\2\u01dc\u01dd\7\u010c\2\2")
        buf.write(u"\u01dd\u01e1\5\\/\2\u01de\u01df\7\u00a9\2\2\u01df\u01e1")
        buf.write(u"\5\\/\2\u01e0\u01dc\3\2\2\2\u01e0\u01de\3\2\2\2\u01e1")
        buf.write(u"\u01e2\3\2\2\2\u01e2\u01e0\3\2\2\2\u01e2\u01e3\3\2\2")
        buf.write(u"\2\u01e3\u01e5\3\2\2\2\u01e4\u01d7\3\2\2\2\u01e4\u01e0")
        buf.write(u"\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5\u0609\3\2\2\2\u01e6")
        buf.write(u"\u0205\7,\2\2\u01e7\u01ea\7\u0083\2\2\u01e8\u01eb\7#")
        buf.write(u"\2\2\u01e9\u01eb\5l\67\2\u01ea\u01e8\3\2\2\2\u01ea\u01e9")
        buf.write(u"\3\2\2\2\u01eb\u01f8\3\2\2\2\u01ec\u01ed\7D\2\2\u01ed")
        buf.write(u"\u01ef\5|?\2\u01ee\u01f0\7\u0124\2\2\u01ef\u01ee\3\2")
        buf.write(u"\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f7\3\2\2\2\u01f1\u01f2")
        buf.write(u"\7\66\2\2\u01f2\u01f7\5T+\2\u01f3\u01f4\7+\2\2\u01f4")
        buf.write(u"\u01f7\5|?\2\u01f5\u01f7\7\u00b7\2\2\u01f6\u01ec\3\2")
        buf.write(u"\2\2\u01f6\u01f1\3\2\2\2\u01f6\u01f3\3\2\2\2\u01f6\u01f5")
        buf.write(u"\3\2\2\2\u01f7\u01fa\3\2\2\2\u01f8\u01f6\3\2\2\2\u01f8")
        buf.write(u"\u01f9\3\2\2\2\u01f9\u0206\3\2\2\2\u01fa\u01f8\3\2\2")
        buf.write(u"\2\u01fb\u0202\5l\67\2\u01fc\u01fd\7-\2\2\u01fd\u0201")
        buf.write(u"\5l\67\2\u01fe\u01ff\7\66\2\2\u01ff\u0201\5T+\2\u0200")
        buf.write(u"\u01fc\3\2\2\2\u0200\u01fe\3\2\2\2\u0201\u0204\3\2\2")
        buf.write(u"\2\u0202\u0200\3\2\2\2\u0202\u0203\3\2\2\2\u0203\u0206")
        buf.write(u"\3\2\2\2\u0204\u0202\3\2\2\2\u0205\u01e7\3\2\2\2\u0205")
        buf.write(u"\u01fb\3\2\2\2\u0206\u0609\3\2\2\2\u0207\u0208\7\67\2")
        buf.write(u"\2\u0208\u0209\5\\/\2\u0209\u020a\7+\2\2\u020a\u020f")
        buf.write(u"\5r:\2\u020b\u020c\7 \2\2\u020c\u020e\5r:\2\u020d\u020b")
        buf.write(u"\3\2\2\2\u020e\u0211\3\2\2\2\u020f\u020d\3\2\2\2\u020f")
        buf.write(u"\u0210\3\2\2\2\u0210\u0217\3\2\2\2\u0211\u020f\3\2\2")
        buf.write(u"\2\u0212\u0213\5r:\2\u0213\u0214\7\36\2\2\u0214\u0215")
        buf.write(u"\5\\/\2\u0215\u0217\3\2\2\2\u0216\u0207\3\2\2\2\u0216")
        buf.write(u"\u0212\3\2\2\2\u0217\u0609\3\2\2\2\u0218\u021a\t\7\2")
        buf.write(u"\2\u0219\u021b\t\b\2\2\u021a\u0219\3\2\2\2\u021a\u021b")
        buf.write(u"\3\2\2\2\u021b\u0220\3\2\2\2\u021c\u0220\7\u00d2\2\2")
        buf.write(u"\u021d\u0220\7l\2\2\u021e\u0220\7q\2\2\u021f\u0218\3")
        buf.write(u"\2\2\2\u021f\u021c\3\2\2\2\u021f\u021d\3\2\2\2\u021f")
        buf.write(u"\u021e\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u0226\5L\'\2")
        buf.write(u"\u0222\u0223\7 \2\2\u0223\u0225\5L\'\2\u0224\u0222\3")
        buf.write(u"\2\2\2\u0225\u0228\3\2\2\2\u0226\u0224\3\2\2\2\u0226")
        buf.write(u"\u0227\3\2\2\2\u0227\u022d\3\2\2\2\u0228\u0226\3\2\2")
        buf.write(u"\2\u0229\u022a\78\2\2\u022a\u022b\7L\2\2\u022b\u022d")
        buf.write(u"\5l\67\2\u022c\u021f\3\2\2\2\u022c\u0229\3\2\2\2\u022d")
        buf.write(u"\u0609\3\2\2\2\u022e\u0230\7#\2\2\u022f\u0231\7#\2\2")
        buf.write(u"\u0230\u022f\3\2\2\2\u0230\u0231\3\2\2\2\u0231\u0234")
        buf.write(u"\3\2\2\2\u0232\u0234\7\u0106\2\2\u0233\u022e\3\2\2\2")
        buf.write(u"\u0233\u0232\3\2\2\2\u0234\u0236\3\2\2\2\u0235\u0237")
        buf.write(u"\5T+\2\u0236\u0235\3\2\2\2\u0236\u0237\3\2\2\2\u0237")
        buf.write(u"\u0609\3\2\2\2\u0238\u024b\7f\2\2\u0239\u023a\7+\2\2")
        buf.write(u"\u023a\u024a\5\\/\2\u023b\u0241\7g\2\2\u023c\u023d\7")
        buf.write(u"\u009d\2\2\u023d\u023e\5\\/\2\u023e\u023f\7 \2\2\u023f")
        buf.write(u"\u0240\5\\/\2\u0240\u0242\3\2\2\2\u0241\u023c\3\2\2\2")
        buf.write(u"\u0241\u0242\3\2\2\2\u0242\u024a\3\2\2\2\u0243\u024a")
        buf.write(u"\7h\2\2\u0244\u024a\7K\2\2\u0245\u024a\7i\2\2\u0246\u0247")
        buf.write(u"\7\u00be\2\2\u0247\u024a\5\\/\2\u0248\u024a\5\\/\2\u0249")
        buf.write(u"\u0239\3\2\2\2\u0249\u023b\3\2\2\2\u0249\u0243\3\2\2")
        buf.write(u"\2\u0249\u0244\3\2\2\2\u0249\u0245\3\2\2\2\u0249\u0246")
        buf.write(u"\3\2\2\2\u0249\u0248\3\2\2\2\u024a\u024d\3\2\2\2\u024b")
        buf.write(u"\u0249\3\2\2\2\u024b\u024c\3\2\2\2\u024c\u0609\3\2\2")
        buf.write(u"\2\u024d\u024b\3\2\2\2\u024e\u0252\7m\2\2\u024f\u0250")
        buf.write(u"\7:\2\2\u0250\u0252\7<\2\2\u0251\u024e\3\2\2\2\u0251")
        buf.write(u"\u024f\3\2\2\2\u0252\u0255\3\2\2\2\u0253\u0256\5l\67")
        buf.write(u"\2\u0254\u0256\7#\2\2\u0255\u0253\3\2\2\2\u0255\u0254")
        buf.write(u"\3\2\2\2\u0256\u0258\3\2\2\2\u0257\u0259\7?\2\2\u0258")
        buf.write(u"\u0257\3\2\2\2\u0258\u0259\3\2\2\2\u0259\u0609\3\2\2")
        buf.write(u"\2\u025a\u025e\7\u00c6\2\2\u025b\u025c\7\u008b\2\2\u025c")
        buf.write(u"\u025e\7<\2\2\u025d\u025a\3\2\2\2\u025d\u025b\3\2\2\2")
        buf.write(u"\u025e\u025f\3\2\2\2\u025f\u0260\5l\67\2\u0260\u0261")
        buf.write(u"\7+\2\2\u0261\u0262\5l\67\2\u0262\u0609\3\2\2\2\u0263")
        buf.write(u"\u0264\t\t\2\2\u0264\u0609\5l\67\2\u0265\u0267\7p\2\2")
        buf.write(u"\u0266\u0268\5\\/\2\u0267\u0266\3\2\2\2\u0267\u0268\3")
        buf.write(u"\2\2\2\u0268\u0609\3\2\2\2\u0269\u028c\7\63\2\2\u026a")
        buf.write(u"\u0271\7\u0098\2\2\u026b\u026c\7\u009a\2\2\u026c\u026f")
        buf.write(u"\5|?\2\u026d\u026e\7\n\2\2\u026e\u0270\5|?\2\u026f\u026d")
        buf.write(u"\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u0272\3\2\2\2\u0271")
        buf.write(u"\u026b\3\2\2\2\u0271\u0272\3\2\2\2\u0272\u027b\3\2\2")
        buf.write(u"\2\u0273\u0274\7\u00b2\2\2\u0274\u0275\7Y\2\2\u0275\u0276")
        buf.write(u"\7\4\2\2\u0276\u0278\7\u00a2\2\2\u0277\u0273\3\2\2\2")
        buf.write(u"\u0277\u0278\3\2\2\2\u0278\u0279\3\2\2\2\u0279\u027b")
        buf.write(u"\5|?\2\u027a\u026a\3\2\2\2\u027a\u0277\3\2\2\2\u027b")
        buf.write(u"\u027d\3\2\2\2\u027c\u027e\5> \2\u027d\u027c\3\2\2\2")
        buf.write(u"\u027d\u027e\3\2\2\2\u027e\u028d\3\2\2\2\u027f\u0280")
        buf.write(u"\7\u00a1\2\2\u0280\u0284\5|?\2\u0281\u0282\7Y\2\2\u0282")
        buf.write(u"\u0284\7\4\2\2\u0283\u027f\3\2\2\2\u0283\u0281\3\2\2")
        buf.write(u"\2\u0284\u0285\3\2\2\2\u0285\u0286\7\u00a2\2\2\u0286")
        buf.write(u"\u028a\5|?\2\u0287\u0288\7\u00ac\2\2\u0288\u0289\t\n")
        buf.write(u"\2\2\u0289\u028b\5|?\2\u028a\u0287\3\2\2\2\u028a\u028b")
        buf.write(u"\3\2\2\2\u028b\u028d\3\2\2\2\u028c\u027a\3\2\2\2\u028c")
        buf.write(u"\u0283\3\2\2\2\u028d\u0609\3\2\2\2\u028e\u0299\7>\2\2")
        buf.write(u"\u028f\u029a\7t\2\2\u0290\u0292\t\13\2\2\u0291\u0290")
        buf.write(u"\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0293\3\2\2\2\u0293")
        buf.write(u"\u029a\5T+\2\u0294\u0295\7\u00ad\2\2\u0295\u0297\5T+")
        buf.write(u"\2\u0296\u0298\7\u00ae\2\2\u0297\u0296\3\2\2\2\u0297")
        buf.write(u"\u0298\3\2\2\2\u0298\u029a\3\2\2\2\u0299\u028f\3\2\2")
        buf.write(u"\2\u0299\u0291\3\2\2\2\u0299\u0294\3\2\2\2\u029a\u0609")
        buf.write(u"\3\2\2\2\u029b\u029c\7=\2\2\u029c\u0609\5J&\2\u029d\u02a4")
        buf.write(u"\7\u00bc\2\2\u029e\u02a0\7\u0098\2\2\u029f\u02a1\7K\2")
        buf.write(u"\2\u02a0\u029f\3\2\2\2\u02a0\u02a1\3\2\2\2\u02a1\u02a5")
        buf.write(u"\3\2\2\2\u02a2\u02a3\t\n\2\2\u02a3\u02a5\5|?\2\u02a4")
        buf.write(u"\u029e\3\2\2\2\u02a4\u02a2\3\2\2\2\u02a5\u0609\3\2\2")
        buf.write(u"\2\u02a6\u02b6\7\u00bd\2\2\u02a7\u02a9\7\u0098\2\2\u02a8")
        buf.write(u"\u02aa\7t\2\2\u02a9\u02a8\3\2\2\2\u02a9\u02aa\3\2\2\2")
        buf.write(u"\u02aa\u02b7\3\2\2\2\u02ab\u02b1\7\u009c\2\2\u02ac\u02b0")
        buf.write(u"\5|?\2\u02ad\u02ae\7+\2\2\u02ae\u02b0\7\u0129\2\2\u02af")
        buf.write(u"\u02ac\3\2\2\2\u02af\u02ad\3\2\2\2\u02b0\u02b3\3\2\2")
        buf.write(u"\2\u02b1\u02af\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b7")
        buf.write(u"\3\2\2\2\u02b3\u02b1\3\2\2\2\u02b4\u02b5\7\u00ad\2\2")
        buf.write(u"\u02b5\u02b7\5|?\2\u02b6\u02a7\3\2\2\2\u02b6\u02ab\3")
        buf.write(u"\2\2\2\u02b6\u02b4\3\2\2\2\u02b7\u0609\3\2\2\2\u02b8")
        buf.write(u"\u02b9\7\u0099\2\2\u02b9\u02bb\5\\/\2\u02ba\u02bc\7\u009b")
        buf.write(u"\2\2\u02bb\u02ba\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc\u02be")
        buf.write(u"\3\2\2\2\u02bd\u02bf\7K\2\2\u02be\u02bd\3\2\2\2\u02be")
        buf.write(u"\u02bf\3\2\2\2\u02bf\u0609\3\2\2\2\u02c0\u02c1\7N\2\2")
        buf.write(u"\u02c1\u02c2\7\u009c\2\2\u02c2\u02c3\5l\67\2\u02c3\u02c7")
        buf.write(u"\7Y\2\2\u02c4\u02c5\7\u009d\2\2\u02c5\u02c6\7\u009e\2")
        buf.write(u"\2\u02c6\u02c8\7\4\2\2\u02c7\u02c4\3\2\2\2\u02c7\u02c8")
        buf.write(u"\3\2\2\2\u02c8\u02d1\3\2\2\2\u02c9\u02cf\7-\2\2\u02ca")
        buf.write(u"\u02d0\7\u009f\2\2\u02cb\u02cd\7g\2\2\u02cc\u02cb\3\2")
        buf.write(u"\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce\u02d0")
        buf.write(u"\5l\67\2\u02cf\u02ca\3\2\2\2\u02cf\u02cc\3\2\2\2\u02d0")
        buf.write(u"\u02d2\3\2\2\2\u02d1\u02c9\3\2\2\2\u02d1\u02d2\3\2\2")
        buf.write(u"\2\u02d2\u02d4\3\2\2\2\u02d3\u02d5\7\u00a0\2\2\u02d4")
        buf.write(u"\u02d3\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u0609\3\2\2")
        buf.write(u"\2\u02d6\u02d7\7N\2\2\u02d7\u02d8\7\u00a1\2\2\u02d8\u02d9")
        buf.write(u"\5l\67\2\u02d9\u02da\7\u00a2\2\2\u02da\u02db\5l\67\2")
        buf.write(u"\u02db\u02dc\7\u0086\2\2\u02dc\u02e1\5\\/\2\u02dd\u02de")
        buf.write(u"\7\u009d\2\2\u02de\u02df\7\4\2\2\u02df\u02e0\7 \2\2\u02e0")
        buf.write(u"\u02e2\7\4\2\2\u02e1\u02dd\3\2\2\2\u02e1\u02e2\3\2\2")
        buf.write(u"\2\u02e2\u02e7\3\2\2\2\u02e3\u02e4\7\u00a5\2\2\u02e4")
        buf.write(u"\u02e8\5|?\2\u02e5\u02e6\7\u00a6\2\2\u02e6\u02e8\5|?")
        buf.write(u"\2\u02e7\u02e3\3\2\2\2\u02e7\u02e5\3\2\2\2\u02e7\u02e8")
        buf.write(u"\3\2\2\2\u02e8\u02ef\3\2\2\2\u02e9\u02ea\7\u00a7\2\2")
        buf.write(u"\u02ea\u02ed\5|?\2\u02eb\u02ec\7 \2\2\u02ec\u02ee\5|")
        buf.write(u"?\2\u02ed\u02eb\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee\u02f0")
        buf.write(u"\3\2\2\2\u02ef\u02e9\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0")
        buf.write(u"\u02ff\3\2\2\2\u02f1\u02f2\7\u00a8\2\2\u02f2\u02fd\5")
        buf.write(u"|?\2\u02f3\u02f4\7 \2\2\u02f4\u02fb\7\4\2\2\u02f5\u02f6")
        buf.write(u"\7 \2\2\u02f6\u02f9\5\\/\2\u02f7\u02f8\7 \2\2\u02f8\u02fa")
        buf.write(u"\5|?\2\u02f9\u02f7\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa")
        buf.write(u"\u02fc\3\2\2\2\u02fb\u02f5\3\2\2\2\u02fb\u02fc\3\2\2")
        buf.write(u"\2\u02fc\u02fe\3\2\2\2\u02fd\u02f3\3\2\2\2\u02fd\u02fe")
        buf.write(u"\3\2\2\2\u02fe\u0300\3\2\2\2\u02ff\u02f1\3\2\2\2\u02ff")
        buf.write(u"\u0300\3\2\2\2\u0300\u0303\3\2\2\2\u0301\u0302\7\u00a9")
        buf.write(u"\2\2\u0302\u0304\5|?\2\u0303\u0301\3\2\2\2\u0303\u0304")
        buf.write(u"\3\2\2\2\u0304\u0307\3\2\2\2\u0305\u0306\7\u00ab\2\2")
        buf.write(u"\u0306\u0308\5\\/\2\u0307\u0305\3\2\2\2\u0307\u0308\3")
        buf.write(u"\2\2\2\u0308\u0313\3\2\2\2\u0309\u030a\7\u0098\2\2\u030a")
        buf.write(u"\u030d\5|?\2\u030b\u030c\7\n\2\2\u030c\u030e\5|?\2\u030d")
        buf.write(u"\u030b\3\2\2\2\u030d\u030e\3\2\2\2\u030e\u0311\3\2\2")
        buf.write(u"\2\u030f\u0310\7 \2\2\u0310\u0312\5\\/\2\u0311\u030f")
        buf.write(u"\3\2\2\2\u0311\u0312\3\2\2\2\u0312\u0314\3\2\2\2\u0313")
        buf.write(u"\u0309\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0317\3\2\2")
        buf.write(u"\2\u0315\u0316\7\u00aa\2\2\u0316\u0318\5|?\2\u0317\u0315")
        buf.write(u"\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u031e\3\2\2\2\u0319")
        buf.write(u"\u031c\7\u0093\2\2\u031a\u031b\7S\2\2\u031b\u031d\5\\")
        buf.write(u"/\2\u031c\u031a\3\2\2\2\u031c\u031d\3\2\2\2\u031d\u031f")
        buf.write(u"\3\2\2\2\u031e\u0319\3\2\2\2\u031e\u031f\3\2\2\2\u031f")
        buf.write(u"\u0323\3\2\2\2\u0320\u0321\7\u00a3\2\2\u0321\u0322\7")
        buf.write(u"\u00a4\2\2\u0322\u0324\7\4\2\2\u0323\u0320\3\2\2\2\u0323")
        buf.write(u"\u0324\3\2\2\2\u0324\u0609\3\2\2\2\u0325\u0326\7N\2\2")
        buf.write(u"\u0326\u0327\7\u00ad\2\2\u0327\u0329\5l\67\2\u0328\u032a")
        buf.write(u"\7\u00af\2\2\u0329\u0328\3\2\2\2\u0329\u032a\3\2\2\2")
        buf.write(u"\u032a\u032c\3\2\2\2\u032b\u032d\7\u00b0\2\2\u032c\u032b")
        buf.write(u"\3\2\2\2\u032c\u032d\3\2\2\2\u032d\u032f\3\2\2\2\u032e")
        buf.write(u"\u0330\7\u00b1\2\2\u032f\u032e\3\2\2\2\u032f\u0330\3")
        buf.write(u"\2\2\2\u0330\u0334\3\2\2\2\u0331\u0332\7\u00a3\2\2\u0332")
        buf.write(u"\u0333\7\u00a4\2\2\u0333\u0335\7\4\2\2\u0334\u0331\3")
        buf.write(u"\2\2\2\u0334\u0335\3\2\2\2\u0335\u0609\3\2\2\2\u0336")
        buf.write(u"\u0337\7N\2\2\u0337\u0338\7Y\2\2\u0338\u0339\7\4\2\2")
        buf.write(u"\u0339\u033a\7\u00a2\2\2\u033a\u033b\5|?\2\u033b\u033c")
        buf.write(u"\7\u0086\2\2\u033c\u033f\5\\/\2\u033d\u033e\7\u00ab\2")
        buf.write(u"\2\u033e\u0340\5\\/\2\u033f\u033d\3\2\2\2\u033f\u0340")
        buf.write(u"\3\2\2\2\u0340\u0609\3\2\2\2\u0341\u0342\7\u00ac\2\2")
        buf.write(u"\u0342\u0345\7g\2\2\u0343\u0346\5\34\17\2\u0344\u0346")
        buf.write(u"\7t\2\2\u0345\u0343\3\2\2\2\u0345\u0344\3\2\2\2\u0346")
        buf.write(u"\u034f\3\2\2\2\u0347\u034d\7-\2\2\u0348\u034a\7g\2\2")
        buf.write(u"\u0349\u0348\3\2\2\2\u0349\u034a\3\2\2\2\u034a\u034b")
        buf.write(u"\3\2\2\2\u034b\u034e\5|?\2\u034c\u034e\7\u009f\2\2\u034d")
        buf.write(u"\u0349\3\2\2\2\u034d\u034c\3\2\2\2\u034e\u0350\3\2\2")
        buf.write(u"\2\u034f\u0347\3\2\2\2\u034f\u0350\3\2\2\2\u0350\u0352")
        buf.write(u"\3\2\2\2\u0351\u0353\t\f\2\2\u0352\u0351\3\2\2\2\u0352")
        buf.write(u"\u0353\3\2\2\2\u0353\u0355\3\2\2\2\u0354\u0356\7\u00b7")
        buf.write(u"\2\2\u0355\u0354\3\2\2\2\u0355\u0356\3\2\2\2\u0356\u0609")
        buf.write(u"\3\2\2\2\u0357\u0358\7\u00ac\2\2\u0358\u0359\7\u009c")
        buf.write(u"\2\2\u0359\u035b\5|?\2\u035a\u035c\7h\2\2\u035b\u035a")
        buf.write(u"\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035f\3\2\2\2\u035d")
        buf.write(u"\u035e\7\u00a1\2\2\u035e\u0360\5|?\2\u035f\u035d\3\2")
        buf.write(u"\2\2\u035f\u0360\3\2\2\2\u0360\u0609\3\2\2\2\u0361\u0362")
        buf.write(u"\7\u00b3\2\2\u0362\u0365\t\n\2\2\u0363\u0366\7t\2\2\u0364")
        buf.write(u"\u0366\5\34\17\2\u0365\u0363\3\2\2\2\u0365\u0364\3\2")
        buf.write(u"\2\2\u0366\u0609\3\2\2\2\u0367\u0368\7\u0113\2\2\u0368")
        buf.write(u"\u036b\7g\2\2\u0369\u036c\7\u009f\2\2\u036a\u036c\5|")
        buf.write(u"?\2\u036b\u0369\3\2\2\2\u036b\u036a\3\2\2\2\u036c\u038b")
        buf.write(u"\3\2\2\2\u036d\u036e\7\u0081\2\2\u036e\u036f\5T+\2\u036f")
        buf.write(u"\u0370\7+\2\2\u0370\u0371\5T+\2\u0371\u038a\3\2\2\2\u0372")
        buf.write(u"\u0373\7\u009d\2\2\u0373\u0374\5T+\2\u0374\u0375\7\u011e")
        buf.write(u"\2\2\u0375\u0376\5T+\2\u0376\u038a\3\2\2\2\u0377\u0378")
        buf.write(u"\7\u00a8\2\2\u0378\u038a\5T+\2\u0379\u037a\7\u00a9\2")
        buf.write(u"\2\u037a\u038a\5\\/\2\u037b\u037c\7\u012a\2\2\u037c\u038a")
        buf.write(u"\5\\/\2\u037d\u038a\5|?\2\u037e\u037f\7\u012b\2\2\u037f")
        buf.write(u"\u0380\7<\2\2\u0380\u038a\5l\67\2\u0381\u0382\7\u012c")
        buf.write(u"\2\2\u0382\u0383\7<\2\2\u0383\u038a\5l\67\2\u0384\u0385")
        buf.write(u"\7\u00a3\2\2\u0385\u0386\7\u00a4\2\2\u0386\u038a\5\\")
        buf.write(u"/\2\u0387\u0388\7\u00a3\2\2\u0388\u038a\5T+\2\u0389\u036d")
        buf.write(u"\3\2\2\2\u0389\u0372\3\2\2\2\u0389\u0377\3\2\2\2\u0389")
        buf.write(u"\u0379\3\2\2\2\u0389\u037b\3\2\2\2\u0389\u037d\3\2\2")
        buf.write(u"\2\u0389\u037e\3\2\2\2\u0389\u0381\3\2\2\2\u0389\u0384")
        buf.write(u"\3\2\2\2\u0389\u0387\3\2\2\2\u038a\u038d\3\2\2\2\u038b")
        buf.write(u"\u0389\3\2\2\2\u038b\u038c\3\2\2\2\u038c\u0609\3\2\2")
        buf.write(u"\2\u038d\u038b\3\2\2\2\u038e\u038f\7\u0113\2\2\u038f")
        buf.write(u"\u0392\t\r\2\2\u0390\u0393\7#\2\2\u0391\u0393\5l\67\2")
        buf.write(u"\u0392\u0390\3\2\2\2\u0392\u0391\3\2\2\2\u0393\u039f")
        buf.write(u"\3\2\2\2\u0394\u0398\7-\2\2\u0395\u0396\7g\2\2\u0396")
        buf.write(u"\u0399\5|?\2\u0397\u0399\7\u009f\2\2\u0398\u0395\3\2")
        buf.write(u"\2\2\u0398\u0397\3\2\2\2\u0399\u039e\3\2\2\2\u039a\u039b")
        buf.write(u"\7.\2\2\u039b\u039e\5\\/\2\u039c\u039e\5|?\2\u039d\u0394")
        buf.write(u"\3\2\2\2\u039d\u039a\3\2\2\2\u039d\u039c\3\2\2\2\u039e")
        buf.write(u"\u03a1\3\2\2\2\u039f\u039d\3\2\2\2\u039f\u03a0\3\2\2")
        buf.write(u"\2\u03a0\u0609\3\2\2\2\u03a1\u039f\3\2\2\2\u03a2\u03a4")
        buf.write(u"\7\65\2\2\u03a3\u03a5\5\\/\2\u03a4\u03a3\3\2\2\2\u03a4")
        buf.write(u"\u03a5\3\2\2\2\u03a5\u0609\3\2\2\2\u03a6\u03a8\7\u00ec")
        buf.write(u"\2\2\u03a7\u03a9\5\\/\2\u03a8\u03a7\3\2\2\2\u03a8\u03a9")
        buf.write(u"\3\2\2\2\u03a9\u0609\3\2\2\2\u03aa\u03ab\7@\2\2\u03ab")
        buf.write(u"\u03ac\t\16\2\2\u03ac\u03be\5l\67\2\u03ad\u03af\7E\2")
        buf.write(u"\2\u03ae\u03ad\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03b0")
        buf.write(u"\3\2\2\2\u03b0\u03b1\7\22\2\2\u03b1\u03b6\5H%\2\u03b2")
        buf.write(u"\u03b3\7 \2\2\u03b3\u03b5\5H%\2\u03b4\u03b2\3\2\2\2\u03b5")
        buf.write(u"\u03b8\3\2\2\2\u03b6\u03b4\3\2\2\2\u03b6\u03b7\3\2\2")
        buf.write(u"\2\u03b7\u03b9\3\2\2\2\u03b8\u03b6\3\2\2\2\u03b9\u03ba")
        buf.write(u"\7\23\2\2\u03ba\u03bf\3\2\2\2\u03bb\u03bc\7\u0081\2\2")
        buf.write(u"\u03bc\u03bd\79\2\2\u03bd\u03bf\5\\/\2\u03be\u03ae\3")
        buf.write(u"\2\2\2\u03be\u03bb\3\2\2\2\u03bf\u0609\3\2\2\2\u03c0")
        buf.write(u"\u03c1\7\u0100\2\2\u03c1\u03c2\7A\2\2\u03c2\u03d2\5l")
        buf.write(u"\67\2\u03c3\u03c4\7a\2\2\u03c4\u03c5\7\u0101\2\2\u03c5")
        buf.write(u"\u03d1\5H%\2\u03c6\u03c7\7\u0102\2\2\u03c7\u03c8\7\u0101")
        buf.write(u"\2\2\u03c8\u03d1\5|?\2\u03c9\u03ca\7\u0100\2\2\u03ca")
        buf.write(u"\u03cb\7\u0101\2\2\u03cb\u03ce\5|?\2\u03cc\u03cd\7\u00d3")
        buf.write(u"\2\2\u03cd\u03cf\7\u00da\2\2\u03ce\u03cc\3\2\2\2\u03ce")
        buf.write(u"\u03cf\3\2\2\2\u03cf\u03d1\3\2\2\2\u03d0\u03c3\3\2\2")
        buf.write(u"\2\u03d0\u03c6\3\2\2\2\u03d0\u03c9\3\2\2\2\u03d1\u03d4")
        buf.write(u"\3\2\2\2\u03d2\u03d0\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3")
        buf.write(u"\u0609\3\2\2\2\u03d4\u03d2\3\2\2\2\u03d5\u03f0\7F\2\2")
        buf.write(u"\u03d6\u03f1\5l\67\2\u03d7\u03d9\7\u008f\2\2\u03d8\u03d7")
        buf.write(u"\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03dc\3\2\2\2\u03da")
        buf.write(u"\u03dd\5V,\2\u03db\u03dd\7\t\2\2\u03dc\u03da\3\2\2\2")
        buf.write(u"\u03dc\u03db\3\2\2\2\u03dd\u03e0\3\2\2\2\u03de\u03df")
        buf.write(u"\7\u0081\2\2\u03df\u03e1\5l\67\2\u03e0\u03de\3\2\2\2")
        buf.write(u"\u03e0\u03e1\3\2\2\2\u03e1\u03e4\3\2\2\2\u03e2\u03e3")
        buf.write(u"\7\u00c4\2\2\u03e3\u03e5\5\\/\2\u03e4\u03e2\3\2\2\2\u03e4")
        buf.write(u"\u03e5\3\2\2\2\u03e5\u03e9\3\2\2\2\u03e6\u03e7\7\u0090")
        buf.write(u"\2\2\u03e7\u03e8\t\17\2\2\u03e8\u03ea\5l\67\2\u03e9\u03e6")
        buf.write(u"\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03ee\3\2\2\2\u03eb")
        buf.write(u"\u03ec\7\u00c2\2\2\u03ec\u03ed\7\u00c9\2\2\u03ed\u03ef")
        buf.write(u"\5|?\2\u03ee\u03eb\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef")
        buf.write(u"\u03f1\3\2\2\2\u03f0\u03d6\3\2\2\2\u03f0\u03d8\3\2\2")
        buf.write(u"\2\u03f1\u0609\3\2\2\2\u03f2\u0402\7G\2\2\u03f3\u03f4")
        buf.write(u"\7-\2\2\u03f4\u0401\5l\67\2\u03f5\u03f7\7\u00c2\2\2\u03f6")
        buf.write(u"\u03f8\7\u00cc\2\2\u03f7\u03f6\3\2\2\2\u03f7\u03f8\3")
        buf.write(u"\2\2\2\u03f8\u03f9\3\2\2\2\u03f9\u0401\5\\/\2\u03fa\u03fb")
        buf.write(u"\7\u00c1\2\2\u03fb\u0401\5l\67\2\u03fc\u0401\7e\2\2\u03fd")
        buf.write(u"\u0401\7\u0094\2\2\u03fe\u0401\7\u0111\2\2\u03ff\u0401")
        buf.write(u"\5l\67\2\u0400\u03f3\3\2\2\2\u0400\u03f5\3\2\2\2\u0400")
        buf.write(u"\u03fa\3\2\2\2\u0400\u03fc\3\2\2\2\u0400\u03fd\3\2\2")
        buf.write(u"\2\u0400\u03fe\3\2\2\2\u0400\u03ff\3\2\2\2\u0401\u0404")
        buf.write(u"\3\2\2\2\u0402\u0400\3\2\2\2\u0402\u0403\3\2\2\2\u0403")
        buf.write(u"\u0609\3\2\2\2\u0404\u0402\3\2\2\2\u0405\u0409\7Q\2\2")
        buf.write(u"\u0406\u0408\5@!\2\u0407\u0406\3\2\2\2\u0408\u040b\3")
        buf.write(u"\2\2\2\u0409\u0407\3\2\2\2\u0409\u040a\3\2\2\2\u040a")
        buf.write(u"\u0609\3\2\2\2\u040b\u0409\3\2\2\2\u040c\u0609\7R\2\2")
        buf.write(u"\u040d\u0415\7c\2\2\u040e\u0414\5@!\2\u040f\u0410\5l")
        buf.write(u"\67\2\u0410\u0411\7\66\2\2\u0411\u0412\5\\/\2\u0412\u0414")
        buf.write(u"\3\2\2\2\u0413\u040e\3\2\2\2\u0413\u040f\3\2\2\2\u0414")
        buf.write(u"\u0417\3\2\2\2\u0415\u0413\3\2\2\2\u0415\u0416\3\2\2")
        buf.write(u"\2\u0416\u0609\3\2\2\2\u0417\u0415\3\2\2\2\u0418\u0419")
        buf.write(u"\7\u00cb\2\2\u0419\u041a\7\63\2\2\u041a\u041b\5l\67\2")
        buf.write(u"\u041b\u041c\t\20\2\2\u041c\u041e\5l\67\2\u041d\u041f")
        buf.write(u"\7\u00cd\2\2\u041e\u041d\3\2\2\2\u041e\u041f\3\2\2\2")
        buf.write(u"\u041f\u0421\3\2\2\2\u0420\u0422\t\21\2\2\u0421\u0420")
        buf.write(u"\3\2\2\2\u0421\u0422\3\2\2\2\u0422\u0424\3\2\2\2\u0423")
        buf.write(u"\u0425\t\22\2\2\u0424\u0423\3\2\2\2\u0424\u0425\3\2\2")
        buf.write(u"\2\u0425\u0427\3\2\2\2\u0426\u0428\7\u00d1\2\2\u0427")
        buf.write(u"\u0426\3\2\2\2\u0427\u0428\3\2\2\2\u0428\u0609\3\2\2")
        buf.write(u"\2\u0429\u042f\7u\2\2\u042a\u042b\7+\2\2\u042b\u042e")
        buf.write(u"\5\\/\2\u042c\u042e\5@!\2\u042d\u042a\3\2\2\2\u042d\u042c")
        buf.write(u"\3\2\2\2\u042e\u0431\3\2\2\2\u042f\u042d\3\2\2\2\u042f")
        buf.write(u"\u0430\3\2\2\2\u0430\u0609\3\2\2\2\u0431\u042f\3\2\2")
        buf.write(u"\2\u0432\u0439\7\u008e\2\2\u0433\u0434\7+\2\2\u0434\u0438")
        buf.write(u"\5\\/\2\u0435\u0438\5@!\2\u0436\u0438\5\\/\2\u0437\u0433")
        buf.write(u"\3\2\2\2\u0437\u0435\3\2\2\2\u0437\u0436\3\2\2\2\u0438")
        buf.write(u"\u043b\3\2\2\2\u0439\u0437\3\2\2\2\u0439\u043a\3\2\2")
        buf.write(u"\2\u043a\u0609\3\2\2\2\u043b\u0439\3\2\2\2\u043c\u043d")
        buf.write(u"\7\u0117\2\2\u043d\u043e\7+\2\2\u043e\u043f\5\\/\2\u043f")
        buf.write(u"\u0440\7\63\2\2\u0440\u0445\5\\/\2\u0441\u0442\7\f\2")
        buf.write(u"\2\u0442\u0444\5|?\2\u0443\u0441\3\2\2\2\u0444\u0447")
        buf.write(u"\3\2\2\2\u0445\u0443\3\2\2\2\u0445\u0446\3\2\2\2\u0446")
        buf.write(u"\u0453\3\2\2\2\u0447\u0445\3\2\2\2\u0448\u0449\7 \2\2")
        buf.write(u"\u0449\u044e\5\\/\2\u044a\u044b\7\f\2\2\u044b\u044d\5")
        buf.write(u"|?\2\u044c\u044a\3\2\2\2\u044d\u0450\3\2\2\2\u044e\u044c")
        buf.write(u"\3\2\2\2\u044e\u044f\3\2\2\2\u044f\u0452\3\2\2\2\u0450")
        buf.write(u"\u044e\3\2\2\2\u0451\u0448\3\2\2\2\u0452\u0455\3\2\2")
        buf.write(u"\2\u0453\u0451\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0460")
        buf.write(u"\3\2\2\2\u0455\u0453\3\2\2\2\u0456\u045f\7\u00ce\2\2")
        buf.write(u"\u0457\u045f\7\u00cf\2\2\u0458\u045a\7\u00ff\2\2\u0459")
        buf.write(u"\u045b\t\23\2\2\u045a\u0459\3\2\2\2\u045a\u045b\3\2\2")
        buf.write(u"\2\u045b\u045c\3\2\2\2\u045c\u045f\5T+\2\u045d\u045f")
        buf.write(u"\5@!\2\u045e\u0456\3\2\2\2\u045e\u0457\3\2\2\2\u045e")
        buf.write(u"\u0458\3\2\2\2\u045e\u045d\3\2\2\2\u045f\u0462\3\2\2")
        buf.write(u"\2\u0460\u045e\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0609")
        buf.write(u"\3\2\2\2\u0462\u0460\3\2\2\2\u0463\u0469\t\24\2\2\u0464")
        buf.write(u"\u0468\5@!\2\u0465\u0466\7-\2\2\u0466\u0468\5l\67\2\u0467")
        buf.write(u"\u0464\3\2\2\2\u0467\u0465\3\2\2\2\u0468\u046b\3\2\2")
        buf.write(u"\2\u0469\u0467\3\2\2\2\u0469\u046a\3\2\2\2\u046a\u0609")
        buf.write(u"\3\2\2\2\u046b\u0469\3\2\2\2\u046c\u046d\7{\2\2\u046d")
        buf.write(u"\u0475\7\u0081\2\2\u046e\u046f\79\2\2\u046f\u0476\5\\")
        buf.write(u"/\2\u0470\u0471\5l\67\2\u0471\u0472\7S\2\2\u0472\u0473")
        buf.write(u"\5\\/\2\u0473\u0476\3\2\2\2\u0474\u0476\5l\67\2\u0475")
        buf.write(u"\u046e\3\2\2\2\u0475\u0470\3\2\2\2\u0475\u0474\3\2\2")
        buf.write(u"\2\u0476\u0479\3\2\2\2\u0477\u0478\7\u00f9\2\2\u0478")
        buf.write(u"\u047a\5l\67\2\u0479\u0477\3\2\2\2\u0479\u047a\3\2\2")
        buf.write(u"\2\u047a\u0609\3\2\2\2\u047b\u047d\7{\2\2\u047c\u047e")
        buf.write(u"\7|\2\2\u047d\u047c\3\2\2\2\u047d\u047e\3\2\2\2\u047e")
        buf.write(u"\u0485\3\2\2\2\u047f\u0480\7-\2\2\u0480\u0481\5l\67\2")
        buf.write(u"\u0481\u0482\7}\2\2\u0482\u0486\3\2\2\2\u0483\u0484\7")
        buf.write(u"-\2\2\u0484\u0486\5l\67\2\u0485\u047f\3\2\2\2\u0485\u0483")
        buf.write(u"\3\2\2\2\u0485\u0486\3\2\2\2\u0486\u0609\3\2\2\2\u0487")
        buf.write(u"\u0488\7\u00f6\2\2\u0488\u0489\7\u0090\2\2\u0489\u049d")
        buf.write(u"\5l\67\2\u048a\u0490\7\u0081\2\2\u048b\u048c\79\2\2\u048c")
        buf.write(u"\u0491\5\\/\2\u048d\u0491\7\u00f8\2\2\u048e\u048f\7D")
        buf.write(u"\2\2\u048f\u0491\5\\/\2\u0490\u048b\3\2\2\2\u0490\u048d")
        buf.write(u"\3\2\2\2\u0490\u048e\3\2\2\2\u0491\u049e\3\2\2\2\u0492")
        buf.write(u"\u0493\7\22\2\2\u0493\u0494\5V,\2\u0494\u0495\7\23\2")
        buf.write(u"\2\u0495\u0497\3\2\2\2\u0496\u0492\3\2\2\2\u0496\u0497")
        buf.write(u"\3\2\2\2\u0497\u0498\3\2\2\2\u0498\u0499\7\u00f7\2\2")
        buf.write(u"\u0499\u049a\7\22\2\2\u049a\u049b\5T+\2\u049b\u049c\7")
        buf.write(u"\23\2\2\u049c\u049e\3\2\2\2\u049d\u048a\3\2\2\2\u049d")
        buf.write(u"\u0496\3\2\2\2\u049e\u0609\3\2\2\2\u049f\u04a1\7\u0093")
        buf.write(u"\2\2\u04a0\u04a2\5\\/\2\u04a1\u04a0\3\2\2\2\u04a1\u04a2")
        buf.write(u"\3\2\2\2\u04a2\u04a5\3\2\2\2\u04a3\u04a4\7-\2\2\u04a4")
        buf.write(u"\u04a6\5l\67\2\u04a5\u04a3\3\2\2\2\u04a5\u04a6\3\2\2")
        buf.write(u"\2\u04a6\u0609\3\2\2\2\u04a7\u04b5\7\u00e7\2\2\u04a8")
        buf.write(u"\u04b6\7\u00e4\2\2\u04a9\u04ab\t\25\2\2\u04aa\u04a9\3")
        buf.write(u"\2\2\2\u04aa\u04ab\3\2\2\2\u04ab\u04b3\3\2\2\2\u04ac")
        buf.write(u"\u04ad\7-\2\2\u04ad\u04b4\5l\67\2\u04ae\u04af\5l\67\2")
        buf.write(u"\u04af\u04b0\7-\2\2\u04b0\u04b1\5l\67\2\u04b1\u04b4\3")
        buf.write(u"\2\2\2\u04b2\u04b4\5l\67\2\u04b3\u04ac\3\2\2\2\u04b3")
        buf.write(u"\u04ae\3\2\2\2\u04b3\u04b2\3\2\2\2\u04b3\u04b4\3\2\2")
        buf.write(u"\2\u04b4\u04b6\3\2\2\2\u04b5\u04a8\3\2\2\2\u04b5\u04aa")
        buf.write(u"\3\2\2\2\u04b6\u0609\3\2\2\2\u04b7\u04b9\7\u00e8\2\2")
        buf.write(u"\u04b8\u04ba\7\u00cd\2\2\u04b9\u04b8\3\2\2\2\u04b9\u04ba")
        buf.write(u"\3\2\2\2\u04ba\u0609\3\2\2\2\u04bb\u04bc\7\u00c3\2\2")
        buf.write(u"\u04bc\u04cb\5\\/\2\u04bd\u04be\7\u00c2\2\2\u04be\u04c7")
        buf.write(u"\5\\/\2\u04bf\u04c0\7\u00cc\2\2\u04c0\u04c3\5l\67\2\u04c1")
        buf.write(u"\u04c2\7\u00a2\2\2\u04c2\u04c4\5l\67\2\u04c3\u04c1\3")
        buf.write(u"\2\2\2\u04c3\u04c4\3\2\2\2\u04c4\u04c7\3\2\2\2\u04c5")
        buf.write(u"\u04c7\5l\67\2\u04c6\u04bd\3\2\2\2\u04c6\u04bf\3\2\2")
        buf.write(u"\2\u04c6\u04c5\3\2\2\2\u04c7\u04c9\3\2\2\2\u04c8\u04ca")
        buf.write(u"\t\21\2\2\u04c9\u04c8\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca")
        buf.write(u"\u04cc\3\2\2\2\u04cb\u04c6\3\2\2\2\u04cb\u04cc\3\2\2")
        buf.write(u"\2\u04cc\u04cf\3\2\2\2\u04cd\u04ce\7-\2\2\u04ce\u04d0")
        buf.write(u"\5l\67\2\u04cf\u04cd\3\2\2\2\u04cf\u04d0\3\2\2\2\u04d0")
        buf.write(u"\u0609\3\2\2\2\u04d1\u04d2\7\u0118\2\2\u04d2\u04d3\5")
        buf.write(u"l\67\2\u04d3\u04d4\7=\2\2\u04d4\u04d5\5|?\2\u04d5\u04d6")
        buf.write(u"\7\36\2\2\u04d6\u04de\5\\/\2\u04d7\u04d8\7 \2\2\u04d8")
        buf.write(u"\u04d9\5|?\2\u04d9\u04da\7\36\2\2\u04da\u04db\5\\/\2")
        buf.write(u"\u04db\u04dd\3\2\2\2\u04dc\u04d7\3\2\2\2\u04dd\u04e0")
        buf.write(u"\3\2\2\2\u04de\u04dc\3\2\2\2\u04de\u04df\3\2\2\2\u04df")
        buf.write(u"\u04ec\3\2\2\2\u04e0\u04de\3\2\2\2\u04e1\u04e3\7\u0081")
        buf.write(u"\2\2\u04e2\u04e4\7\u0120\2\2\u04e3\u04e2\3\2\2\2\u04e3")
        buf.write(u"\u04e4\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5\u04eb\5V,\2")
        buf.write(u"\u04e6\u04e7\7\u0121\2\2\u04e7\u04eb\5V,\2\u04e8\u04e9")
        buf.write(u"\7\u00c4\2\2\u04e9\u04eb\5\\/\2\u04ea\u04e1\3\2\2\2\u04ea")
        buf.write(u"\u04e6\3\2\2\2\u04ea\u04e8\3\2\2\2\u04eb\u04ee\3\2\2")
        buf.write(u"\2\u04ec\u04ea\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u0609")
        buf.write(u"\3\2\2\2\u04ee\u04ec\3\2\2\2\u04ef\u04f6\7v\2\2\u04f0")
        buf.write(u"\u04f7\7w\2\2\u04f1\u04f7\7x\2\2\u04f2\u04f4\7y\2\2\u04f3")
        buf.write(u"\u04f2\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u04f5\3\2\2")
        buf.write(u"\2\u04f5\u04f7\5\\/\2\u04f6\u04f0\3\2\2\2\u04f6\u04f1")
        buf.write(u"\3\2\2\2\u04f6\u04f3\3\2\2\2\u04f7\u04fa\3\2\2\2\u04f8")
        buf.write(u"\u04f9\7-\2\2\u04f9\u04fb\5l\67\2\u04fa\u04f8\3\2\2\2")
        buf.write(u"\u04fa\u04fb\3\2\2\2\u04fb\u0609\3\2\2\2\u04fc\u0508")
        buf.write(u"\7\u008b\2\2\u04fd\u04fe\7+\2\2\u04fe\u04ff\79\2\2\u04ff")
        buf.write(u"\u0507\5l\67\2\u0500\u0502\7\u00ff\2\2\u0501\u0503\t")
        buf.write(u"\23\2\2\u0502\u0501\3\2\2\2\u0502\u0503\3\2\2\2\u0503")
        buf.write(u"\u0504\3\2\2\2\u0504\u0507\5T+\2\u0505\u0507\5@!\2\u0506")
        buf.write(u"\u04fd\3\2\2\2\u0506\u0500\3\2\2\2\u0506\u0505\3\2\2")
        buf.write(u"\2\u0507\u050a\3\2\2\2\u0508\u0506\3\2\2\2\u0508\u0509")
        buf.write(u"\3\2\2\2\u0509\u0609\3\2\2\2\u050a\u0508\3\2\2\2\u050b")
        buf.write(u"\u050d\7\u008b\2\2\u050c\u050e\7\u008c\2\2\u050d\u050c")
        buf.write(u"\3\2\2\2\u050d\u050e\3\2\2\2\u050e\u050f\3\2\2\2\u050f")
        buf.write(u"\u0510\7+\2\2\u0510\u0609\5l\67\2\u0511\u0514\7\u00df")
        buf.write(u"\2\2\u0512\u0513\7-\2\2\u0513\u0515\5l\67\2\u0514\u0512")
        buf.write(u"\3\2\2\2\u0514\u0515\3\2\2\2\u0515\u0609\3\2\2\2\u0516")
        buf.write(u"\u051a\7\u00f5\2\2\u0517\u0519\n\2\2\2\u0518\u0517\3")
        buf.write(u"\2\2\2\u0519\u051c\3\2\2\2\u051a\u0518\3\2\2\2\u051a")
        buf.write(u"\u051b\3\2\2\2\u051b\u0609\3\2\2\2\u051c\u051a\3\2\2")
        buf.write(u"\2\u051d\u0523\7\u00fb\2\2\u051e\u0520\7\u00ff\2\2\u051f")
        buf.write(u"\u0521\t\23\2\2\u0520\u051f\3\2\2\2\u0520\u0521\3\2\2")
        buf.write(u"\2\u0521\u0522\3\2\2\2\u0522\u0524\5\\/\2\u0523\u051e")
        buf.write(u"\3\2\2\2\u0523\u0524\3\2\2\2\u0524\u0526\3\2\2\2\u0525")
        buf.write(u"\u0527\7\u00e9\2\2\u0526\u0525\3\2\2\2\u0526\u0527\3")
        buf.write(u"\2\2\2\u0527\u0529\3\2\2\2\u0528\u052a\7|\2\2\u0529\u0528")
        buf.write(u"\3\2\2\2\u0529\u052a\3\2\2\2\u052a\u0533\3\2\2\2\u052b")
        buf.write(u"\u0534\7\u00f8\2\2\u052c\u052d\7D\2\2\u052d\u052f\5\\")
        buf.write(u"/\2\u052e\u0530\7\u00d1\2\2\u052f\u052e\3\2\2\2\u052f")
        buf.write(u"\u0530\3\2\2\2\u0530\u0534\3\2\2\2\u0531\u0532\7+\2\2")
        buf.write(u"\u0532\u0534\5\\/\2\u0533\u052b\3\2\2\2\u0533\u052c\3")
        buf.write(u"\2\2\2\u0533\u0531\3\2\2\2\u0534\u0609\3\2\2\2\u0535")
        buf.write(u"\u053b\7\u00fc\2\2\u0536\u0538\7\u00ff\2\2\u0537\u0539")
        buf.write(u"\t\23\2\2\u0538\u0537\3\2\2\2\u0538\u0539\3\2\2\2\u0539")
        buf.write(u"\u053a\3\2\2\2\u053a\u053c\5\\/\2\u053b\u0536\3\2\2\2")
        buf.write(u"\u053b\u053c\3\2\2\2\u053c\u053e\3\2\2\2\u053d\u053f")
        buf.write(u"\7\u00e9\2\2\u053e\u053d\3\2\2\2\u053e\u053f\3\2\2\2")
        buf.write(u"\u053f\u0540\3\2\2\2\u0540\u0545\7\u0081\2\2\u0541\u0546")
        buf.write(u"\7\u00f8\2\2\u0542\u0543\7D\2\2\u0543\u0546\5\\/\2\u0544")
        buf.write(u"\u0546\5\\/\2\u0545\u0541\3\2\2\2\u0545\u0542\3\2\2\2")
        buf.write(u"\u0545\u0544\3\2\2\2\u0546\u0609\3\2\2\2\u0547\u054d")
        buf.write(u"\7z\2\2\u0548\u054a\t\26\2\2\u0549\u054b\7t\2\2\u054a")
        buf.write(u"\u0549\3\2\2\2\u054a\u054b\3\2\2\2\u054b\u054e\3\2\2")
        buf.write(u"\2\u054c\u054e\7t\2\2\u054d\u0548\3\2\2\2\u054d\u054c")
        buf.write(u"\3\2\2\2\u054e\u0609\3\2\2\2\u054f\u0551\7H\2\2\u0550")
        buf.write(u"\u0552\7I\2\2\u0551\u0550\3\2\2\2\u0551\u0552\3\2\2\2")
        buf.write(u"\u0552\u0558\3\2\2\2\u0553\u0555\7\u011f\2\2\u0554\u0556")
        buf.write(u"\7\u0120\2\2\u0555\u0554\3\2\2\2\u0555\u0556\3\2\2\2")
        buf.write(u"\u0556\u0558\3\2\2\2\u0557\u054f\3\2\2\2\u0557\u0553")
        buf.write(u"\3\2\2\2\u0558\u0609\3\2\2\2\u0559\u055a\7\u0115\2\2")
        buf.write(u"\u055a\u0609\7t\2\2\u055b\u0576\7K\2\2\u055c\u0577\7")
        buf.write(u"t\2\2\u055d\u055e\7O\2\2\u055e\u0577\5\\/\2\u055f\u0560")
        buf.write(u"\7\u00c8\2\2\u0560\u0577\5l\67\2\u0561\u0577\7\u0103")
        buf.write(u"\2\2\u0562\u0563\7\u00dc\2\2\u0563\u0577\5V,\2\u0564")
        buf.write(u"\u0577\7I\2\2\u0565\u0577\7\65\2\2\u0566\u0577\7\u00ff")
        buf.write(u"\2\2\u0567\u0577\7\u0104\2\2\u0568\u0577\7\u00dd\2\2")
        buf.write(u"\u0569\u0577\7\u0107\2\2\u056a\u0577\7\u0108\2\2\u056b")
        buf.write(u"\u0577\7\u00ad\2\2\u056c\u0577\7\u00ea\2\2\u056d\u0577")
        buf.write(u"\7\u0086\2\2\u056e\u0570\7H\2\2\u056f\u0571\7t\2\2\u0570")
        buf.write(u"\u056f\3\2\2\2\u0570\u0571\3\2\2\2\u0571\u0577\3\2\2")
        buf.write(u"\2\u0572\u0573\7\u0109\2\2\u0573\u0577\5\\/\2\u0574\u0577")
        buf.write(u"\7\u00c0\2\2\u0575\u0577\7g\2\2\u0576\u055c\3\2\2\2\u0576")
        buf.write(u"\u055d\3\2\2\2\u0576\u055f\3\2\2\2\u0576\u0561\3\2\2")
        buf.write(u"\2\u0576\u0562\3\2\2\2\u0576\u0564\3\2\2\2\u0576\u0565")
        buf.write(u"\3\2\2\2\u0576\u0566\3\2\2\2\u0576\u0567\3\2\2\2\u0576")
        buf.write(u"\u0568\3\2\2\2\u0576\u0569\3\2\2\2\u0576\u056a\3\2\2")
        buf.write(u"\2\u0576\u056b\3\2\2\2\u0576\u056c\3\2\2\2\u0576\u056d")
        buf.write(u"\3\2\2\2\u0576\u056e\3\2\2\2\u0576\u0572\3\2\2\2\u0576")
        buf.write(u"\u0574\3\2\2\2\u0576\u0575\3\2\2\2\u0576\u0577\3\2\2")
        buf.write(u"\2\u0577\u0609\3\2\2\2\u0578\u0579\7\u0082\2\2\u0579")
        buf.write(u"\u057c\7\u0083\2\2\u057a\u057d\7#\2\2\u057b\u057d\5l")
        buf.write(u"\67\2\u057c\u057a\3\2\2\2\u057c\u057b\3\2\2\2\u057d\u0587")
        buf.write(u"\3\2\2\2\u057e\u0586\7\u0084\2\2\u057f\u0580\7+\2\2\u0580")
        buf.write(u"\u0582\7\u0085\2\2\u0581\u0583\7\u0086\2\2\u0582\u0581")
        buf.write(u"\3\2\2\2\u0582\u0583\3\2\2\2\u0583\u0586\3\2\2\2\u0584")
        buf.write(u"\u0586\7\u008a\2\2\u0585\u057e\3\2\2\2\u0585\u057f\3")
        buf.write(u"\2\2\2\u0585\u0584\3\2\2\2\u0586\u0589\3\2\2\2\u0587")
        buf.write(u"\u0585\3\2\2\2\u0587\u0588\3\2\2\2\u0588\u0609\3\2\2")
        buf.write(u"\2\u0589\u0587\3\2\2\2\u058a\u058c\7l\2\2\u058b\u058d")
        buf.write(u"\5x=\2\u058c\u058b\3\2\2\2\u058c\u058d\3\2\2\2\u058d")
        buf.write(u"\u058e\3\2\2\2\u058e\u058f\5|?\2\u058f\u0590\7-\2\2\u0590")
        buf.write(u"\u0593\5l\67\2\u0591\u0592\7.\2\2\u0592\u0594\5|?\2\u0593")
        buf.write(u"\u0591\3\2\2\2\u0593\u0594\3\2\2\2\u0594\u0596\3\2\2")
        buf.write(u"\2\u0595\u0597\5D#\2\u0596\u0595\3\2\2\2\u0596\u0597")
        buf.write(u"\3\2\2\2\u0597\u0609\3\2\2\2\u0598\u059b\t\27\2\2\u0599")
        buf.write(u"\u059a\7\f\2\2\u059a\u059c\5|?\2\u059b\u0599\3\2\2\2")
        buf.write(u"\u059b\u059c\3\2\2\2\u059c\u05a0\3\2\2\2\u059d\u059f")
        buf.write(u"\n\2\2\2\u059e\u059d\3\2\2\2\u059f\u05a2\3\2\2\2\u05a0")
        buf.write(u"\u059e\3\2\2\2\u05a0\u05a1\3\2\2\2\u05a1\u0609\3\2\2")
        buf.write(u"\2\u05a2\u05a0\3\2\2\2\u05a3\u05a4\7)\2\2\u05a4\u05a7")
        buf.write(u"\5\\/\2\u05a5\u05a6\7\u00ab\2\2\u05a6\u05a8\5\\/\2\u05a7")
        buf.write(u"\u05a5\3\2\2\2\u05a7\u05a8\3\2\2\2\u05a8\u0609\3\2\2")
        buf.write(u"\2\u05a9\u05ab\7\u0116\2\2\u05aa\u05ac\t\30\2\2\u05ab")
        buf.write(u"\u05aa\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05b5\3\2\2")
        buf.write(u"\2\u05ad\u05b4\7t\2\2\u05ae\u05b4\7\u0128\2\2\u05af\u05b4")
        buf.write(u"\7\u0105\2\2\u05b0\u05b1\7.\2\2\u05b1\u05b4\5l\67\2\u05b2")
        buf.write(u"\u05b4\5l\67\2\u05b3\u05ad\3\2\2\2\u05b3\u05ae\3\2\2")
        buf.write(u"\2\u05b3\u05af\3\2\2\2\u05b3\u05b0\3\2\2\2\u05b3\u05b2")
        buf.write(u"\3\2\2\2\u05b4\u05b7\3\2\2\2\u05b5\u05b3\3\2\2\2\u05b5")
        buf.write(u"\u05b6\3\2\2\2\u05b6\u0609\3\2\2\2\u05b7\u05b5\3\2\2")
        buf.write(u"\2\u05b8\u05b9\7\u010a\2\2\u05b9\u0609\5z>\2\u05ba\u05bb")
        buf.write(u"\7\u00e2\2\2\u05bb\u05bf\7+\2\2\u05bc\u05bd\7\u00e9\2")
        buf.write(u"\2\u05bd\u05c0\5l\67\2\u05be\u05c0\5l\67\2\u05bf\u05bc")
        buf.write(u"\3\2\2\2\u05bf\u05be\3\2\2\2\u05c0\u05c4\3\2\2\2\u05c1")
        buf.write(u"\u05c2\7t\2\2\u05c2\u05c3\t\23\2\2\u05c3\u05c5\5l\67")
        buf.write(u"\2\u05c4\u05c1\3\2\2\2\u05c4\u05c5\3\2\2\2\u05c5\u0609")
        buf.write(u"\3\2\2\2\u05c6\u05c7\7\u0119\2\2\u05c7\u05c8\7\u0081")
        buf.write(u"\2\2\u05c8\u05ca\5l\67\2\u05c9\u05cb\7\u00d1\2\2\u05ca")
        buf.write(u"\u05c9\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u0609\3\2\2")
        buf.write(u"\2\u05cc\u05cd\7\u011a\2\2\u05cd\u05ce\7g\2\2\u05ce\u05cf")
        buf.write(u"\5l\67\2\u05cf\u05e7\t\31\2\2\u05d0\u05d1\7\u009d\2\2")
        buf.write(u"\u05d1\u05d2\5\\/\2\u05d2\u05d3\7 \2\2\u05d3\u05d4\5")
        buf.write(u"\\/\2\u05d4\u05e8\3\2\2\2\u05d5\u05d6\7\u0081\2\2\u05d6")
        buf.write(u"\u05d7\7\u009d\2\2\u05d7\u05d8\5\\/\2\u05d8\u05d9\7 ")
        buf.write(u"\2\2\u05d9\u05e5\5\\/\2\u05da\u05db\7\u011e\2\2\u05db")
        buf.write(u"\u05dc\7\u009d\2\2\u05dc\u05dd\5\\/\2\u05dd\u05de\7 ")
        buf.write(u"\2\2\u05de\u05df\5\\/\2\u05df\u05e6\3\2\2\2\u05e0\u05e1")
        buf.write(u"\7+\2\2\u05e1\u05e2\5\\/\2\u05e2\u05e3\7 \2\2\u05e3\u05e4")
        buf.write(u"\5\\/\2\u05e4\u05e6\3\2\2\2\u05e5\u05da\3\2\2\2\u05e5")
        buf.write(u"\u05e0\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6\u05e8\3\2\2")
        buf.write(u"\2\u05e7\u05d0\3\2\2\2\u05e7\u05d5\3\2\2\2\u05e7\u05e8")
        buf.write(u"\3\2\2\2\u05e8\u0609\3\2\2\2\u05e9\u05f5\7\u0122\2\2")
        buf.write(u"\u05ea\u05eb\7+\2\2\u05eb\u05f4\5r:\2\u05ec\u05f4\7\u00d1")
        buf.write(u"\2\2\u05ed\u05f4\7\u0125\2\2\u05ee\u05f4\7\u00b7\2\2")
        buf.write(u"\u05ef\u05f0\7\u0126\2\2\u05f0\u05f4\5\\/\2\u05f1\u05f2")
        buf.write(u"\7\u0127\2\2\u05f2\u05f4\5\\/\2\u05f3\u05ea\3\2\2\2\u05f3")
        buf.write(u"\u05ec\3\2\2\2\u05f3\u05ed\3\2\2\2\u05f3\u05ee\3\2\2")
        buf.write(u"\2\u05f3\u05ef\3\2\2\2\u05f3\u05f1\3\2\2\2\u05f4\u05f7")
        buf.write(u"\3\2\2\2\u05f5\u05f3\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6")
        buf.write(u"\u05f8\3\2\2\2\u05f7\u05f5\3\2\2\2\u05f8\u05f9\7\u012e")
        buf.write(u"\2\2\u05f9\u05fa\5B\"\2\u05fa\u05fb\7\u0123\2\2\u05fb")
        buf.write(u"\u0609\3\2\2\2\u05fc\u05fd\7\u00b5\2\2\u05fd\u0609\7")
        buf.write(u"\u0104\2\2\u05fe\u05ff\7\u00b6\2\2\u05ff\u0603\7g\2\2")
        buf.write(u"\u0600\u0604\7t\2\2\u0601\u0604\7\u009f\2\2\u0602\u0604")
        buf.write(u"\5T+\2\u0603\u0600\3\2\2\2\u0603\u0601\3\2\2\2\u0603")
        buf.write(u"\u0602\3\2\2\2\u0604\u0609\3\2\2\2\u0605\u0606\7\36\2")
        buf.write(u"\2\u0606\u0609\5\\/\2\u0607\u0609\5b\62\2\u0608\u01c0")
        buf.write(u"\3\2\2\2\u0608\u01d4\3\2\2\2\u0608\u01d5\3\2\2\2\u0608")
        buf.write(u"\u01e6\3\2\2\2\u0608\u0216\3\2\2\2\u0608\u022c\3\2\2")
        buf.write(u"\2\u0608\u0233\3\2\2\2\u0608\u0238\3\2\2\2\u0608\u0251")
        buf.write(u"\3\2\2\2\u0608\u025d\3\2\2\2\u0608\u0263\3\2\2\2\u0608")
        buf.write(u"\u0265\3\2\2\2\u0608\u0269\3\2\2\2\u0608\u028e\3\2\2")
        buf.write(u"\2\u0608\u029b\3\2\2\2\u0608\u029d\3\2\2\2\u0608\u02a6")
        buf.write(u"\3\2\2\2\u0608\u02b8\3\2\2\2\u0608\u02c0\3\2\2\2\u0608")
        buf.write(u"\u02d6\3\2\2\2\u0608\u0325\3\2\2\2\u0608\u0336\3\2\2")
        buf.write(u"\2\u0608\u0341\3\2\2\2\u0608\u0357\3\2\2\2\u0608\u0361")
        buf.write(u"\3\2\2\2\u0608\u0367\3\2\2\2\u0608\u038e\3\2\2\2\u0608")
        buf.write(u"\u03a2\3\2\2\2\u0608\u03a6\3\2\2\2\u0608\u03aa\3\2\2")
        buf.write(u"\2\u0608\u03c0\3\2\2\2\u0608\u03d5\3\2\2\2\u0608\u03f2")
        buf.write(u"\3\2\2\2\u0608\u0405\3\2\2\2\u0608\u040c\3\2\2\2\u0608")
        buf.write(u"\u040d\3\2\2\2\u0608\u0418\3\2\2\2\u0608\u0429\3\2\2")
        buf.write(u"\2\u0608\u0432\3\2\2\2\u0608\u043c\3\2\2\2\u0608\u0463")
        buf.write(u"\3\2\2\2\u0608\u046c\3\2\2\2\u0608\u047b\3\2\2\2\u0608")
        buf.write(u"\u0487\3\2\2\2\u0608\u049f\3\2\2\2\u0608\u04a7\3\2\2")
        buf.write(u"\2\u0608\u04b7\3\2\2\2\u0608\u04bb\3\2\2\2\u0608\u04d1")
        buf.write(u"\3\2\2\2\u0608\u04ef\3\2\2\2\u0608\u04fc\3\2\2\2\u0608")
        buf.write(u"\u050b\3\2\2\2\u0608\u0511\3\2\2\2\u0608\u0516\3\2\2")
        buf.write(u"\2\u0608\u051d\3\2\2\2\u0608\u0535\3\2\2\2\u0608\u0547")
        buf.write(u"\3\2\2\2\u0608\u0557\3\2\2\2\u0608\u0559\3\2\2\2\u0608")
        buf.write(u"\u055b\3\2\2\2\u0608\u0578\3\2\2\2\u0608\u058a\3\2\2")
        buf.write(u"\2\u0608\u0598\3\2\2\2\u0608\u05a3\3\2\2\2\u0608\u05a9")
        buf.write(u"\3\2\2\2\u0608\u05b8\3\2\2\2\u0608\u05ba\3\2\2\2\u0608")
        buf.write(u"\u05c6\3\2\2\2\u0608\u05cc\3\2\2\2\u0608\u05e9\3\2\2")
        buf.write(u"\2\u0608\u05fc\3\2\2\2\u0608\u05fe\3\2\2\2\u0608\u0605")
        buf.write(u"\3\2\2\2\u0608\u0607\3\2\2\2\u0609?\3\2\2\2\u060a\u0611")
        buf.write(u"\5z>\2\u060b\u060c\7S\2\2\u060c\u0611\5\\/\2\u060d\u060e")
        buf.write(u"\7U\2\2\u060e\u0611\5\\/\2\u060f\u0611\7V\2\2\u0610\u060a")
        buf.write(u"\3\2\2\2\u0610\u060b\3\2\2\2\u0610\u060d\3\2\2\2\u0610")
        buf.write(u"\u060f\3\2\2\2\u0611A\3\2\2\2\u0612\u0614\n\32\2\2\u0613")
        buf.write(u"\u0612\3\2\2\2\u0614\u0617\3\2\2\2\u0615\u0613\3\2\2")
        buf.write(u"\2\u0615\u0616\3\2\2\2\u0616C\3\2\2\2\u0617\u0615\3\2")
        buf.write(u"\2\2\u0618\u061d\5F$\2\u0619\u061a\7 \2\2\u061a\u061c")
        buf.write(u"\5F$\2\u061b\u0619\3\2\2\2\u061c\u061f\3\2\2\2\u061d")
        buf.write(u"\u061b\3\2\2\2\u061d\u061e\3\2\2\2\u061eE\3\2\2\2\u061f")
        buf.write(u"\u061d\3\2\2\2\u0620\u0622\5x=\2\u0621\u0623\7\b\2\2")
        buf.write(u"\u0622\u0621\3\2\2\2\u0622\u0623\3\2\2\2\u0623\u0625")
        buf.write(u"\3\2\2\2\u0624\u0626\5|?\2\u0625\u0624\3\2\2\2\u0625")
        buf.write(u"\u0626\3\2\2\2\u0626G\3\2\2\2\u0627\u0628\5|?\2\u0628")
        buf.write(u"\u062a\5|?\2\u0629\u062b\5v<\2\u062a\u0629\3\2\2\2\u062a")
        buf.write(u"\u062b\3\2\2\2\u062bI\3\2\2\2\u062c\u0634\7r\2\2\u062d")
        buf.write(u"\u0635\7\63\2\2\u062e\u0635\7\64\2\2\u062f\u0630\7+\2")
        buf.write(u"\2\u0630\u0632\5l\67\2\u0631\u0633\7\u00d1\2\2\u0632")
        buf.write(u"\u0631\3\2\2\2\u0632\u0633\3\2\2\2\u0633\u0635\3\2\2")
        buf.write(u"\2\u0634\u062d\3\2\2\2\u0634\u062e\3\2\2\2\u0634\u062f")
        buf.write(u"\3\2\2\2\u0635\u070a\3\2\2\2\u0636\u0637\7*\2\2\u0637")
        buf.write(u"\u070a\t\33\2\2\u0638\u063d\7]\2\2\u0639\u063e\7\63\2")
        buf.write(u"\2\u063a\u063e\7\64\2\2\u063b\u063c\7+\2\2\u063c\u063e")
        buf.write(u"\5l\67\2\u063d\u0639\3\2\2\2\u063d\u063a\3\2\2\2\u063d")
        buf.write(u"\u063b\3\2\2\2\u063e\u070a\3\2\2\2\u063f\u064a\7^\2\2")
        buf.write(u"\u0640\u064b\7\63\2\2\u0641\u064b\7\64\2\2\u0642\u0648")
        buf.write(u"\7+\2\2\u0643\u0646\5\\/\2\u0644\u0645\7\u00e0\2\2\u0645")
        buf.write(u"\u0647\5\\/\2\u0646\u0644\3\2\2\2\u0646\u0647\3\2\2\2")
        buf.write(u"\u0647\u0649\3\2\2\2\u0648\u0643\3\2\2\2\u0648\u0649")
        buf.write(u"\3\2\2\2\u0649\u064b\3\2\2\2\u064a\u0640\3\2\2\2\u064a")
        buf.write(u"\u0641\3\2\2\2\u064a\u0642\3\2\2\2\u064b\u070a\3\2\2")
        buf.write(u"\2\u064c\u064d\7\u00c8\2\2\u064d\u064e\7+\2\2\u064e\u0651")
        buf.write(u"\5l\67\2\u064f\u0650\7-\2\2\u0650\u0652\5l\67\2\u0651")
        buf.write(u"\u064f\3\2\2\2\u0651\u0652\3\2\2\2\u0652\u0655\3\2\2")
        buf.write(u"\2\u0653\u0654\7\u00c1\2\2\u0654\u0656\5l\67\2\u0655")
        buf.write(u"\u0653\3\2\2\2\u0655\u0656\3\2\2\2\u0656\u0658\3\2\2")
        buf.write(u"\2\u0657\u0659\7\u00d1\2\2\u0658\u0657\3\2\2\2\u0658")
        buf.write(u"\u0659\3\2\2\2\u0659\u070a\3\2\2\2\u065a\u0665\7o\2\2")
        buf.write(u"\u065b\u0666\7\63\2\2\u065c\u0666\7\64\2\2\u065d\u0666")
        buf.write(u"\7X\2\2\u065e\u0663\7+\2\2\u065f\u0660\5\\/\2\u0660\u0661")
        buf.write(u"\7 \2\2\u0661\u0662\5\\/\2\u0662\u0664\3\2\2\2\u0663")
        buf.write(u"\u065f\3\2\2\2\u0663\u0664\3\2\2\2\u0664\u0666\3\2\2")
        buf.write(u"\2\u0665\u065b\3\2\2\2\u0665\u065c\3\2\2\2\u0665\u065d")
        buf.write(u"\3\2\2\2\u0665\u065e\3\2\2\2\u0666\u070a\3\2\2\2\u0667")
        buf.write(u"\u0668\7_\2\2\u0668\u066a\t\34\2\2\u0669\u066b\t\35\2")
        buf.write(u"\2\u066a\u0669\3\2\2\2\u066a\u066b\3\2\2\2\u066b\u070a")
        buf.write(u"\3\2\2\2\u066c\u066d\7[\2\2\u066d\u070a\t\33\2\2\u066e")
        buf.write(u"\u0670\7`\2\2\u066f\u0671\7+\2\2\u0670\u066f\3\2\2\2")
        buf.write(u"\u0670\u0671\3\2\2\2\u0671\u0672\3\2\2\2\u0672\u070a")
        buf.write(u"\5|?\2\u0673\u0674\7\u008d\2\2\u0674\u070a\t\33\2\2\u0675")
        buf.write(u"\u0676\7s\2\2\u0676\u070a\t\33\2\2\u0677\u0678\7\u0094")
        buf.write(u"\2\2\u0678\u070a\t\33\2\2\u0679\u067a\7\u00c5\2\2\u067a")
        buf.write(u"\u0680\7+\2\2\u067b\u067e\5l\67\2\u067c\u067d\7-\2\2")
        buf.write(u"\u067d\u067f\5l\67\2\u067e\u067c\3\2\2\2\u067e\u067f")
        buf.write(u"\3\2\2\2\u067f\u0681\3\2\2\2\u0680\u067b\3\2\2\2\u0680")
        buf.write(u"\u0681\3\2\2\2\u0681\u070a\3\2\2\2\u0682\u068e\7\u010b")
        buf.write(u"\2\2\u0683\u068f\7\63\2\2\u0684\u068f\7\64\2\2\u0685")
        buf.write(u"\u0687\7+\2\2\u0686\u0688\5l\67\2\u0687\u0686\3\2\2\2")
        buf.write(u"\u0687\u0688\3\2\2\2\u0688\u068f\3\2\2\2\u0689\u068b")
        buf.write(u"\7\u010d\2\2\u068a\u068c\5l\67\2\u068b\u068a\3\2\2\2")
        buf.write(u"\u068b\u068c\3\2\2\2\u068c\u068f\3\2\2\2\u068d\u068f")
        buf.write(u"\7\u010e\2\2\u068e\u0683\3\2\2\2\u068e\u0684\3\2\2\2")
        buf.write(u"\u068e\u0685\3\2\2\2\u068e\u0689\3\2\2\2\u068e\u068d")
        buf.write(u"\3\2\2\2\u068f\u070a\3\2\2\2\u0690\u0691\7\u00cb\2\2")
        buf.write(u"\u0691\u0693\7+\2\2\u0692\u0694\5l\67\2\u0693\u0692\3")
        buf.write(u"\2\2\2\u0693\u0694\3\2\2\2\u0694\u070a\3\2\2\2\u0695")
        buf.write(u"\u0696\7d\2\2\u0696\u0697\7+\2\2\u0697\u0699\5l\67\2")
        buf.write(u"\u0698\u069a\7\u00d1\2\2\u0699\u0698\3\2\2\2\u0699\u069a")
        buf.write(u"\3\2\2\2\u069a\u070a\3\2\2\2\u069b\u069c\7Z\2\2\u069c")
        buf.write(u"\u069d\7+\2\2\u069d\u070a\5\\/\2\u069e\u069f\7\u00f0")
        buf.write(u"\2\2\u069f\u070a\t\33\2\2\u06a0\u06a1\7\u0095\2\2\u06a1")
        buf.write(u"\u070a\t\33\2\2\u06a2\u06a4\7j\2\2\u06a3\u06a5\7[\2\2")
        buf.write(u"\u06a4\u06a3\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5\u06a6")
        buf.write(u"\3\2\2\2\u06a6\u070a\t\33\2\2\u06a7\u06a8\7\u00c2\2\2")
        buf.write(u"\u06a8\u06b9\7+\2\2\u06a9\u06ba\5l\67\2\u06aa\u06ac\7")
        buf.write(u"\u00cc\2\2\u06ab\u06aa\3\2\2\2\u06ab\u06ac\3\2\2\2\u06ac")
        buf.write(u"\u06ad\3\2\2\2\u06ad\u06b0\5l\67\2\u06ae\u06af\7\u00a2")
        buf.write(u"\2\2\u06af\u06b1\5l\67\2\u06b0\u06ae\3\2\2\2\u06b0\u06b1")
        buf.write(u"\3\2\2\2\u06b1\u06b4\3\2\2\2\u06b2\u06b3\7-\2\2\u06b3")
        buf.write(u"\u06b5\5l\67\2\u06b4\u06b2\3\2\2\2\u06b4\u06b5\3\2\2")
        buf.write(u"\2\u06b5\u06b7\3\2\2\2\u06b6\u06b8\t\21\2\2\u06b7\u06b6")
        buf.write(u"\3\2\2\2\u06b7\u06b8\3\2\2\2\u06b8\u06ba\3\2\2\2\u06b9")
        buf.write(u"\u06a9\3\2\2\2\u06b9\u06ab\3\2\2\2\u06b9\u06ba\3\2\2")
        buf.write(u"\2\u06ba\u070a\3\2\2\2\u06bb\u06cb\7\u0085\2\2\u06bc")
        buf.write(u"\u06be\7\63\2\2\u06bd\u06bf\7\u0086\2\2\u06be\u06bd\3")
        buf.write(u"\2\2\2\u06be\u06bf\3\2\2\2\u06bf\u06cc\3\2\2\2\u06c0")
        buf.write(u"\u06cc\7\64\2\2\u06c1\u06c9\7+\2\2\u06c2\u06ca\7\u00e1")
        buf.write(u"\2\2\u06c3\u06c4\7D\2\2\u06c4\u06ca\5l\67\2\u06c5\u06c7")
        buf.write(u"\5l\67\2\u06c6\u06c8\7\u00d1\2\2\u06c7\u06c6\3\2\2\2")
        buf.write(u"\u06c7\u06c8\3\2\2\2\u06c8\u06ca\3\2\2\2\u06c9\u06c2")
        buf.write(u"\3\2\2\2\u06c9\u06c3\3\2\2\2\u06c9\u06c5\3\2\2\2\u06c9")
        buf.write(u"\u06ca\3\2\2\2\u06ca\u06cc\3\2\2\2\u06cb\u06bc\3\2\2")
        buf.write(u"\2\u06cb\u06c0\3\2\2\2\u06cb\u06c1\3\2\2\2\u06cc\u070a")
        buf.write(u"\3\2\2\2\u06cd\u06ce\7L\2\2\u06ce\u06cf\7+\2\2\u06cf")
        buf.write(u"\u06d4\5l\67\2\u06d0\u06d1\7 \2\2\u06d1\u06d3\5l\67\2")
        buf.write(u"\u06d2\u06d0\3\2\2\2\u06d3\u06d6\3\2\2\2\u06d4\u06d2")
        buf.write(u"\3\2\2\2\u06d4\u06d5\3\2\2\2\u06d5\u06d8\3\2\2\2\u06d6")
        buf.write(u"\u06d4\3\2\2\2\u06d7\u06d9\7\u00d1\2\2\u06d8\u06d7\3")
        buf.write(u"\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u070a\3\2\2\2\u06da")
        buf.write(u"\u06db\7\\\2\2\u06db\u06dc\7+\2\2\u06dc\u06df\5\\/\2")
        buf.write(u"\u06dd\u06de\7 \2\2\u06de\u06e0\5\\/\2\u06df\u06dd\3")
        buf.write(u"\2\2\2\u06df\u06e0\3\2\2\2\u06e0\u070a\3\2\2\2\u06e1")
        buf.write(u"\u06e2\7\u0112\2\2\u06e2\u06e3\7+\2\2\u06e3\u06e4\5\\")
        buf.write(u"/\2\u06e4\u06e5\7\u0090\2\2\u06e5\u06e8\5l\67\2\u06e6")
        buf.write(u"\u06e7\7-\2\2\u06e7\u06e9\5l\67\2\u06e8\u06e6\3\2\2\2")
        buf.write(u"\u06e8\u06e9\3\2\2\2\u06e9\u06eb\3\2\2\2\u06ea\u06ec")
        buf.write(u"\7\u00d1\2\2\u06eb\u06ea\3\2\2\2\u06eb\u06ec\3\2\2\2")
        buf.write(u"\u06ec\u070a\3\2\2\2\u06ed\u06ee\7W\2\2\u06ee\u070a\t")
        buf.write(u"\33\2\2\u06ef\u06f1\7X\2\2\u06f0\u06f2\7Y\2\2\u06f1\u06f0")
        buf.write(u"\3\2\2\2\u06f1\u06f2\3\2\2\2\u06f2\u06f3\3\2\2\2\u06f3")
        buf.write(u"\u070a\t\33\2\2\u06f4\u06fe\7n\2\2\u06f5\u06ff\7\63\2")
        buf.write(u"\2\u06f6\u06ff\7\64\2\2\u06f7\u06fa\7+\2\2\u06f8\u06fb")
        buf.write(u"\7\u00e1\2\2\u06f9\u06fb\5\\/\2\u06fa\u06f8\3\2\2\2\u06fa")
        buf.write(u"\u06f9\3\2\2\2\u06fa\u06fb\3\2\2\2\u06fb\u06ff\3\2\2")
        buf.write(u"\2\u06fc\u06ff\7\u00e2\2\2\u06fd\u06ff\7\u00e3\2\2\u06fe")
        buf.write(u"\u06f5\3\2\2\2\u06fe\u06f6\3\2\2\2\u06fe\u06f7\3\2\2")
        buf.write(u"\2\u06fe\u06fc\3\2\2\2\u06fe\u06fd\3\2\2\2\u06ff\u070a")
        buf.write(u"\3\2\2\2\u0700\u0701\7B\2\2\u0701\u070a\t\33\2\2\u0702")
        buf.write(u"\u0703\7\u010f\2\2\u0703\u070a\t\33\2\2\u0704\u0705\7")
        buf.write(u"\u00c0\2\2\u0705\u0706\7+\2\2\u0706\u070a\5\\/\2\u0707")
        buf.write(u"\u0708\7\u00ca\2\2\u0708\u070a\t\33\2\2\u0709\u062c\3")
        buf.write(u"\2\2\2\u0709\u0636\3\2\2\2\u0709\u0638\3\2\2\2\u0709")
        buf.write(u"\u063f\3\2\2\2\u0709\u064c\3\2\2\2\u0709\u065a\3\2\2")
        buf.write(u"\2\u0709\u0667\3\2\2\2\u0709\u066c\3\2\2\2\u0709\u066e")
        buf.write(u"\3\2\2\2\u0709\u0673\3\2\2\2\u0709\u0675\3\2\2\2\u0709")
        buf.write(u"\u0677\3\2\2\2\u0709\u0679\3\2\2\2\u0709\u0682\3\2\2")
        buf.write(u"\2\u0709\u0690\3\2\2\2\u0709\u0695\3\2\2\2\u0709\u069b")
        buf.write(u"\3\2\2\2\u0709\u069e\3\2\2\2\u0709\u06a0\3\2\2\2\u0709")
        buf.write(u"\u06a2\3\2\2\2\u0709\u06a7\3\2\2\2\u0709\u06bb\3\2\2")
        buf.write(u"\2\u0709\u06cd\3\2\2\2\u0709\u06da\3\2\2\2\u0709\u06e1")
        buf.write(u"\3\2\2\2\u0709\u06ed\3\2\2\2\u0709\u06ef\3\2\2\2\u0709")
        buf.write(u"\u06f4\3\2\2\2\u0709\u0700\3\2\2\2\u0709\u0702\3\2\2")
        buf.write(u"\2\u0709\u0704\3\2\2\2\u0709\u0707\3\2\2\2\u070aK\3\2")
        buf.write(u"\2\2\u070b\u070c\5p9\2\u070c\u070d\5v<\2\u070d\u0713")
        buf.write(u"\3\2\2\2\u070e\u0710\5r:\2\u070f\u0711\5P)\2\u0710\u070f")
        buf.write(u"\3\2\2\2\u0710\u0711\3\2\2\2\u0711\u0713\3\2\2\2\u0712")
        buf.write(u"\u070b\3\2\2\2\u0712\u070e\3\2\2\2\u0713M\3\2\2\2\u0714")
        buf.write(u"\u0715\7.\2\2\u0715\u0716\5x=\2\u0716O\3\2\2\2\u0717")
        buf.write(u"\u071a\5N(\2\u0718\u0719\7\u00a2\2\2\u0719\u071b\5l\67")
        buf.write(u"\2\u071a\u0718\3\2\2\2\u071a\u071b\3\2\2\2\u071bQ\3\2")
        buf.write(u"\2\2\u071c\u071e\7 \2\2\u071d\u071f\5\\/\2\u071e\u071d")
        buf.write(u"\3\2\2\2\u071e\u071f\3\2\2\2\u071fS\3\2\2\2\u0720\u0724")
        buf.write(u"\5\\/\2\u0721\u0723\5R*\2\u0722\u0721\3\2\2\2\u0723\u0726")
        buf.write(u"\3\2\2\2\u0724\u0722\3\2\2\2\u0724\u0725\3\2\2\2\u0725")
        buf.write(u"\u072d\3\2\2\2\u0726\u0724\3\2\2\2\u0727\u0729\5R*\2")
        buf.write(u"\u0728\u0727\3\2\2\2\u0729\u072a\3\2\2\2\u072a\u0728")
        buf.write(u"\3\2\2\2\u072a\u072b\3\2\2\2\u072b\u072d\3\2\2\2\u072c")
        buf.write(u"\u0720\3\2\2\2\u072c\u0728\3\2\2\2\u072dU\3\2\2\2\u072e")
        buf.write(u"\u0733\5l\67\2\u072f\u0730\7 \2\2\u0730\u0732\5l\67\2")
        buf.write(u"\u0731\u072f\3\2\2\2\u0732\u0735\3\2\2\2\u0733\u0731")
        buf.write(u"\3\2\2\2\u0733\u0734\3\2\2\2\u0734W\3\2\2\2\u0735\u0733")
        buf.write(u"\3\2\2\2\u0736\u0737\7\b\2\2\u0737\u0738\5r:\2\u0738")
        buf.write(u"Y\3\2\2\2\u0739\u073a\7\7\2\2\u073a\u073b\5|?\2\u073b")
        buf.write(u"[\3\2\2\2\u073c\u073d\b/\1\2\u073d\u073e\7\22\2\2\u073e")
        buf.write(u"\u073f\5\\/\2\u073f\u0740\7\23\2\2\u0740\u0758\3\2\2")
        buf.write(u"\2\u0741\u0742\t\36\2\2\u0742\u0758\5\\/\16\u0743\u0744")
        buf.write(u"\t\37\2\2\u0744\u0758\5\\/\r\u0745\u0758\5n8\2\u0746")
        buf.write(u"\u0747\7\u00ee\2\2\u0747\u0748\7\22\2\2\u0748\u0749\5")
        buf.write(u"\\/\2\u0749\u074a\5N(\2\u074a\u074b\7\23\2\2\u074b\u0758")
        buf.write(u"\3\2\2\2\u074c\u0752\7\r\2\2\u074d\u074e\5r:\2\u074e")
        buf.write(u"\u074f\7\"\2\2\u074f\u0750\7\"\2\2\u0750\u0752\3\2\2")
        buf.write(u"\2\u0751\u074c\3\2\2\2\u0751\u074d\3\2\2\2\u0751\u0752")
        buf.write(u"\3\2\2\2\u0752\u0753\3\2\2\2\u0753\u0755\5d\63\2\u0754")
        buf.write(u"\u0756\5f\64\2\u0755\u0754\3\2\2\2\u0755\u0756\3\2\2")
        buf.write(u"\2\u0756\u0758\3\2\2\2\u0757\u073c\3\2\2\2\u0757\u0741")
        buf.write(u"\3\2\2\2\u0757\u0743\3\2\2\2\u0757\u0745\3\2\2\2\u0757")
        buf.write(u"\u0746\3\2\2\2\u0757\u0751\3\2\2\2\u0758\u0776\3\2\2")
        buf.write(u"\2\u0759\u075d\f\f\2\2\u075a\u075b\7\t\2\2\u075b\u075e")
        buf.write(u"\7\t\2\2\u075c\u075e\7\37\2\2\u075d\u075a\3\2\2\2\u075d")
        buf.write(u"\u075c\3\2\2\2\u075e\u075f\3\2\2\2\u075f\u0775\5\\/\r")
        buf.write(u"\u0760\u0761\f\13\2\2\u0761\u0762\t \2\2\u0762\u0775")
        buf.write(u"\5\\/\f\u0763\u0764\f\n\2\2\u0764\u0765\7\35\2\2\u0765")
        buf.write(u"\u0775\5\\/\13\u0766\u0767\f\t\2\2\u0767\u0768\t\36\2")
        buf.write(u"\2\u0768\u0775\5\\/\n\u0769\u076a\f\b\2\2\u076a\u076b")
        buf.write(u"\t!\2\2\u076b\u0775\5\\/\t\u076c\u076d\f\7\2\2\u076d")
        buf.write(u"\u076e\5`\61\2\u076e\u076f\5\\/\b\u076f\u0775\3\2\2\2")
        buf.write(u"\u0770\u0771\f\6\2\2\u0771\u0772\5^\60\2\u0772\u0773")
        buf.write(u"\5\\/\7\u0773\u0775\3\2\2\2\u0774\u0759\3\2\2\2\u0774")
        buf.write(u"\u0760\3\2\2\2\u0774\u0763\3\2\2\2\u0774\u0766\3\2\2")
        buf.write(u"\2\u0774\u0769\3\2\2\2\u0774\u076c\3\2\2\2\u0774\u0770")
        buf.write(u"\3\2\2\2\u0775\u0778\3\2\2\2\u0776\u0774\3\2\2\2\u0776")
        buf.write(u"\u0777\3\2\2\2\u0777]\3\2\2\2\u0778\u0776\3\2\2\2\u0779")
        buf.write(u"\u077a\t\"\2\2\u077a_\3\2\2\2\u077b\u077c\t#\2\2\u077c")
        buf.write(u"a\3\2\2\2\u077d\u0783\7\r\2\2\u077e\u077f\5r:\2\u077f")
        buf.write(u"\u0780\7\"\2\2\u0780\u0781\7\"\2\2\u0781\u0783\3\2\2")
        buf.write(u"\2\u0782\u077d\3\2\2\2\u0782\u077e\3\2\2\2\u0782\u0783")
        buf.write(u"\3\2\2\2\u0783\u0784\3\2\2\2\u0784\u0785\5d\63\2\u0785")
        buf.write(u"\u0786\5f\64\2\u0786\u0793\3\2\2\2\u0787\u078d\7\r\2")
        buf.write(u"\2\u0788\u0789\5r:\2\u0789\u078a\7\"\2\2\u078a\u078b")
        buf.write(u"\7\"\2\2\u078b\u078d\3\2\2\2\u078c\u0787\3\2\2\2\u078c")
        buf.write(u"\u0788\3\2\2\2\u078d\u078e\3\2\2\2\u078e\u0790\5d\63")
        buf.write(u"\2\u078f\u0791\5f\64\2\u0790\u078f\3\2\2\2\u0790\u0791")
        buf.write(u"\3\2\2\2\u0791\u0793\3\2\2\2\u0792\u0782\3\2\2\2\u0792")
        buf.write(u"\u078c\3\2\2\2\u0793c\3\2\2\2\u0794\u0798\5|?\2\u0795")
        buf.write(u"\u0798\5X-\2\u0796\u0798\5Z.\2\u0797\u0794\3\2\2\2\u0797")
        buf.write(u"\u0795\3\2\2\2\u0797\u0796\3\2\2\2\u0798e\3\2\2\2\u0799")
        buf.write(u"\u079b\7\22\2\2\u079a\u079c\5T+\2\u079b\u079a\3\2\2\2")
        buf.write(u"\u079b\u079c\3\2\2\2\u079c\u079d\3\2\2\2\u079d\u07a4")
        buf.write(u"\7\23\2\2\u079e\u07a0\7\16\2\2\u079f\u07a1\5T+\2\u07a0")
        buf.write(u"\u079f\3\2\2\2\u07a0\u07a1\3\2\2\2\u07a1\u07a2\3\2\2")
        buf.write(u"\2\u07a2\u07a4\7\17\2\2\u07a3\u0799\3\2\2\2\u07a3\u079e")
        buf.write(u"\3\2\2\2\u07a4\u07a6\3\2\2\2\u07a5\u07a7\5f\64\2\u07a6")
        buf.write(u"\u07a5\3\2\2\2\u07a6\u07a7\3\2\2\2\u07a7\u07ae\3\2\2")
        buf.write(u"\2\u07a8\u07a9\7\r\2\2\u07a9\u07ab\5|?\2\u07aa\u07ac")
        buf.write(u"\5f\64\2\u07ab\u07aa\3\2\2\2\u07ab\u07ac\3\2\2\2\u07ac")
        buf.write(u"\u07ae\3\2\2\2\u07ad\u07a3\3\2\2\2\u07ad\u07a8\3\2\2")
        buf.write(u"\2\u07aeg\3\2\2\2\u07af\u07b0\5|?\2\u07b0\u07b1\7\"\2")
        buf.write(u"\2\u07b1\u07b3\3\2\2\2\u07b2\u07af\3\2\2\2\u07b2\u07b3")
        buf.write(u"\3\2\2\2\u07b3\u07b5\3\2\2\2\u07b4\u07b6\5j\66\2\u07b5")
        buf.write(u"\u07b4\3\2\2\2\u07b6\u07b7\3\2\2\2\u07b7\u07b8\3\2\2")
        buf.write(u"\2\u07b7\u07b5\3\2\2\2\u07b8i\3\2\2\2\u07b9\u07d3\5|")
        buf.write(u"?\2\u07ba\u07d3\7\4\2\2\u07bb\u07d3\7\24\2\2\u07bc\u07d3")
        buf.write(u"\7\6\2\2\u07bd\u07d3\7\7\2\2\u07be\u07d3\7\b\2\2\u07bf")
        buf.write(u"\u07d3\7\n\2\2\u07c0\u07d3\7\13\2\2\u07c1\u07d3\7\r\2")
        buf.write(u"\2\u07c2\u07d3\7\16\2\2\u07c3\u07d3\7\17\2\2\u07c4\u07d3")
        buf.write(u"\7\20\2\2\u07c5\u07d3\7\21\2\2\u07c6\u07d3\7\22\2\2\u07c7")
        buf.write(u"\u07d3\7\23\2\2\u07c8\u07d3\7\27\2\2\u07c9\u07d3\7\30")
        buf.write(u"\2\2\u07ca\u07d3\7\31\2\2\u07cb\u07d3\7\32\2\2\u07cc")
        buf.write(u"\u07d3\7\35\2\2\u07cd\u07d3\7\36\2\2\u07ce\u07d3\7\37")
        buf.write(u"\2\2\u07cf\u07d3\7 \2\2\u07d0\u07d3\7!\2\2\u07d1\u07d3")
        buf.write(u"\7\3\2\2\u07d2\u07b9\3\2\2\2\u07d2\u07ba\3\2\2\2\u07d2")
        buf.write(u"\u07bb\3\2\2\2\u07d2\u07bc\3\2\2\2\u07d2\u07bd\3\2\2")
        buf.write(u"\2\u07d2\u07be\3\2\2\2\u07d2\u07bf\3\2\2\2\u07d2\u07c0")
        buf.write(u"\3\2\2\2\u07d2\u07c1\3\2\2\2\u07d2\u07c2\3\2\2\2\u07d2")
        buf.write(u"\u07c3\3\2\2\2\u07d2\u07c4\3\2\2\2\u07d2\u07c5\3\2\2")
        buf.write(u"\2\u07d2\u07c6\3\2\2\2\u07d2\u07c7\3\2\2\2\u07d2\u07c8")
        buf.write(u"\3\2\2\2\u07d2\u07c9\3\2\2\2\u07d2\u07ca\3\2\2\2\u07d2")
        buf.write(u"\u07cb\3\2\2\2\u07d2\u07cc\3\2\2\2\u07d2\u07cd\3\2\2")
        buf.write(u"\2\u07d2\u07ce\3\2\2\2\u07d2\u07cf\3\2\2\2\u07d2\u07d0")
        buf.write(u"\3\2\2\2\u07d2\u07d1\3\2\2\2\u07d3k\3\2\2\2\u07d4\u07d7")
        buf.write(u"\5\\/\2\u07d5\u07d7\5h\65\2\u07d6\u07d4\3\2\2\2\u07d6")
        buf.write(u"\u07d5\3\2\2\2\u07d7m\3\2\2\2\u07d8\u07da\7!\2\2\u07d9")
        buf.write(u"\u07d8\3\2\2\2\u07d9\u07da\3\2\2\2\u07da\u07db\3\2\2")
        buf.write(u"\2\u07db\u0821\7\4\2\2\u07dc\u07dd\7\r\2\2\u07dd\u07de")
        buf.write(u"\t$\2\2\u07de\u07e1\7\r\2\2\u07df\u07e1\7\u00da\2\2\u07e0")
        buf.write(u"\u07dc\3\2\2\2\u07e0\u07df\3\2\2\2\u07e1\u0821\3\2\2")
        buf.write(u"\2\u07e2\u0802\7\20\2\2\u07e3\u07e4\7\f\2\2\u07e4\u0803")
        buf.write(u"\7\f\2\2\u07e5\u0803\7\"\2\2\u07e6\u07f1\7\37\2\2\u07e7")
        buf.write(u"\u07e8\7\4\2\2\u07e8\u07e9\7\13\2\2\u07e9\u07ea\7\4\2")
        buf.write(u"\2\u07ea\u07eb\7\13\2\2\u07eb\u07f2\7\4\2\2\u07ec\u07ed")
        buf.write(u"\7\4\2\2\u07ed\u07ee\7\f\2\2\u07ee\u07ef\7\4\2\2\u07ef")
        buf.write(u"\u07f0\7\f\2\2\u07f0\u07f2\7\4\2\2\u07f1\u07e7\3\2\2")
        buf.write(u"\2\u07f1\u07ec\3\2\2\2\u07f2\u0800\3\2\2\2\u07f3\u07f5")
        buf.write(u"\7 \2\2\u07f4\u07f3\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5")
        buf.write(u"\u07f6\3\2\2\2\u07f6\u07fd\7\4\2\2\u07f7\u07f8\7\"\2")
        buf.write(u"\2\u07f8\u07fb\7\4\2\2\u07f9\u07fa\7\"\2\2\u07fa\u07fc")
        buf.write(u"\7\4\2\2\u07fb\u07f9\3\2\2\2\u07fb\u07fc\3\2\2\2\u07fc")
        buf.write(u"\u07fe\3\2\2\2\u07fd\u07f7\3\2\2\2\u07fd\u07fe\3\2\2")
        buf.write(u"\2\u07fe\u07ff\3\2\2\2\u07ff\u0801\5|?\2\u0800\u07f4")
        buf.write(u"\3\2\2\2\u0800\u0801\3\2\2\2\u0801\u0803\3\2\2\2\u0802")
        buf.write(u"\u07e3\3\2\2\2\u0802\u07e5\3\2\2\2\u0802\u07e6\3\2\2")
        buf.write(u"\2\u0802\u0803\3\2\2\2\u0803\u0804\3\2\2\2\u0804\u0821")
        buf.write(u"\7\21\2\2\u0805\u0809\7%\2\2\u0806\u0808\n%\2\2\u0807")
        buf.write(u"\u0806\3\2\2\2\u0808\u080b\3\2\2\2\u0809\u0807\3\2\2")
        buf.write(u"\2\u0809\u080a\3\2\2\2\u080a\u080c\3\2\2\2\u080b\u0809")
        buf.write(u"\3\2\2\2\u080c\u081e\7%\2\2\u080d\u0811\7$\2\2\u080e")
        buf.write(u"\u0810\n&\2\2\u080f\u080e\3\2\2\2\u0810\u0813\3\2\2\2")
        buf.write(u"\u0811\u080f\3\2\2\2\u0811\u0812\3\2\2\2\u0812\u0814")
        buf.write(u"\3\2\2\2\u0813\u0811\3\2\2\2\u0814\u081e\7$\2\2\u0815")
        buf.write(u"\u0819\7\16\2\2\u0816\u0818\n\'\2\2\u0817\u0816\3\2\2")
        buf.write(u"\2\u0818\u081b\3\2\2\2\u0819\u0817\3\2\2\2\u0819\u081a")
        buf.write(u"\3\2\2\2\u081a\u081c\3\2\2\2\u081b\u0819\3\2\2\2\u081c")
        buf.write(u"\u081e\7\17\2\2\u081d\u0805\3\2\2\2\u081d\u080d\3\2\2")
        buf.write(u"\2\u081d\u0815\3\2\2\2\u081e\u0821\3\2\2\2\u081f\u0821")
        buf.write(u"\7\5\2\2\u0820\u07d9\3\2\2\2\u0820\u07e0\3\2\2\2\u0820")
        buf.write(u"\u07e2\3\2\2\2\u0820\u081d\3\2\2\2\u0820\u081f\3\2\2")
        buf.write(u"\2\u0821o\3\2\2\2\u0822\u0824\7\r\2\2\u0823\u0822\3\2")
        buf.write(u"\2\2\u0823\u0824\3\2\2\2\u0824\u0825\3\2\2\2\u0825\u082a")
        buf.write(u"\5|?\2\u0826\u0827\7\r\2\2\u0827\u0829\5|?\2\u0828\u0826")
        buf.write(u"\3\2\2\2\u0829\u082c\3\2\2\2\u082a\u0828\3\2\2\2\u082a")
        buf.write(u"\u082b\3\2\2\2\u082bq\3\2\2\2\u082c\u082a\3\2\2\2\u082d")
        buf.write(u"\u082f\7\r\2\2\u082e\u082d\3\2\2\2\u082e\u082f\3\2\2")
        buf.write(u"\2\u082f\u0830\3\2\2\2\u0830\u0832\5|?\2\u0831\u0833")
        buf.write(u"\5f\64\2\u0832\u0831\3\2\2\2\u0832\u0833\3\2\2\2\u0833")
        buf.write(u"s\3\2\2\2\u0834\u0835\5\\/\2\u0835\u0836\7 \2\2\u0836")
        buf.write(u"\u0837\5\\/\2\u0837u\3\2\2\2\u0838\u083b\7\22\2\2\u0839")
        buf.write(u"\u083c\5\\/\2\u083a\u083c\5t;\2\u083b\u0839\3\2\2\2\u083b")
        buf.write(u"\u083a\3\2\2\2\u083c\u083d\3\2\2\2\u083d\u083e\7\23\2")
        buf.write(u"\2\u083e\u0847\3\2\2\2\u083f\u0842\7\16\2\2\u0840\u0843")
        buf.write(u"\5\\/\2\u0841\u0843\5t;\2\u0842\u0840\3\2\2\2\u0842\u0841")
        buf.write(u"\3\2\2\2\u0843\u0844\3\2\2\2\u0844\u0845\7\17\2\2\u0845")
        buf.write(u"\u0847\3\2\2\2\u0846\u0838\3\2\2\2\u0846\u083f\3\2\2")
        buf.write(u"\2\u0847w\3\2\2\2\u0848\u0849\5r:\2\u0849y\3\2\2\2\u084a")
        buf.write(u"\u0851\7t\2\2\u084b\u084c\7\u0091\2\2\u084c\u0851\5\\")
        buf.write(u"/\2\u084d\u084e\7y\2\2\u084e\u0851\5\\/\2\u084f\u0851")
        buf.write(u"\7\u0092\2\2\u0850\u084a\3\2\2\2\u0850\u084b\3\2\2\2")
        buf.write(u"\u0850\u084d\3\2\2\2\u0850\u084f\3\2\2\2\u0851{\3\2\2")
        buf.write(u"\2\u0852\u0853\t(\2\2\u0853}\3\2\2\2\u0155\u0084\u008c")
        buf.write(u"\u0094\u00a0\u00b4\u00bd\u00c1\u00c3\u00c7\u00c9\u00d2")
        buf.write(u"\u00d7\u00dc\u00e0\u00e7\u00ed\u00f4\u00fc\u0104\u010c")
        buf.write(u"\u0110\u0117\u011b\u0121\u0124\u0127\u0132\u0135\u013a")
        buf.write(u"\u0143\u014f\u015a\u015f\u0161\u0176\u017c\u0180\u0185")
        buf.write(u"\u0192\u019a\u019e\u01aa\u01ae\u01b3\u01be\u01cf\u01d2")
        buf.write(u"\u01da\u01e0\u01e2\u01e4\u01ea\u01ef\u01f6\u01f8\u0200")
        buf.write(u"\u0202\u0205\u020f\u0216\u021a\u021f\u0226\u022c\u0230")
        buf.write(u"\u0233\u0236\u0241\u0249\u024b\u0251\u0255\u0258\u025d")
        buf.write(u"\u0267\u026f\u0271\u0277\u027a\u027d\u0283\u028a\u028c")
        buf.write(u"\u0291\u0297\u0299\u02a0\u02a4\u02a9\u02af\u02b1\u02b6")
        buf.write(u"\u02bb\u02be\u02c7\u02cc\u02cf\u02d1\u02d4\u02e1\u02e7")
        buf.write(u"\u02ed\u02ef\u02f9\u02fb\u02fd\u02ff\u0303\u0307\u030d")
        buf.write(u"\u0311\u0313\u0317\u031c\u031e\u0323\u0329\u032c\u032f")
        buf.write(u"\u0334\u033f\u0345\u0349\u034d\u034f\u0352\u0355\u035b")
        buf.write(u"\u035f\u0365\u036b\u0389\u038b\u0392\u0398\u039d\u039f")
        buf.write(u"\u03a4\u03a8\u03ae\u03b6\u03be\u03ce\u03d0\u03d2\u03d8")
        buf.write(u"\u03dc\u03e0\u03e4\u03e9\u03ee\u03f0\u03f7\u0400\u0402")
        buf.write(u"\u0409\u0413\u0415\u041e\u0421\u0424\u0427\u042d\u042f")
        buf.write(u"\u0437\u0439\u0445\u044e\u0453\u045a\u045e\u0460\u0467")
        buf.write(u"\u0469\u0475\u0479\u047d\u0485\u0490\u0496\u049d\u04a1")
        buf.write(u"\u04a5\u04aa\u04b3\u04b5\u04b9\u04c3\u04c6\u04c9\u04cb")
        buf.write(u"\u04cf\u04de\u04e3\u04ea\u04ec\u04f3\u04f6\u04fa\u0502")
        buf.write(u"\u0506\u0508\u050d\u0514\u051a\u0520\u0523\u0526\u0529")
        buf.write(u"\u052f\u0533\u0538\u053b\u053e\u0545\u054a\u054d\u0551")
        buf.write(u"\u0555\u0557\u0570\u0576\u057c\u0582\u0585\u0587\u058c")
        buf.write(u"\u0593\u0596\u059b\u05a0\u05a7\u05ab\u05b3\u05b5\u05bf")
        buf.write(u"\u05c4\u05ca\u05e5\u05e7\u05f3\u05f5\u0603\u0608\u0610")
        buf.write(u"\u0615\u061d\u0622\u0625\u062a\u0632\u0634\u063d\u0646")
        buf.write(u"\u0648\u064a\u0651\u0655\u0658\u0663\u0665\u066a\u0670")
        buf.write(u"\u067e\u0680\u0687\u068b\u068e\u0693\u0699\u06a4\u06ab")
        buf.write(u"\u06b0\u06b4\u06b7\u06b9\u06be\u06c7\u06c9\u06cb\u06d4")
        buf.write(u"\u06d8\u06df\u06e8\u06eb\u06f1\u06fa\u06fe\u0709\u0710")
        buf.write(u"\u0712\u071a\u071e\u0724\u072a\u072c\u0733\u0751\u0755")
        buf.write(u"\u0757\u075d\u0774\u0776\u0782\u078c\u0790\u0792\u0797")
        buf.write(u"\u079b\u07a0\u07a3\u07a6\u07ab\u07ad\u07b2\u07b7\u07d2")
        buf.write(u"\u07d6\u07d9\u07e0\u07f1\u07f4\u07fb\u07fd\u0800\u0802")
        buf.write(u"\u0809\u0811\u0819\u081d\u0820\u0823\u082a\u082e\u0832")
        buf.write(u"\u083b\u0842\u0846\u0850")
        return buf.getvalue()


class VisualFoxpro9Parser ( Parser ):

    grammarFileName = "VisualFoxpro9.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"'_'", u"<INVALID>", u"<INVALID>", u"';'", 
                     u"'&'", u"'@'", u"'*'", u"'+'", u"'-'", u"'/'", u"'.'", 
                     u"'['", u"']'", u"'{'", u"'}'", u"'('", u"')'", u"'\\'", 
                     u"'<'", u"'>'", u"'!'", u"'#'", u"'=='", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"'%'", u"'='", u"'^'", 
                     u"','", u"'$'", u"':'", u"'?'", u"'\"'", u"'''", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"'\n'" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"NUMBER_LITERAL", u"BLOB_LITERAL", 
                      u"SEMICOLON", u"AMPERSAND", u"COMMERCIALAT", u"ASTERISK", 
                      u"PLUS_SIGN", u"MINUS_SIGN", u"FORWARDSLASH", u"PERIOD", 
                      u"LEFTBRACKET", u"RIGHTBRACKET", u"LEFTBRACE", u"RIGHTBRACE", 
                      u"LEFTPAREN", u"RIGHTPAREN", u"BACKSLASH", u"LESSTHAN", 
                      u"GREATERTHAN", u"EXCLAMATION", u"HASH", u"DOUBLEEQUALS", 
                      u"NOTEQUALS", u"GTEQ", u"LTEQ", u"MODULO", u"EQUALS", 
                      u"CARAT", u"COMMA", u"DOLLAR", u"COLON", u"QUESTION", 
                      u"DOUBLEQUOTE", u"SINGLEQUOTE", u"COMMENT", u"LINECONT", 
                      u"NOTE", u"ASSERT", u"ASSERTS", u"TO", u"DO", u"IN", 
                      u"AS", u"IF", u"ELIF", u"ELSE", u"ENDIF", u"ON", u"OFF", 
                      u"ERROR", u"WITH", u"STORE", u"EXTERNAL", u"ARRAY", 
                      u"DELETE", u"RECALL", u"FILE", u"SET", u"RELEASE", 
                      u"RECYCLE", u"CREATE", u"TABLE", u"TABLEPROMPT", u"DBF", 
                      u"NAME", u"FREE", u"SELECT", u"USE", u"READ", u"EVENTS", 
                      u"SHUTDOWN", u"CLEAR", u"PROCEDURE", u"ENDPROC", u"DEFINE", 
                      u"CLASS", u"ENDDEFINE", u"LOCATE", u"CONTINUE", u"FOR", 
                      u"ENDFOR", u"WHILE", u"NOOPTIMIZE", u"SAFETY", u"STATUS", 
                      u"BAR", u"MEMOWIDTH", u"CURSOR", u"REFRESH", u"BELL", 
                      u"CENTURY", u"COMPATIBLE", u"DATE", u"ADD", u"OBJECT", 
                      u"REPLACE", u"LIBRARY", u"SHARED", u"WAIT", u"WINDOW", 
                      u"NOWAIT", u"NOCLEAR", u"NOTIFY", u"ENDDO", u"DECLARE", 
                      u"ERASE", u"SYSMENU", u"CLOCK", u"RETURN", u"PARAMETER", 
                      u"ALTERNATE", u"EXACT", u"ALL", u"COUNT", u"GOTO", 
                      u"TOP", u"BOTTOM", u"RECORD", u"CLOSE", u"APPEND", 
                      u"BLANK", u"NOMENU", u"CASE", u"ENDCASE", u"OTHERWISE", 
                      u"FROM", u"REPORT", u"FORM", u"NOEJECT", u"PRINTER", 
                      u"PROMPT", u"NOPROMPT", u"DB4", u"FOXPLUS", u"NOCONSOLE", 
                      u"COPY", u"STRUCTURE", u"DELETED", u"SUM", u"DISTINCT", 
                      u"INTO", u"NEXT", u"REST", u"SKIPKW", u"EXCLUSIVE", 
                      u"NEAR", u"MKDIR", u"RMDIR", u"KEY", u"KEYBOARD", 
                      u"LABEL", u"PLAIN", u"MENU", u"AT", u"LINE", u"SCREEN", 
                      u"NOMARGIN", u"PAD", u"OF", u"COLOR", u"SCHEME", u"BEFORE", 
                      u"AFTER", u"NEGOTIATE", u"FONT", u"STYLE", u"MARK", 
                      u"MESSAGE", u"ACTIVATE", u"POPUP", u"EXTENDED", u"SHADOW", 
                      u"MARGIN", u"RELATIVE", u"SELECTION", u"DEACTIVATE", 
                      u"SAME", u"SHOW", u"HIDE", u"NOSHOW", u"STEP", u"THEN", 
                      u"UNDEFINE", u"IFDEF", u"PUSH", u"POP", u"TIMEOUT", 
                      u"ENDWITH", u"TYPEAHEAD", u"ALIAS", u"ORDER", u"SEEK", 
                      u"WHERE", u"FILTER", u"RENAME", u"INCLUDE", u"CLASSLIB", 
                      u"BY", u"UNIQUE", u"INDEX", u"TAG", u"COMPACT", u"ASCENDING", 
                      u"DESCENDING", u"CANDIDATE", u"ADDITIVE", u"DIMENSION", 
                      u"NOT", u"AND", u"OTHERAND", u"OR", u"OTHEROR", u"SCAN", 
                      u"ENDSCAN", u"NULL", u"BOOLEANCHAR", u"DLLS", u"MACROS", 
                      u"NUMBER", u"ZAP", u"ROLLOVER", u"DEFAULT", u"SAVE", 
                      u"NOSAVE", u"DATABASE", u"TABLES", u"INDEXES", u"PACK", 
                      u"REINDEX", u"MEMO", u"PROGRAM", u"SCOPE", u"THROW", 
                      u"EACH", u"CAST", u"RUN", u"MULTILOCKS", u"TRY", u"CATCH", 
                      u"FINALLY", u"ENDTRY", u"BROWSE", u"INSERT", u"VALUES", 
                      u"MEMVAR", u"TYPE", u"CHDIR", u"SCATTER", u"GATHER", 
                      u"EXCEPT", u"LIKE", u"FIELDS", u"ALTER", u"COLUMN", 
                      u"DROP", u"DEBUG", u"GETS", u"NODEBUG", u"DEBUGOUT", 
                      u"MEMORY", u"MENUS", u"RESOURCES", u"LIST", u"HELP", 
                      u"SAY", u"COLLECTION", u"SYSTEM", u"TALK", u"PROGRAMCONTROL", 
                      u"NOUPDATE", u"RELATION", u"MODIFY", u"COMMAND", u"UNLOCK", 
                      u"COMPILE", u"SORT", u"UPDATE", u"RESTORE", u"ZOOM", 
                      u"MIN", u"MAX", u"NORM", u"SIZE", u"DOEVENTS", u"FORCE", 
                      u"JOIN", u"TEXT", u"ENDTEXT", u"LINKED", u"TEXTMERGE", 
                      u"FLAGS", u"PRETEXT", u"ENCRYPT", u"MASTER", u"TITLE", 
                      u"ICON", u"FILL", u"ID", u"NL", u"WS", u"UNMATCHED" ]

    RULE_preprocessorCode = 0
    RULE_preprocessorLines = 1
    RULE_preprocessorLine = 2
    RULE_prg = 3
    RULE_lineComment = 4
    RULE_line = 5
    RULE_lineEnd = 6
    RULE_lines = 7
    RULE_nongreedyLines = 8
    RULE_classDefStart = 9
    RULE_classDef = 10
    RULE_classProperty = 11
    RULE_parameter = 12
    RULE_parameters = 13
    RULE_funcDefStart = 14
    RULE_funcDef = 15
    RULE_ifStart = 16
    RULE_ifStmt = 17
    RULE_forStart = 18
    RULE_forEnd = 19
    RULE_forStmt = 20
    RULE_singleCase = 21
    RULE_otherwise = 22
    RULE_caseStmt = 23
    RULE_whileStart = 24
    RULE_whileStmt = 25
    RULE_withStmt = 26
    RULE_scanStmt = 27
    RULE_tryStmt = 28
    RULE_controlStmt = 29
    RULE_cmd = 30
    RULE_queryCondition = 31
    RULE_textChunk = 32
    RULE_dllArgs = 33
    RULE_dllArg = 34
    RULE_tableField = 35
    RULE_setCmd = 36
    RULE_declarationItem = 37
    RULE_asType = 38
    RULE_asTypeOf = 39
    RULE_argsItem = 40
    RULE_args = 41
    RULE_specialArgs = 42
    RULE_reference = 43
    RULE_argReplace = 44
    RULE_expr = 45
    RULE_andOp = 46
    RULE_orOp = 47
    RULE_complexId = 48
    RULE_atom = 49
    RULE_trailer = 50
    RULE_pathname = 51
    RULE_pathElement = 52
    RULE_specialExpr = 53
    RULE_constant = 54
    RULE_idAttr2 = 55
    RULE_idAttr = 56
    RULE_twoExpr = 57
    RULE_arrayIndex = 58
    RULE_datatype = 59
    RULE_scopeClause = 60
    RULE_identifier = 61

    ruleNames =  [ u"preprocessorCode", u"preprocessorLines", u"preprocessorLine", 
                   u"prg", u"lineComment", u"line", u"lineEnd", u"lines", 
                   u"nongreedyLines", u"classDefStart", u"classDef", u"classProperty", 
                   u"parameter", u"parameters", u"funcDefStart", u"funcDef", 
                   u"ifStart", u"ifStmt", u"forStart", u"forEnd", u"forStmt", 
                   u"singleCase", u"otherwise", u"caseStmt", u"whileStart", 
                   u"whileStmt", u"withStmt", u"scanStmt", u"tryStmt", u"controlStmt", 
                   u"cmd", u"queryCondition", u"textChunk", u"dllArgs", 
                   u"dllArg", u"tableField", u"setCmd", u"declarationItem", 
                   u"asType", u"asTypeOf", u"argsItem", u"args", u"specialArgs", 
                   u"reference", u"argReplace", u"expr", u"andOp", u"orOp", 
                   u"complexId", u"atom", u"trailer", u"pathname", u"pathElement", 
                   u"specialExpr", u"constant", u"idAttr2", u"idAttr", u"twoExpr", 
                   u"arrayIndex", u"datatype", u"scopeClause", u"identifier" ]

    EOF = Token.EOF
    T__0=1
    NUMBER_LITERAL=2
    BLOB_LITERAL=3
    SEMICOLON=4
    AMPERSAND=5
    COMMERCIALAT=6
    ASTERISK=7
    PLUS_SIGN=8
    MINUS_SIGN=9
    FORWARDSLASH=10
    PERIOD=11
    LEFTBRACKET=12
    RIGHTBRACKET=13
    LEFTBRACE=14
    RIGHTBRACE=15
    LEFTPAREN=16
    RIGHTPAREN=17
    BACKSLASH=18
    LESSTHAN=19
    GREATERTHAN=20
    EXCLAMATION=21
    HASH=22
    DOUBLEEQUALS=23
    NOTEQUALS=24
    GTEQ=25
    LTEQ=26
    MODULO=27
    EQUALS=28
    CARAT=29
    COMMA=30
    DOLLAR=31
    COLON=32
    QUESTION=33
    DOUBLEQUOTE=34
    SINGLEQUOTE=35
    COMMENT=36
    LINECONT=37
    NOTE=38
    ASSERT=39
    ASSERTS=40
    TO=41
    DO=42
    IN=43
    AS=44
    IF=45
    ELIF=46
    ELSE=47
    ENDIF=48
    ON=49
    OFF=50
    ERROR=51
    WITH=52
    STORE=53
    EXTERNAL=54
    ARRAY=55
    DELETE=56
    RECALL=57
    FILE=58
    SET=59
    RELEASE=60
    RECYCLE=61
    CREATE=62
    TABLE=63
    TABLEPROMPT=64
    DBF=65
    NAME=66
    FREE=67
    SELECT=68
    USE=69
    READ=70
    EVENTS=71
    SHUTDOWN=72
    CLEAR=73
    PROCEDURE=74
    ENDPROC=75
    DEFINE=76
    CLASS=77
    ENDDEFINE=78
    LOCATE=79
    CONTINUE=80
    FOR=81
    ENDFOR=82
    WHILE=83
    NOOPTIMIZE=84
    SAFETY=85
    STATUS=86
    BAR=87
    MEMOWIDTH=88
    CURSOR=89
    REFRESH=90
    BELL=91
    CENTURY=92
    COMPATIBLE=93
    DATE=94
    ADD=95
    OBJECT=96
    REPLACE=97
    LIBRARY=98
    SHARED=99
    WAIT=100
    WINDOW=101
    NOWAIT=102
    NOCLEAR=103
    NOTIFY=104
    ENDDO=105
    DECLARE=106
    ERASE=107
    SYSMENU=108
    CLOCK=109
    RETURN=110
    PARAMETER=111
    ALTERNATE=112
    EXACT=113
    ALL=114
    COUNT=115
    GOTO=116
    TOP=117
    BOTTOM=118
    RECORD=119
    CLOSE=120
    APPEND=121
    BLANK=122
    NOMENU=123
    CASE=124
    ENDCASE=125
    OTHERWISE=126
    FROM=127
    REPORT=128
    FORM=129
    NOEJECT=130
    PRINTER=131
    PROMPT=132
    NOPROMPT=133
    DB4=134
    FOXPLUS=135
    NOCONSOLE=136
    COPY=137
    STRUCTURE=138
    DELETED=139
    SUM=140
    DISTINCT=141
    INTO=142
    NEXT=143
    REST=144
    SKIPKW=145
    EXCLUSIVE=146
    NEAR=147
    MKDIR=148
    RMDIR=149
    KEY=150
    KEYBOARD=151
    LABEL=152
    PLAIN=153
    MENU=154
    AT=155
    LINE=156
    SCREEN=157
    NOMARGIN=158
    PAD=159
    OF=160
    COLOR=161
    SCHEME=162
    BEFORE=163
    AFTER=164
    NEGOTIATE=165
    FONT=166
    STYLE=167
    MARK=168
    MESSAGE=169
    ACTIVATE=170
    POPUP=171
    EXTENDED=172
    SHADOW=173
    MARGIN=174
    RELATIVE=175
    SELECTION=176
    DEACTIVATE=177
    SAME=178
    SHOW=179
    HIDE=180
    NOSHOW=181
    STEP=182
    THEN=183
    UNDEFINE=184
    IFDEF=185
    PUSH=186
    POP=187
    TIMEOUT=188
    ENDWITH=189
    TYPEAHEAD=190
    ALIAS=191
    ORDER=192
    SEEK=193
    WHERE=194
    FILTER=195
    RENAME=196
    INCLUDE=197
    CLASSLIB=198
    BY=199
    UNIQUE=200
    INDEX=201
    TAG=202
    COMPACT=203
    ASCENDING=204
    DESCENDING=205
    CANDIDATE=206
    ADDITIVE=207
    DIMENSION=208
    NOT=209
    AND=210
    OTHERAND=211
    OR=212
    OTHEROR=213
    SCAN=214
    ENDSCAN=215
    NULL=216
    BOOLEANCHAR=217
    DLLS=218
    MACROS=219
    NUMBER=220
    ZAP=221
    ROLLOVER=222
    DEFAULT=223
    SAVE=224
    NOSAVE=225
    DATABASE=226
    TABLES=227
    INDEXES=228
    PACK=229
    REINDEX=230
    MEMO=231
    PROGRAM=232
    SCOPE=233
    THROW=234
    EACH=235
    CAST=236
    RUN=237
    MULTILOCKS=238
    TRY=239
    CATCH=240
    FINALLY=241
    ENDTRY=242
    BROWSE=243
    INSERT=244
    VALUES=245
    MEMVAR=246
    TYPE=247
    CHDIR=248
    SCATTER=249
    GATHER=250
    EXCEPT=251
    LIKE=252
    FIELDS=253
    ALTER=254
    COLUMN=255
    DROP=256
    DEBUG=257
    GETS=258
    NODEBUG=259
    DEBUGOUT=260
    MEMORY=261
    MENUS=262
    RESOURCES=263
    LIST=264
    HELP=265
    SAY=266
    COLLECTION=267
    SYSTEM=268
    TALK=269
    PROGRAMCONTROL=270
    NOUPDATE=271
    RELATION=272
    MODIFY=273
    COMMAND=274
    UNLOCK=275
    COMPILE=276
    SORT=277
    UPDATE=278
    RESTORE=279
    ZOOM=280
    MIN=281
    MAX=282
    NORM=283
    SIZE=284
    DOEVENTS=285
    FORCE=286
    JOIN=287
    TEXT=288
    ENDTEXT=289
    LINKED=290
    TEXTMERGE=291
    FLAGS=292
    PRETEXT=293
    ENCRYPT=294
    MASTER=295
    TITLE=296
    ICON=297
    FILL=298
    ID=299
    NL=300
    WS=301
    UNMATCHED=302

    def __init__(self, input, output=sys.stdout):
        super(VisualFoxpro9Parser, self).__init__(input, output=output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class PreprocessorCodeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PreprocessorCodeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def preprocessorLines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.PreprocessorLinesContext,0)


        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_preprocessorCode

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorCode"):
                return visitor.visitPreprocessorCode(self)
            else:
                return visitor.visitChildren(self)




    def preprocessorCode(self):

        localctx = VisualFoxpro9Parser.PreprocessorCodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_preprocessorCode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 124
            self.preprocessorLines()
            self.state = 125
            self.match(VisualFoxpro9Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PreprocessorLinesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PreprocessorLinesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def preprocessorLine(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.PreprocessorLineContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.PreprocessorLineContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_preprocessorLines

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorLines"):
                return visitor.visitPreprocessorLines(self)
            else:
                return visitor.visitChildren(self)




    def preprocessorLines(self):

        localctx = VisualFoxpro9Parser.PreprocessorLinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_preprocessorLines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 130
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 127
                    self.preprocessorLine() 
                self.state = 132
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PreprocessorLineContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PreprocessorLineContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_preprocessorLine

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.PreprocessorLineContext, self).copyFrom(ctx)



    class NonpreprocessorLineContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.NonpreprocessorLineContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)
        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitNonpreprocessorLine"):
                return visitor.visitNonpreprocessorLine(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorUndefineContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorUndefineContext, self).__init__(parser)
            self.copyFrom(ctx)

        def UNDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.UNDEFINE, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorUndefine"):
                return visitor.visitPreprocessorUndefine(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorIfContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorIfContext, self).__init__(parser)
            self.ifBody = None # PreprocessorLinesContext
            self.elseBody = None # PreprocessorLinesContext
            self.copyFrom(ctx)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)
        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)
        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def preprocessorLines(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.PreprocessorLinesContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.PreprocessorLinesContext,i)

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def IFDEF(self):
            return self.getToken(VisualFoxpro9Parser.IFDEF, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorIf"):
                return visitor.visitPreprocessorIf(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorJunkContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorJunkContext, self).__init__(parser)
            self.copyFrom(ctx)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)
        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)
        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)
        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def INCLUDE(self):
            return self.getToken(VisualFoxpro9Parser.INCLUDE, 0)
        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorJunk"):
                return visitor.visitPreprocessorJunk(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorDefineContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorDefineContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorDefine"):
                return visitor.visitPreprocessorDefine(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorIncludeContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorIncludeContext, self).__init__(parser)
            self.copyFrom(ctx)

        def INCLUDE(self):
            return self.getToken(VisualFoxpro9Parser.INCLUDE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorInclude"):
                return visitor.visitPreprocessorInclude(self)
            else:
                return visitor.visitChildren(self)



    def preprocessorLine(self):

        localctx = VisualFoxpro9Parser.PreprocessorLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_preprocessorLine)
        self._la = 0 # Token type
        try:
            self.state = 193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.PreprocessorIfContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 133
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 138
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.IF]:
                    self.state = 134
                    self.match(VisualFoxpro9Parser.IF)
                    self.state = 135
                    self.expr(0)
                    pass
                elif token in [VisualFoxpro9Parser.IFDEF]:
                    self.state = 136
                    self.match(VisualFoxpro9Parser.IFDEF)
                    self.state = 137
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 140
                self.match(VisualFoxpro9Parser.NL)
                self.state = 141
                localctx.ifBody = self.preprocessorLines()
                self.state = 146
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 142
                    self.match(VisualFoxpro9Parser.HASH)
                    self.state = 143
                    self.match(VisualFoxpro9Parser.ELSE)
                    self.state = 144
                    self.match(VisualFoxpro9Parser.NL)
                    self.state = 145
                    localctx.elseBody = self.preprocessorLines()


                self.state = 148
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 149
                self.match(VisualFoxpro9Parser.ENDIF)
                self.state = 150
                self.lineEnd()
                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.PreprocessorDefineContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 152
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 153
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 154
                self.identifier()
                self.state = 158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.SHOW - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.NODEBUG - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.LIST - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.MODIFY - 256)) | (1 << (VisualFoxpro9Parser.COMMAND - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.COMPILE - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.RESTORE - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.MIN - 256)) | (1 << (VisualFoxpro9Parser.MAX - 256)) | (1 << (VisualFoxpro9Parser.NORM - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 256)) | (1 << (VisualFoxpro9Parser.FORCE - 256)) | (1 << (VisualFoxpro9Parser.JOIN - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 256)) | (1 << (VisualFoxpro9Parser.LINKED - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.FLAGS - 256)) | (1 << (VisualFoxpro9Parser.PRETEXT - 256)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 256)) | (1 << (VisualFoxpro9Parser.MASTER - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.ICON - 256)) | (1 << (VisualFoxpro9Parser.FILL - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 155
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 160
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 161
                self.lineEnd()
                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.PreprocessorUndefineContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 163
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 164
                self.match(VisualFoxpro9Parser.UNDEFINE)
                self.state = 165
                self.identifier()
                self.state = 166
                self.lineEnd()
                pass

            elif la_ == 4:
                localctx = VisualFoxpro9Parser.PreprocessorIncludeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 168
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 169
                self.match(VisualFoxpro9Parser.INCLUDE)
                self.state = 170
                self.specialExpr()
                self.state = 171
                self.lineEnd()
                pass

            elif la_ == 5:
                localctx = VisualFoxpro9Parser.PreprocessorJunkContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 173
                self.match(VisualFoxpro9Parser.HASH)

                self.state = 174
                _la = self._input.LA(1)
                if _la <= 0 or ((((_la - 45)) & ~0x3f) == 0 and ((1 << (_la - 45)) & ((1 << (VisualFoxpro9Parser.IF - 45)) | (1 << (VisualFoxpro9Parser.ELSE - 45)) | (1 << (VisualFoxpro9Parser.ENDIF - 45)) | (1 << (VisualFoxpro9Parser.DEFINE - 45)))) != 0) or _la==VisualFoxpro9Parser.INCLUDE or _la==VisualFoxpro9Parser.NL:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.SHOW - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.NODEBUG - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.LIST - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.MODIFY - 256)) | (1 << (VisualFoxpro9Parser.COMMAND - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.COMPILE - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.RESTORE - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.MIN - 256)) | (1 << (VisualFoxpro9Parser.MAX - 256)) | (1 << (VisualFoxpro9Parser.NORM - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 256)) | (1 << (VisualFoxpro9Parser.FORCE - 256)) | (1 << (VisualFoxpro9Parser.JOIN - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 256)) | (1 << (VisualFoxpro9Parser.LINKED - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.FLAGS - 256)) | (1 << (VisualFoxpro9Parser.PRETEXT - 256)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 256)) | (1 << (VisualFoxpro9Parser.MASTER - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.ICON - 256)) | (1 << (VisualFoxpro9Parser.FILL - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 175
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 180
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 181
                self.lineEnd()
                pass

            elif la_ == 6:
                localctx = VisualFoxpro9Parser.NonpreprocessorLineContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 191
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.NL]:
                    self.state = 182
                    self.match(VisualFoxpro9Parser.NL)
                    pass
                elif token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.ASTERISK, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.FORWARDSLASH, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.LESSTHAN, VisualFoxpro9Parser.GREATERTHAN, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.GTEQ, VisualFoxpro9Parser.LTEQ, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.COLON, VisualFoxpro9Parser.QUESTION, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.COMMENT, VisualFoxpro9Parser.LINECONT, VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.ASSERTS, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.TABLEPROMPT, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.SAFETY, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.SHOW, VisualFoxpro9Parser.HIDE, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OTHERAND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.OTHEROR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.MEMO, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.MULTILOCKS, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.CHDIR, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.DEBUG, VisualFoxpro9Parser.GETS, VisualFoxpro9Parser.NODEBUG, VisualFoxpro9Parser.DEBUGOUT, VisualFoxpro9Parser.MEMORY, VisualFoxpro9Parser.MENUS, VisualFoxpro9Parser.RESOURCES, VisualFoxpro9Parser.LIST, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.NOUPDATE, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.MODIFY, VisualFoxpro9Parser.COMMAND, VisualFoxpro9Parser.UNLOCK, VisualFoxpro9Parser.COMPILE, VisualFoxpro9Parser.SORT, VisualFoxpro9Parser.UPDATE, VisualFoxpro9Parser.RESTORE, VisualFoxpro9Parser.ZOOM, VisualFoxpro9Parser.MIN, VisualFoxpro9Parser.MAX, VisualFoxpro9Parser.NORM, VisualFoxpro9Parser.SIZE, VisualFoxpro9Parser.DOEVENTS, VisualFoxpro9Parser.FORCE, VisualFoxpro9Parser.JOIN, VisualFoxpro9Parser.TEXT, VisualFoxpro9Parser.ENDTEXT, VisualFoxpro9Parser.LINKED, VisualFoxpro9Parser.TEXTMERGE, VisualFoxpro9Parser.FLAGS, VisualFoxpro9Parser.PRETEXT, VisualFoxpro9Parser.ENCRYPT, VisualFoxpro9Parser.MASTER, VisualFoxpro9Parser.TITLE, VisualFoxpro9Parser.ICON, VisualFoxpro9Parser.FILL, VisualFoxpro9Parser.ID, VisualFoxpro9Parser.WS, VisualFoxpro9Parser.UNMATCHED]:
                    self.state = 183
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.EOF or _la==VisualFoxpro9Parser.HASH or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 187
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.SHOW - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.NODEBUG - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.LIST - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.MODIFY - 256)) | (1 << (VisualFoxpro9Parser.COMMAND - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.COMPILE - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.RESTORE - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.MIN - 256)) | (1 << (VisualFoxpro9Parser.MAX - 256)) | (1 << (VisualFoxpro9Parser.NORM - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 256)) | (1 << (VisualFoxpro9Parser.FORCE - 256)) | (1 << (VisualFoxpro9Parser.JOIN - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 256)) | (1 << (VisualFoxpro9Parser.LINKED - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.FLAGS - 256)) | (1 << (VisualFoxpro9Parser.PRETEXT - 256)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 256)) | (1 << (VisualFoxpro9Parser.MASTER - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.ICON - 256)) | (1 << (VisualFoxpro9Parser.FILL - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                        self.state = 184
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 189
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 190
                    self.lineEnd()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrgContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PrgContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def classDef(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ClassDefContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ClassDefContext,i)


        def funcDef(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.FuncDefContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDefContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_prg

        def accept(self, visitor):
            if hasattr(visitor, "visitPrg"):
                return visitor.visitPrg(self)
            else:
                return visitor.visitChildren(self)




    def prg(self):

        localctx = VisualFoxpro9Parser.PrgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_prg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.PROCEDURE or _la==VisualFoxpro9Parser.DEFINE or _la==VisualFoxpro9Parser.SCOPE:
                self.state = 197
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.DEFINE]:
                    self.state = 195
                    self.classDef()
                    pass
                elif token in [VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.SCOPE]:
                    self.state = 196
                    self.funcDef()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 201
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 202
            self.match(VisualFoxpro9Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LineCommentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.LineCommentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def NOTE(self):
            return self.getToken(VisualFoxpro9Parser.NOTE, 0)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_lineComment

        def accept(self, visitor):
            if hasattr(visitor, "visitLineComment"):
                return visitor.visitLineComment(self)
            else:
                return visitor.visitChildren(self)




    def lineComment(self):

        localctx = VisualFoxpro9Parser.LineCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_lineComment)
        self._la = 0 # Token type
        try:
            self.state = 213
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ASTERISK, VisualFoxpro9Parser.NOTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 204
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ASTERISK or _la==VisualFoxpro9Parser.NOTE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.SHOW - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.NODEBUG - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.LIST - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.MODIFY - 256)) | (1 << (VisualFoxpro9Parser.COMMAND - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.COMPILE - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.RESTORE - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.MIN - 256)) | (1 << (VisualFoxpro9Parser.MAX - 256)) | (1 << (VisualFoxpro9Parser.NORM - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 256)) | (1 << (VisualFoxpro9Parser.FORCE - 256)) | (1 << (VisualFoxpro9Parser.JOIN - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 256)) | (1 << (VisualFoxpro9Parser.LINKED - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.FLAGS - 256)) | (1 << (VisualFoxpro9Parser.PRETEXT - 256)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 256)) | (1 << (VisualFoxpro9Parser.MASTER - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.ICON - 256)) | (1 << (VisualFoxpro9Parser.FILL - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 205
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 210
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 211
                self.lineEnd()
                pass
            elif token in [VisualFoxpro9Parser.NL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 212
                self.match(VisualFoxpro9Parser.NL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LineContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.LineContext, self).__init__(parent, invokingState)
            self.parser = parser

        def lineComment(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,0)


        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def controlStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ControlStmtContext,0)


        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_line

        def accept(self, visitor):
            if hasattr(visitor, "visitLine"):
                return visitor.visitLine(self)
            else:
                return visitor.visitChildren(self)




    def line(self):

        localctx = VisualFoxpro9Parser.LineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_line)
        try:
            self.state = 222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 215
                self.lineComment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 218
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 216
                    self.controlStmt()
                    pass

                elif la_ == 2:
                    self.state = 217
                    self.cmd()
                    pass


                self.state = 220
                self.lineEnd()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LineEndContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.LineEndContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_lineEnd

        def accept(self, visitor):
            if hasattr(visitor, "visitLineEnd"):
                return visitor.visitLineEnd(self)
            else:
                return visitor.visitChildren(self)




    def lineEnd(self):

        localctx = VisualFoxpro9Parser.LineEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_lineEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            _la = self._input.LA(1)
            if not(_la==VisualFoxpro9Parser.EOF or _la==VisualFoxpro9Parser.NL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.LinesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def line(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_lines

        def accept(self, visitor):
            if hasattr(visitor, "visitLines"):
                return visitor.visitLines(self)
            else:
                return visitor.visitChildren(self)




    def lines(self):

        localctx = VisualFoxpro9Parser.LinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_lines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 226
                    self.line() 
                self.state = 231
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NongreedyLinesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.NongreedyLinesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def line(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_nongreedyLines

        def accept(self, visitor):
            if hasattr(visitor, "visitNongreedyLines"):
                return visitor.visitNongreedyLines(self)
            else:
                return visitor.visitChildren(self)




    def nongreedyLines(self):

        localctx = VisualFoxpro9Parser.NongreedyLinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_nongreedyLines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 232
                    self.line() 
                self.state = 237
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDefStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ClassDefStartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)

        def CLASS(self):
            return self.getToken(VisualFoxpro9Parser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def asTypeOf(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeOfContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_classDefStart

        def accept(self, visitor):
            if hasattr(visitor, "visitClassDefStart"):
                return visitor.visitClassDefStart(self)
            else:
                return visitor.visitChildren(self)




    def classDefStart(self):

        localctx = VisualFoxpro9Parser.ClassDefStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_classDefStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.match(VisualFoxpro9Parser.DEFINE)
            self.state = 239
            self.match(VisualFoxpro9Parser.CLASS)
            self.state = 240
            self.identifier()
            self.state = 242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.AS:
                self.state = 241
                self.asTypeOf()


            self.state = 244
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDefContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ClassDefContext, self).__init__(parent, invokingState)
            self.parser = parser

        def classDefStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ClassDefStartContext,0)


        def ENDDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.ENDDEFINE, 0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def classProperty(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ClassPropertyContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ClassPropertyContext,i)


        def lineComment(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineCommentContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_classDef

        def accept(self, visitor):
            if hasattr(visitor, "visitClassDef"):
                return visitor.visitClassDef(self)
            else:
                return visitor.visitChildren(self)




    def classDef(self):

        localctx = VisualFoxpro9Parser.ClassDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_classDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.classDefStart()
            self.state = 250
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 247
                    self.classProperty() 
                self.state = 252
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 253
            self.match(VisualFoxpro9Parser.ENDDEFINE)
            self.state = 254
            self.lineEnd()
            self.state = 258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.ASTERISK or _la==VisualFoxpro9Parser.NOTE or _la==VisualFoxpro9Parser.NL:
                self.state = 255
                self.lineComment()
                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassPropertyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ClassPropertyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lineComment(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,0)


        def funcDef(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDefContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_classProperty

        def accept(self, visitor):
            if hasattr(visitor, "visitClassProperty"):
                return visitor.visitClassProperty(self)
            else:
                return visitor.visitChildren(self)




    def classProperty(self):

        localctx = VisualFoxpro9Parser.ClassPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_classProperty)
        try:
            self.state = 266
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 261
                self.cmd()
                self.state = 262
                self.match(VisualFoxpro9Parser.NL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 264
                self.lineComment()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 265
                self.funcDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ParameterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_parameter

        def accept(self, visitor):
            if hasattr(visitor, "visitParameter"):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = VisualFoxpro9Parser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self.idAttr()
            self.state = 270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.AS:
                self.state = 269
                self.asType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ParametersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ParameterContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ParameterContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_parameters

        def accept(self, visitor):
            if hasattr(visitor, "visitParameters"):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = VisualFoxpro9Parser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.parameter()
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.COMMA:
                self.state = 273
                self.match(VisualFoxpro9Parser.COMMA)
                self.state = 274
                self.parameter()
                self.state = 279
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncDefStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.FuncDefStartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def idAttr2(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttr2Context,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def SCOPE(self):
            return self.getToken(VisualFoxpro9Parser.SCOPE, 0)

        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)


        def parameters(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParametersContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_funcDefStart

        def accept(self, visitor):
            if hasattr(visitor, "visitFuncDefStart"):
                return visitor.visitFuncDefStart(self)
            else:
                return visitor.visitChildren(self)




    def funcDefStart(self):

        localctx = VisualFoxpro9Parser.FuncDefStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_funcDefStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.SCOPE:
                self.state = 280
                self.match(VisualFoxpro9Parser.SCOPE)


            self.state = 283
            self.match(VisualFoxpro9Parser.PROCEDURE)
            self.state = 284
            self.idAttr2()
            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.LEFTPAREN:
                self.state = 285
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 286
                    self.parameters()


                self.state = 289
                self.match(VisualFoxpro9Parser.RIGHTPAREN)


            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.AS:
                self.state = 292
                self.asType()


            self.state = 295
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncDefContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.FuncDefContext, self).__init__(parent, invokingState)
            self.parser = parser

        def funcDefStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDefStartContext,0)


        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDPROC(self):
            return self.getToken(VisualFoxpro9Parser.ENDPROC, 0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def lineComment(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineCommentContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_funcDef

        def accept(self, visitor):
            if hasattr(visitor, "visitFuncDef"):
                return visitor.visitFuncDef(self)
            else:
                return visitor.visitChildren(self)




    def funcDef(self):

        localctx = VisualFoxpro9Parser.FuncDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_funcDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.funcDefStart()
            self.state = 298
            self.lines()
            self.state = 307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 299
                self.match(VisualFoxpro9Parser.ENDPROC)
                self.state = 300
                self.lineEnd()
                self.state = 304
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 301
                        self.lineComment() 
                    self.state = 306
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,26,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IfStartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def THEN(self):
            return self.getToken(VisualFoxpro9Parser.THEN, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_ifStart

        def accept(self, visitor):
            if hasattr(visitor, "visitIfStart"):
                return visitor.visitIfStart(self)
            else:
                return visitor.visitChildren(self)




    def ifStart(self):

        localctx = VisualFoxpro9Parser.IfStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_ifStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.match(VisualFoxpro9Parser.IF)
            self.state = 310
            self.expr(0)
            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.THEN:
                self.state = 311
                self.match(VisualFoxpro9Parser.THEN)


            self.state = 314
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IfStmtContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.ifBody = None # LinesContext
            self.elseBody = None # LinesContext

        def ifStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IfStartContext,0)


        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)

        def lines(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LinesContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,i)


        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_ifStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitIfStmt"):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = VisualFoxpro9Parser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.ifStart()
            self.state = 317
            localctx.ifBody = self.lines()
            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.ELSE:
                self.state = 318
                self.match(VisualFoxpro9Parser.ELSE)
                self.state = 319
                self.match(VisualFoxpro9Parser.NL)
                self.state = 320
                localctx.elseBody = self.lines()


            self.state = 323
            self.match(VisualFoxpro9Parser.ENDIF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ForStartContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.loopStart = None # ExprContext
            self.loopStop = None # ExprContext
            self.loopStep = None # ExprContext

        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def STEP(self):
            return self.getToken(VisualFoxpro9Parser.STEP, 0)

        def EACH(self):
            return self.getToken(VisualFoxpro9Parser.EACH, 0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_forStart

        def accept(self, visitor):
            if hasattr(visitor, "visitForStart"):
                return visitor.visitForStart(self)
            else:
                return visitor.visitChildren(self)




    def forStart(self):

        localctx = VisualFoxpro9Parser.ForStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_forStart)
        self._la = 0 # Token type
        try:
            self.state = 344
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 325
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 326
                self.idAttr()
                self.state = 327
                self.match(VisualFoxpro9Parser.EQUALS)
                self.state = 328
                localctx.loopStart = self.expr(0)
                self.state = 329
                self.match(VisualFoxpro9Parser.TO)
                self.state = 330
                localctx.loopStop = self.expr(0)
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.STEP:
                    self.state = 331
                    self.match(VisualFoxpro9Parser.STEP)
                    self.state = 332
                    localctx.loopStep = self.expr(0)


                self.state = 335
                self.match(VisualFoxpro9Parser.NL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 337
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 338
                self.match(VisualFoxpro9Parser.EACH)
                self.state = 339
                self.idAttr()
                self.state = 340
                self.match(VisualFoxpro9Parser.IN)
                self.state = 341
                self.expr(0)
                self.state = 342
                self.match(VisualFoxpro9Parser.NL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForEndContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ForEndContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ENDFOR(self):
            return self.getToken(VisualFoxpro9Parser.ENDFOR, 0)

        def NEXT(self):
            return self.getToken(VisualFoxpro9Parser.NEXT, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_forEnd

        def accept(self, visitor):
            if hasattr(visitor, "visitForEnd"):
                return visitor.visitForEnd(self)
            else:
                return visitor.visitChildren(self)




    def forEnd(self):

        localctx = VisualFoxpro9Parser.ForEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_forEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ENDFOR]:
                self.state = 346
                self.match(VisualFoxpro9Parser.ENDFOR)
                pass
            elif token in [VisualFoxpro9Parser.NEXT]:
                self.state = 347
                self.match(VisualFoxpro9Parser.NEXT)
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 348
                    self.idAttr()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ForStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def forStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ForStartContext,0)


        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def forEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ForEndContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_forStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitForStmt"):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = VisualFoxpro9Parser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.forStart()
            self.state = 354
            self.lines()
            self.state = 355
            self.forEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleCaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SingleCaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(VisualFoxpro9Parser.CASE, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def nongreedyLines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.NongreedyLinesContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_singleCase

        def accept(self, visitor):
            if hasattr(visitor, "visitSingleCase"):
                return visitor.visitSingleCase(self)
            else:
                return visitor.visitChildren(self)




    def singleCase(self):

        localctx = VisualFoxpro9Parser.SingleCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_singleCase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(VisualFoxpro9Parser.CASE)
            self.state = 358
            self.expr(0)
            self.state = 359
            self.match(VisualFoxpro9Parser.NL)
            self.state = 360
            self.nongreedyLines()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OtherwiseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.OtherwiseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OTHERWISE(self):
            return self.getToken(VisualFoxpro9Parser.OTHERWISE, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_otherwise

        def accept(self, visitor):
            if hasattr(visitor, "visitOtherwise"):
                return visitor.visitOtherwise(self)
            else:
                return visitor.visitChildren(self)




    def otherwise(self):

        localctx = VisualFoxpro9Parser.OtherwiseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_otherwise)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(VisualFoxpro9Parser.OTHERWISE)
            self.state = 363
            self.match(VisualFoxpro9Parser.NL)
            self.state = 364
            self.lines()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.CaseStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)

        def CASE(self):
            return self.getToken(VisualFoxpro9Parser.CASE, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def ENDCASE(self):
            return self.getToken(VisualFoxpro9Parser.ENDCASE, 0)

        def lineComment(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineCommentContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,i)


        def singleCase(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SingleCaseContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SingleCaseContext,i)


        def otherwise(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.OtherwiseContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_caseStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitCaseStmt"):
                return visitor.visitCaseStmt(self)
            else:
                return visitor.visitChildren(self)




    def caseStmt(self):

        localctx = VisualFoxpro9Parser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_caseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.match(VisualFoxpro9Parser.DO)
            self.state = 367
            self.match(VisualFoxpro9Parser.CASE)
            self.state = 368
            self.match(VisualFoxpro9Parser.NL)
            self.state = 372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.ASTERISK or _la==VisualFoxpro9Parser.NOTE or _la==VisualFoxpro9Parser.NL:
                self.state = 369
                self.lineComment()
                self.state = 374
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.CASE:
                self.state = 375
                self.singleCase()
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.OTHERWISE:
                self.state = 381
                self.otherwise()


            self.state = 384
            self.match(VisualFoxpro9Parser.ENDCASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.WhileStartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(VisualFoxpro9Parser.WHILE, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_whileStart

        def accept(self, visitor):
            if hasattr(visitor, "visitWhileStart"):
                return visitor.visitWhileStart(self)
            else:
                return visitor.visitChildren(self)




    def whileStart(self):

        localctx = VisualFoxpro9Parser.WhileStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_whileStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.DO:
                self.state = 386
                self.match(VisualFoxpro9Parser.DO)


            self.state = 389
            self.match(VisualFoxpro9Parser.WHILE)
            self.state = 390
            self.expr(0)
            self.state = 391
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.WhileStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def whileStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.WhileStartContext,0)


        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDDO(self):
            return self.getToken(VisualFoxpro9Parser.ENDDO, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_whileStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitWhileStmt"):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = VisualFoxpro9Parser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.whileStart()
            self.state = 394
            self.lines()
            self.state = 395
            self.match(VisualFoxpro9Parser.ENDDO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WithStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.WithStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDWITH(self):
            return self.getToken(VisualFoxpro9Parser.ENDWITH, 0)

        def asTypeOf(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeOfContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_withStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitWithStmt"):
                return visitor.visitWithStmt(self)
            else:
                return visitor.visitChildren(self)




    def withStmt(self):

        localctx = VisualFoxpro9Parser.WithStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_withStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.match(VisualFoxpro9Parser.WITH)
            self.state = 398
            self.idAttr()
            self.state = 400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.AS:
                self.state = 399
                self.asTypeOf()


            self.state = 402
            self.match(VisualFoxpro9Parser.NL)
            self.state = 403
            self.lines()
            self.state = 404
            self.match(VisualFoxpro9Parser.ENDWITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScanStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ScanStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SCAN(self):
            return self.getToken(VisualFoxpro9Parser.SCAN, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDSCAN(self):
            return self.getToken(VisualFoxpro9Parser.ENDSCAN, 0)

        def scopeClause(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScopeClauseContext,0)


        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_scanStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitScanStmt"):
                return visitor.visitScanStmt(self)
            else:
                return visitor.visitChildren(self)




    def scanStmt(self):

        localctx = VisualFoxpro9Parser.ScanStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_scanStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.match(VisualFoxpro9Parser.SCAN)
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 114)) & ~0x3f) == 0 and ((1 << (_la - 114)) & ((1 << (VisualFoxpro9Parser.ALL - 114)) | (1 << (VisualFoxpro9Parser.RECORD - 114)) | (1 << (VisualFoxpro9Parser.NEXT - 114)) | (1 << (VisualFoxpro9Parser.REST - 114)))) != 0):
                self.state = 407
                self.scopeClause()


            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.FOR:
                self.state = 410
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 411
                self.expr(0)


            self.state = 414
            self.match(VisualFoxpro9Parser.NL)
            self.state = 415
            self.lines()
            self.state = 416
            self.match(VisualFoxpro9Parser.ENDSCAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.TryStmtContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.tryLines = None # LinesContext
            self.catchLines = None # LinesContext
            self.finallyLines = None # LinesContext

        def TRY(self):
            return self.getToken(VisualFoxpro9Parser.TRY, 0)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def ENDTRY(self):
            return self.getToken(VisualFoxpro9Parser.ENDTRY, 0)

        def lines(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LinesContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,i)


        def CATCH(self):
            return self.getToken(VisualFoxpro9Parser.CATCH, 0)

        def FINALLY(self):
            return self.getToken(VisualFoxpro9Parser.FINALLY, 0)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_tryStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitTryStmt"):
                return visitor.visitTryStmt(self)
            else:
                return visitor.visitChildren(self)




    def tryStmt(self):

        localctx = VisualFoxpro9Parser.TryStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_tryStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(VisualFoxpro9Parser.TRY)
            self.state = 419
            self.match(VisualFoxpro9Parser.NL)
            self.state = 420
            localctx.tryLines = self.lines()
            self.state = 428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.CATCH:
                self.state = 421
                self.match(VisualFoxpro9Parser.CATCH)
                self.state = 424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.TO:
                    self.state = 422
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 423
                    self.identifier()


                self.state = 426
                self.match(VisualFoxpro9Parser.NL)
                self.state = 427
                localctx.catchLines = self.lines()


            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.FINALLY:
                self.state = 430
                self.match(VisualFoxpro9Parser.FINALLY)
                self.state = 431
                self.match(VisualFoxpro9Parser.NL)
                self.state = 432
                localctx.finallyLines = self.lines()


            self.state = 435
            self.match(VisualFoxpro9Parser.ENDTRY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ControlStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ControlStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def whileStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.WhileStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IfStmtContext,0)


        def caseStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CaseStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ForStmtContext,0)


        def withStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.WithStmtContext,0)


        def scanStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScanStmtContext,0)


        def tryStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TryStmtContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_controlStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitControlStmt"):
                return visitor.visitControlStmt(self)
            else:
                return visitor.visitChildren(self)




    def controlStmt(self):

        localctx = VisualFoxpro9Parser.ControlStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_controlStmt)
        try:
            self.state = 444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 437
                self.whileStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 438
                self.ifStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 439
                self.caseStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 440
                self.forStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 441
                self.withStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 442
                self.scanStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 443
                self.tryStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CmdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.CmdContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_cmd

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.CmdContext, self).copyFrom(ctx)



    class ThrowErrorContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ThrowErrorContext, self).__init__(parser)
            self.copyFrom(ctx)

        def THROW(self):
            return self.getToken(VisualFoxpro9Parser.THROW, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitThrowError"):
                return visitor.visitThrowError(self)
            else:
                return visitor.visitChildren(self)


    class SelectContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.SelectContext, self).__init__(parser)
            self.tablename = None # SpecialExprContext
            self.fromExpr = None # SpecialExprContext
            self.whereExpr = None # ExprContext
            self.intoExpr = None # SpecialExprContext
            self.orderbyid = None # IdentifierContext
            self.copyFrom(ctx)

        def SELECT(self):
            return self.getToken(VisualFoxpro9Parser.SELECT, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def specialArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,0)

        def DISTINCT(self):
            return self.getToken(VisualFoxpro9Parser.DISTINCT, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def WHERE(self):
            return self.getToken(VisualFoxpro9Parser.WHERE, 0)
        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)
        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)
        def BY(self):
            return self.getToken(VisualFoxpro9Parser.BY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)
        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitSelect"):
                return visitor.visitSelect(self)
            else:
                return visitor.visitChildren(self)


    class DefineMenuContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DefineMenuContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def NOMARGIN(self):
            return self.getToken(VisualFoxpro9Parser.NOMARGIN, 0)
        def AT(self):
            return self.getToken(VisualFoxpro9Parser.AT, 0)
        def LINE(self):
            return self.getToken(VisualFoxpro9Parser.LINE, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)
        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefineMenu"):
                return visitor.visitDefineMenu(self)
            else:
                return visitor.visitChildren(self)


    class IndexOnContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.IndexOnContext, self).__init__(parser)
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(VisualFoxpro9Parser.INDEX, 0)
        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def COMPACT(self):
            return self.getToken(VisualFoxpro9Parser.COMPACT, 0)
        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)
        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)
        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)
        def UNIQUE(self):
            return self.getToken(VisualFoxpro9Parser.UNIQUE, 0)
        def CANDIDATE(self):
            return self.getToken(VisualFoxpro9Parser.CANDIDATE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitIndexOn"):
                return visitor.visitIndexOn(self)
            else:
                return visitor.visitChildren(self)


    class ReleaseContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ReleaseContext, self).__init__(parser)
            self.vartype = None # Token
            self.copyFrom(ctx)

        def RELEASE(self):
            return self.getToken(VisualFoxpro9Parser.RELEASE, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)

        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def EXTENDED(self):
            return self.getToken(VisualFoxpro9Parser.EXTENDED, 0)
        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)
        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitRelease"):
                return visitor.visitRelease(self)
            else:
                return visitor.visitChildren(self)


    class UseContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.UseContext, self).__init__(parser)
            self.workArea = None # SpecialExprContext
            self.orderExpr = None # ExprContext
            self.aliasExpr = None # SpecialExprContext
            self.name = None # SpecialExprContext
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(VisualFoxpro9Parser.USE, 0)
        def IN(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.IN)
            else:
                return self.getToken(VisualFoxpro9Parser.IN, i)
        def ORDER(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ORDER)
            else:
                return self.getToken(VisualFoxpro9Parser.ORDER, i)
        def ALIAS(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ALIAS)
            else:
                return self.getToken(VisualFoxpro9Parser.ALIAS, i)
        def SHARED(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SHARED)
            else:
                return self.getToken(VisualFoxpro9Parser.SHARED, i)
        def EXCLUSIVE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.EXCLUSIVE)
            else:
                return self.getToken(VisualFoxpro9Parser.EXCLUSIVE, i)
        def NOUPDATE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOUPDATE)
            else:
                return self.getToken(VisualFoxpro9Parser.NOUPDATE, i)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def TAG(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TAG)
            else:
                return self.getToken(VisualFoxpro9Parser.TAG, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitUse"):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)


    class ReplaceContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ReplaceContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REPLACE(self):
            return self.getToken(VisualFoxpro9Parser.REPLACE, 0)
        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def WITH(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WITH)
            else:
                return self.getToken(VisualFoxpro9Parser.WITH, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitReplace"):
                return visitor.visitReplace(self)
            else:
                return visitor.visitChildren(self)


    class ClearStmtContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ClearStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def CLASS(self):
            return self.getToken(VisualFoxpro9Parser.CLASS, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def DEBUG(self):
            return self.getToken(VisualFoxpro9Parser.DEBUG, 0)
        def DLLS(self):
            return self.getToken(VisualFoxpro9Parser.DLLS, 0)
        def specialArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,0)

        def EVENTS(self):
            return self.getToken(VisualFoxpro9Parser.EVENTS, 0)
        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)
        def FIELDS(self):
            return self.getToken(VisualFoxpro9Parser.FIELDS, 0)
        def GETS(self):
            return self.getToken(VisualFoxpro9Parser.GETS, 0)
        def MACROS(self):
            return self.getToken(VisualFoxpro9Parser.MACROS, 0)
        def MEMORY(self):
            return self.getToken(VisualFoxpro9Parser.MEMORY, 0)
        def MENUS(self):
            return self.getToken(VisualFoxpro9Parser.MENUS, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def PROGRAM(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAM, 0)
        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)
        def READ(self):
            return self.getToken(VisualFoxpro9Parser.READ, 0)
        def RESOURCES(self):
            return self.getToken(VisualFoxpro9Parser.RESOURCES, 0)
        def TYPEAHEAD(self):
            return self.getToken(VisualFoxpro9Parser.TYPEAHEAD, 0)
        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitClearStmt"):
                return visitor.visitClearStmt(self)
            else:
                return visitor.visitChildren(self)


    class WaitCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.WaitCmdContext, self).__init__(parser)
            self.toExpr = None # ExprContext
            self.atExpr1 = None # ExprContext
            self.atExpr2 = None # ExprContext
            self.timeout = None # ExprContext
            self.message = None # ExprContext
            self.copyFrom(ctx)

        def WAIT(self):
            return self.getToken(VisualFoxpro9Parser.WAIT, 0)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def WINDOW(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WINDOW)
            else:
                return self.getToken(VisualFoxpro9Parser.WINDOW, i)
        def NOWAIT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOWAIT)
            else:
                return self.getToken(VisualFoxpro9Parser.NOWAIT, i)
        def CLEAR(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.CLEAR)
            else:
                return self.getToken(VisualFoxpro9Parser.CLEAR, i)
        def NOCLEAR(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOCLEAR)
            else:
                return self.getToken(VisualFoxpro9Parser.NOCLEAR, i)
        def TIMEOUT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TIMEOUT)
            else:
                return self.getToken(VisualFoxpro9Parser.TIMEOUT, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def AT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.AT)
            else:
                return self.getToken(VisualFoxpro9Parser.AT, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitWaitCmd"):
                return visitor.visitWaitCmd(self)
            else:
                return visitor.visitChildren(self)


    class DeactivateContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DeactivateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.DEACTIVATE, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def parameters(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParametersContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitDeactivate"):
                return visitor.visitDeactivate(self)
            else:
                return visitor.visitChildren(self)


    class CopyToArrayContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.CopyToArrayContext, self).__init__(parser)
            self.copyFrom(ctx)

        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def ARRAY(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ARRAY)
            else:
                return self.getToken(VisualFoxpro9Parser.ARRAY, i)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def FIELDS(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FIELDS)
            else:
                return self.getToken(VisualFoxpro9Parser.FIELDS, i)
        def args(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,i)

        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def LIKE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.LIKE)
            else:
                return self.getToken(VisualFoxpro9Parser.LIKE, i)
        def EXCEPT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.EXCEPT)
            else:
                return self.getToken(VisualFoxpro9Parser.EXCEPT, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitCopyToArray"):
                return visitor.visitCopyToArray(self)
            else:
                return visitor.visitChildren(self)


    class CopyToContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.CopyToContext, self).__init__(parser)
            self.copyFrom(ctx)

        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def STRUCTURE(self):
            return self.getToken(VisualFoxpro9Parser.STRUCTURE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCopyTo"):
                return visitor.visitCopyTo(self)
            else:
                return visitor.visitChildren(self)


    class ReadEventContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ReadEventContext, self).__init__(parser)
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(VisualFoxpro9Parser.READ, 0)
        def DOEVENTS(self):
            return self.getToken(VisualFoxpro9Parser.DOEVENTS, 0)
        def EVENTS(self):
            return self.getToken(VisualFoxpro9Parser.EVENTS, 0)
        def FORCE(self):
            return self.getToken(VisualFoxpro9Parser.FORCE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitReadEvent"):
                return visitor.visitReadEvent(self)
            else:
                return visitor.visitChildren(self)


    class ComplexIdCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ComplexIdCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def complexId(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ComplexIdContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitComplexIdCmd"):
                return visitor.visitComplexIdCmd(self)
            else:
                return visitor.visitChildren(self)


    class AppendFromContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AppendFromContext, self).__init__(parser)
            self.typeExpr = None # SpecialExprContext
            self.copyFrom(ctx)

        def APPEND(self):
            return self.getToken(VisualFoxpro9Parser.APPEND, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)
        def TYPE(self):
            return self.getToken(VisualFoxpro9Parser.TYPE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitAppendFrom"):
                return visitor.visitAppendFrom(self)
            else:
                return visitor.visitChildren(self)


    class ContinueLocateContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ContinueLocateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(VisualFoxpro9Parser.CONTINUE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitContinueLocate"):
                return visitor.visitContinueLocate(self)
            else:
                return visitor.visitChildren(self)


    class ShellRunContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ShellRunContext, self).__init__(parser)
            self.copyFrom(ctx)

        def RUN(self):
            return self.getToken(VisualFoxpro9Parser.RUN, 0)
        def EXCLAMATION(self):
            return self.getToken(VisualFoxpro9Parser.EXCLAMATION, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitShellRun"):
                return visitor.visitShellRun(self)
            else:
                return visitor.visitChildren(self)


    class ZoomCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ZoomCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ZOOM(self):
            return self.getToken(VisualFoxpro9Parser.ZOOM, 0)
        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def MIN(self):
            return self.getToken(VisualFoxpro9Parser.MIN, 0)
        def MAX(self):
            return self.getToken(VisualFoxpro9Parser.MAX, 0)
        def NORM(self):
            return self.getToken(VisualFoxpro9Parser.NORM, 0)
        def AT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.AT)
            else:
                return self.getToken(VisualFoxpro9Parser.AT, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def SIZE(self):
            return self.getToken(VisualFoxpro9Parser.SIZE, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitZoomCmd"):
                return visitor.visitZoomCmd(self)
            else:
                return visitor.visitChildren(self)


    class SaveToCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.SaveToCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SAVE(self):
            return self.getToken(VisualFoxpro9Parser.SAVE, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def MEMO(self):
            return self.getToken(VisualFoxpro9Parser.MEMO, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def LIKE(self):
            return self.getToken(VisualFoxpro9Parser.LIKE, 0)
        def EXCEPT(self):
            return self.getToken(VisualFoxpro9Parser.EXCEPT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitSaveToCmd"):
                return visitor.visitSaveToCmd(self)
            else:
                return visitor.visitChildren(self)


    class SetStmtContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.SetStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(VisualFoxpro9Parser.SET, 0)
        def setCmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SetCmdContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitSetStmt"):
                return visitor.visitSetStmt(self)
            else:
                return visitor.visitChildren(self)


    class ReindexContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ReindexContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REINDEX(self):
            return self.getToken(VisualFoxpro9Parser.REINDEX, 0)
        def COMPACT(self):
            return self.getToken(VisualFoxpro9Parser.COMPACT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitReindex"):
                return visitor.visitReindex(self)
            else:
                return visitor.visitChildren(self)


    class CountContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.CountContext, self).__init__(parser)
            self.toExpr = None # ExprContext
            self.copyFrom(ctx)

        def COUNT(self):
            return self.getToken(VisualFoxpro9Parser.COUNT, 0)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitCount"):
                return visitor.visitCount(self)
            else:
                return visitor.visitChildren(self)


    class ReturnStmtContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ReturnStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(VisualFoxpro9Parser.RETURN, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitReturnStmt"):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)


    class AtPosContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AtPosContext, self).__init__(parser)
            self.toArgs = None # ArgsContext
            self.sayExpr = None # ExprContext
            self.styleExpr = None # ExprContext
            self.copyFrom(ctx)

        def args(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,i)

        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def SAY(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SAY)
            else:
                return self.getToken(VisualFoxpro9Parser.SAY, i)
        def STYLE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.STYLE)
            else:
                return self.getToken(VisualFoxpro9Parser.STYLE, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitAtPos"):
                return visitor.visitAtPos(self)
            else:
                return visitor.visitChildren(self)


    class PackContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.PackContext, self).__init__(parser)
            self.workArea = None # SpecialExprContext
            self.tableName = None # SpecialExprContext
            self.copyFrom(ctx)

        def PACK(self):
            return self.getToken(VisualFoxpro9Parser.PACK, 0)
        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def MEMO(self):
            return self.getToken(VisualFoxpro9Parser.MEMO, 0)
        def DBF(self):
            return self.getToken(VisualFoxpro9Parser.DBF, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitPack"):
                return visitor.visitPack(self)
            else:
                return visitor.visitChildren(self)


    class PushContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.PushContext, self).__init__(parser)
            self.copyFrom(ctx)

        def PUSH(self):
            return self.getToken(VisualFoxpro9Parser.PUSH, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitPush"):
                return visitor.visitPush(self)
            else:
                return visitor.visitChildren(self)


    class ListStmtContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ListStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def LIST(self):
            return self.getToken(VisualFoxpro9Parser.LIST, 0)
        def scopeClause(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScopeClauseContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitListStmt"):
                return visitor.visitListStmt(self)
            else:
                return visitor.visitChildren(self)


    class ActivateMenuContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ActivateMenuContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def NOWAIT(self):
            return self.getToken(VisualFoxpro9Parser.NOWAIT, 0)
        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitActivateMenu"):
                return visitor.visitActivateMenu(self)
            else:
                return visitor.visitChildren(self)


    class RaiseErrorContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.RaiseErrorContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitRaiseError"):
                return visitor.visitRaiseError(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AlterTableContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ALTER)
            else:
                return self.getToken(VisualFoxpro9Parser.ALTER, i)
        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def ADD(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ADD)
            else:
                return self.getToken(VisualFoxpro9Parser.ADD, i)
        def COLUMN(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COLUMN)
            else:
                return self.getToken(VisualFoxpro9Parser.COLUMN, i)
        def tableField(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.TableFieldContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.TableFieldContext,i)

        def DROP(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.DROP)
            else:
                return self.getToken(VisualFoxpro9Parser.DROP, i)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def NOT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOT)
            else:
                return self.getToken(VisualFoxpro9Parser.NOT, i)
        def NULL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NULL)
            else:
                return self.getToken(VisualFoxpro9Parser.NULL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitAlterTable"):
                return visitor.visitAlterTable(self)
            else:
                return visitor.visitChildren(self)


    class BrowseContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.BrowseContext, self).__init__(parser)
            self.copyFrom(ctx)

        def BROWSE(self):
            return self.getToken(VisualFoxpro9Parser.BROWSE, 0)
        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitBrowse"):
                return visitor.visitBrowse(self)
            else:
                return visitor.visitChildren(self)


    class GoRecordContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.GoRecordContext, self).__init__(parser)
            self.copyFrom(ctx)

        def GOTO(self):
            return self.getToken(VisualFoxpro9Parser.GOTO, 0)
        def TOP(self):
            return self.getToken(VisualFoxpro9Parser.TOP, 0)
        def BOTTOM(self):
            return self.getToken(VisualFoxpro9Parser.BOTTOM, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def RECORD(self):
            return self.getToken(VisualFoxpro9Parser.RECORD, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitGoRecord"):
                return visitor.visitGoRecord(self)
            else:
                return visitor.visitChildren(self)


    class RestoreCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.RestoreCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def RESTORE(self):
            return self.getToken(VisualFoxpro9Parser.RESTORE, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitRestoreCmd"):
                return visitor.visitRestoreCmd(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.CreateTableContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(VisualFoxpro9Parser.CREATE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)
        def DBF(self):
            return self.getToken(VisualFoxpro9Parser.DBF, 0)
        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)
        def tableField(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.TableFieldContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.TableFieldContext,i)

        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def FREE(self):
            return self.getToken(VisualFoxpro9Parser.FREE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCreateTable"):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class ModifyWindowContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ModifyWindowContext, self).__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(VisualFoxpro9Parser.MODIFY, 0)
        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)
        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def FROM(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FROM)
            else:
                return self.getToken(VisualFoxpro9Parser.FROM, i)
        def args(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,i)

        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def AT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.AT)
            else:
                return self.getToken(VisualFoxpro9Parser.AT, i)
        def SIZE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SIZE)
            else:
                return self.getToken(VisualFoxpro9Parser.SIZE, i)
        def FONT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FONT)
            else:
                return self.getToken(VisualFoxpro9Parser.FONT, i)
        def STYLE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.STYLE)
            else:
                return self.getToken(VisualFoxpro9Parser.STYLE, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def TITLE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TITLE)
            else:
                return self.getToken(VisualFoxpro9Parser.TITLE, i)
        def ICON(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ICON)
            else:
                return self.getToken(VisualFoxpro9Parser.ICON, i)
        def FILE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FILE)
            else:
                return self.getToken(VisualFoxpro9Parser.FILE, i)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def FILL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FILL)
            else:
                return self.getToken(VisualFoxpro9Parser.FILL, i)
        def COLOR(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COLOR)
            else:
                return self.getToken(VisualFoxpro9Parser.COLOR, i)
        def SCHEME(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SCHEME)
            else:
                return self.getToken(VisualFoxpro9Parser.SCHEME, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitModifyWindow"):
                return visitor.visitModifyWindow(self)
            else:
                return visitor.visitChildren(self)


    class LocateContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.LocateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def LOCATE(self):
            return self.getToken(VisualFoxpro9Parser.LOCATE, 0)
        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitLocate"):
                return visitor.visitLocate(self)
            else:
                return visitor.visitChildren(self)


    class InsertContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.InsertContext, self).__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(VisualFoxpro9Parser.INSERT, 0)
        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def VALUES(self):
            return self.getToken(VisualFoxpro9Parser.VALUES, 0)
        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)

        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def MEMVAR(self):
            return self.getToken(VisualFoxpro9Parser.MEMVAR, 0)
        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)
        def specialArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitInsert"):
                return visitor.visitInsert(self)
            else:
                return visitor.visitChildren(self)


    class SumContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.SumContext, self).__init__(parser)
            self.toExpr = None # ExprContext
            self.sumExpr = None # ExprContext
            self.copyFrom(ctx)

        def SUM(self):
            return self.getToken(VisualFoxpro9Parser.SUM, 0)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitSum"):
                return visitor.visitSum(self)
            else:
                return visitor.visitChildren(self)


    class ShowCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ShowCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(VisualFoxpro9Parser.SHOW, 0)
        def GETS(self):
            return self.getToken(VisualFoxpro9Parser.GETS, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitShowCmd"):
                return visitor.visitShowCmd(self)
            else:
                return visitor.visitChildren(self)


    class PopContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.PopContext, self).__init__(parser)
            self.copyFrom(ctx)

        def POP(self):
            return self.getToken(VisualFoxpro9Parser.POP, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def MASTER(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.MASTER)
            else:
                return self.getToken(VisualFoxpro9Parser.MASTER, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitPop"):
                return visitor.visitPop(self)
            else:
                return visitor.visitChildren(self)


    class ChMkRmDirContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ChMkRmDirContext, self).__init__(parser)
            self.copyFrom(ctx)

        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def CHDIR(self):
            return self.getToken(VisualFoxpro9Parser.CHDIR, 0)
        def MKDIR(self):
            return self.getToken(VisualFoxpro9Parser.MKDIR, 0)
        def RMDIR(self):
            return self.getToken(VisualFoxpro9Parser.RMDIR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitChMkRmDir"):
                return visitor.visitChMkRmDir(self)
            else:
                return visitor.visitChildren(self)


    class ZapTableContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ZapTableContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ZAP(self):
            return self.getToken(VisualFoxpro9Parser.ZAP, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitZapTable"):
                return visitor.visitZapTable(self)
            else:
                return visitor.visitChildren(self)


    class DllDeclareContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DllDeclareContext, self).__init__(parser)
            self.returnType = None # DatatypeContext
            self.alias = None # IdentifierContext
            self.copyFrom(ctx)

        def DECLARE(self):
            return self.getToken(VisualFoxpro9Parser.DECLARE, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)
        def dllArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DllArgsContext,0)

        def datatype(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DatatypeContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitDllDeclare"):
                return visitor.visitDllDeclare(self)
            else:
                return visitor.visitChildren(self)


    class SeekRecordContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.SeekRecordContext, self).__init__(parser)
            self.seekExpr = None # ExprContext
            self.orderExpr = None # ExprContext
            self.tagName = None # SpecialExprContext
            self.cdxFileExpr = None # SpecialExprContext
            self.idxFileExpr = None # SpecialExprContext
            self.tablenameExpr = None # SpecialExprContext
            self.copyFrom(ctx)

        def SEEK(self):
            return self.getToken(VisualFoxpro9Parser.SEEK, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)
        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)
        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)
        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitSeekRecord"):
                return visitor.visitSeekRecord(self)
            else:
                return visitor.visitChildren(self)


    class ActivateWindowContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ActivateWindowContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def WINDOW(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WINDOW)
            else:
                return self.getToken(VisualFoxpro9Parser.WINDOW, i)
        def parameters(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParametersContext,0)

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def NOSHOW(self):
            return self.getToken(VisualFoxpro9Parser.NOSHOW, 0)
        def BOTTOM(self):
            return self.getToken(VisualFoxpro9Parser.BOTTOM, 0)
        def TOP(self):
            return self.getToken(VisualFoxpro9Parser.TOP, 0)
        def SAME(self):
            return self.getToken(VisualFoxpro9Parser.SAME, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitActivateWindow"):
                return visitor.visitActivateWindow(self)
            else:
                return visitor.visitChildren(self)


    class AssertContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AssertContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ASSERT(self):
            return self.getToken(VisualFoxpro9Parser.ASSERT, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitAssert"):
                return visitor.visitAssert(self)
            else:
                return visitor.visitChildren(self)


    class OnStmtContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.OnStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)
        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def LABEL(self):
            return self.getToken(VisualFoxpro9Parser.LABEL, 0)
        def SELECTION(self):
            return self.getToken(VisualFoxpro9Parser.SELECTION, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitOnStmt"):
                return visitor.visitOnStmt(self)
            else:
                return visitor.visitChildren(self)


    class GatherExprContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.GatherExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def GATHER(self):
            return self.getToken(VisualFoxpro9Parser.GATHER, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def MEMVAR(self):
            return self.getToken(VisualFoxpro9Parser.MEMVAR, 0)
        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def FIELDS(self):
            return self.getToken(VisualFoxpro9Parser.FIELDS, 0)
        def MEMO(self):
            return self.getToken(VisualFoxpro9Parser.MEMO, 0)
        def LIKE(self):
            return self.getToken(VisualFoxpro9Parser.LIKE, 0)
        def EXCEPT(self):
            return self.getToken(VisualFoxpro9Parser.EXCEPT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitGatherExpr"):
                return visitor.visitGatherExpr(self)
            else:
                return visitor.visitChildren(self)


    class FuncDoContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.FuncDoContext, self).__init__(parser)
            self.nameId = None # IdentifierContext
            self.toId = None # IdentifierContext
            self.copyFrom(ctx)

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)
        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def NAME(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NAME)
            else:
                return self.getToken(VisualFoxpro9Parser.NAME, i)
        def WITH(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WITH)
            else:
                return self.getToken(VisualFoxpro9Parser.WITH, i)
        def args(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,i)

        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def NOSHOW(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOSHOW)
            else:
                return self.getToken(VisualFoxpro9Parser.NOSHOW, i)
        def IN(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.IN)
            else:
                return self.getToken(VisualFoxpro9Parser.IN, i)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def LINKED(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.LINKED)
            else:
                return self.getToken(VisualFoxpro9Parser.LINKED, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitFuncDo"):
                return visitor.visitFuncDo(self)
            else:
                return visitor.visitChildren(self)


    class CloseStmtContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.CloseStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CLOSE(self):
            return self.getToken(VisualFoxpro9Parser.CLOSE, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)
        def INDEXES(self):
            return self.getToken(VisualFoxpro9Parser.INDEXES, 0)
        def TABLES(self):
            return self.getToken(VisualFoxpro9Parser.TABLES, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCloseStmt"):
                return visitor.visitCloseStmt(self)
            else:
                return visitor.visitChildren(self)


    class DeleteFileContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DeleteFileContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ERASE(self):
            return self.getToken(VisualFoxpro9Parser.ERASE, 0)
        def DELETE(self):
            return self.getToken(VisualFoxpro9Parser.DELETE, 0)
        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def RECYCLE(self):
            return self.getToken(VisualFoxpro9Parser.RECYCLE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDeleteFile"):
                return visitor.visitDeleteFile(self)
            else:
                return visitor.visitChildren(self)


    class DefinePopupContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DefinePopupContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def SHADOW(self):
            return self.getToken(VisualFoxpro9Parser.SHADOW, 0)
        def MARGIN(self):
            return self.getToken(VisualFoxpro9Parser.MARGIN, 0)
        def RELATIVE(self):
            return self.getToken(VisualFoxpro9Parser.RELATIVE, 0)
        def COLOR(self):
            return self.getToken(VisualFoxpro9Parser.COLOR, 0)
        def SCHEME(self):
            return self.getToken(VisualFoxpro9Parser.SCHEME, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefinePopup"):
                return visitor.visitDefinePopup(self)
            else:
                return visitor.visitChildren(self)


    class UpdateCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.UpdateCmdContext, self).__init__(parser)
            self.tableExpr = None # SpecialExprContext
            self.fromArgs = None # SpecialArgsContext
            self.joinArgs = None # SpecialArgsContext
            self.whereExpr = None # ExprContext
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(VisualFoxpro9Parser.UPDATE, 0)
        def SET(self):
            return self.getToken(VisualFoxpro9Parser.SET, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def FROM(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FROM)
            else:
                return self.getToken(VisualFoxpro9Parser.FROM, i)
        def JOIN(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.JOIN)
            else:
                return self.getToken(VisualFoxpro9Parser.JOIN, i)
        def WHERE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WHERE)
            else:
                return self.getToken(VisualFoxpro9Parser.WHERE, i)
        def specialArgs(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,i)

        def FORCE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FORCE)
            else:
                return self.getToken(VisualFoxpro9Parser.FORCE, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitUpdateCmd"):
                return visitor.visitUpdateCmd(self)
            else:
                return visitor.visitChildren(self)


    class KeyboardContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.KeyboardContext, self).__init__(parser)
            self.copyFrom(ctx)

        def KEYBOARD(self):
            return self.getToken(VisualFoxpro9Parser.KEYBOARD, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def PLAIN(self):
            return self.getToken(VisualFoxpro9Parser.PLAIN, 0)
        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitKeyboard"):
                return visitor.visitKeyboard(self)
            else:
                return visitor.visitChildren(self)


    class UnlockCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.UnlockCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def UNLOCK(self):
            return self.getToken(VisualFoxpro9Parser.UNLOCK, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitUnlockCmd"):
                return visitor.visitUnlockCmd(self)
            else:
                return visitor.visitChildren(self)


    class ProgramControlContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ProgramControlContext, self).__init__(parser)
            self.copyFrom(ctx)

        def PROGRAMCONTROL(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAMCONTROL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitProgramControl"):
                return visitor.visitProgramControl(self)
            else:
                return visitor.visitChildren(self)


    class SkipRecordContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.SkipRecordContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SKIPKW(self):
            return self.getToken(VisualFoxpro9Parser.SKIPKW, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitSkipRecord"):
                return visitor.visitSkipRecord(self)
            else:
                return visitor.visitChildren(self)


    class TextBlockContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.TextBlockContext, self).__init__(parser)
            self.flagExpr = None # ExprContext
            self.pretext = None # ExprContext
            self.copyFrom(ctx)

        def TEXT(self):
            return self.getToken(VisualFoxpro9Parser.TEXT, 0)
        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)
        def textChunk(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TextChunkContext,0)

        def ENDTEXT(self):
            return self.getToken(VisualFoxpro9Parser.ENDTEXT, 0)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def idAttr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdAttrContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,i)

        def ADDITIVE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ADDITIVE)
            else:
                return self.getToken(VisualFoxpro9Parser.ADDITIVE, i)
        def TEXTMERGE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TEXTMERGE)
            else:
                return self.getToken(VisualFoxpro9Parser.TEXTMERGE, i)
        def NOSHOW(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOSHOW)
            else:
                return self.getToken(VisualFoxpro9Parser.NOSHOW, i)
        def FLAGS(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FLAGS)
            else:
                return self.getToken(VisualFoxpro9Parser.FLAGS, i)
        def PRETEXT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.PRETEXT)
            else:
                return self.getToken(VisualFoxpro9Parser.PRETEXT, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitTextBlock"):
                return visitor.visitTextBlock(self)
            else:
                return visitor.visitChildren(self)


    class DeclarationContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DeclarationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def declarationItem(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.DeclarationItemContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.DeclarationItemContext,i)

        def EXTERNAL(self):
            return self.getToken(VisualFoxpro9Parser.EXTERNAL, 0)
        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def DIMENSION(self):
            return self.getToken(VisualFoxpro9Parser.DIMENSION, 0)
        def DECLARE(self):
            return self.getToken(VisualFoxpro9Parser.DECLARE, 0)
        def PARAMETER(self):
            return self.getToken(VisualFoxpro9Parser.PARAMETER, 0)
        def SCOPE(self):
            return self.getToken(VisualFoxpro9Parser.SCOPE, 0)
        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDeclaration"):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)


    class SortCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.SortCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SORT(self):
            return self.getToken(VisualFoxpro9Parser.SORT, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def ASCENDING(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ASCENDING)
            else:
                return self.getToken(VisualFoxpro9Parser.ASCENDING, i)
        def DESCENDING(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.DESCENDING)
            else:
                return self.getToken(VisualFoxpro9Parser.DESCENDING, i)
        def FIELDS(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FIELDS)
            else:
                return self.getToken(VisualFoxpro9Parser.FIELDS, i)
        def args(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,i)

        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def LIKE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.LIKE)
            else:
                return self.getToken(VisualFoxpro9Parser.LIKE, i)
        def EXCEPT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.EXCEPT)
            else:
                return self.getToken(VisualFoxpro9Parser.EXCEPT, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitSortCmd"):
                return visitor.visitSortCmd(self)
            else:
                return visitor.visitChildren(self)


    class DefinePadContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DefinePadContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def AT(self):
            return self.getToken(VisualFoxpro9Parser.AT, 0)
        def NUMBER_LITERAL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NUMBER_LITERAL)
            else:
                return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, i)
        def BEFORE(self):
            return self.getToken(VisualFoxpro9Parser.BEFORE, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def AFTER(self):
            return self.getToken(VisualFoxpro9Parser.AFTER, 0)
        def NEGOTIATE(self):
            return self.getToken(VisualFoxpro9Parser.NEGOTIATE, 0)
        def FONT(self):
            return self.getToken(VisualFoxpro9Parser.FONT, 0)
        def STYLE(self):
            return self.getToken(VisualFoxpro9Parser.STYLE, 0)
        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def MARK(self):
            return self.getToken(VisualFoxpro9Parser.MARK, 0)
        def SKIPKW(self):
            return self.getToken(VisualFoxpro9Parser.SKIPKW, 0)
        def COLOR(self):
            return self.getToken(VisualFoxpro9Parser.COLOR, 0)
        def SCHEME(self):
            return self.getToken(VisualFoxpro9Parser.SCHEME, 0)
        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefinePad"):
                return visitor.visitDefinePad(self)
            else:
                return visitor.visitChildren(self)


    class DefineBarContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DefineBarContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefineBar"):
                return visitor.visitDefineBar(self)
            else:
                return visitor.visitChildren(self)


    class PrintStmtContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.PrintStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEBUGOUT(self):
            return self.getToken(VisualFoxpro9Parser.DEBUGOUT, 0)
        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitPrintStmt"):
                return visitor.visitPrintStmt(self)
            else:
                return visitor.visitChildren(self)


    class CopyMoveFileContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.CopyMoveFileContext, self).__init__(parser)
            self.copyFrom(ctx)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def RENAME(self):
            return self.getToken(VisualFoxpro9Parser.RENAME, 0)
        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)
        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCopyMoveFile"):
                return visitor.visitCopyMoveFile(self)
            else:
                return visitor.visitChildren(self)


    class AddObjectContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AddObjectContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(VisualFoxpro9Parser.ADD, 0)
        def OBJECT(self):
            return self.getToken(VisualFoxpro9Parser.OBJECT, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)

        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)
        def idAttr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdAttrContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitAddObject"):
                return visitor.visitAddObject(self)
            else:
                return visitor.visitChildren(self)


    class ReportContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ReportContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REPORT(self):
            return self.getToken(VisualFoxpro9Parser.REPORT, 0)
        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def NOEJECT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOEJECT)
            else:
                return self.getToken(VisualFoxpro9Parser.NOEJECT, i)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def PRINTER(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.PRINTER)
            else:
                return self.getToken(VisualFoxpro9Parser.PRINTER, i)
        def NOCONSOLE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOCONSOLE)
            else:
                return self.getToken(VisualFoxpro9Parser.NOCONSOLE, i)
        def PROMPT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.PROMPT)
            else:
                return self.getToken(VisualFoxpro9Parser.PROMPT, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitReport"):
                return visitor.visitReport(self)
            else:
                return visitor.visitChildren(self)


    class ModifyFileContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ModifyFileContext, self).__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(VisualFoxpro9Parser.MODIFY, 0)
        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)
        def COMMAND(self):
            return self.getToken(VisualFoxpro9Parser.COMMAND, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def IN(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.IN)
            else:
                return self.getToken(VisualFoxpro9Parser.IN, i)
        def AS(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.AS)
            else:
                return self.getToken(VisualFoxpro9Parser.AS, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def WINDOW(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WINDOW)
            else:
                return self.getToken(VisualFoxpro9Parser.WINDOW, i)
        def SCREEN(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SCREEN)
            else:
                return self.getToken(VisualFoxpro9Parser.SCREEN, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitModifyFile"):
                return visitor.visitModifyFile(self)
            else:
                return visitor.visitChildren(self)


    class CompileCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.CompileCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def COMPILE(self):
            return self.getToken(VisualFoxpro9Parser.COMPILE, 0)
        def ALL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ALL)
            else:
                return self.getToken(VisualFoxpro9Parser.ALL, i)
        def ENCRYPT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ENCRYPT)
            else:
                return self.getToken(VisualFoxpro9Parser.ENCRYPT, i)
        def NODEBUG(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NODEBUG)
            else:
                return self.getToken(VisualFoxpro9Parser.NODEBUG, i)
        def AS(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.AS)
            else:
                return self.getToken(VisualFoxpro9Parser.AS, i)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)
        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)
        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)
        def LABEL(self):
            return self.getToken(VisualFoxpro9Parser.LABEL, 0)
        def REPORT(self):
            return self.getToken(VisualFoxpro9Parser.REPORT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCompileCmd"):
                return visitor.visitCompileCmd(self)
            else:
                return visitor.visitChildren(self)


    class HideCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.HideCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def HIDE(self):
            return self.getToken(VisualFoxpro9Parser.HIDE, 0)
        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)
        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitHideCmd"):
                return visitor.visitHideCmd(self)
            else:
                return visitor.visitChildren(self)


    class AppendContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AppendContext, self).__init__(parser)
            self.copyFrom(ctx)

        def APPEND(self):
            return self.getToken(VisualFoxpro9Parser.APPEND, 0)
        def BLANK(self):
            return self.getToken(VisualFoxpro9Parser.BLANK, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def NOMENU(self):
            return self.getToken(VisualFoxpro9Parser.NOMENU, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitAppend"):
                return visitor.visitAppend(self)
            else:
                return visitor.visitChildren(self)


    class ScatterExprContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ScatterExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SCATTER(self):
            return self.getToken(VisualFoxpro9Parser.SCATTER, 0)
        def MEMVAR(self):
            return self.getToken(VisualFoxpro9Parser.MEMVAR, 0)
        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def FIELDS(self):
            return self.getToken(VisualFoxpro9Parser.FIELDS, 0)
        def MEMO(self):
            return self.getToken(VisualFoxpro9Parser.MEMO, 0)
        def BLANK(self):
            return self.getToken(VisualFoxpro9Parser.BLANK, 0)
        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)
        def LIKE(self):
            return self.getToken(VisualFoxpro9Parser.LIKE, 0)
        def EXCEPT(self):
            return self.getToken(VisualFoxpro9Parser.EXCEPT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitScatterExpr"):
                return visitor.visitScatterExpr(self)
            else:
                return visitor.visitChildren(self)


    class AssignContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AssignContext, self).__init__(parser)
            self.copyFrom(ctx)

        def STORE(self):
            return self.getToken(VisualFoxpro9Parser.STORE, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def idAttr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdAttrContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitAssign"):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)


    class DeleteRecordContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DeleteRecordContext, self).__init__(parser)
            self.inExpr = None # SpecialExprContext
            self.copyFrom(ctx)

        def RECALL(self):
            return self.getToken(VisualFoxpro9Parser.RECALL, 0)
        def DELETE(self):
            return self.getToken(VisualFoxpro9Parser.DELETE, 0)
        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def IN(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.IN)
            else:
                return self.getToken(VisualFoxpro9Parser.IN, i)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitDeleteRecord"):
                return visitor.visitDeleteRecord(self)
            else:
                return visitor.visitChildren(self)


    class ExprCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ExprCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitExprCmd"):
                return visitor.visitExprCmd(self)
            else:
                return visitor.visitChildren(self)



    def cmd(self):

        localctx = VisualFoxpro9Parser.CmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_cmd)
        self._la = 0 # Token type
        try:
            self.state = 1542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.AddObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 446
                self.match(VisualFoxpro9Parser.ADD)
                self.state = 447
                self.match(VisualFoxpro9Parser.OBJECT)
                self.state = 448
                self.identifier()
                self.state = 449
                self.asType()
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.WITH:
                    self.state = 450
                    self.match(VisualFoxpro9Parser.WITH)
                    self.state = 451
                    self.idAttr()
                    self.state = 452
                    self.match(VisualFoxpro9Parser.EQUALS)
                    self.state = 453
                    self.expr(0)
                    self.state = 461
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==VisualFoxpro9Parser.COMMA:
                        self.state = 454
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 455
                        self.idAttr()
                        self.state = 456
                        self.match(VisualFoxpro9Parser.EQUALS)
                        self.state = 457
                        self.expr(0)
                        self.state = 463
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.ProgramControlContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 466
                self.match(VisualFoxpro9Parser.PROGRAMCONTROL)
                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.AtPosContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 467
                self.match(VisualFoxpro9Parser.COMMERCIALAT)
                self.state = 468
                self.args()
                self.state = 482
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.CLEAR]:
                    self.state = 469
                    self.match(VisualFoxpro9Parser.CLEAR)
                    self.state = 472
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.TO:
                        self.state = 470
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 471
                        localctx.toArgs = self.args()


                    pass
                elif token in [VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.SAY]:
                    self.state = 478 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 478
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [VisualFoxpro9Parser.SAY]:
                            self.state = 474
                            self.match(VisualFoxpro9Parser.SAY)
                            self.state = 475
                            localctx.sayExpr = self.expr(0)
                            pass
                        elif token in [VisualFoxpro9Parser.STYLE]:
                            self.state = 476
                            self.match(VisualFoxpro9Parser.STYLE)
                            self.state = 477
                            localctx.styleExpr = self.expr(0)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 480 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==VisualFoxpro9Parser.STYLE or _la==VisualFoxpro9Parser.SAY):
                            break

                    pass
                elif token in [VisualFoxpro9Parser.EOF, VisualFoxpro9Parser.NL]:
                    pass
                else:
                    pass
                pass

            elif la_ == 4:
                localctx = VisualFoxpro9Parser.FuncDoContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 484
                self.match(VisualFoxpro9Parser.DO)
                self.state = 515
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 485
                    self.match(VisualFoxpro9Parser.FORM)
                    self.state = 488
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.QUESTION]:
                        self.state = 486
                        self.match(VisualFoxpro9Parser.QUESTION)
                        pass
                    elif token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.HASH, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.SHOW, VisualFoxpro9Parser.HIDE, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.MEMO, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.MENUS, VisualFoxpro9Parser.RESOURCES, VisualFoxpro9Parser.LIST, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.NOUPDATE, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.MODIFY, VisualFoxpro9Parser.COMMAND, VisualFoxpro9Parser.UNLOCK, VisualFoxpro9Parser.COMPILE, VisualFoxpro9Parser.SORT, VisualFoxpro9Parser.UPDATE, VisualFoxpro9Parser.RESTORE, VisualFoxpro9Parser.ZOOM, VisualFoxpro9Parser.MIN, VisualFoxpro9Parser.MAX, VisualFoxpro9Parser.NORM, VisualFoxpro9Parser.SIZE, VisualFoxpro9Parser.DOEVENTS, VisualFoxpro9Parser.FORCE, VisualFoxpro9Parser.JOIN, VisualFoxpro9Parser.TEXT, VisualFoxpro9Parser.ENDTEXT, VisualFoxpro9Parser.LINKED, VisualFoxpro9Parser.TEXTMERGE, VisualFoxpro9Parser.FLAGS, VisualFoxpro9Parser.PRETEXT, VisualFoxpro9Parser.MASTER, VisualFoxpro9Parser.TITLE, VisualFoxpro9Parser.ICON, VisualFoxpro9Parser.FILL, VisualFoxpro9Parser.ID]:
                        self.state = 487
                        self.specialExpr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 41)) & ~0x3f) == 0 and ((1 << (_la - 41)) & ((1 << (VisualFoxpro9Parser.TO - 41)) | (1 << (VisualFoxpro9Parser.WITH - 41)) | (1 << (VisualFoxpro9Parser.NAME - 41)))) != 0) or _la==VisualFoxpro9Parser.NOSHOW:
                        self.state = 500
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [VisualFoxpro9Parser.NAME]:
                            self.state = 490
                            self.match(VisualFoxpro9Parser.NAME)
                            self.state = 491
                            localctx.nameId = self.identifier()
                            self.state = 493
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==VisualFoxpro9Parser.LINKED:
                                self.state = 492
                                self.match(VisualFoxpro9Parser.LINKED)


                            pass
                        elif token in [VisualFoxpro9Parser.WITH]:
                            self.state = 495
                            self.match(VisualFoxpro9Parser.WITH)
                            self.state = 496
                            self.args()
                            pass
                        elif token in [VisualFoxpro9Parser.TO]:
                            self.state = 497
                            self.match(VisualFoxpro9Parser.TO)
                            self.state = 498
                            localctx.toId = self.identifier()
                            pass
                        elif token in [VisualFoxpro9Parser.NOSHOW]:
                            self.state = 499
                            self.match(VisualFoxpro9Parser.NOSHOW)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 504
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 505
                    self.specialExpr()
                    self.state = 512
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==VisualFoxpro9Parser.IN or _la==VisualFoxpro9Parser.WITH:
                        self.state = 510
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [VisualFoxpro9Parser.IN]:
                            self.state = 506
                            self.match(VisualFoxpro9Parser.IN)
                            self.state = 507
                            self.specialExpr()
                            pass
                        elif token in [VisualFoxpro9Parser.WITH]:
                            self.state = 508
                            self.match(VisualFoxpro9Parser.WITH)
                            self.state = 509
                            self.args()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 514
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                pass

            elif la_ == 5:
                localctx = VisualFoxpro9Parser.AssignContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 532
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 517
                    self.match(VisualFoxpro9Parser.STORE)
                    self.state = 518
                    self.expr(0)
                    self.state = 519
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 520
                    self.idAttr()
                    self.state = 525
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==VisualFoxpro9Parser.COMMA:
                        self.state = 521
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 522
                        self.idAttr()
                        self.state = 527
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 528
                    self.idAttr()
                    self.state = 529
                    self.match(VisualFoxpro9Parser.EQUALS)
                    self.state = 530
                    self.expr(0)
                    pass


                pass

            elif la_ == 6:
                localctx = VisualFoxpro9Parser.DeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 554
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 541
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.SCOPE]:
                        self.state = 534
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.EXTERNAL or _la==VisualFoxpro9Parser.SCOPE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 536
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                        if la_ == 1:
                            self.state = 535
                            _la = self._input.LA(1)
                            if not(_la==VisualFoxpro9Parser.ARRAY or _la==VisualFoxpro9Parser.DECLARE or _la==VisualFoxpro9Parser.DIMENSION):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        pass
                    elif token in [VisualFoxpro9Parser.DIMENSION]:
                        self.state = 538
                        self.match(VisualFoxpro9Parser.DIMENSION)
                        pass
                    elif token in [VisualFoxpro9Parser.DECLARE]:
                        self.state = 539
                        self.match(VisualFoxpro9Parser.DECLARE)
                        pass
                    elif token in [VisualFoxpro9Parser.PARAMETER]:
                        self.state = 540
                        self.match(VisualFoxpro9Parser.PARAMETER)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 543
                    self.declarationItem()
                    self.state = 548
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==VisualFoxpro9Parser.COMMA:
                        self.state = 544
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 545
                        self.declarationItem()
                        self.state = 550
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 551
                    self.match(VisualFoxpro9Parser.EXTERNAL)
                    self.state = 552
                    self.match(VisualFoxpro9Parser.PROCEDURE)
                    self.state = 553
                    self.specialExpr()
                    pass


                pass

            elif la_ == 7:
                localctx = VisualFoxpro9Parser.PrintStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 561
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.QUESTION]:
                    self.state = 556
                    self.match(VisualFoxpro9Parser.QUESTION)
                    self.state = 558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.QUESTION:
                        self.state = 557
                        self.match(VisualFoxpro9Parser.QUESTION)


                    pass
                elif token in [VisualFoxpro9Parser.DEBUGOUT]:
                    self.state = 560
                    self.match(VisualFoxpro9Parser.DEBUGOUT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 563
                    self.args()


                pass

            elif la_ == 8:
                localctx = VisualFoxpro9Parser.WaitCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 566
                self.match(VisualFoxpro9Parser.WAIT)
                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 583
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                    if la_ == 1:
                        self.state = 567
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 568
                        localctx.toExpr = self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 569
                        self.match(VisualFoxpro9Parser.WINDOW)
                        self.state = 575
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                        if la_ == 1:
                            self.state = 570
                            self.match(VisualFoxpro9Parser.AT)
                            self.state = 571
                            localctx.atExpr1 = self.expr(0)
                            self.state = 572
                            self.match(VisualFoxpro9Parser.COMMA)
                            self.state = 573
                            localctx.atExpr2 = self.expr(0)


                        pass

                    elif la_ == 3:
                        self.state = 577
                        self.match(VisualFoxpro9Parser.NOWAIT)
                        pass

                    elif la_ == 4:
                        self.state = 578
                        self.match(VisualFoxpro9Parser.CLEAR)
                        pass

                    elif la_ == 5:
                        self.state = 579
                        self.match(VisualFoxpro9Parser.NOCLEAR)
                        pass

                    elif la_ == 6:
                        self.state = 580
                        self.match(VisualFoxpro9Parser.TIMEOUT)
                        self.state = 581
                        localctx.timeout = self.expr(0)
                        pass

                    elif la_ == 7:
                        self.state = 582
                        localctx.message = self.expr(0)
                        pass


                    self.state = 587
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 9:
                localctx = VisualFoxpro9Parser.DeleteFileContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 591
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ERASE]:
                    self.state = 588
                    self.match(VisualFoxpro9Parser.ERASE)
                    pass
                elif token in [VisualFoxpro9Parser.DELETE]:
                    self.state = 589
                    self.match(VisualFoxpro9Parser.DELETE)
                    self.state = 590
                    self.match(VisualFoxpro9Parser.FILE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 595
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.HASH, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.SHOW, VisualFoxpro9Parser.HIDE, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.MEMO, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.MENUS, VisualFoxpro9Parser.RESOURCES, VisualFoxpro9Parser.LIST, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.NOUPDATE, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.MODIFY, VisualFoxpro9Parser.COMMAND, VisualFoxpro9Parser.UNLOCK, VisualFoxpro9Parser.COMPILE, VisualFoxpro9Parser.SORT, VisualFoxpro9Parser.UPDATE, VisualFoxpro9Parser.RESTORE, VisualFoxpro9Parser.ZOOM, VisualFoxpro9Parser.MIN, VisualFoxpro9Parser.MAX, VisualFoxpro9Parser.NORM, VisualFoxpro9Parser.SIZE, VisualFoxpro9Parser.DOEVENTS, VisualFoxpro9Parser.FORCE, VisualFoxpro9Parser.JOIN, VisualFoxpro9Parser.TEXT, VisualFoxpro9Parser.ENDTEXT, VisualFoxpro9Parser.LINKED, VisualFoxpro9Parser.TEXTMERGE, VisualFoxpro9Parser.FLAGS, VisualFoxpro9Parser.PRETEXT, VisualFoxpro9Parser.MASTER, VisualFoxpro9Parser.TITLE, VisualFoxpro9Parser.ICON, VisualFoxpro9Parser.FILL, VisualFoxpro9Parser.ID]:
                    self.state = 593
                    self.specialExpr()
                    pass
                elif token in [VisualFoxpro9Parser.QUESTION]:
                    self.state = 594
                    self.match(VisualFoxpro9Parser.QUESTION)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.RECYCLE:
                    self.state = 597
                    self.match(VisualFoxpro9Parser.RECYCLE)


                pass

            elif la_ == 10:
                localctx = VisualFoxpro9Parser.CopyMoveFileContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 603
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.RENAME]:
                    self.state = 600
                    self.match(VisualFoxpro9Parser.RENAME)
                    pass
                elif token in [VisualFoxpro9Parser.COPY]:
                    self.state = 601
                    self.match(VisualFoxpro9Parser.COPY)
                    self.state = 602
                    self.match(VisualFoxpro9Parser.FILE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 605
                self.specialExpr()
                self.state = 606
                self.match(VisualFoxpro9Parser.TO)
                self.state = 607
                self.specialExpr()
                pass

            elif la_ == 11:
                localctx = VisualFoxpro9Parser.ChMkRmDirContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 609
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.MKDIR or _la==VisualFoxpro9Parser.RMDIR or _la==VisualFoxpro9Parser.CHDIR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 610
                self.specialExpr()
                pass

            elif la_ == 12:
                localctx = VisualFoxpro9Parser.ReturnStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 611
                self.match(VisualFoxpro9Parser.RETURN)
                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 612
                    self.expr(0)


                pass

            elif la_ == 13:
                localctx = VisualFoxpro9Parser.OnStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 615
                self.match(VisualFoxpro9Parser.ON)
                self.state = 650
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 632
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                    if la_ == 1:
                        self.state = 616
                        self.match(VisualFoxpro9Parser.KEY)
                        self.state = 623
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                        if la_ == 1:
                            self.state = 617
                            self.match(VisualFoxpro9Parser.LABEL)
                            self.state = 618
                            self.identifier()
                            self.state = 621
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==VisualFoxpro9Parser.PLUS_SIGN:
                                self.state = 619
                                self.match(VisualFoxpro9Parser.PLUS_SIGN)
                                self.state = 620
                                self.identifier()




                        pass

                    elif la_ == 2:
                        self.state = 629
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                        if la_ == 1:
                            self.state = 625
                            self.match(VisualFoxpro9Parser.SELECTION)
                            self.state = 626
                            self.match(VisualFoxpro9Parser.BAR)
                            self.state = 627
                            self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                            self.state = 628
                            self.match(VisualFoxpro9Parser.OF)


                        self.state = 631
                        self.identifier()
                        pass


                    self.state = 635
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.CHDIR - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 260)) & ~0x3f) == 0 and ((1 << (_la - 260)) & ((1 << (VisualFoxpro9Parser.DEBUGOUT - 260)) | (1 << (VisualFoxpro9Parser.MENUS - 260)) | (1 << (VisualFoxpro9Parser.RESOURCES - 260)) | (1 << (VisualFoxpro9Parser.LIST - 260)) | (1 << (VisualFoxpro9Parser.HELP - 260)) | (1 << (VisualFoxpro9Parser.SAY - 260)) | (1 << (VisualFoxpro9Parser.COLLECTION - 260)) | (1 << (VisualFoxpro9Parser.SYSTEM - 260)) | (1 << (VisualFoxpro9Parser.TALK - 260)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 260)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 260)) | (1 << (VisualFoxpro9Parser.RELATION - 260)) | (1 << (VisualFoxpro9Parser.MODIFY - 260)) | (1 << (VisualFoxpro9Parser.COMMAND - 260)) | (1 << (VisualFoxpro9Parser.UNLOCK - 260)) | (1 << (VisualFoxpro9Parser.COMPILE - 260)) | (1 << (VisualFoxpro9Parser.SORT - 260)) | (1 << (VisualFoxpro9Parser.UPDATE - 260)) | (1 << (VisualFoxpro9Parser.RESTORE - 260)) | (1 << (VisualFoxpro9Parser.ZOOM - 260)) | (1 << (VisualFoxpro9Parser.MIN - 260)) | (1 << (VisualFoxpro9Parser.MAX - 260)) | (1 << (VisualFoxpro9Parser.NORM - 260)) | (1 << (VisualFoxpro9Parser.SIZE - 260)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 260)) | (1 << (VisualFoxpro9Parser.FORCE - 260)) | (1 << (VisualFoxpro9Parser.JOIN - 260)) | (1 << (VisualFoxpro9Parser.TEXT - 260)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 260)) | (1 << (VisualFoxpro9Parser.LINKED - 260)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 260)) | (1 << (VisualFoxpro9Parser.FLAGS - 260)) | (1 << (VisualFoxpro9Parser.PRETEXT - 260)) | (1 << (VisualFoxpro9Parser.MASTER - 260)) | (1 << (VisualFoxpro9Parser.TITLE - 260)) | (1 << (VisualFoxpro9Parser.ICON - 260)) | (1 << (VisualFoxpro9Parser.FILL - 260)) | (1 << (VisualFoxpro9Parser.ID - 260)))) != 0):
                        self.state = 634
                        self.cmd()


                    pass

                elif la_ == 2:
                    self.state = 641
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.PAD]:
                        self.state = 637
                        self.match(VisualFoxpro9Parser.PAD)
                        self.state = 638
                        self.identifier()
                        pass
                    elif token in [VisualFoxpro9Parser.BAR]:
                        self.state = 639
                        self.match(VisualFoxpro9Parser.BAR)
                        self.state = 640
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 643
                    self.match(VisualFoxpro9Parser.OF)
                    self.state = 644
                    self.identifier()
                    self.state = 648
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ACTIVATE:
                        self.state = 645
                        self.match(VisualFoxpro9Parser.ACTIVATE)
                        self.state = 646
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.MENU or _la==VisualFoxpro9Parser.POPUP):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 647
                        self.identifier()


                    pass


                pass

            elif la_ == 14:
                localctx = VisualFoxpro9Parser.ReleaseContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 652
                self.match(VisualFoxpro9Parser.RELEASE)
                self.state = 663
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 653
                    self.match(VisualFoxpro9Parser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 655
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                    if la_ == 1:
                        self.state = 654
                        localctx.vartype = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.PROCEDURE or _la==VisualFoxpro9Parser.CLASSLIB):
                            localctx.vartype = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 657
                    self.args()
                    pass

                elif la_ == 3:
                    self.state = 658
                    self.match(VisualFoxpro9Parser.POPUP)
                    self.state = 659
                    self.args()
                    self.state = 661
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.EXTENDED:
                        self.state = 660
                        self.match(VisualFoxpro9Parser.EXTENDED)


                    pass


                pass

            elif la_ == 15:
                localctx = VisualFoxpro9Parser.SetStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 665
                self.match(VisualFoxpro9Parser.SET)
                self.state = 666
                self.setCmd()
                pass

            elif la_ == 16:
                localctx = VisualFoxpro9Parser.PushContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 667
                self.match(VisualFoxpro9Parser.PUSH)
                self.state = 674
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.KEY]:
                    self.state = 668
                    self.match(VisualFoxpro9Parser.KEY)
                    self.state = 670
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.CLEAR:
                        self.state = 669
                        self.match(VisualFoxpro9Parser.CLEAR)


                    pass
                elif token in [VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.POPUP]:
                    self.state = 672
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.MENU or _la==VisualFoxpro9Parser.POPUP):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 673
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 17:
                localctx = VisualFoxpro9Parser.PopContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 676
                self.match(VisualFoxpro9Parser.POP)
                self.state = 692
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.KEY]:
                    self.state = 677
                    self.match(VisualFoxpro9Parser.KEY)
                    self.state = 679
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ALL:
                        self.state = 678
                        self.match(VisualFoxpro9Parser.ALL)


                    pass
                elif token in [VisualFoxpro9Parser.MENU]:
                    self.state = 681
                    self.match(VisualFoxpro9Parser.MENU)
                    self.state = 687
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                        self.state = 685
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                        if la_ == 1:
                            self.state = 682
                            self.identifier()
                            pass

                        elif la_ == 2:
                            self.state = 683
                            self.match(VisualFoxpro9Parser.TO)
                            self.state = 684
                            self.match(VisualFoxpro9Parser.MASTER)
                            pass


                        self.state = 689
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [VisualFoxpro9Parser.POPUP]:
                    self.state = 690
                    self.match(VisualFoxpro9Parser.POPUP)
                    self.state = 691
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 18:
                localctx = VisualFoxpro9Parser.KeyboardContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 694
                self.match(VisualFoxpro9Parser.KEYBOARD)
                self.state = 695
                self.expr(0)
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.PLAIN:
                    self.state = 696
                    self.match(VisualFoxpro9Parser.PLAIN)


                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.CLEAR:
                    self.state = 699
                    self.match(VisualFoxpro9Parser.CLEAR)


                pass

            elif la_ == 19:
                localctx = VisualFoxpro9Parser.DefineMenuContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 702
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 703
                self.match(VisualFoxpro9Parser.MENU)
                self.state = 704
                self.specialExpr()

                self.state = 705
                self.match(VisualFoxpro9Parser.BAR)
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.AT:
                    self.state = 706
                    self.match(VisualFoxpro9Parser.AT)
                    self.state = 707
                    self.match(VisualFoxpro9Parser.LINE)
                    self.state = 708
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 711
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 717
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                    if la_ == 1:
                        self.state = 712
                        self.match(VisualFoxpro9Parser.SCREEN)
                        pass

                    elif la_ == 2:
                        self.state = 714
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                        if la_ == 1:
                            self.state = 713
                            self.match(VisualFoxpro9Parser.WINDOW)


                        self.state = 716
                        self.specialExpr()
                        pass




                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NOMARGIN:
                    self.state = 721
                    self.match(VisualFoxpro9Parser.NOMARGIN)


                pass

            elif la_ == 20:
                localctx = VisualFoxpro9Parser.DefinePadContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 724
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 725
                self.match(VisualFoxpro9Parser.PAD)
                self.state = 726
                self.specialExpr()
                self.state = 727
                self.match(VisualFoxpro9Parser.OF)
                self.state = 728
                self.specialExpr()
                self.state = 729
                self.match(VisualFoxpro9Parser.PROMPT)
                self.state = 730
                self.expr(0)
                self.state = 735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.AT:
                    self.state = 731
                    self.match(VisualFoxpro9Parser.AT)
                    self.state = 732
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                    self.state = 733
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 734
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                self.state = 741
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.BEFORE]:
                    self.state = 737
                    self.match(VisualFoxpro9Parser.BEFORE)
                    self.state = 738
                    self.identifier()
                    pass
                elif token in [VisualFoxpro9Parser.AFTER]:
                    self.state = 739
                    self.match(VisualFoxpro9Parser.AFTER)
                    self.state = 740
                    self.identifier()
                    pass
                elif token in [VisualFoxpro9Parser.EOF, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.NL]:
                    pass
                else:
                    pass
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NEGOTIATE:
                    self.state = 743
                    self.match(VisualFoxpro9Parser.NEGOTIATE)
                    self.state = 744
                    self.identifier()
                    self.state = 747
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.COMMA:
                        self.state = 745
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 746
                        self.identifier()




                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.FONT:
                    self.state = 751
                    self.match(VisualFoxpro9Parser.FONT)
                    self.state = 752
                    self.identifier()
                    self.state = 763
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.COMMA:
                        self.state = 753
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 754
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 761
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.COMMA:
                            self.state = 755
                            self.match(VisualFoxpro9Parser.COMMA)
                            self.state = 756
                            self.expr(0)
                            self.state = 759
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==VisualFoxpro9Parser.COMMA:
                                self.state = 757
                                self.match(VisualFoxpro9Parser.COMMA)
                                self.state = 758
                                self.identifier()








                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.STYLE:
                    self.state = 767
                    self.match(VisualFoxpro9Parser.STYLE)
                    self.state = 768
                    self.identifier()


                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MESSAGE:
                    self.state = 771
                    self.match(VisualFoxpro9Parser.MESSAGE)
                    self.state = 772
                    self.expr(0)


                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.KEY:
                    self.state = 775
                    self.match(VisualFoxpro9Parser.KEY)
                    self.state = 776
                    self.identifier()
                    self.state = 779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.PLUS_SIGN:
                        self.state = 777
                        self.match(VisualFoxpro9Parser.PLUS_SIGN)
                        self.state = 778
                        self.identifier()


                    self.state = 783
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.COMMA:
                        self.state = 781
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 782
                        self.expr(0)




                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MARK:
                    self.state = 787
                    self.match(VisualFoxpro9Parser.MARK)
                    self.state = 788
                    self.identifier()


                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.SKIPKW:
                    self.state = 791
                    self.match(VisualFoxpro9Parser.SKIPKW)
                    self.state = 794
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.FOR:
                        self.state = 792
                        self.match(VisualFoxpro9Parser.FOR)
                        self.state = 793
                        self.expr(0)




                self.state = 801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COLOR:
                    self.state = 798
                    self.match(VisualFoxpro9Parser.COLOR)
                    self.state = 799
                    self.match(VisualFoxpro9Parser.SCHEME)
                    self.state = 800
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                pass

            elif la_ == 21:
                localctx = VisualFoxpro9Parser.DefinePopupContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 803
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 804
                self.match(VisualFoxpro9Parser.POPUP)
                self.state = 805
                self.specialExpr()
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.SHADOW:
                    self.state = 806
                    self.match(VisualFoxpro9Parser.SHADOW)


                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MARGIN:
                    self.state = 809
                    self.match(VisualFoxpro9Parser.MARGIN)


                self.state = 813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.RELATIVE:
                    self.state = 812
                    self.match(VisualFoxpro9Parser.RELATIVE)


                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COLOR:
                    self.state = 815
                    self.match(VisualFoxpro9Parser.COLOR)
                    self.state = 816
                    self.match(VisualFoxpro9Parser.SCHEME)
                    self.state = 817
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                pass

            elif la_ == 22:
                localctx = VisualFoxpro9Parser.DefineBarContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 820
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 821
                self.match(VisualFoxpro9Parser.BAR)
                self.state = 822
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                self.state = 823
                self.match(VisualFoxpro9Parser.OF)
                self.state = 824
                self.identifier()
                self.state = 825
                self.match(VisualFoxpro9Parser.PROMPT)
                self.state = 826
                self.expr(0)
                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MESSAGE:
                    self.state = 827
                    self.match(VisualFoxpro9Parser.MESSAGE)
                    self.state = 828
                    self.expr(0)


                pass

            elif la_ == 23:
                localctx = VisualFoxpro9Parser.ActivateWindowContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 831
                self.match(VisualFoxpro9Parser.ACTIVATE)
                self.state = 832
                self.match(VisualFoxpro9Parser.WINDOW)
                self.state = 835
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 833
                    self.parameters()
                    pass

                elif la_ == 2:
                    self.state = 834
                    self.match(VisualFoxpro9Parser.ALL)
                    pass


                self.state = 845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 837
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 843
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                    if la_ == 1:
                        self.state = 839
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                        if la_ == 1:
                            self.state = 838
                            self.match(VisualFoxpro9Parser.WINDOW)


                        self.state = 841
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 842
                        self.match(VisualFoxpro9Parser.SCREEN)
                        pass




                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (VisualFoxpro9Parser.TOP - 117)) | (1 << (VisualFoxpro9Parser.BOTTOM - 117)) | (1 << (VisualFoxpro9Parser.SAME - 117)))) != 0):
                    self.state = 847
                    _la = self._input.LA(1)
                    if not(((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (VisualFoxpro9Parser.TOP - 117)) | (1 << (VisualFoxpro9Parser.BOTTOM - 117)) | (1 << (VisualFoxpro9Parser.SAME - 117)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NOSHOW:
                    self.state = 850
                    self.match(VisualFoxpro9Parser.NOSHOW)


                pass

            elif la_ == 24:
                localctx = VisualFoxpro9Parser.ActivateMenuContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 853
                self.match(VisualFoxpro9Parser.ACTIVATE)
                self.state = 854
                self.match(VisualFoxpro9Parser.MENU)
                self.state = 855
                self.identifier()
                self.state = 857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NOWAIT:
                    self.state = 856
                    self.match(VisualFoxpro9Parser.NOWAIT)


                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.PAD:
                    self.state = 859
                    self.match(VisualFoxpro9Parser.PAD)
                    self.state = 860
                    self.identifier()


                pass

            elif la_ == 25:
                localctx = VisualFoxpro9Parser.DeactivateContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 863
                self.match(VisualFoxpro9Parser.DEACTIVATE)
                self.state = 864
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.MENU or _la==VisualFoxpro9Parser.POPUP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 867
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                if la_ == 1:
                    self.state = 865
                    self.match(VisualFoxpro9Parser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 866
                    self.parameters()
                    pass


                pass

            elif la_ == 26:
                localctx = VisualFoxpro9Parser.ModifyWindowContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 869
                self.match(VisualFoxpro9Parser.MODIFY)
                self.state = 870
                self.match(VisualFoxpro9Parser.WINDOW)
                self.state = 873
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 871
                    self.match(VisualFoxpro9Parser.SCREEN)
                    pass

                elif la_ == 2:
                    self.state = 872
                    self.identifier()
                    pass


                self.state = 905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 903
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                    if la_ == 1:
                        self.state = 875
                        self.match(VisualFoxpro9Parser.FROM)
                        self.state = 876
                        self.args()
                        self.state = 877
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 878
                        self.args()
                        pass

                    elif la_ == 2:
                        self.state = 880
                        self.match(VisualFoxpro9Parser.AT)
                        self.state = 881
                        self.args()
                        self.state = 882
                        self.match(VisualFoxpro9Parser.SIZE)
                        self.state = 883
                        self.args()
                        pass

                    elif la_ == 3:
                        self.state = 885
                        self.match(VisualFoxpro9Parser.FONT)
                        self.state = 886
                        self.args()
                        pass

                    elif la_ == 4:
                        self.state = 887
                        self.match(VisualFoxpro9Parser.STYLE)
                        self.state = 888
                        self.expr(0)
                        pass

                    elif la_ == 5:
                        self.state = 889
                        self.match(VisualFoxpro9Parser.TITLE)
                        self.state = 890
                        self.expr(0)
                        pass

                    elif la_ == 6:
                        self.state = 891
                        self.identifier()
                        pass

                    elif la_ == 7:
                        self.state = 892
                        self.match(VisualFoxpro9Parser.ICON)
                        self.state = 893
                        self.match(VisualFoxpro9Parser.FILE)
                        self.state = 894
                        self.specialExpr()
                        pass

                    elif la_ == 8:
                        self.state = 895
                        self.match(VisualFoxpro9Parser.FILL)
                        self.state = 896
                        self.match(VisualFoxpro9Parser.FILE)
                        self.state = 897
                        self.specialExpr()
                        pass

                    elif la_ == 9:
                        self.state = 898
                        self.match(VisualFoxpro9Parser.COLOR)
                        self.state = 899
                        self.match(VisualFoxpro9Parser.SCHEME)
                        self.state = 900
                        self.expr(0)
                        pass

                    elif la_ == 10:
                        self.state = 901
                        self.match(VisualFoxpro9Parser.COLOR)
                        self.state = 902
                        self.args()
                        pass


                    self.state = 907
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 27:
                localctx = VisualFoxpro9Parser.ModifyFileContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 908
                self.match(VisualFoxpro9Parser.MODIFY)
                self.state = 909
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.FILE or _la==VisualFoxpro9Parser.COMMAND):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 912
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.QUESTION]:
                    self.state = 910
                    self.match(VisualFoxpro9Parser.QUESTION)
                    pass
                elif token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.HASH, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.SHOW, VisualFoxpro9Parser.HIDE, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.MEMO, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.MENUS, VisualFoxpro9Parser.RESOURCES, VisualFoxpro9Parser.LIST, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.NOUPDATE, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.MODIFY, VisualFoxpro9Parser.COMMAND, VisualFoxpro9Parser.UNLOCK, VisualFoxpro9Parser.COMPILE, VisualFoxpro9Parser.SORT, VisualFoxpro9Parser.UPDATE, VisualFoxpro9Parser.RESTORE, VisualFoxpro9Parser.ZOOM, VisualFoxpro9Parser.MIN, VisualFoxpro9Parser.MAX, VisualFoxpro9Parser.NORM, VisualFoxpro9Parser.SIZE, VisualFoxpro9Parser.DOEVENTS, VisualFoxpro9Parser.FORCE, VisualFoxpro9Parser.JOIN, VisualFoxpro9Parser.TEXT, VisualFoxpro9Parser.ENDTEXT, VisualFoxpro9Parser.LINKED, VisualFoxpro9Parser.TEXTMERGE, VisualFoxpro9Parser.FLAGS, VisualFoxpro9Parser.PRETEXT, VisualFoxpro9Parser.MASTER, VisualFoxpro9Parser.TITLE, VisualFoxpro9Parser.ICON, VisualFoxpro9Parser.FILL, VisualFoxpro9Parser.ID]:
                    self.state = 911
                    self.specialExpr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 923
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                    if la_ == 1:
                        self.state = 914
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 918
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [VisualFoxpro9Parser.WINDOW]:
                            self.state = 915
                            self.match(VisualFoxpro9Parser.WINDOW)
                            self.state = 916
                            self.identifier()
                            pass
                        elif token in [VisualFoxpro9Parser.SCREEN]:
                            self.state = 917
                            self.match(VisualFoxpro9Parser.SCREEN)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 2:
                        self.state = 920
                        self.match(VisualFoxpro9Parser.AS)
                        self.state = 921
                        self.expr(0)
                        pass

                    elif la_ == 3:
                        self.state = 922
                        self.identifier()
                        pass


                    self.state = 927
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 28:
                localctx = VisualFoxpro9Parser.RaiseErrorContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 928
                self.match(VisualFoxpro9Parser.ERROR)
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 929
                    self.expr(0)


                pass

            elif la_ == 29:
                localctx = VisualFoxpro9Parser.ThrowErrorContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 932
                self.match(VisualFoxpro9Parser.THROW)
                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 933
                    self.expr(0)


                pass

            elif la_ == 30:
                localctx = VisualFoxpro9Parser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 936
                self.match(VisualFoxpro9Parser.CREATE)
                self.state = 937
                _la = self._input.LA(1)
                if not(((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & ((1 << (VisualFoxpro9Parser.TABLE - 63)) | (1 << (VisualFoxpro9Parser.DBF - 63)) | (1 << (VisualFoxpro9Parser.CURSOR - 63)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 938
                self.specialExpr()
                self.state = 956
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.FREE]:
                    self.state = 940
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.FREE:
                        self.state = 939
                        self.match(VisualFoxpro9Parser.FREE)


                    self.state = 942
                    self.match(VisualFoxpro9Parser.LEFTPAREN)
                    self.state = 943
                    self.tableField()
                    self.state = 948
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==VisualFoxpro9Parser.COMMA:
                        self.state = 944
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 945
                        self.tableField()
                        self.state = 950
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 951
                    self.match(VisualFoxpro9Parser.RIGHTPAREN)
                    pass
                elif token in [VisualFoxpro9Parser.FROM]:
                    self.state = 953
                    self.match(VisualFoxpro9Parser.FROM)
                    self.state = 954
                    self.match(VisualFoxpro9Parser.ARRAY)
                    self.state = 955
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 31:
                localctx = VisualFoxpro9Parser.AlterTableContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 958
                self.match(VisualFoxpro9Parser.ALTER)
                self.state = 959
                self.match(VisualFoxpro9Parser.TABLE)
                self.state = 960
                self.specialExpr()
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.ADD or _la==VisualFoxpro9Parser.ALTER or _la==VisualFoxpro9Parser.DROP:
                    self.state = 974
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.ADD]:
                        self.state = 961
                        self.match(VisualFoxpro9Parser.ADD)
                        self.state = 962
                        self.match(VisualFoxpro9Parser.COLUMN)
                        self.state = 963
                        self.tableField()
                        pass
                    elif token in [VisualFoxpro9Parser.DROP]:
                        self.state = 964
                        self.match(VisualFoxpro9Parser.DROP)
                        self.state = 965
                        self.match(VisualFoxpro9Parser.COLUMN)
                        self.state = 966
                        self.identifier()
                        pass
                    elif token in [VisualFoxpro9Parser.ALTER]:
                        self.state = 967
                        self.match(VisualFoxpro9Parser.ALTER)
                        self.state = 968
                        self.match(VisualFoxpro9Parser.COLUMN)
                        self.state = 969
                        self.identifier()
                        self.state = 972
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.NOT:
                            self.state = 970
                            self.match(VisualFoxpro9Parser.NOT)
                            self.state = 971
                            self.match(VisualFoxpro9Parser.NULL)


                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 978
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 32:
                localctx = VisualFoxpro9Parser.SelectContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 979
                self.match(VisualFoxpro9Parser.SELECT)
                self.state = 1006
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                if la_ == 1:
                    self.state = 980
                    localctx.tablename = self.specialExpr()
                    pass

                elif la_ == 2:
                    self.state = 982
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                    if la_ == 1:
                        self.state = 981
                        self.match(VisualFoxpro9Parser.DISTINCT)


                    self.state = 986
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.HASH, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.SHOW, VisualFoxpro9Parser.HIDE, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.MEMO, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.MENUS, VisualFoxpro9Parser.RESOURCES, VisualFoxpro9Parser.LIST, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.NOUPDATE, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.MODIFY, VisualFoxpro9Parser.COMMAND, VisualFoxpro9Parser.UNLOCK, VisualFoxpro9Parser.COMPILE, VisualFoxpro9Parser.SORT, VisualFoxpro9Parser.UPDATE, VisualFoxpro9Parser.RESTORE, VisualFoxpro9Parser.ZOOM, VisualFoxpro9Parser.MIN, VisualFoxpro9Parser.MAX, VisualFoxpro9Parser.NORM, VisualFoxpro9Parser.SIZE, VisualFoxpro9Parser.DOEVENTS, VisualFoxpro9Parser.FORCE, VisualFoxpro9Parser.JOIN, VisualFoxpro9Parser.TEXT, VisualFoxpro9Parser.ENDTEXT, VisualFoxpro9Parser.LINKED, VisualFoxpro9Parser.TEXTMERGE, VisualFoxpro9Parser.FLAGS, VisualFoxpro9Parser.PRETEXT, VisualFoxpro9Parser.MASTER, VisualFoxpro9Parser.TITLE, VisualFoxpro9Parser.ICON, VisualFoxpro9Parser.FILL, VisualFoxpro9Parser.ID]:
                        self.state = 984
                        self.specialArgs()
                        pass
                    elif token in [VisualFoxpro9Parser.ASTERISK]:
                        self.state = 985
                        self.match(VisualFoxpro9Parser.ASTERISK)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 990
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.FROM:
                        self.state = 988
                        self.match(VisualFoxpro9Parser.FROM)
                        self.state = 989
                        localctx.fromExpr = self.specialExpr()


                    self.state = 994
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.WHERE:
                        self.state = 992
                        self.match(VisualFoxpro9Parser.WHERE)
                        self.state = 993
                        localctx.whereExpr = self.expr(0)


                    self.state = 999
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.INTO:
                        self.state = 996
                        self.match(VisualFoxpro9Parser.INTO)
                        self.state = 997
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.TABLE or _la==VisualFoxpro9Parser.CURSOR):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 998
                        localctx.intoExpr = self.specialExpr()


                    self.state = 1004
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ORDER:
                        self.state = 1001
                        self.match(VisualFoxpro9Parser.ORDER)
                        self.state = 1002
                        self.match(VisualFoxpro9Parser.BY)
                        self.state = 1003
                        localctx.orderbyid = self.identifier()


                    pass


                pass

            elif la_ == 33:
                localctx = VisualFoxpro9Parser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 1008
                self.match(VisualFoxpro9Parser.USE)
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 1022
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                    if la_ == 1:
                        self.state = 1009
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1010
                        localctx.workArea = self.specialExpr()
                        pass

                    elif la_ == 2:
                        self.state = 1011
                        self.match(VisualFoxpro9Parser.ORDER)
                        self.state = 1013
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                        if la_ == 1:
                            self.state = 1012
                            self.match(VisualFoxpro9Parser.TAG)


                        self.state = 1015
                        localctx.orderExpr = self.expr(0)
                        pass

                    elif la_ == 3:
                        self.state = 1016
                        self.match(VisualFoxpro9Parser.ALIAS)
                        self.state = 1017
                        localctx.aliasExpr = self.specialExpr()
                        pass

                    elif la_ == 4:
                        self.state = 1018
                        self.match(VisualFoxpro9Parser.SHARED)
                        pass

                    elif la_ == 5:
                        self.state = 1019
                        self.match(VisualFoxpro9Parser.EXCLUSIVE)
                        pass

                    elif la_ == 6:
                        self.state = 1020
                        self.match(VisualFoxpro9Parser.NOUPDATE)
                        pass

                    elif la_ == 7:
                        self.state = 1021
                        localctx.name = self.specialExpr()
                        pass


                    self.state = 1026
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 34:
                localctx = VisualFoxpro9Parser.LocateContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 1027
                self.match(VisualFoxpro9Parser.LOCATE)
                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (VisualFoxpro9Parser.FOR - 81)) | (1 << (VisualFoxpro9Parser.WHILE - 81)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 81)) | (1 << (VisualFoxpro9Parser.ALL - 81)) | (1 << (VisualFoxpro9Parser.RECORD - 81)) | (1 << (VisualFoxpro9Parser.NEXT - 81)) | (1 << (VisualFoxpro9Parser.REST - 81)))) != 0):
                    self.state = 1028
                    self.queryCondition()
                    self.state = 1033
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 35:
                localctx = VisualFoxpro9Parser.ContinueLocateContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 1034
                self.match(VisualFoxpro9Parser.CONTINUE)
                pass

            elif la_ == 36:
                localctx = VisualFoxpro9Parser.ReplaceContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 1035
                self.match(VisualFoxpro9Parser.REPLACE)
                self.state = 1043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 1041
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                    if la_ == 1:
                        self.state = 1036
                        self.queryCondition()
                        pass

                    elif la_ == 2:
                        self.state = 1037
                        self.specialExpr()
                        self.state = 1038
                        self.match(VisualFoxpro9Parser.WITH)
                        self.state = 1039
                        self.expr(0)
                        pass


                    self.state = 1045
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 37:
                localctx = VisualFoxpro9Parser.IndexOnContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 1046
                self.match(VisualFoxpro9Parser.INDEX)
                self.state = 1047
                self.match(VisualFoxpro9Parser.ON)
                self.state = 1048
                self.specialExpr()
                self.state = 1049
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.TO or _la==VisualFoxpro9Parser.TAG):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1050
                self.specialExpr()
                self.state = 1052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COMPACT:
                    self.state = 1051
                    self.match(VisualFoxpro9Parser.COMPACT)


                self.state = 1055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING:
                    self.state = 1054
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.UNIQUE or _la==VisualFoxpro9Parser.CANDIDATE:
                    self.state = 1057
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.UNIQUE or _la==VisualFoxpro9Parser.CANDIDATE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1060
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass

            elif la_ == 38:
                localctx = VisualFoxpro9Parser.CountContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 1063
                self.match(VisualFoxpro9Parser.COUNT)
                self.state = 1069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.TO or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (VisualFoxpro9Parser.FOR - 81)) | (1 << (VisualFoxpro9Parser.WHILE - 81)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 81)) | (1 << (VisualFoxpro9Parser.ALL - 81)) | (1 << (VisualFoxpro9Parser.RECORD - 81)) | (1 << (VisualFoxpro9Parser.NEXT - 81)) | (1 << (VisualFoxpro9Parser.REST - 81)))) != 0):
                    self.state = 1067
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.TO]:
                        self.state = 1064
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1065
                        localctx.toExpr = self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST]:
                        self.state = 1066
                        self.queryCondition()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1071
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 39:
                localctx = VisualFoxpro9Parser.SumContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 1072
                self.match(VisualFoxpro9Parser.SUM)
                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 1077
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                    if la_ == 1:
                        self.state = 1073
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1074
                        localctx.toExpr = self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 1075
                        self.queryCondition()
                        pass

                    elif la_ == 3:
                        self.state = 1076
                        localctx.sumExpr = self.expr(0)
                        pass


                    self.state = 1081
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 40:
                localctx = VisualFoxpro9Parser.SortCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 1082
                self.match(VisualFoxpro9Parser.SORT)
                self.state = 1083
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1084
                self.expr(0)
                self.state = 1085
                self.match(VisualFoxpro9Parser.ON)
                self.state = 1086
                self.expr(0)
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.FORWARDSLASH:
                    self.state = 1087
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    self.state = 1088
                    self.identifier()
                    self.state = 1093
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1105
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.COMMA:
                    self.state = 1094
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1095
                    self.expr(0)
                    self.state = 1100
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==VisualFoxpro9Parser.FORWARDSLASH:
                        self.state = 1096
                        self.match(VisualFoxpro9Parser.FORWARDSLASH)
                        self.state = 1097
                        self.identifier()
                        self.state = 1102
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1107
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (VisualFoxpro9Parser.FOR - 81)) | (1 << (VisualFoxpro9Parser.WHILE - 81)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 81)) | (1 << (VisualFoxpro9Parser.ALL - 81)) | (1 << (VisualFoxpro9Parser.RECORD - 81)) | (1 << (VisualFoxpro9Parser.NEXT - 81)) | (1 << (VisualFoxpro9Parser.REST - 81)))) != 0) or ((((_la - 204)) & ~0x3f) == 0 and ((1 << (_la - 204)) & ((1 << (VisualFoxpro9Parser.ASCENDING - 204)) | (1 << (VisualFoxpro9Parser.DESCENDING - 204)) | (1 << (VisualFoxpro9Parser.FIELDS - 204)))) != 0):
                    self.state = 1116
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.ASCENDING]:
                        self.state = 1108
                        self.match(VisualFoxpro9Parser.ASCENDING)
                        pass
                    elif token in [VisualFoxpro9Parser.DESCENDING]:
                        self.state = 1109
                        self.match(VisualFoxpro9Parser.DESCENDING)
                        pass
                    elif token in [VisualFoxpro9Parser.FIELDS]:
                        self.state = 1110
                        self.match(VisualFoxpro9Parser.FIELDS)
                        self.state = 1112
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                        if la_ == 1:
                            self.state = 1111
                            _la = self._input.LA(1)
                            if not(_la==VisualFoxpro9Parser.EXCEPT or _la==VisualFoxpro9Parser.LIKE):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 1114
                        self.args()
                        pass
                    elif token in [VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST]:
                        self.state = 1115
                        self.queryCondition()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1120
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 41:
                localctx = VisualFoxpro9Parser.DeleteRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 1121
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.DELETE or _la==VisualFoxpro9Parser.RECALL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.IN or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (VisualFoxpro9Parser.FOR - 81)) | (1 << (VisualFoxpro9Parser.WHILE - 81)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 81)) | (1 << (VisualFoxpro9Parser.ALL - 81)) | (1 << (VisualFoxpro9Parser.RECORD - 81)) | (1 << (VisualFoxpro9Parser.NEXT - 81)) | (1 << (VisualFoxpro9Parser.REST - 81)))) != 0):
                    self.state = 1125
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST]:
                        self.state = 1122
                        self.queryCondition()
                        pass
                    elif token in [VisualFoxpro9Parser.IN]:
                        self.state = 1123
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1124
                        localctx.inExpr = self.specialExpr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1129
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 42:
                localctx = VisualFoxpro9Parser.AppendFromContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 1130
                self.match(VisualFoxpro9Parser.APPEND)
                self.state = 1131
                self.match(VisualFoxpro9Parser.FROM)
                self.state = 1139
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                if la_ == 1:
                    self.state = 1132
                    self.match(VisualFoxpro9Parser.ARRAY)
                    self.state = 1133
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 1134
                    self.specialExpr()
                    self.state = 1135
                    self.match(VisualFoxpro9Parser.FOR)
                    self.state = 1136
                    self.expr(0)
                    pass

                elif la_ == 3:
                    self.state = 1138
                    self.specialExpr()
                    pass


                self.state = 1143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.TYPE:
                    self.state = 1141
                    self.match(VisualFoxpro9Parser.TYPE)
                    self.state = 1142
                    localctx.typeExpr = self.specialExpr()


                pass

            elif la_ == 43:
                localctx = VisualFoxpro9Parser.AppendContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 1145
                self.match(VisualFoxpro9Parser.APPEND)
                self.state = 1147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.BLANK:
                    self.state = 1146
                    self.match(VisualFoxpro9Parser.BLANK)


                self.state = 1155
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                if la_ == 1:
                    self.state = 1149
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1150
                    self.specialExpr()
                    self.state = 1151
                    self.match(VisualFoxpro9Parser.NOMENU)

                elif la_ == 2:
                    self.state = 1153
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1154
                    self.specialExpr()


                pass

            elif la_ == 44:
                localctx = VisualFoxpro9Parser.InsertContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 1157
                self.match(VisualFoxpro9Parser.INSERT)
                self.state = 1158
                self.match(VisualFoxpro9Parser.INTO)
                self.state = 1159
                self.specialExpr()
                self.state = 1179
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.FROM]:
                    self.state = 1160
                    self.match(VisualFoxpro9Parser.FROM)
                    self.state = 1166
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.ARRAY]:
                        self.state = 1161
                        self.match(VisualFoxpro9Parser.ARRAY)
                        self.state = 1162
                        self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.MEMVAR]:
                        self.state = 1163
                        self.match(VisualFoxpro9Parser.MEMVAR)
                        pass
                    elif token in [VisualFoxpro9Parser.NAME]:
                        self.state = 1164
                        self.match(VisualFoxpro9Parser.NAME)
                        self.state = 1165
                        self.expr(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.VALUES]:
                    self.state = 1172
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.LEFTPAREN:
                        self.state = 1168
                        self.match(VisualFoxpro9Parser.LEFTPAREN)
                        self.state = 1169
                        self.specialArgs()
                        self.state = 1170
                        self.match(VisualFoxpro9Parser.RIGHTPAREN)


                    self.state = 1174
                    self.match(VisualFoxpro9Parser.VALUES)
                    self.state = 1175
                    self.match(VisualFoxpro9Parser.LEFTPAREN)
                    self.state = 1176
                    self.args()
                    self.state = 1177
                    self.match(VisualFoxpro9Parser.RIGHTPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 45:
                localctx = VisualFoxpro9Parser.SkipRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 1181
                self.match(VisualFoxpro9Parser.SKIPKW)
                self.state = 1183
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1182
                    self.expr(0)


                self.state = 1187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1185
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1186
                    self.specialExpr()


                pass

            elif la_ == 46:
                localctx = VisualFoxpro9Parser.PackContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 1189
                self.match(VisualFoxpro9Parser.PACK)
                self.state = 1203
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1190
                    self.match(VisualFoxpro9Parser.DATABASE)
                    pass

                elif la_ == 2:
                    self.state = 1192
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                    if la_ == 1:
                        self.state = 1191
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.DBF or _la==VisualFoxpro9Parser.MEMO):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1201
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                    if la_ == 1:
                        self.state = 1194
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1195
                        localctx.workArea = self.specialExpr()

                    elif la_ == 2:
                        self.state = 1196
                        localctx.tableName = self.specialExpr()
                        self.state = 1197
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1198
                        localctx.workArea = self.specialExpr()

                    elif la_ == 3:
                        self.state = 1200
                        localctx.tableName = self.specialExpr()


                    pass


                pass

            elif la_ == 47:
                localctx = VisualFoxpro9Parser.ReindexContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 1205
                self.match(VisualFoxpro9Parser.REINDEX)
                self.state = 1207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COMPACT:
                    self.state = 1206
                    self.match(VisualFoxpro9Parser.COMPACT)


                pass

            elif la_ == 48:
                localctx = VisualFoxpro9Parser.SeekRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 1209
                self.match(VisualFoxpro9Parser.SEEK)
                self.state = 1210
                localctx.seekExpr = self.expr(0)
                self.state = 1225
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                if la_ == 1:
                    self.state = 1220
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                    if la_ == 1:
                        self.state = 1211
                        self.match(VisualFoxpro9Parser.ORDER)
                        self.state = 1212
                        localctx.orderExpr = self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 1213
                        self.match(VisualFoxpro9Parser.TAG)
                        self.state = 1214
                        localctx.tagName = self.specialExpr()
                        self.state = 1217
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.OF:
                            self.state = 1215
                            self.match(VisualFoxpro9Parser.OF)
                            self.state = 1216
                            localctx.cdxFileExpr = self.specialExpr()


                        pass

                    elif la_ == 3:
                        self.state = 1219
                        localctx.idxFileExpr = self.specialExpr()
                        pass


                    self.state = 1223
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING:
                        self.state = 1222
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                self.state = 1229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1227
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1228
                    localctx.tablenameExpr = self.specialExpr()


                pass

            elif la_ == 49:
                localctx = VisualFoxpro9Parser.UpdateCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 1231
                self.match(VisualFoxpro9Parser.UPDATE)
                self.state = 1232
                localctx.tableExpr = self.specialExpr()
                self.state = 1233
                self.match(VisualFoxpro9Parser.SET)
                self.state = 1234
                self.identifier()
                self.state = 1235
                self.match(VisualFoxpro9Parser.EQUALS)
                self.state = 1236
                self.expr(0)
                self.state = 1244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.COMMA:
                    self.state = 1237
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1238
                    self.identifier()
                    self.state = 1239
                    self.match(VisualFoxpro9Parser.EQUALS)
                    self.state = 1240
                    self.expr(0)
                    self.state = 1246
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.FROM or _la==VisualFoxpro9Parser.WHERE or _la==VisualFoxpro9Parser.JOIN:
                    self.state = 1256
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.FROM]:
                        self.state = 1247
                        self.match(VisualFoxpro9Parser.FROM)
                        self.state = 1249
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                        if la_ == 1:
                            self.state = 1248
                            self.match(VisualFoxpro9Parser.FORCE)


                        self.state = 1251
                        localctx.fromArgs = self.specialArgs()
                        pass
                    elif token in [VisualFoxpro9Parser.JOIN]:
                        self.state = 1252
                        self.match(VisualFoxpro9Parser.JOIN)
                        self.state = 1253
                        localctx.joinArgs = self.specialArgs()
                        pass
                    elif token in [VisualFoxpro9Parser.WHERE]:
                        self.state = 1254
                        self.match(VisualFoxpro9Parser.WHERE)
                        self.state = 1255
                        localctx.whereExpr = self.expr(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1260
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 50:
                localctx = VisualFoxpro9Parser.GoRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 1261
                self.match(VisualFoxpro9Parser.GOTO)
                self.state = 1268
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                if la_ == 1:
                    self.state = 1262
                    self.match(VisualFoxpro9Parser.TOP)
                    pass

                elif la_ == 2:
                    self.state = 1263
                    self.match(VisualFoxpro9Parser.BOTTOM)
                    pass

                elif la_ == 3:
                    self.state = 1265
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                    if la_ == 1:
                        self.state = 1264
                        self.match(VisualFoxpro9Parser.RECORD)


                    self.state = 1267
                    self.expr(0)
                    pass


                self.state = 1272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1270
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1271
                    self.specialExpr()


                pass

            elif la_ == 51:
                localctx = VisualFoxpro9Parser.CopyToArrayContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 1274
                self.match(VisualFoxpro9Parser.COPY)
                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.TO or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (VisualFoxpro9Parser.FOR - 81)) | (1 << (VisualFoxpro9Parser.WHILE - 81)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 81)) | (1 << (VisualFoxpro9Parser.ALL - 81)) | (1 << (VisualFoxpro9Parser.RECORD - 81)) | (1 << (VisualFoxpro9Parser.NEXT - 81)) | (1 << (VisualFoxpro9Parser.REST - 81)))) != 0) or _la==VisualFoxpro9Parser.FIELDS:
                    self.state = 1284
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.TO]:
                        self.state = 1275
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1276
                        self.match(VisualFoxpro9Parser.ARRAY)
                        self.state = 1277
                        self.specialExpr()
                        pass
                    elif token in [VisualFoxpro9Parser.FIELDS]:
                        self.state = 1278
                        self.match(VisualFoxpro9Parser.FIELDS)
                        self.state = 1280
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                        if la_ == 1:
                            self.state = 1279
                            _la = self._input.LA(1)
                            if not(_la==VisualFoxpro9Parser.EXCEPT or _la==VisualFoxpro9Parser.LIKE):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 1282
                        self.args()
                        pass
                    elif token in [VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST]:
                        self.state = 1283
                        self.queryCondition()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1288
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 52:
                localctx = VisualFoxpro9Parser.CopyToContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 1289
                self.match(VisualFoxpro9Parser.COPY)
                self.state = 1291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.STRUCTURE:
                    self.state = 1290
                    self.match(VisualFoxpro9Parser.STRUCTURE)


                self.state = 1293
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1294
                self.specialExpr()
                pass

            elif la_ == 53:
                localctx = VisualFoxpro9Parser.ZapTableContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 1295
                self.match(VisualFoxpro9Parser.ZAP)
                self.state = 1298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1296
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1297
                    self.specialExpr()


                pass

            elif la_ == 54:
                localctx = VisualFoxpro9Parser.BrowseContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 1300
                self.match(VisualFoxpro9Parser.BROWSE)
                self.state = 1304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.SHOW - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.NODEBUG - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.LIST - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.MODIFY - 256)) | (1 << (VisualFoxpro9Parser.COMMAND - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.COMPILE - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.RESTORE - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.MIN - 256)) | (1 << (VisualFoxpro9Parser.MAX - 256)) | (1 << (VisualFoxpro9Parser.NORM - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 256)) | (1 << (VisualFoxpro9Parser.FORCE - 256)) | (1 << (VisualFoxpro9Parser.JOIN - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 256)) | (1 << (VisualFoxpro9Parser.LINKED - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.FLAGS - 256)) | (1 << (VisualFoxpro9Parser.PRETEXT - 256)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 256)) | (1 << (VisualFoxpro9Parser.MASTER - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.ICON - 256)) | (1 << (VisualFoxpro9Parser.FILL - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 1301
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1306
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 55:
                localctx = VisualFoxpro9Parser.ScatterExprContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 1307
                self.match(VisualFoxpro9Parser.SCATTER)
                self.state = 1313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.FIELDS:
                    self.state = 1308
                    self.match(VisualFoxpro9Parser.FIELDS)
                    self.state = 1310
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                    if la_ == 1:
                        self.state = 1309
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.EXCEPT or _la==VisualFoxpro9Parser.LIKE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1312
                    self.expr(0)


                self.state = 1316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MEMO:
                    self.state = 1315
                    self.match(VisualFoxpro9Parser.MEMO)


                self.state = 1319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.BLANK:
                    self.state = 1318
                    self.match(VisualFoxpro9Parser.BLANK)


                self.state = 1329
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.MEMVAR]:
                    self.state = 1321
                    self.match(VisualFoxpro9Parser.MEMVAR)
                    pass
                elif token in [VisualFoxpro9Parser.NAME]:
                    self.state = 1322
                    self.match(VisualFoxpro9Parser.NAME)
                    self.state = 1323
                    self.expr(0)
                    self.state = 1325
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ADDITIVE:
                        self.state = 1324
                        self.match(VisualFoxpro9Parser.ADDITIVE)


                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1327
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1328
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 56:
                localctx = VisualFoxpro9Parser.GatherExprContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 1331
                self.match(VisualFoxpro9Parser.GATHER)
                self.state = 1337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.FIELDS:
                    self.state = 1332
                    self.match(VisualFoxpro9Parser.FIELDS)
                    self.state = 1334
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                    if la_ == 1:
                        self.state = 1333
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.EXCEPT or _la==VisualFoxpro9Parser.LIKE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1336
                    self.expr(0)


                self.state = 1340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MEMO:
                    self.state = 1339
                    self.match(VisualFoxpro9Parser.MEMO)


                self.state = 1342
                self.match(VisualFoxpro9Parser.FROM)
                self.state = 1347
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
                if la_ == 1:
                    self.state = 1343
                    self.match(VisualFoxpro9Parser.MEMVAR)
                    pass

                elif la_ == 2:
                    self.state = 1344
                    self.match(VisualFoxpro9Parser.NAME)
                    self.state = 1345
                    self.expr(0)
                    pass

                elif la_ == 3:
                    self.state = 1346
                    self.expr(0)
                    pass


                pass

            elif la_ == 57:
                localctx = VisualFoxpro9Parser.CloseStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 57)
                self.state = 1349
                self.match(VisualFoxpro9Parser.CLOSE)
                self.state = 1355
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES]:
                    self.state = 1350
                    _la = self._input.LA(1)
                    if not(((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (VisualFoxpro9Parser.DATABASE - 226)) | (1 << (VisualFoxpro9Parser.TABLES - 226)) | (1 << (VisualFoxpro9Parser.INDEXES - 226)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1352
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ALL:
                        self.state = 1351
                        self.match(VisualFoxpro9Parser.ALL)


                    pass
                elif token in [VisualFoxpro9Parser.ALL]:
                    self.state = 1354
                    self.match(VisualFoxpro9Parser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 58:
                localctx = VisualFoxpro9Parser.ReadEventContext(self, localctx)
                self.enterOuterAlt(localctx, 58)
                self.state = 1365
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.READ]:
                    self.state = 1357
                    self.match(VisualFoxpro9Parser.READ)
                    self.state = 1359
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.EVENTS:
                        self.state = 1358
                        self.match(VisualFoxpro9Parser.EVENTS)


                    pass
                elif token in [VisualFoxpro9Parser.DOEVENTS]:
                    self.state = 1361
                    self.match(VisualFoxpro9Parser.DOEVENTS)
                    self.state = 1363
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.FORCE:
                        self.state = 1362
                        self.match(VisualFoxpro9Parser.FORCE)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 59:
                localctx = VisualFoxpro9Parser.UnlockCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 59)
                self.state = 1367
                self.match(VisualFoxpro9Parser.UNLOCK)
                self.state = 1368
                self.match(VisualFoxpro9Parser.ALL)
                pass

            elif la_ == 60:
                localctx = VisualFoxpro9Parser.ClearStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 60)
                self.state = 1369
                self.match(VisualFoxpro9Parser.CLEAR)
                self.state = 1396
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ALL]:
                    self.state = 1370
                    self.match(VisualFoxpro9Parser.ALL)
                    pass
                elif token in [VisualFoxpro9Parser.CLASS]:
                    self.state = 1371
                    self.match(VisualFoxpro9Parser.CLASS)
                    self.state = 1372
                    self.expr(0)
                    pass
                elif token in [VisualFoxpro9Parser.CLASSLIB]:
                    self.state = 1373
                    self.match(VisualFoxpro9Parser.CLASSLIB)
                    self.state = 1374
                    self.specialExpr()
                    pass
                elif token in [VisualFoxpro9Parser.DEBUG]:
                    self.state = 1375
                    self.match(VisualFoxpro9Parser.DEBUG)
                    pass
                elif token in [VisualFoxpro9Parser.DLLS]:
                    self.state = 1376
                    self.match(VisualFoxpro9Parser.DLLS)
                    self.state = 1377
                    self.specialArgs()
                    pass
                elif token in [VisualFoxpro9Parser.EVENTS]:
                    self.state = 1378
                    self.match(VisualFoxpro9Parser.EVENTS)
                    pass
                elif token in [VisualFoxpro9Parser.ERROR]:
                    self.state = 1379
                    self.match(VisualFoxpro9Parser.ERROR)
                    pass
                elif token in [VisualFoxpro9Parser.FIELDS]:
                    self.state = 1380
                    self.match(VisualFoxpro9Parser.FIELDS)
                    pass
                elif token in [VisualFoxpro9Parser.GETS]:
                    self.state = 1381
                    self.match(VisualFoxpro9Parser.GETS)
                    pass
                elif token in [VisualFoxpro9Parser.MACROS]:
                    self.state = 1382
                    self.match(VisualFoxpro9Parser.MACROS)
                    pass
                elif token in [VisualFoxpro9Parser.MEMORY]:
                    self.state = 1383
                    self.match(VisualFoxpro9Parser.MEMORY)
                    pass
                elif token in [VisualFoxpro9Parser.MENUS]:
                    self.state = 1384
                    self.match(VisualFoxpro9Parser.MENUS)
                    pass
                elif token in [VisualFoxpro9Parser.POPUP]:
                    self.state = 1385
                    self.match(VisualFoxpro9Parser.POPUP)
                    pass
                elif token in [VisualFoxpro9Parser.PROGRAM]:
                    self.state = 1386
                    self.match(VisualFoxpro9Parser.PROGRAM)
                    pass
                elif token in [VisualFoxpro9Parser.PROMPT]:
                    self.state = 1387
                    self.match(VisualFoxpro9Parser.PROMPT)
                    pass
                elif token in [VisualFoxpro9Parser.READ]:
                    self.state = 1388
                    self.match(VisualFoxpro9Parser.READ)
                    self.state = 1390
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ALL:
                        self.state = 1389
                        self.match(VisualFoxpro9Parser.ALL)


                    pass
                elif token in [VisualFoxpro9Parser.RESOURCES]:
                    self.state = 1392
                    self.match(VisualFoxpro9Parser.RESOURCES)
                    self.state = 1393
                    self.expr(0)
                    pass
                elif token in [VisualFoxpro9Parser.TYPEAHEAD]:
                    self.state = 1394
                    self.match(VisualFoxpro9Parser.TYPEAHEAD)
                    pass
                elif token in [VisualFoxpro9Parser.WINDOW]:
                    self.state = 1395
                    self.match(VisualFoxpro9Parser.WINDOW)
                    pass
                elif token in [VisualFoxpro9Parser.EOF, VisualFoxpro9Parser.NL]:
                    pass
                else:
                    pass
                pass

            elif la_ == 61:
                localctx = VisualFoxpro9Parser.ReportContext(self, localctx)
                self.enterOuterAlt(localctx, 61)
                self.state = 1398
                self.match(VisualFoxpro9Parser.REPORT)
                self.state = 1399
                self.match(VisualFoxpro9Parser.FORM)
                self.state = 1402
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.QUESTION]:
                    self.state = 1400
                    self.match(VisualFoxpro9Parser.QUESTION)
                    pass
                elif token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.HASH, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.SHOW, VisualFoxpro9Parser.HIDE, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.MEMO, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.MENUS, VisualFoxpro9Parser.RESOURCES, VisualFoxpro9Parser.LIST, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.NOUPDATE, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.MODIFY, VisualFoxpro9Parser.COMMAND, VisualFoxpro9Parser.UNLOCK, VisualFoxpro9Parser.COMPILE, VisualFoxpro9Parser.SORT, VisualFoxpro9Parser.UPDATE, VisualFoxpro9Parser.RESTORE, VisualFoxpro9Parser.ZOOM, VisualFoxpro9Parser.MIN, VisualFoxpro9Parser.MAX, VisualFoxpro9Parser.NORM, VisualFoxpro9Parser.SIZE, VisualFoxpro9Parser.DOEVENTS, VisualFoxpro9Parser.FORCE, VisualFoxpro9Parser.JOIN, VisualFoxpro9Parser.TEXT, VisualFoxpro9Parser.ENDTEXT, VisualFoxpro9Parser.LINKED, VisualFoxpro9Parser.TEXTMERGE, VisualFoxpro9Parser.FLAGS, VisualFoxpro9Parser.PRETEXT, VisualFoxpro9Parser.MASTER, VisualFoxpro9Parser.TITLE, VisualFoxpro9Parser.ICON, VisualFoxpro9Parser.FILL, VisualFoxpro9Parser.ID]:
                    self.state = 1401
                    self.specialExpr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.TO or _la==VisualFoxpro9Parser.NOEJECT or _la==VisualFoxpro9Parser.NOCONSOLE:
                    self.state = 1411
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.NOEJECT]:
                        self.state = 1404
                        self.match(VisualFoxpro9Parser.NOEJECT)
                        pass
                    elif token in [VisualFoxpro9Parser.TO]:
                        self.state = 1405
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1406
                        self.match(VisualFoxpro9Parser.PRINTER)
                        self.state = 1408
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.PROMPT:
                            self.state = 1407
                            self.match(VisualFoxpro9Parser.PROMPT)


                        pass
                    elif token in [VisualFoxpro9Parser.NOCONSOLE]:
                        self.state = 1410
                        self.match(VisualFoxpro9Parser.NOCONSOLE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1415
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 62:
                localctx = VisualFoxpro9Parser.DllDeclareContext(self, localctx)
                self.enterOuterAlt(localctx, 62)
                self.state = 1416
                self.match(VisualFoxpro9Parser.DECLARE)
                self.state = 1418
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                if la_ == 1:
                    self.state = 1417
                    localctx.returnType = self.datatype()


                self.state = 1420
                self.identifier()
                self.state = 1421
                self.match(VisualFoxpro9Parser.IN)
                self.state = 1422
                self.specialExpr()
                self.state = 1425
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                if la_ == 1:
                    self.state = 1423
                    self.match(VisualFoxpro9Parser.AS)
                    self.state = 1424
                    localctx.alias = self.identifier()


                self.state = 1428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 1427
                    self.dllArgs()


                pass

            elif la_ == 63:
                localctx = VisualFoxpro9Parser.ShellRunContext(self, localctx)
                self.enterOuterAlt(localctx, 63)
                self.state = 1430
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.EXCLAMATION or _la==VisualFoxpro9Parser.RUN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1433
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                if la_ == 1:
                    self.state = 1431
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    self.state = 1432
                    self.identifier()


                self.state = 1438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.SHOW - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.NODEBUG - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.LIST - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.MODIFY - 256)) | (1 << (VisualFoxpro9Parser.COMMAND - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.COMPILE - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.RESTORE - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.MIN - 256)) | (1 << (VisualFoxpro9Parser.MAX - 256)) | (1 << (VisualFoxpro9Parser.NORM - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 256)) | (1 << (VisualFoxpro9Parser.FORCE - 256)) | (1 << (VisualFoxpro9Parser.JOIN - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 256)) | (1 << (VisualFoxpro9Parser.LINKED - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.FLAGS - 256)) | (1 << (VisualFoxpro9Parser.PRETEXT - 256)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 256)) | (1 << (VisualFoxpro9Parser.MASTER - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.ICON - 256)) | (1 << (VisualFoxpro9Parser.FILL - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 1435
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1440
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 64:
                localctx = VisualFoxpro9Parser.AssertContext(self, localctx)
                self.enterOuterAlt(localctx, 64)
                self.state = 1441
                self.match(VisualFoxpro9Parser.ASSERT)
                self.state = 1442
                self.expr(0)
                self.state = 1445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MESSAGE:
                    self.state = 1443
                    self.match(VisualFoxpro9Parser.MESSAGE)
                    self.state = 1444
                    self.expr(0)


                pass

            elif la_ == 65:
                localctx = VisualFoxpro9Parser.CompileCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 65)
                self.state = 1447
                self.match(VisualFoxpro9Parser.COMPILE)
                self.state = 1449
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 1448
                    _la = self._input.LA(1)
                    if not(((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)))) != 0) or _la==VisualFoxpro9Parser.CLASSLIB or _la==VisualFoxpro9Parser.DATABASE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (VisualFoxpro9Parser.NODEBUG - 259)) | (1 << (VisualFoxpro9Parser.MENUS - 259)) | (1 << (VisualFoxpro9Parser.RESOURCES - 259)) | (1 << (VisualFoxpro9Parser.LIST - 259)) | (1 << (VisualFoxpro9Parser.HELP - 259)) | (1 << (VisualFoxpro9Parser.SAY - 259)) | (1 << (VisualFoxpro9Parser.COLLECTION - 259)) | (1 << (VisualFoxpro9Parser.SYSTEM - 259)) | (1 << (VisualFoxpro9Parser.TALK - 259)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 259)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 259)) | (1 << (VisualFoxpro9Parser.RELATION - 259)) | (1 << (VisualFoxpro9Parser.MODIFY - 259)) | (1 << (VisualFoxpro9Parser.COMMAND - 259)) | (1 << (VisualFoxpro9Parser.UNLOCK - 259)) | (1 << (VisualFoxpro9Parser.COMPILE - 259)) | (1 << (VisualFoxpro9Parser.SORT - 259)) | (1 << (VisualFoxpro9Parser.UPDATE - 259)) | (1 << (VisualFoxpro9Parser.RESTORE - 259)) | (1 << (VisualFoxpro9Parser.ZOOM - 259)) | (1 << (VisualFoxpro9Parser.MIN - 259)) | (1 << (VisualFoxpro9Parser.MAX - 259)) | (1 << (VisualFoxpro9Parser.NORM - 259)) | (1 << (VisualFoxpro9Parser.SIZE - 259)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 259)) | (1 << (VisualFoxpro9Parser.FORCE - 259)) | (1 << (VisualFoxpro9Parser.JOIN - 259)) | (1 << (VisualFoxpro9Parser.TEXT - 259)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 259)) | (1 << (VisualFoxpro9Parser.LINKED - 259)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 259)) | (1 << (VisualFoxpro9Parser.FLAGS - 259)) | (1 << (VisualFoxpro9Parser.PRETEXT - 259)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 259)) | (1 << (VisualFoxpro9Parser.MASTER - 259)) | (1 << (VisualFoxpro9Parser.TITLE - 259)) | (1 << (VisualFoxpro9Parser.ICON - 259)) | (1 << (VisualFoxpro9Parser.FILL - 259)) | (1 << (VisualFoxpro9Parser.ID - 259)))) != 0):
                    self.state = 1457
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                    if la_ == 1:
                        self.state = 1451
                        self.match(VisualFoxpro9Parser.ALL)
                        pass

                    elif la_ == 2:
                        self.state = 1452
                        self.match(VisualFoxpro9Parser.ENCRYPT)
                        pass

                    elif la_ == 3:
                        self.state = 1453
                        self.match(VisualFoxpro9Parser.NODEBUG)
                        pass

                    elif la_ == 4:
                        self.state = 1454
                        self.match(VisualFoxpro9Parser.AS)
                        self.state = 1455
                        self.specialExpr()
                        pass

                    elif la_ == 5:
                        self.state = 1456
                        self.specialExpr()
                        pass


                    self.state = 1461
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 66:
                localctx = VisualFoxpro9Parser.ListStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 66)
                self.state = 1462
                self.match(VisualFoxpro9Parser.LIST)
                self.state = 1463
                self.scopeClause()
                pass

            elif la_ == 67:
                localctx = VisualFoxpro9Parser.SaveToCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 67)
                self.state = 1464
                self.match(VisualFoxpro9Parser.SAVE)
                self.state = 1465
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1469
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                if la_ == 1:
                    self.state = 1466
                    self.match(VisualFoxpro9Parser.MEMO)
                    self.state = 1467
                    self.specialExpr()
                    pass

                elif la_ == 2:
                    self.state = 1468
                    self.specialExpr()
                    pass


                self.state = 1474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ALL:
                    self.state = 1471
                    self.match(VisualFoxpro9Parser.ALL)
                    self.state = 1472
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.EXCEPT or _la==VisualFoxpro9Parser.LIKE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1473
                    self.specialExpr()


                pass

            elif la_ == 68:
                localctx = VisualFoxpro9Parser.RestoreCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 68)
                self.state = 1476
                self.match(VisualFoxpro9Parser.RESTORE)
                self.state = 1477
                self.match(VisualFoxpro9Parser.FROM)
                self.state = 1478
                self.specialExpr()
                self.state = 1480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1479
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass

            elif la_ == 69:
                localctx = VisualFoxpro9Parser.ZoomCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 69)
                self.state = 1482
                self.match(VisualFoxpro9Parser.ZOOM)
                self.state = 1483
                self.match(VisualFoxpro9Parser.WINDOW)
                self.state = 1484
                self.specialExpr()
                self.state = 1485
                _la = self._input.LA(1)
                if not(((((_la - 281)) & ~0x3f) == 0 and ((1 << (_la - 281)) & ((1 << (VisualFoxpro9Parser.MIN - 281)) | (1 << (VisualFoxpro9Parser.MAX - 281)) | (1 << (VisualFoxpro9Parser.NORM - 281)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1509
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.AT]:
                    self.state = 1486
                    self.match(VisualFoxpro9Parser.AT)
                    self.state = 1487
                    self.expr(0)
                    self.state = 1488
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1489
                    self.expr(0)
                    pass
                elif token in [VisualFoxpro9Parser.FROM]:
                    self.state = 1491
                    self.match(VisualFoxpro9Parser.FROM)
                    self.state = 1492
                    self.match(VisualFoxpro9Parser.AT)
                    self.state = 1493
                    self.expr(0)
                    self.state = 1494
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1495
                    self.expr(0)
                    self.state = 1507
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.SIZE]:
                        self.state = 1496
                        self.match(VisualFoxpro9Parser.SIZE)
                        self.state = 1497
                        self.match(VisualFoxpro9Parser.AT)
                        self.state = 1498
                        self.expr(0)
                        self.state = 1499
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 1500
                        self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.TO]:
                        self.state = 1502
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1503
                        self.expr(0)
                        self.state = 1504
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 1505
                        self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.EOF, VisualFoxpro9Parser.NL]:
                        pass
                    else:
                        pass
                    pass
                elif token in [VisualFoxpro9Parser.EOF, VisualFoxpro9Parser.NL]:
                    pass
                else:
                    pass
                pass

            elif la_ == 70:
                localctx = VisualFoxpro9Parser.TextBlockContext(self, localctx)
                self.enterOuterAlt(localctx, 70)
                self.state = 1511
                self.match(VisualFoxpro9Parser.TEXT)
                self.state = 1523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.TO or _la==VisualFoxpro9Parser.NOSHOW or _la==VisualFoxpro9Parser.ADDITIVE or ((((_la - 291)) & ~0x3f) == 0 and ((1 << (_la - 291)) & ((1 << (VisualFoxpro9Parser.TEXTMERGE - 291)) | (1 << (VisualFoxpro9Parser.FLAGS - 291)) | (1 << (VisualFoxpro9Parser.PRETEXT - 291)))) != 0):
                    self.state = 1521
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.TO]:
                        self.state = 1512
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1513
                        self.idAttr()
                        pass
                    elif token in [VisualFoxpro9Parser.ADDITIVE]:
                        self.state = 1514
                        self.match(VisualFoxpro9Parser.ADDITIVE)
                        pass
                    elif token in [VisualFoxpro9Parser.TEXTMERGE]:
                        self.state = 1515
                        self.match(VisualFoxpro9Parser.TEXTMERGE)
                        pass
                    elif token in [VisualFoxpro9Parser.NOSHOW]:
                        self.state = 1516
                        self.match(VisualFoxpro9Parser.NOSHOW)
                        pass
                    elif token in [VisualFoxpro9Parser.FLAGS]:
                        self.state = 1517
                        self.match(VisualFoxpro9Parser.FLAGS)
                        self.state = 1518
                        localctx.flagExpr = self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.PRETEXT]:
                        self.state = 1519
                        self.match(VisualFoxpro9Parser.PRETEXT)
                        self.state = 1520
                        localctx.pretext = self.expr(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1525
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1526
                self.match(VisualFoxpro9Parser.NL)
                self.state = 1527
                self.textChunk()
                self.state = 1528
                self.match(VisualFoxpro9Parser.ENDTEXT)
                pass

            elif la_ == 71:
                localctx = VisualFoxpro9Parser.ShowCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 71)
                self.state = 1530
                self.match(VisualFoxpro9Parser.SHOW)
                self.state = 1531
                self.match(VisualFoxpro9Parser.GETS)
                pass

            elif la_ == 72:
                localctx = VisualFoxpro9Parser.HideCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 72)
                self.state = 1532
                self.match(VisualFoxpro9Parser.HIDE)
                self.state = 1533
                self.match(VisualFoxpro9Parser.WINDOW)
                self.state = 1537
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                if la_ == 1:
                    self.state = 1534
                    self.match(VisualFoxpro9Parser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 1535
                    self.match(VisualFoxpro9Parser.SCREEN)
                    pass

                elif la_ == 3:
                    self.state = 1536
                    self.args()
                    pass


                pass

            elif la_ == 73:
                localctx = VisualFoxpro9Parser.ExprCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 73)
                self.state = 1539
                self.match(VisualFoxpro9Parser.EQUALS)
                self.state = 1540
                self.expr(0)
                pass

            elif la_ == 74:
                localctx = VisualFoxpro9Parser.ComplexIdCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 74)
                self.state = 1541
                self.complexId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryConditionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.QueryConditionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def scopeClause(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScopeClauseContext,0)


        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def WHILE(self):
            return self.getToken(VisualFoxpro9Parser.WHILE, 0)

        def NOOPTIMIZE(self):
            return self.getToken(VisualFoxpro9Parser.NOOPTIMIZE, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_queryCondition

        def accept(self, visitor):
            if hasattr(visitor, "visitQueryCondition"):
                return visitor.visitQueryCondition(self)
            else:
                return visitor.visitChildren(self)




    def queryCondition(self):

        localctx = VisualFoxpro9Parser.QueryConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_queryCondition)
        try:
            self.state = 1550
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1544
                self.scopeClause()
                pass
            elif token in [VisualFoxpro9Parser.FOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1545
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 1546
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.WHILE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1547
                self.match(VisualFoxpro9Parser.WHILE)
                self.state = 1548
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.NOOPTIMIZE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1549
                self.match(VisualFoxpro9Parser.NOOPTIMIZE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TextChunkContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.TextChunkContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ENDTEXT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ENDTEXT)
            else:
                return self.getToken(VisualFoxpro9Parser.ENDTEXT, i)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_textChunk

        def accept(self, visitor):
            if hasattr(visitor, "visitTextChunk"):
                return visitor.visitTextChunk(self)
            else:
                return visitor.visitChildren(self)




    def textChunk(self):

        localctx = VisualFoxpro9Parser.TextChunkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_textChunk)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.SHOW - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.NODEBUG - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.LIST - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.MODIFY - 256)) | (1 << (VisualFoxpro9Parser.COMMAND - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.COMPILE - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.RESTORE - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.MIN - 256)) | (1 << (VisualFoxpro9Parser.MAX - 256)) | (1 << (VisualFoxpro9Parser.NORM - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 256)) | (1 << (VisualFoxpro9Parser.FORCE - 256)) | (1 << (VisualFoxpro9Parser.JOIN - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.LINKED - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.FLAGS - 256)) | (1 << (VisualFoxpro9Parser.PRETEXT - 256)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 256)) | (1 << (VisualFoxpro9Parser.MASTER - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.ICON - 256)) | (1 << (VisualFoxpro9Parser.FILL - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.NL - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                self.state = 1552
                _la = self._input.LA(1)
                if _la <= 0 or _la==VisualFoxpro9Parser.ENDTEXT:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1557
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DllArgsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DllArgsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def dllArg(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.DllArgContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.DllArgContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_dllArgs

        def accept(self, visitor):
            if hasattr(visitor, "visitDllArgs"):
                return visitor.visitDllArgs(self)
            else:
                return visitor.visitChildren(self)




    def dllArgs(self):

        localctx = VisualFoxpro9Parser.DllArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dllArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1558
            self.dllArg()
            self.state = 1563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.COMMA:
                self.state = 1559
                self.match(VisualFoxpro9Parser.COMMA)
                self.state = 1560
                self.dllArg()
                self.state = 1565
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DllArgContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DllArgContext, self).__init__(parent, invokingState)
            self.parser = parser

        def datatype(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DatatypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_dllArg

        def accept(self, visitor):
            if hasattr(visitor, "visitDllArg"):
                return visitor.visitDllArg(self)
            else:
                return visitor.visitChildren(self)




    def dllArg(self):

        localctx = VisualFoxpro9Parser.DllArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dllArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self.datatype()
            self.state = 1568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.COMMERCIALAT:
                self.state = 1567
                self.match(VisualFoxpro9Parser.COMMERCIALAT)


            self.state = 1571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                self.state = 1570
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableFieldContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.TableFieldContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)


        def arrayIndex(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArrayIndexContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_tableField

        def accept(self, visitor):
            if hasattr(visitor, "visitTableField"):
                return visitor.visitTableField(self)
            else:
                return visitor.visitChildren(self)




    def tableField(self):

        localctx = VisualFoxpro9Parser.TableFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_tableField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1573
            self.identifier()
            self.state = 1574
            self.identifier()
            self.state = 1576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.LEFTBRACKET or _la==VisualFoxpro9Parser.LEFTPAREN:
                self.state = 1575
                self.arrayIndex()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetCmdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SetCmdContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.setword = None # Token
            self.ofExpr = None # SpecialExprContext
            self.inExpr = None # SpecialExprContext

        def ALTERNATE(self):
            return self.getToken(VisualFoxpro9Parser.ALTERNATE, 0)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)

        def OFF(self):
            return self.getToken(VisualFoxpro9Parser.OFF, 0)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)

        def ASSERTS(self):
            return self.getToken(VisualFoxpro9Parser.ASSERTS, 0)

        def BELL(self):
            return self.getToken(VisualFoxpro9Parser.BELL, 0)

        def CENTURY(self):
            return self.getToken(VisualFoxpro9Parser.CENTURY, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def ROLLOVER(self):
            return self.getToken(VisualFoxpro9Parser.ROLLOVER, 0)

        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)

        def ALIAS(self):
            return self.getToken(VisualFoxpro9Parser.ALIAS, 0)

        def CLOCK(self):
            return self.getToken(VisualFoxpro9Parser.CLOCK, 0)

        def STATUS(self):
            return self.getToken(VisualFoxpro9Parser.STATUS, 0)

        def COMPATIBLE(self):
            return self.getToken(VisualFoxpro9Parser.COMPATIBLE, 0)

        def DB4(self):
            return self.getToken(VisualFoxpro9Parser.DB4, 0)

        def FOXPLUS(self):
            return self.getToken(VisualFoxpro9Parser.FOXPLUS, 0)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)

        def NOPROMPT(self):
            return self.getToken(VisualFoxpro9Parser.NOPROMPT, 0)

        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def DATE(self):
            return self.getToken(VisualFoxpro9Parser.DATE, 0)

        def DELETED(self):
            return self.getToken(VisualFoxpro9Parser.DELETED, 0)

        def EXACT(self):
            return self.getToken(VisualFoxpro9Parser.EXACT, 0)

        def EXCLUSIVE(self):
            return self.getToken(VisualFoxpro9Parser.EXCLUSIVE, 0)

        def FILTER(self):
            return self.getToken(VisualFoxpro9Parser.FILTER, 0)

        def HELP(self):
            return self.getToken(VisualFoxpro9Parser.HELP, 0)

        def COLLECTION(self):
            return self.getToken(VisualFoxpro9Parser.COLLECTION, 0)

        def SYSTEM(self):
            return self.getToken(VisualFoxpro9Parser.SYSTEM, 0)

        def INDEX(self):
            return self.getToken(VisualFoxpro9Parser.INDEX, 0)

        def LIBRARY(self):
            return self.getToken(VisualFoxpro9Parser.LIBRARY, 0)

        def MEMOWIDTH(self):
            return self.getToken(VisualFoxpro9Parser.MEMOWIDTH, 0)

        def MULTILOCKS(self):
            return self.getToken(VisualFoxpro9Parser.MULTILOCKS, 0)

        def NEAR(self):
            return self.getToken(VisualFoxpro9Parser.NEAR, 0)

        def NOTIFY(self):
            return self.getToken(VisualFoxpro9Parser.NOTIFY, 0)

        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)

        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)

        def PRINTER(self):
            return self.getToken(VisualFoxpro9Parser.PRINTER, 0)

        def DEFAULT(self):
            return self.getToken(VisualFoxpro9Parser.DEFAULT, 0)

        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def REFRESH(self):
            return self.getToken(VisualFoxpro9Parser.REFRESH, 0)

        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)

        def RELATION(self):
            return self.getToken(VisualFoxpro9Parser.RELATION, 0)

        def SAFETY(self):
            return self.getToken(VisualFoxpro9Parser.SAFETY, 0)

        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)

        def SYSMENU(self):
            return self.getToken(VisualFoxpro9Parser.SYSMENU, 0)

        def SAVE(self):
            return self.getToken(VisualFoxpro9Parser.SAVE, 0)

        def NOSAVE(self):
            return self.getToken(VisualFoxpro9Parser.NOSAVE, 0)

        def TABLEPROMPT(self):
            return self.getToken(VisualFoxpro9Parser.TABLEPROMPT, 0)

        def TALK(self):
            return self.getToken(VisualFoxpro9Parser.TALK, 0)

        def TYPEAHEAD(self):
            return self.getToken(VisualFoxpro9Parser.TYPEAHEAD, 0)

        def UNIQUE(self):
            return self.getToken(VisualFoxpro9Parser.UNIQUE, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_setCmd

        def accept(self, visitor):
            if hasattr(visitor, "visitSetCmd"):
                return visitor.visitSetCmd(self)
            else:
                return visitor.visitChildren(self)




    def setCmd(self):

        localctx = VisualFoxpro9Parser.SetCmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_setCmd)
        self._la = 0 # Token type
        try:
            self.state = 1799
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ALTERNATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1578
                localctx.setword = self.match(VisualFoxpro9Parser.ALTERNATE)
                self.state = 1586
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1579
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1580
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1581
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1582
                    self.specialExpr()
                    self.state = 1584
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ADDITIVE:
                        self.state = 1583
                        self.match(VisualFoxpro9Parser.ADDITIVE)


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.ASSERTS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1588
                localctx.setword = self.match(VisualFoxpro9Parser.ASSERTS)
                self.state = 1589
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.BELL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1590
                localctx.setword = self.match(VisualFoxpro9Parser.BELL)
                self.state = 1595
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1591
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1592
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1593
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1594
                    self.specialExpr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.CENTURY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1597
                localctx.setword = self.match(VisualFoxpro9Parser.CENTURY)
                self.state = 1608
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1598
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1599
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1600
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1606
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                        self.state = 1601
                        self.expr(0)
                        self.state = 1604
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.ROLLOVER:
                            self.state = 1602
                            self.match(VisualFoxpro9Parser.ROLLOVER)
                            self.state = 1603
                            self.expr(0)




                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.CLASSLIB]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1610
                localctx.setword = self.match(VisualFoxpro9Parser.CLASSLIB)
                self.state = 1611
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1612
                self.specialExpr()
                self.state = 1615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1613
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1614
                    self.specialExpr()


                self.state = 1619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ALIAS:
                    self.state = 1617
                    self.match(VisualFoxpro9Parser.ALIAS)
                    self.state = 1618
                    self.specialExpr()


                self.state = 1622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1621
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [VisualFoxpro9Parser.CLOCK]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1624
                localctx.setword = self.match(VisualFoxpro9Parser.CLOCK)
                self.state = 1635
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1625
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1626
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.STATUS]:
                    self.state = 1627
                    self.match(VisualFoxpro9Parser.STATUS)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1628
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1633
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                        self.state = 1629
                        self.expr(0)
                        self.state = 1630
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 1631
                        self.expr(0)


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.COMPATIBLE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1637
                localctx.setword = self.match(VisualFoxpro9Parser.COMPATIBLE)
                self.state = 1638
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF or _la==VisualFoxpro9Parser.DB4 or _la==VisualFoxpro9Parser.FOXPLUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.PROMPT or _la==VisualFoxpro9Parser.NOPROMPT:
                    self.state = 1639
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.PROMPT or _la==VisualFoxpro9Parser.NOPROMPT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [VisualFoxpro9Parser.CURSOR]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1642
                localctx.setword = self.match(VisualFoxpro9Parser.CURSOR)
                self.state = 1643
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.DATE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1644
                localctx.setword = self.match(VisualFoxpro9Parser.DATE)
                self.state = 1646
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
                if la_ == 1:
                    self.state = 1645
                    self.match(VisualFoxpro9Parser.TO)


                self.state = 1648
                self.identifier()
                pass
            elif token in [VisualFoxpro9Parser.DELETED]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1649
                localctx.setword = self.match(VisualFoxpro9Parser.DELETED)
                self.state = 1650
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.EXACT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1651
                localctx.setword = self.match(VisualFoxpro9Parser.EXACT)
                self.state = 1652
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.EXCLUSIVE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1653
                localctx.setword = self.match(VisualFoxpro9Parser.EXCLUSIVE)
                self.state = 1654
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.FILTER]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1655
                localctx.setword = self.match(VisualFoxpro9Parser.FILTER)
                self.state = 1656
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 1657
                    self.specialExpr()
                    self.state = 1660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.IN:
                        self.state = 1658
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1659
                        self.specialExpr()




                pass
            elif token in [VisualFoxpro9Parser.HELP]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1664
                localctx.setword = self.match(VisualFoxpro9Parser.HELP)
                self.state = 1676
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1665
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1666
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1667
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1669
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                        self.state = 1668
                        self.specialExpr()


                    pass
                elif token in [VisualFoxpro9Parser.COLLECTION]:
                    self.state = 1671
                    self.match(VisualFoxpro9Parser.COLLECTION)
                    self.state = 1673
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                        self.state = 1672
                        self.specialExpr()


                    pass
                elif token in [VisualFoxpro9Parser.SYSTEM]:
                    self.state = 1675
                    self.match(VisualFoxpro9Parser.SYSTEM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.INDEX]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1678
                localctx.setword = self.match(VisualFoxpro9Parser.INDEX)
                self.state = 1679
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 1680
                    self.specialExpr()


                pass
            elif token in [VisualFoxpro9Parser.LIBRARY]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1683
                localctx.setword = self.match(VisualFoxpro9Parser.LIBRARY)
                self.state = 1684
                self.match(VisualFoxpro9Parser.TO)

                self.state = 1685
                self.specialExpr()
                self.state = 1687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1686
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [VisualFoxpro9Parser.MEMOWIDTH]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1689
                localctx.setword = self.match(VisualFoxpro9Parser.MEMOWIDTH)
                self.state = 1690
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1691
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.MULTILOCKS]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1692
                localctx.setword = self.match(VisualFoxpro9Parser.MULTILOCKS)
                self.state = 1693
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.NEAR]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1694
                localctx.setword = self.match(VisualFoxpro9Parser.NEAR)
                self.state = 1695
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.NOTIFY]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1696
                localctx.setword = self.match(VisualFoxpro9Parser.NOTIFY)
                self.state = 1698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.CURSOR:
                    self.state = 1697
                    self.match(VisualFoxpro9Parser.CURSOR)


                self.state = 1700
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.ORDER]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1701
                localctx.setword = self.match(VisualFoxpro9Parser.ORDER)
                self.state = 1702
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1719
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
                if la_ == 1:
                    self.state = 1703
                    self.specialExpr()

                elif la_ == 2:
                    self.state = 1705
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
                    if la_ == 1:
                        self.state = 1704
                        self.match(VisualFoxpro9Parser.TAG)


                    self.state = 1707
                    self.specialExpr()
                    self.state = 1710
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.OF:
                        self.state = 1708
                        self.match(VisualFoxpro9Parser.OF)
                        self.state = 1709
                        localctx.ofExpr = self.specialExpr()


                    self.state = 1714
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.IN:
                        self.state = 1712
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1713
                        localctx.inExpr = self.specialExpr()


                    self.state = 1717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING:
                        self.state = 1716
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                pass
            elif token in [VisualFoxpro9Parser.PRINTER]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1721
                localctx.setword = self.match(VisualFoxpro9Parser.PRINTER)
                self.state = 1737
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1722
                    self.match(VisualFoxpro9Parser.ON)
                    self.state = 1724
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.PROMPT:
                        self.state = 1723
                        self.match(VisualFoxpro9Parser.PROMPT)


                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1726
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1727
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1735
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
                    if la_ == 1:
                        self.state = 1728
                        self.match(VisualFoxpro9Parser.DEFAULT)

                    elif la_ == 2:
                        self.state = 1729
                        self.match(VisualFoxpro9Parser.NAME)
                        self.state = 1730
                        self.specialExpr()

                    elif la_ == 3:
                        self.state = 1731
                        self.specialExpr()
                        self.state = 1733
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.ADDITIVE:
                            self.state = 1732
                            self.match(VisualFoxpro9Parser.ADDITIVE)




                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.PROCEDURE]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1739
                localctx.setword = self.match(VisualFoxpro9Parser.PROCEDURE)
                self.state = 1740
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1741
                self.specialExpr()
                self.state = 1746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.COMMA:
                    self.state = 1742
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1743
                    self.specialExpr()
                    self.state = 1748
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1749
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [VisualFoxpro9Parser.REFRESH]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1752
                localctx.setword = self.match(VisualFoxpro9Parser.REFRESH)
                self.state = 1753
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1754
                self.expr(0)
                self.state = 1757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COMMA:
                    self.state = 1755
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1756
                    self.expr(0)


                pass
            elif token in [VisualFoxpro9Parser.RELATION]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1759
                localctx.setword = self.match(VisualFoxpro9Parser.RELATION)
                self.state = 1760
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1761
                self.expr(0)
                self.state = 1762
                self.match(VisualFoxpro9Parser.INTO)
                self.state = 1763
                self.specialExpr()
                self.state = 1766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1764
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1765
                    self.specialExpr()


                self.state = 1769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1768
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [VisualFoxpro9Parser.SAFETY]:
                self.enterOuterAlt(localctx, 26)
                self.state = 1771
                localctx.setword = self.match(VisualFoxpro9Parser.SAFETY)
                self.state = 1772
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.STATUS]:
                self.enterOuterAlt(localctx, 27)
                self.state = 1773
                localctx.setword = self.match(VisualFoxpro9Parser.STATUS)
                self.state = 1775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.BAR:
                    self.state = 1774
                    self.match(VisualFoxpro9Parser.BAR)


                self.state = 1777
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.SYSMENU]:
                self.enterOuterAlt(localctx, 28)
                self.state = 1778
                localctx.setword = self.match(VisualFoxpro9Parser.SYSMENU)
                self.state = 1788
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1779
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1780
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1781
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1784
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
                    if la_ == 1:
                        self.state = 1782
                        self.match(VisualFoxpro9Parser.DEFAULT)

                    elif la_ == 2:
                        self.state = 1783
                        self.expr(0)


                    pass
                elif token in [VisualFoxpro9Parser.SAVE]:
                    self.state = 1786
                    self.match(VisualFoxpro9Parser.SAVE)
                    pass
                elif token in [VisualFoxpro9Parser.NOSAVE]:
                    self.state = 1787
                    self.match(VisualFoxpro9Parser.NOSAVE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.TABLEPROMPT]:
                self.enterOuterAlt(localctx, 29)
                self.state = 1790
                localctx.setword = self.match(VisualFoxpro9Parser.TABLEPROMPT)
                self.state = 1791
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.TALK]:
                self.enterOuterAlt(localctx, 30)
                self.state = 1792
                localctx.setword = self.match(VisualFoxpro9Parser.TALK)
                self.state = 1793
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.TYPEAHEAD]:
                self.enterOuterAlt(localctx, 31)
                self.state = 1794
                localctx.setword = self.match(VisualFoxpro9Parser.TYPEAHEAD)
                self.state = 1795
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1796
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.UNIQUE]:
                self.enterOuterAlt(localctx, 32)
                self.state = 1797
                localctx.setword = self.match(VisualFoxpro9Parser.UNIQUE)
                self.state = 1798
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationItemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DeclarationItemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def idAttr2(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttr2Context,0)


        def arrayIndex(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArrayIndexContext,0)


        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def asTypeOf(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeOfContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_declarationItem

        def accept(self, visitor):
            if hasattr(visitor, "visitDeclarationItem"):
                return visitor.visitDeclarationItem(self)
            else:
                return visitor.visitChildren(self)




    def declarationItem(self):

        localctx = VisualFoxpro9Parser.DeclarationItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_declarationItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1808
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.state = 1801
                self.idAttr2()
                self.state = 1802
                self.arrayIndex()
                pass

            elif la_ == 2:
                self.state = 1804
                self.idAttr()
                self.state = 1806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.AS:
                    self.state = 1805
                    self.asTypeOf()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AsTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.AsTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)

        def datatype(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DatatypeContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_asType

        def accept(self, visitor):
            if hasattr(visitor, "visitAsType"):
                return visitor.visitAsType(self)
            else:
                return visitor.visitChildren(self)




    def asType(self):

        localctx = VisualFoxpro9Parser.AsTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_asType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1810
            self.match(VisualFoxpro9Parser.AS)
            self.state = 1811
            self.datatype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AsTypeOfContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.AsTypeOfContext, self).__init__(parent, invokingState)
            self.parser = parser

        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)


        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_asTypeOf

        def accept(self, visitor):
            if hasattr(visitor, "visitAsTypeOf"):
                return visitor.visitAsTypeOf(self)
            else:
                return visitor.visitChildren(self)




    def asTypeOf(self):

        localctx = VisualFoxpro9Parser.AsTypeOfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_asTypeOf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1813
            self.asType()
            self.state = 1816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.OF:
                self.state = 1814
                self.match(VisualFoxpro9Parser.OF)
                self.state = 1815
                self.specialExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgsItemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ArgsItemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_argsItem

        def accept(self, visitor):
            if hasattr(visitor, "visitArgsItem"):
                return visitor.visitArgsItem(self)
            else:
                return visitor.visitChildren(self)




    def argsItem(self):

        localctx = VisualFoxpro9Parser.ArgsItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_argsItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1818
            self.match(VisualFoxpro9Parser.COMMA)
            self.state = 1820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.state = 1819
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ArgsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def argsItem(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsItemContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsItemContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_args

        def accept(self, visitor):
            if hasattr(visitor, "visitArgs"):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = VisualFoxpro9Parser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_args)
        self._la = 0 # Token type
        try:
            self.state = 1834
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.SHOW, VisualFoxpro9Parser.HIDE, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.MEMO, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.MENUS, VisualFoxpro9Parser.RESOURCES, VisualFoxpro9Parser.LIST, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.NOUPDATE, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.MODIFY, VisualFoxpro9Parser.COMMAND, VisualFoxpro9Parser.UNLOCK, VisualFoxpro9Parser.COMPILE, VisualFoxpro9Parser.SORT, VisualFoxpro9Parser.UPDATE, VisualFoxpro9Parser.RESTORE, VisualFoxpro9Parser.ZOOM, VisualFoxpro9Parser.MIN, VisualFoxpro9Parser.MAX, VisualFoxpro9Parser.NORM, VisualFoxpro9Parser.SIZE, VisualFoxpro9Parser.DOEVENTS, VisualFoxpro9Parser.FORCE, VisualFoxpro9Parser.JOIN, VisualFoxpro9Parser.TEXT, VisualFoxpro9Parser.ENDTEXT, VisualFoxpro9Parser.LINKED, VisualFoxpro9Parser.TEXTMERGE, VisualFoxpro9Parser.FLAGS, VisualFoxpro9Parser.PRETEXT, VisualFoxpro9Parser.MASTER, VisualFoxpro9Parser.TITLE, VisualFoxpro9Parser.ICON, VisualFoxpro9Parser.FILL, VisualFoxpro9Parser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1822
                self.expr(0)
                self.state = 1826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.COMMA:
                    self.state = 1823
                    self.argsItem()
                    self.state = 1828
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [VisualFoxpro9Parser.COMMA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1830 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1829
                    self.argsItem()
                    self.state = 1832 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualFoxpro9Parser.COMMA):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecialArgsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SpecialArgsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_specialArgs

        def accept(self, visitor):
            if hasattr(visitor, "visitSpecialArgs"):
                return visitor.visitSpecialArgs(self)
            else:
                return visitor.visitChildren(self)




    def specialArgs(self):

        localctx = VisualFoxpro9Parser.SpecialArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_specialArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self.specialExpr()
            self.state = 1841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.COMMA:
                self.state = 1837
                self.match(VisualFoxpro9Parser.COMMA)
                self.state = 1838
                self.specialExpr()
                self.state = 1843
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ReferenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_reference

        def accept(self, visitor):
            if hasattr(visitor, "visitReference"):
                return visitor.visitReference(self)
            else:
                return visitor.visitChildren(self)




    def reference(self):

        localctx = VisualFoxpro9Parser.ReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1844
            self.match(VisualFoxpro9Parser.COMMERCIALAT)
            self.state = 1845
            self.idAttr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgReplaceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ArgReplaceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_argReplace

        def accept(self, visitor):
            if hasattr(visitor, "visitArgReplace"):
                return visitor.visitArgReplace(self)
            else:
                return visitor.visitChildren(self)




    def argReplace(self):

        localctx = VisualFoxpro9Parser.ArgReplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_argReplace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1847
            self.match(VisualFoxpro9Parser.AMPERSAND)
            self.state = 1848
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ExprContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_expr

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.ExprContext, self).copyFrom(ctx)


    class ComparisonContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.ComparisonContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def NOTEQUALS(self):
            return self.getToken(VisualFoxpro9Parser.NOTEQUALS, 0)
        def GTEQ(self):
            return self.getToken(VisualFoxpro9Parser.GTEQ, 0)
        def LTEQ(self):
            return self.getToken(VisualFoxpro9Parser.LTEQ, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitComparison"):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)


    class CastExprContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.CastExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(VisualFoxpro9Parser.CAST, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitCastExpr"):
                return visitor.visitCastExpr(self)
            else:
                return visitor.visitChildren(self)


    class AtomExprContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.AtomExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def atom(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AtomContext,0)

        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)
        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)

        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitAtomExpr"):
                return visitor.visitAtomExpr(self)
            else:
                return visitor.visitChildren(self)


    class SubExprContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.SubExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitSubExpr"):
                return visitor.visitSubExpr(self)
            else:
                return visitor.visitChildren(self)


    class BooleanNegationContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.BooleanNegationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def NOT(self):
            return self.getToken(VisualFoxpro9Parser.NOT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitBooleanNegation"):
                return visitor.visitBooleanNegation(self)
            else:
                return visitor.visitChildren(self)


    class UnaryNegationContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.UnaryNegationContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitUnaryNegation"):
                return visitor.visitUnaryNegation(self)
            else:
                return visitor.visitChildren(self)


    class BooleanOrContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.BooleanOrContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def orOp(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.OrOpContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitBooleanOr"):
                return visitor.visitBooleanOr(self)
            else:
                return visitor.visitChildren(self)


    class PowerContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.PowerContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitPower"):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)


    class MultiplicationContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.MultiplicationContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitMultiplication"):
                return visitor.visitMultiplication(self)
            else:
                return visitor.visitChildren(self)


    class ModuloContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.ModuloContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitModulo"):
                return visitor.visitModulo(self)
            else:
                return visitor.visitChildren(self)


    class ConstantExprContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.ConstantExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ConstantContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitConstantExpr"):
                return visitor.visitConstantExpr(self)
            else:
                return visitor.visitChildren(self)


    class AdditionContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.AdditionContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitAddition"):
                return visitor.visitAddition(self)
            else:
                return visitor.visitChildren(self)


    class BooleanAndContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.BooleanAndContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def andOp(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AndOpContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitBooleanAnd"):
                return visitor.visitBooleanAnd(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VisualFoxpro9Parser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 90
        self.enterRecursionRule(localctx, 90, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.SubExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1851
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 1852
                self.expr(0)
                self.state = 1853
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.UnaryNegationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1855
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.PLUS_SIGN or _la==VisualFoxpro9Parser.MINUS_SIGN):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1856
                self.expr(12)
                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.BooleanNegationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1857
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.EXCLAMATION or _la==VisualFoxpro9Parser.NOT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1858
                self.expr(11)
                pass

            elif la_ == 4:
                localctx = VisualFoxpro9Parser.ConstantExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1859
                self.constant()
                pass

            elif la_ == 5:
                localctx = VisualFoxpro9Parser.CastExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1860
                self.match(VisualFoxpro9Parser.CAST)
                self.state = 1861
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 1862
                self.expr(0)
                self.state = 1863
                self.asType()
                self.state = 1864
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass

            elif la_ == 6:
                localctx = VisualFoxpro9Parser.AtomExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1871
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
                if la_ == 1:
                    self.state = 1866
                    self.match(VisualFoxpro9Parser.PERIOD)

                elif la_ == 2:
                    self.state = 1867
                    self.idAttr()
                    self.state = 1868
                    self.match(VisualFoxpro9Parser.COLON)
                    self.state = 1869
                    self.match(VisualFoxpro9Parser.COLON)


                self.state = 1873
                self.atom()
                self.state = 1875
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
                if la_ == 1:
                    self.state = 1874
                    self.trailer()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1908
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,302,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1906
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
                    if la_ == 1:
                        localctx = VisualFoxpro9Parser.PowerContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1879
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1883
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [VisualFoxpro9Parser.ASTERISK]:
                            self.state = 1880
                            self.match(VisualFoxpro9Parser.ASTERISK)
                            self.state = 1881
                            self.match(VisualFoxpro9Parser.ASTERISK)
                            pass
                        elif token in [VisualFoxpro9Parser.CARAT]:
                            self.state = 1882
                            self.match(VisualFoxpro9Parser.CARAT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1885
                        self.expr(11)
                        pass

                    elif la_ == 2:
                        localctx = VisualFoxpro9Parser.MultiplicationContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1886
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1887
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.ASTERISK or _la==VisualFoxpro9Parser.FORWARDSLASH):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1888
                        self.expr(10)
                        pass

                    elif la_ == 3:
                        localctx = VisualFoxpro9Parser.ModuloContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1889
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1890
                        self.match(VisualFoxpro9Parser.MODULO)
                        self.state = 1891
                        self.expr(9)
                        pass

                    elif la_ == 4:
                        localctx = VisualFoxpro9Parser.AdditionContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1892
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1893
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.PLUS_SIGN or _la==VisualFoxpro9Parser.MINUS_SIGN):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1894
                        self.expr(8)
                        pass

                    elif la_ == 5:
                        localctx = VisualFoxpro9Parser.ComparisonContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1895
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1896
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.DOLLAR))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1897
                        self.expr(7)
                        pass

                    elif la_ == 6:
                        localctx = VisualFoxpro9Parser.BooleanOrContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1898
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1899
                        self.orOp()
                        self.state = 1900
                        self.expr(6)
                        pass

                    elif la_ == 7:
                        localctx = VisualFoxpro9Parser.BooleanAndContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1902
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1903
                        self.andOp()
                        self.state = 1904
                        self.expr(5)
                        pass

             
                self.state = 1910
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,302,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AndOpContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.AndOpContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OTHERAND(self):
            return self.getToken(VisualFoxpro9Parser.OTHERAND, 0)

        def AND(self):
            return self.getToken(VisualFoxpro9Parser.AND, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_andOp

        def accept(self, visitor):
            if hasattr(visitor, "visitAndOp"):
                return visitor.visitAndOp(self)
            else:
                return visitor.visitChildren(self)




    def andOp(self):

        localctx = VisualFoxpro9Parser.AndOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_andOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1911
            _la = self._input.LA(1)
            if not(_la==VisualFoxpro9Parser.AND or _la==VisualFoxpro9Parser.OTHERAND):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrOpContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.OrOpContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OTHEROR(self):
            return self.getToken(VisualFoxpro9Parser.OTHEROR, 0)

        def OR(self):
            return self.getToken(VisualFoxpro9Parser.OR, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_orOp

        def accept(self, visitor):
            if hasattr(visitor, "visitOrOp"):
                return visitor.visitOrOp(self)
            else:
                return visitor.visitChildren(self)




    def orOp(self):

        localctx = VisualFoxpro9Parser.OrOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_orOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1913
            _la = self._input.LA(1)
            if not(_la==VisualFoxpro9Parser.OR or _la==VisualFoxpro9Parser.OTHEROR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComplexIdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ComplexIdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AtomContext,0)


        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_complexId

        def accept(self, visitor):
            if hasattr(visitor, "visitComplexId"):
                return visitor.visitComplexId(self)
            else:
                return visitor.visitChildren(self)




    def complexId(self):

        localctx = VisualFoxpro9Parser.ComplexIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_complexId)
        self._la = 0 # Token type
        try:
            self.state = 1936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1920
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
                if la_ == 1:
                    self.state = 1915
                    self.match(VisualFoxpro9Parser.PERIOD)

                elif la_ == 2:
                    self.state = 1916
                    self.idAttr()
                    self.state = 1917
                    self.match(VisualFoxpro9Parser.COLON)
                    self.state = 1918
                    self.match(VisualFoxpro9Parser.COLON)


                self.state = 1922
                self.atom()
                self.state = 1923
                self.trailer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1930
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
                if la_ == 1:
                    self.state = 1925
                    self.match(VisualFoxpro9Parser.PERIOD)
                    pass

                elif la_ == 2:
                    self.state = 1926
                    self.idAttr()
                    self.state = 1927
                    self.match(VisualFoxpro9Parser.COLON)
                    self.state = 1928
                    self.match(VisualFoxpro9Parser.COLON)
                    pass


                self.state = 1932
                self.atom()
                self.state = 1934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTPAREN))) != 0):
                    self.state = 1933
                    self.trailer()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.AtomContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def reference(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ReferenceContext,0)


        def argReplace(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgReplaceContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_atom

        def accept(self, visitor):
            if hasattr(visitor, "visitAtom"):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = VisualFoxpro9Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_atom)
        try:
            self.state = 1941
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.SHOW, VisualFoxpro9Parser.HIDE, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.MEMO, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.MENUS, VisualFoxpro9Parser.RESOURCES, VisualFoxpro9Parser.LIST, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.NOUPDATE, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.MODIFY, VisualFoxpro9Parser.COMMAND, VisualFoxpro9Parser.UNLOCK, VisualFoxpro9Parser.COMPILE, VisualFoxpro9Parser.SORT, VisualFoxpro9Parser.UPDATE, VisualFoxpro9Parser.RESTORE, VisualFoxpro9Parser.ZOOM, VisualFoxpro9Parser.MIN, VisualFoxpro9Parser.MAX, VisualFoxpro9Parser.NORM, VisualFoxpro9Parser.SIZE, VisualFoxpro9Parser.DOEVENTS, VisualFoxpro9Parser.FORCE, VisualFoxpro9Parser.JOIN, VisualFoxpro9Parser.TEXT, VisualFoxpro9Parser.ENDTEXT, VisualFoxpro9Parser.LINKED, VisualFoxpro9Parser.TEXTMERGE, VisualFoxpro9Parser.FLAGS, VisualFoxpro9Parser.PRETEXT, VisualFoxpro9Parser.MASTER, VisualFoxpro9Parser.TITLE, VisualFoxpro9Parser.ICON, VisualFoxpro9Parser.FILL, VisualFoxpro9Parser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1938
                self.identifier()
                pass
            elif token in [VisualFoxpro9Parser.COMMERCIALAT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1939
                self.reference()
                pass
            elif token in [VisualFoxpro9Parser.AMPERSAND]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1940
                self.argReplace()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.TrailerContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_trailer

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.TrailerContext, self).copyFrom(ctx)



    class FuncCallTrailerContext(TrailerContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.TrailerContext)
            super(VisualFoxpro9Parser.FuncCallTrailerContext, self).__init__(parser)
            self.copyFrom(ctx)

        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)

        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitFuncCallTrailer"):
                return visitor.visitFuncCallTrailer(self)
            else:
                return visitor.visitChildren(self)


    class IdentTrailerContext(TrailerContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.TrailerContext)
            super(VisualFoxpro9Parser.IdentTrailerContext, self).__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitIdentTrailer"):
                return visitor.visitIdentTrailer(self)
            else:
                return visitor.visitChildren(self)



    def trailer(self):

        localctx = VisualFoxpro9Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 1963
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.LEFTPAREN]:
                localctx = VisualFoxpro9Parser.FuncCallTrailerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1953
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.LEFTPAREN]:
                    self.state = 1943
                    self.match(VisualFoxpro9Parser.LEFTPAREN)
                    self.state = 1945
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                        self.state = 1944
                        self.args()


                    self.state = 1947
                    self.match(VisualFoxpro9Parser.RIGHTPAREN)
                    pass
                elif token in [VisualFoxpro9Parser.LEFTBRACKET]:
                    self.state = 1948
                    self.match(VisualFoxpro9Parser.LEFTBRACKET)
                    self.state = 1950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                        self.state = 1949
                        self.args()


                    self.state = 1952
                    self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1956
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
                if la_ == 1:
                    self.state = 1955
                    self.trailer()


                pass
            elif token in [VisualFoxpro9Parser.PERIOD]:
                localctx = VisualFoxpro9Parser.IdentTrailerContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1958
                self.match(VisualFoxpro9Parser.PERIOD)
                self.state = 1959
                self.identifier()
                self.state = 1961
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
                if la_ == 1:
                    self.state = 1960
                    self.trailer()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathnameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PathnameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def pathElement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.PathElementContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.PathElementContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_pathname

        def accept(self, visitor):
            if hasattr(visitor, "visitPathname"):
                return visitor.visitPathname(self)
            else:
                return visitor.visitChildren(self)




    def pathname(self):

        localctx = VisualFoxpro9Parser.PathnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_pathname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
            if la_ == 1:
                self.state = 1965
                self.identifier()
                self.state = 1966
                self.match(VisualFoxpro9Parser.COLON)


            self.state = 1971 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 1970
                    self.pathElement()

                else:
                    raise NoViableAltException(self)
                self.state = 1973 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,315,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PathElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)

        def BACKSLASH(self):
            return self.getToken(VisualFoxpro9Parser.BACKSLASH, 0)

        def NOTEQUALS(self):
            return self.getToken(VisualFoxpro9Parser.NOTEQUALS, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_pathElement

        def accept(self, visitor):
            if hasattr(visitor, "visitPathElement"):
                return visitor.visitPathElement(self)
            else:
                return visitor.visitChildren(self)




    def pathElement(self):

        localctx = VisualFoxpro9Parser.PathElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_pathElement)
        try:
            self.state = 2000
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.SHOW, VisualFoxpro9Parser.HIDE, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.MEMO, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.MENUS, VisualFoxpro9Parser.RESOURCES, VisualFoxpro9Parser.LIST, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.NOUPDATE, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.MODIFY, VisualFoxpro9Parser.COMMAND, VisualFoxpro9Parser.UNLOCK, VisualFoxpro9Parser.COMPILE, VisualFoxpro9Parser.SORT, VisualFoxpro9Parser.UPDATE, VisualFoxpro9Parser.RESTORE, VisualFoxpro9Parser.ZOOM, VisualFoxpro9Parser.MIN, VisualFoxpro9Parser.MAX, VisualFoxpro9Parser.NORM, VisualFoxpro9Parser.SIZE, VisualFoxpro9Parser.DOEVENTS, VisualFoxpro9Parser.FORCE, VisualFoxpro9Parser.JOIN, VisualFoxpro9Parser.TEXT, VisualFoxpro9Parser.ENDTEXT, VisualFoxpro9Parser.LINKED, VisualFoxpro9Parser.TEXTMERGE, VisualFoxpro9Parser.FLAGS, VisualFoxpro9Parser.PRETEXT, VisualFoxpro9Parser.MASTER, VisualFoxpro9Parser.TITLE, VisualFoxpro9Parser.ICON, VisualFoxpro9Parser.FILL, VisualFoxpro9Parser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1975
                self.identifier()
                pass
            elif token in [VisualFoxpro9Parser.NUMBER_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1976
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                pass
            elif token in [VisualFoxpro9Parser.BACKSLASH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1977
                self.match(VisualFoxpro9Parser.BACKSLASH)
                pass
            elif token in [VisualFoxpro9Parser.SEMICOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1978
                self.match(VisualFoxpro9Parser.SEMICOLON)
                pass
            elif token in [VisualFoxpro9Parser.AMPERSAND]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1979
                self.match(VisualFoxpro9Parser.AMPERSAND)
                pass
            elif token in [VisualFoxpro9Parser.COMMERCIALAT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1980
                self.match(VisualFoxpro9Parser.COMMERCIALAT)
                pass
            elif token in [VisualFoxpro9Parser.PLUS_SIGN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1981
                self.match(VisualFoxpro9Parser.PLUS_SIGN)
                pass
            elif token in [VisualFoxpro9Parser.MINUS_SIGN]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1982
                self.match(VisualFoxpro9Parser.MINUS_SIGN)
                pass
            elif token in [VisualFoxpro9Parser.PERIOD]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1983
                self.match(VisualFoxpro9Parser.PERIOD)
                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACKET]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1984
                self.match(VisualFoxpro9Parser.LEFTBRACKET)
                pass
            elif token in [VisualFoxpro9Parser.RIGHTBRACKET]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1985
                self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1986
                self.match(VisualFoxpro9Parser.LEFTBRACE)
                pass
            elif token in [VisualFoxpro9Parser.RIGHTBRACE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1987
                self.match(VisualFoxpro9Parser.RIGHTBRACE)
                pass
            elif token in [VisualFoxpro9Parser.LEFTPAREN]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1988
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                pass
            elif token in [VisualFoxpro9Parser.RIGHTPAREN]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1989
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass
            elif token in [VisualFoxpro9Parser.EXCLAMATION]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1990
                self.match(VisualFoxpro9Parser.EXCLAMATION)
                pass
            elif token in [VisualFoxpro9Parser.HASH]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1991
                self.match(VisualFoxpro9Parser.HASH)
                pass
            elif token in [VisualFoxpro9Parser.DOUBLEEQUALS]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1992
                self.match(VisualFoxpro9Parser.DOUBLEEQUALS)
                pass
            elif token in [VisualFoxpro9Parser.NOTEQUALS]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1993
                self.match(VisualFoxpro9Parser.NOTEQUALS)
                pass
            elif token in [VisualFoxpro9Parser.MODULO]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1994
                self.match(VisualFoxpro9Parser.MODULO)
                pass
            elif token in [VisualFoxpro9Parser.EQUALS]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1995
                self.match(VisualFoxpro9Parser.EQUALS)
                pass
            elif token in [VisualFoxpro9Parser.CARAT]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1996
                self.match(VisualFoxpro9Parser.CARAT)
                pass
            elif token in [VisualFoxpro9Parser.COMMA]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1997
                self.match(VisualFoxpro9Parser.COMMA)
                pass
            elif token in [VisualFoxpro9Parser.DOLLAR]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1998
                self.match(VisualFoxpro9Parser.DOLLAR)
                pass
            elif token in [VisualFoxpro9Parser.T__0]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1999
                self.match(VisualFoxpro9Parser.T__0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecialExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SpecialExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def pathname(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.PathnameContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_specialExpr

        def accept(self, visitor):
            if hasattr(visitor, "visitSpecialExpr"):
                return visitor.visitSpecialExpr(self)
            else:
                return visitor.visitChildren(self)




    def specialExpr(self):

        localctx = VisualFoxpro9Parser.SpecialExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_specialExpr)
        try:
            self.state = 2004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2002
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2003
                self.pathname()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ConstantContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_constant

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.ConstantContext, self).copyFrom(ctx)



    class DateContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.DateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NUMBER_LITERAL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NUMBER_LITERAL)
            else:
                return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, i)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitDate"):
                return visitor.visitDate(self)
            else:
                return visitor.visitChildren(self)


    class BoolOrNullContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.BoolOrNullContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(VisualFoxpro9Parser.NULL, 0)
        def BOOLEANCHAR(self):
            return self.getToken(VisualFoxpro9Parser.BOOLEANCHAR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitBoolOrNull"):
                return visitor.visitBoolOrNull(self)
            else:
                return visitor.visitChildren(self)


    class BlobContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.BlobContext, self).__init__(parser)
            self.copyFrom(ctx)

        def BLOB_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.BLOB_LITERAL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitBlob"):
                return visitor.visitBlob(self)
            else:
                return visitor.visitChildren(self)


    class StringContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.StringContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitString"):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)


    class NumberOrCurrencyContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.NumberOrCurrencyContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitNumberOrCurrency"):
                return visitor.visitNumberOrCurrency(self)
            else:
                return visitor.visitChildren(self)



    def constant(self):

        localctx = VisualFoxpro9Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 2078
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.DOLLAR]:
                localctx = VisualFoxpro9Parser.NumberOrCurrencyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.DOLLAR:
                    self.state = 2006
                    self.match(VisualFoxpro9Parser.DOLLAR)


                self.state = 2009
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                pass
            elif token in [VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.NULL]:
                localctx = VisualFoxpro9Parser.BoolOrNullContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2014
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.PERIOD]:
                    self.state = 2010
                    self.match(VisualFoxpro9Parser.PERIOD)
                    self.state = 2011
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.NULL or _la==VisualFoxpro9Parser.BOOLEANCHAR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2012
                    self.match(VisualFoxpro9Parser.PERIOD)
                    pass
                elif token in [VisualFoxpro9Parser.NULL]:
                    self.state = 2013
                    self.match(VisualFoxpro9Parser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACE]:
                localctx = VisualFoxpro9Parser.DateContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2016
                self.match(VisualFoxpro9Parser.LEFTBRACE)
                self.state = 2048
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.FORWARDSLASH]:
                    self.state = 2017
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    self.state = 2018
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    pass
                elif token in [VisualFoxpro9Parser.COLON]:
                    self.state = 2019
                    self.match(VisualFoxpro9Parser.COLON)
                    pass
                elif token in [VisualFoxpro9Parser.CARAT]:
                    self.state = 2020
                    self.match(VisualFoxpro9Parser.CARAT)
                    self.state = 2031
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
                    if la_ == 1:
                        self.state = 2021
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 2022
                        self.match(VisualFoxpro9Parser.MINUS_SIGN)
                        self.state = 2023
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 2024
                        self.match(VisualFoxpro9Parser.MINUS_SIGN)
                        self.state = 2025
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        pass

                    elif la_ == 2:
                        self.state = 2026
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 2027
                        self.match(VisualFoxpro9Parser.FORWARDSLASH)
                        self.state = 2028
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 2029
                        self.match(VisualFoxpro9Parser.FORWARDSLASH)
                        self.state = 2030
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        pass


                    self.state = 2046
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.NUMBER_LITERAL or _la==VisualFoxpro9Parser.COMMA:
                        self.state = 2034
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.COMMA:
                            self.state = 2033
                            self.match(VisualFoxpro9Parser.COMMA)


                        self.state = 2036
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 2043
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.COLON:
                            self.state = 2037
                            self.match(VisualFoxpro9Parser.COLON)
                            self.state = 2038
                            self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                            self.state = 2041
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==VisualFoxpro9Parser.COLON:
                                self.state = 2039
                                self.match(VisualFoxpro9Parser.COLON)
                                self.state = 2040
                                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)




                        self.state = 2045
                        self.identifier()


                    pass
                elif token in [VisualFoxpro9Parser.RIGHTBRACE]:
                    pass
                else:
                    pass
                self.state = 2050
                self.match(VisualFoxpro9Parser.RIGHTBRACE)
                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE]:
                localctx = VisualFoxpro9Parser.StringContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2075
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.SINGLEQUOTE]:
                    self.state = 2051
                    self.match(VisualFoxpro9Parser.SINGLEQUOTE)
                    self.state = 2055
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.SHOW - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.NODEBUG - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.LIST - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.MODIFY - 256)) | (1 << (VisualFoxpro9Parser.COMMAND - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.COMPILE - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.RESTORE - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.MIN - 256)) | (1 << (VisualFoxpro9Parser.MAX - 256)) | (1 << (VisualFoxpro9Parser.NORM - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 256)) | (1 << (VisualFoxpro9Parser.FORCE - 256)) | (1 << (VisualFoxpro9Parser.JOIN - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 256)) | (1 << (VisualFoxpro9Parser.LINKED - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.FLAGS - 256)) | (1 << (VisualFoxpro9Parser.PRETEXT - 256)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 256)) | (1 << (VisualFoxpro9Parser.MASTER - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.ICON - 256)) | (1 << (VisualFoxpro9Parser.FILL - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                        self.state = 2052
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==VisualFoxpro9Parser.SINGLEQUOTE or _la==VisualFoxpro9Parser.NL:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2057
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2058
                    self.match(VisualFoxpro9Parser.SINGLEQUOTE)
                    pass
                elif token in [VisualFoxpro9Parser.DOUBLEQUOTE]:
                    self.state = 2059
                    self.match(VisualFoxpro9Parser.DOUBLEQUOTE)
                    self.state = 2063
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.SHOW - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.NODEBUG - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.LIST - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.MODIFY - 256)) | (1 << (VisualFoxpro9Parser.COMMAND - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.COMPILE - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.RESTORE - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.MIN - 256)) | (1 << (VisualFoxpro9Parser.MAX - 256)) | (1 << (VisualFoxpro9Parser.NORM - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 256)) | (1 << (VisualFoxpro9Parser.FORCE - 256)) | (1 << (VisualFoxpro9Parser.JOIN - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 256)) | (1 << (VisualFoxpro9Parser.LINKED - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.FLAGS - 256)) | (1 << (VisualFoxpro9Parser.PRETEXT - 256)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 256)) | (1 << (VisualFoxpro9Parser.MASTER - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.ICON - 256)) | (1 << (VisualFoxpro9Parser.FILL - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                        self.state = 2060
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==VisualFoxpro9Parser.DOUBLEQUOTE or _la==VisualFoxpro9Parser.NL:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2065
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2066
                    self.match(VisualFoxpro9Parser.DOUBLEQUOTE)
                    pass
                elif token in [VisualFoxpro9Parser.LEFTBRACKET]:
                    self.state = 2067
                    self.match(VisualFoxpro9Parser.LEFTBRACKET)
                    self.state = 2071
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.SHOW - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.NODEBUG - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.LIST - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.MODIFY - 256)) | (1 << (VisualFoxpro9Parser.COMMAND - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.COMPILE - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.RESTORE - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.MIN - 256)) | (1 << (VisualFoxpro9Parser.MAX - 256)) | (1 << (VisualFoxpro9Parser.NORM - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 256)) | (1 << (VisualFoxpro9Parser.FORCE - 256)) | (1 << (VisualFoxpro9Parser.JOIN - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 256)) | (1 << (VisualFoxpro9Parser.LINKED - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.FLAGS - 256)) | (1 << (VisualFoxpro9Parser.PRETEXT - 256)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 256)) | (1 << (VisualFoxpro9Parser.MASTER - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.ICON - 256)) | (1 << (VisualFoxpro9Parser.FILL - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                        self.state = 2068
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==VisualFoxpro9Parser.RIGHTBRACKET or _la==VisualFoxpro9Parser.NL:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2073
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2074
                    self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.BLOB_LITERAL]:
                localctx = VisualFoxpro9Parser.BlobContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2077
                self.match(VisualFoxpro9Parser.BLOB_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdAttr2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IdAttr2Context, self).__init__(parent, invokingState)
            self.parser = parser
            self.startPeriod = None # Token

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_idAttr2

        def accept(self, visitor):
            if hasattr(visitor, "visitIdAttr2"):
                return visitor.visitIdAttr2(self)
            else:
                return visitor.visitChildren(self)




    def idAttr2(self):

        localctx = VisualFoxpro9Parser.IdAttr2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_idAttr2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.PERIOD:
                self.state = 2080
                localctx.startPeriod = self.match(VisualFoxpro9Parser.PERIOD)


            self.state = 2083
            self.identifier()
            self.state = 2088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.PERIOD:
                self.state = 2084
                self.match(VisualFoxpro9Parser.PERIOD)
                self.state = 2085
                self.identifier()
                self.state = 2090
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdAttrContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IdAttrContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)

        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_idAttr

        def accept(self, visitor):
            if hasattr(visitor, "visitIdAttr"):
                return visitor.visitIdAttr(self)
            else:
                return visitor.visitChildren(self)




    def idAttr(self):

        localctx = VisualFoxpro9Parser.IdAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_idAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.PERIOD:
                self.state = 2091
                self.match(VisualFoxpro9Parser.PERIOD)


            self.state = 2094
            self.identifier()
            self.state = 2096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.state = 2095
                self.trailer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TwoExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.TwoExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_twoExpr

        def accept(self, visitor):
            if hasattr(visitor, "visitTwoExpr"):
                return visitor.visitTwoExpr(self)
            else:
                return visitor.visitChildren(self)




    def twoExpr(self):

        localctx = VisualFoxpro9Parser.TwoExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_twoExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2098
            self.expr(0)
            self.state = 2099
            self.match(VisualFoxpro9Parser.COMMA)
            self.state = 2100
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayIndexContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ArrayIndexContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def twoExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TwoExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_arrayIndex

        def accept(self, visitor):
            if hasattr(visitor, "visitArrayIndex"):
                return visitor.visitArrayIndex(self)
            else:
                return visitor.visitChildren(self)




    def arrayIndex(self):

        localctx = VisualFoxpro9Parser.ArrayIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_arrayIndex)
        try:
            self.state = 2116
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.LEFTPAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2102
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 2105
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
                if la_ == 1:
                    self.state = 2103
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 2104
                    self.twoExpr()
                    pass


                self.state = 2107
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2109
                self.match(VisualFoxpro9Parser.LEFTBRACKET)
                self.state = 2112
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
                if la_ == 1:
                    self.state = 2110
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 2111
                    self.twoExpr()
                    pass


                self.state = 2114
                self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatatypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DatatypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_datatype

        def accept(self, visitor):
            if hasattr(visitor, "visitDatatype"):
                return visitor.visitDatatype(self)
            else:
                return visitor.visitChildren(self)




    def datatype(self):

        localctx = VisualFoxpro9Parser.DatatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_datatype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2118
            self.idAttr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScopeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ScopeClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)

        def NEXT(self):
            return self.getToken(VisualFoxpro9Parser.NEXT, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def RECORD(self):
            return self.getToken(VisualFoxpro9Parser.RECORD, 0)

        def REST(self):
            return self.getToken(VisualFoxpro9Parser.REST, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_scopeClause

        def accept(self, visitor):
            if hasattr(visitor, "visitScopeClause"):
                return visitor.visitScopeClause(self)
            else:
                return visitor.visitChildren(self)




    def scopeClause(self):

        localctx = VisualFoxpro9Parser.ScopeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_scopeClause)
        try:
            self.state = 2126
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2120
                self.match(VisualFoxpro9Parser.ALL)
                pass
            elif token in [VisualFoxpro9Parser.NEXT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2121
                self.match(VisualFoxpro9Parser.NEXT)
                self.state = 2122
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.RECORD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2123
                self.match(VisualFoxpro9Parser.RECORD)
                self.state = 2124
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.REST]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2125
                self.match(VisualFoxpro9Parser.REST)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IdentifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(VisualFoxpro9Parser.ID, 0)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)

        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)

        def ELIF(self):
            return self.getToken(VisualFoxpro9Parser.ELIF, 0)

        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)

        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)

        def OFF(self):
            return self.getToken(VisualFoxpro9Parser.OFF, 0)

        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)

        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)

        def STORE(self):
            return self.getToken(VisualFoxpro9Parser.STORE, 0)

        def EXTERNAL(self):
            return self.getToken(VisualFoxpro9Parser.EXTERNAL, 0)

        def SCOPE(self):
            return self.getToken(VisualFoxpro9Parser.SCOPE, 0)

        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)

        def RECALL(self):
            return self.getToken(VisualFoxpro9Parser.RECALL, 0)

        def DELETE(self):
            return self.getToken(VisualFoxpro9Parser.DELETE, 0)

        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)

        def SET(self):
            return self.getToken(VisualFoxpro9Parser.SET, 0)

        def RELEASE(self):
            return self.getToken(VisualFoxpro9Parser.RELEASE, 0)

        def RECYCLE(self):
            return self.getToken(VisualFoxpro9Parser.RECYCLE, 0)

        def CREATE(self):
            return self.getToken(VisualFoxpro9Parser.CREATE, 0)

        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)

        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)

        def DBF(self):
            return self.getToken(VisualFoxpro9Parser.DBF, 0)

        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)

        def FREE(self):
            return self.getToken(VisualFoxpro9Parser.FREE, 0)

        def SELECT(self):
            return self.getToken(VisualFoxpro9Parser.SELECT, 0)

        def USE(self):
            return self.getToken(VisualFoxpro9Parser.USE, 0)

        def READ(self):
            return self.getToken(VisualFoxpro9Parser.READ, 0)

        def EVENTS(self):
            return self.getToken(VisualFoxpro9Parser.EVENTS, 0)

        def SHUTDOWN(self):
            return self.getToken(VisualFoxpro9Parser.SHUTDOWN, 0)

        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)

        def CLASS(self):
            return self.getToken(VisualFoxpro9Parser.CLASS, 0)

        def ENDDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.ENDDEFINE, 0)

        def LOCATE(self):
            return self.getToken(VisualFoxpro9Parser.LOCATE, 0)

        def CONTINUE(self):
            return self.getToken(VisualFoxpro9Parser.CONTINUE, 0)

        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def ENDFOR(self):
            return self.getToken(VisualFoxpro9Parser.ENDFOR, 0)

        def WHILE(self):
            return self.getToken(VisualFoxpro9Parser.WHILE, 0)

        def NOOPTIMIZE(self):
            return self.getToken(VisualFoxpro9Parser.NOOPTIMIZE, 0)

        def STATUS(self):
            return self.getToken(VisualFoxpro9Parser.STATUS, 0)

        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)

        def MEMOWIDTH(self):
            return self.getToken(VisualFoxpro9Parser.MEMOWIDTH, 0)

        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)

        def REFRESH(self):
            return self.getToken(VisualFoxpro9Parser.REFRESH, 0)

        def BELL(self):
            return self.getToken(VisualFoxpro9Parser.BELL, 0)

        def CENTURY(self):
            return self.getToken(VisualFoxpro9Parser.CENTURY, 0)

        def DATE(self):
            return self.getToken(VisualFoxpro9Parser.DATE, 0)

        def ADD(self):
            return self.getToken(VisualFoxpro9Parser.ADD, 0)

        def OBJECT(self):
            return self.getToken(VisualFoxpro9Parser.OBJECT, 0)

        def REPLACE(self):
            return self.getToken(VisualFoxpro9Parser.REPLACE, 0)

        def LIBRARY(self):
            return self.getToken(VisualFoxpro9Parser.LIBRARY, 0)

        def SHARED(self):
            return self.getToken(VisualFoxpro9Parser.SHARED, 0)

        def WAIT(self):
            return self.getToken(VisualFoxpro9Parser.WAIT, 0)

        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)

        def NOWAIT(self):
            return self.getToken(VisualFoxpro9Parser.NOWAIT, 0)

        def NOCLEAR(self):
            return self.getToken(VisualFoxpro9Parser.NOCLEAR, 0)

        def NOTIFY(self):
            return self.getToken(VisualFoxpro9Parser.NOTIFY, 0)

        def ENDDO(self):
            return self.getToken(VisualFoxpro9Parser.ENDDO, 0)

        def DECLARE(self):
            return self.getToken(VisualFoxpro9Parser.DECLARE, 0)

        def ERASE(self):
            return self.getToken(VisualFoxpro9Parser.ERASE, 0)

        def SYSMENU(self):
            return self.getToken(VisualFoxpro9Parser.SYSMENU, 0)

        def CLOCK(self):
            return self.getToken(VisualFoxpro9Parser.CLOCK, 0)

        def RETURN(self):
            return self.getToken(VisualFoxpro9Parser.RETURN, 0)

        def PARAMETER(self):
            return self.getToken(VisualFoxpro9Parser.PARAMETER, 0)

        def ALTERNATE(self):
            return self.getToken(VisualFoxpro9Parser.ALTERNATE, 0)

        def EXACT(self):
            return self.getToken(VisualFoxpro9Parser.EXACT, 0)

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)

        def COUNT(self):
            return self.getToken(VisualFoxpro9Parser.COUNT, 0)

        def GOTO(self):
            return self.getToken(VisualFoxpro9Parser.GOTO, 0)

        def TOP(self):
            return self.getToken(VisualFoxpro9Parser.TOP, 0)

        def BOTTOM(self):
            return self.getToken(VisualFoxpro9Parser.BOTTOM, 0)

        def RECORD(self):
            return self.getToken(VisualFoxpro9Parser.RECORD, 0)

        def CLOSE(self):
            return self.getToken(VisualFoxpro9Parser.CLOSE, 0)

        def APPEND(self):
            return self.getToken(VisualFoxpro9Parser.APPEND, 0)

        def BLANK(self):
            return self.getToken(VisualFoxpro9Parser.BLANK, 0)

        def NOMENU(self):
            return self.getToken(VisualFoxpro9Parser.NOMENU, 0)

        def CASE(self):
            return self.getToken(VisualFoxpro9Parser.CASE, 0)

        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)

        def REPORT(self):
            return self.getToken(VisualFoxpro9Parser.REPORT, 0)

        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)

        def NOEJECT(self):
            return self.getToken(VisualFoxpro9Parser.NOEJECT, 0)

        def PRINTER(self):
            return self.getToken(VisualFoxpro9Parser.PRINTER, 0)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)

        def NOPROMPT(self):
            return self.getToken(VisualFoxpro9Parser.NOPROMPT, 0)

        def NOCONSOLE(self):
            return self.getToken(VisualFoxpro9Parser.NOCONSOLE, 0)

        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)

        def STRUCTURE(self):
            return self.getToken(VisualFoxpro9Parser.STRUCTURE, 0)

        def DELETED(self):
            return self.getToken(VisualFoxpro9Parser.DELETED, 0)

        def SUM(self):
            return self.getToken(VisualFoxpro9Parser.SUM, 0)

        def DISTINCT(self):
            return self.getToken(VisualFoxpro9Parser.DISTINCT, 0)

        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)

        def NEXT(self):
            return self.getToken(VisualFoxpro9Parser.NEXT, 0)

        def REST(self):
            return self.getToken(VisualFoxpro9Parser.REST, 0)

        def SKIPKW(self):
            return self.getToken(VisualFoxpro9Parser.SKIPKW, 0)

        def PACK(self):
            return self.getToken(VisualFoxpro9Parser.PACK, 0)

        def EXCLUSIVE(self):
            return self.getToken(VisualFoxpro9Parser.EXCLUSIVE, 0)

        def NEAR(self):
            return self.getToken(VisualFoxpro9Parser.NEAR, 0)

        def MKDIR(self):
            return self.getToken(VisualFoxpro9Parser.MKDIR, 0)

        def RMDIR(self):
            return self.getToken(VisualFoxpro9Parser.RMDIR, 0)

        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)

        def KEYBOARD(self):
            return self.getToken(VisualFoxpro9Parser.KEYBOARD, 0)

        def LABEL(self):
            return self.getToken(VisualFoxpro9Parser.LABEL, 0)

        def PLAIN(self):
            return self.getToken(VisualFoxpro9Parser.PLAIN, 0)

        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)

        def AT(self):
            return self.getToken(VisualFoxpro9Parser.AT, 0)

        def LINE(self):
            return self.getToken(VisualFoxpro9Parser.LINE, 0)

        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)

        def NOMARGIN(self):
            return self.getToken(VisualFoxpro9Parser.NOMARGIN, 0)

        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def COLOR(self):
            return self.getToken(VisualFoxpro9Parser.COLOR, 0)

        def SCHEME(self):
            return self.getToken(VisualFoxpro9Parser.SCHEME, 0)

        def BEFORE(self):
            return self.getToken(VisualFoxpro9Parser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(VisualFoxpro9Parser.AFTER, 0)

        def NEGOTIATE(self):
            return self.getToken(VisualFoxpro9Parser.NEGOTIATE, 0)

        def FONT(self):
            return self.getToken(VisualFoxpro9Parser.FONT, 0)

        def STYLE(self):
            return self.getToken(VisualFoxpro9Parser.STYLE, 0)

        def MARK(self):
            return self.getToken(VisualFoxpro9Parser.MARK, 0)

        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)

        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)

        def SHADOW(self):
            return self.getToken(VisualFoxpro9Parser.SHADOW, 0)

        def MARGIN(self):
            return self.getToken(VisualFoxpro9Parser.MARGIN, 0)

        def RELATIVE(self):
            return self.getToken(VisualFoxpro9Parser.RELATIVE, 0)

        def SELECTION(self):
            return self.getToken(VisualFoxpro9Parser.SELECTION, 0)

        def DEACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.DEACTIVATE, 0)

        def SAME(self):
            return self.getToken(VisualFoxpro9Parser.SAME, 0)

        def NOSHOW(self):
            return self.getToken(VisualFoxpro9Parser.NOSHOW, 0)

        def STEP(self):
            return self.getToken(VisualFoxpro9Parser.STEP, 0)

        def THEN(self):
            return self.getToken(VisualFoxpro9Parser.THEN, 0)

        def UNDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.UNDEFINE, 0)

        def IFDEF(self):
            return self.getToken(VisualFoxpro9Parser.IFDEF, 0)

        def PUSH(self):
            return self.getToken(VisualFoxpro9Parser.PUSH, 0)

        def POP(self):
            return self.getToken(VisualFoxpro9Parser.POP, 0)

        def TIMEOUT(self):
            return self.getToken(VisualFoxpro9Parser.TIMEOUT, 0)

        def ENDWITH(self):
            return self.getToken(VisualFoxpro9Parser.ENDWITH, 0)

        def TYPEAHEAD(self):
            return self.getToken(VisualFoxpro9Parser.TYPEAHEAD, 0)

        def ALIAS(self):
            return self.getToken(VisualFoxpro9Parser.ALIAS, 0)

        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)

        def SEEK(self):
            return self.getToken(VisualFoxpro9Parser.SEEK, 0)

        def WHERE(self):
            return self.getToken(VisualFoxpro9Parser.WHERE, 0)

        def FILTER(self):
            return self.getToken(VisualFoxpro9Parser.FILTER, 0)

        def RENAME(self):
            return self.getToken(VisualFoxpro9Parser.RENAME, 0)

        def INCLUDE(self):
            return self.getToken(VisualFoxpro9Parser.INCLUDE, 0)

        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)

        def BY(self):
            return self.getToken(VisualFoxpro9Parser.BY, 0)

        def UNIQUE(self):
            return self.getToken(VisualFoxpro9Parser.UNIQUE, 0)

        def INDEX(self):
            return self.getToken(VisualFoxpro9Parser.INDEX, 0)

        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)

        def COMPACT(self):
            return self.getToken(VisualFoxpro9Parser.COMPACT, 0)

        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)

        def CANDIDATE(self):
            return self.getToken(VisualFoxpro9Parser.CANDIDATE, 0)

        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)

        def DIMENSION(self):
            return self.getToken(VisualFoxpro9Parser.DIMENSION, 0)

        def NOT(self):
            return self.getToken(VisualFoxpro9Parser.NOT, 0)

        def AND(self):
            return self.getToken(VisualFoxpro9Parser.AND, 0)

        def OR(self):
            return self.getToken(VisualFoxpro9Parser.OR, 0)

        def SCAN(self):
            return self.getToken(VisualFoxpro9Parser.SCAN, 0)

        def ENDSCAN(self):
            return self.getToken(VisualFoxpro9Parser.ENDSCAN, 0)

        def NULL(self):
            return self.getToken(VisualFoxpro9Parser.NULL, 0)

        def BOOLEANCHAR(self):
            return self.getToken(VisualFoxpro9Parser.BOOLEANCHAR, 0)

        def DLLS(self):
            return self.getToken(VisualFoxpro9Parser.DLLS, 0)

        def MACROS(self):
            return self.getToken(VisualFoxpro9Parser.MACROS, 0)

        def NUMBER(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER, 0)

        def ZAP(self):
            return self.getToken(VisualFoxpro9Parser.ZAP, 0)

        def ROLLOVER(self):
            return self.getToken(VisualFoxpro9Parser.ROLLOVER, 0)

        def DEFAULT(self):
            return self.getToken(VisualFoxpro9Parser.DEFAULT, 0)

        def SAVE(self):
            return self.getToken(VisualFoxpro9Parser.SAVE, 0)

        def NOSAVE(self):
            return self.getToken(VisualFoxpro9Parser.NOSAVE, 0)

        def PROGRAM(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAM, 0)

        def THROW(self):
            return self.getToken(VisualFoxpro9Parser.THROW, 0)

        def TABLES(self):
            return self.getToken(VisualFoxpro9Parser.TABLES, 0)

        def EACH(self):
            return self.getToken(VisualFoxpro9Parser.EACH, 0)

        def CAST(self):
            return self.getToken(VisualFoxpro9Parser.CAST, 0)

        def ENDCASE(self):
            return self.getToken(VisualFoxpro9Parser.ENDCASE, 0)

        def ENDPROC(self):
            return self.getToken(VisualFoxpro9Parser.ENDPROC, 0)

        def REINDEX(self):
            return self.getToken(VisualFoxpro9Parser.REINDEX, 0)

        def INDEXES(self):
            return self.getToken(VisualFoxpro9Parser.INDEXES, 0)

        def OTHERWISE(self):
            return self.getToken(VisualFoxpro9Parser.OTHERWISE, 0)

        def RUN(self):
            return self.getToken(VisualFoxpro9Parser.RUN, 0)

        def EXTENDED(self):
            return self.getToken(VisualFoxpro9Parser.EXTENDED, 0)

        def MEMO(self):
            return self.getToken(VisualFoxpro9Parser.MEMO, 0)

        def ASSERT(self):
            return self.getToken(VisualFoxpro9Parser.ASSERT, 0)

        def TRY(self):
            return self.getToken(VisualFoxpro9Parser.TRY, 0)

        def CATCH(self):
            return self.getToken(VisualFoxpro9Parser.CATCH, 0)

        def FINALLY(self):
            return self.getToken(VisualFoxpro9Parser.FINALLY, 0)

        def ENDTRY(self):
            return self.getToken(VisualFoxpro9Parser.ENDTRY, 0)

        def BROWSE(self):
            return self.getToken(VisualFoxpro9Parser.BROWSE, 0)

        def INSERT(self):
            return self.getToken(VisualFoxpro9Parser.INSERT, 0)

        def VALUES(self):
            return self.getToken(VisualFoxpro9Parser.VALUES, 0)

        def MEMVAR(self):
            return self.getToken(VisualFoxpro9Parser.MEMVAR, 0)

        def COMPATIBLE(self):
            return self.getToken(VisualFoxpro9Parser.COMPATIBLE, 0)

        def DB4(self):
            return self.getToken(VisualFoxpro9Parser.DB4, 0)

        def FOXPLUS(self):
            return self.getToken(VisualFoxpro9Parser.FOXPLUS, 0)

        def TYPE(self):
            return self.getToken(VisualFoxpro9Parser.TYPE, 0)

        def SCATTER(self):
            return self.getToken(VisualFoxpro9Parser.SCATTER, 0)

        def GATHER(self):
            return self.getToken(VisualFoxpro9Parser.GATHER, 0)

        def EXCEPT(self):
            return self.getToken(VisualFoxpro9Parser.EXCEPT, 0)

        def LIKE(self):
            return self.getToken(VisualFoxpro9Parser.LIKE, 0)

        def FIELDS(self):
            return self.getToken(VisualFoxpro9Parser.FIELDS, 0)

        def ALTER(self):
            return self.getToken(VisualFoxpro9Parser.ALTER, 0)

        def COLUMN(self):
            return self.getToken(VisualFoxpro9Parser.COLUMN, 0)

        def DROP(self):
            return self.getToken(VisualFoxpro9Parser.DROP, 0)

        def RESOURCES(self):
            return self.getToken(VisualFoxpro9Parser.RESOURCES, 0)

        def LIST(self):
            return self.getToken(VisualFoxpro9Parser.LIST, 0)

        def HELP(self):
            return self.getToken(VisualFoxpro9Parser.HELP, 0)

        def SAY(self):
            return self.getToken(VisualFoxpro9Parser.SAY, 0)

        def COLLECTION(self):
            return self.getToken(VisualFoxpro9Parser.COLLECTION, 0)

        def SYSTEM(self):
            return self.getToken(VisualFoxpro9Parser.SYSTEM, 0)

        def TALK(self):
            return self.getToken(VisualFoxpro9Parser.TALK, 0)

        def PROGRAMCONTROL(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAMCONTROL, 0)

        def NOUPDATE(self):
            return self.getToken(VisualFoxpro9Parser.NOUPDATE, 0)

        def RELATION(self):
            return self.getToken(VisualFoxpro9Parser.RELATION, 0)

        def MODIFY(self):
            return self.getToken(VisualFoxpro9Parser.MODIFY, 0)

        def COMMAND(self):
            return self.getToken(VisualFoxpro9Parser.COMMAND, 0)

        def UNLOCK(self):
            return self.getToken(VisualFoxpro9Parser.UNLOCK, 0)

        def COMPILE(self):
            return self.getToken(VisualFoxpro9Parser.COMPILE, 0)

        def SORT(self):
            return self.getToken(VisualFoxpro9Parser.SORT, 0)

        def UPDATE(self):
            return self.getToken(VisualFoxpro9Parser.UPDATE, 0)

        def RESTORE(self):
            return self.getToken(VisualFoxpro9Parser.RESTORE, 0)

        def DOEVENTS(self):
            return self.getToken(VisualFoxpro9Parser.DOEVENTS, 0)

        def FORCE(self):
            return self.getToken(VisualFoxpro9Parser.FORCE, 0)

        def JOIN(self):
            return self.getToken(VisualFoxpro9Parser.JOIN, 0)

        def TEXT(self):
            return self.getToken(VisualFoxpro9Parser.TEXT, 0)

        def ENDTEXT(self):
            return self.getToken(VisualFoxpro9Parser.ENDTEXT, 0)

        def SHOW(self):
            return self.getToken(VisualFoxpro9Parser.SHOW, 0)

        def HIDE(self):
            return self.getToken(VisualFoxpro9Parser.HIDE, 0)

        def LINKED(self):
            return self.getToken(VisualFoxpro9Parser.LINKED, 0)

        def MENUS(self):
            return self.getToken(VisualFoxpro9Parser.MENUS, 0)

        def NOTE(self):
            return self.getToken(VisualFoxpro9Parser.NOTE, 0)

        def TEXTMERGE(self):
            return self.getToken(VisualFoxpro9Parser.TEXTMERGE, 0)

        def FLAGS(self):
            return self.getToken(VisualFoxpro9Parser.FLAGS, 0)

        def PRETEXT(self):
            return self.getToken(VisualFoxpro9Parser.PRETEXT, 0)

        def MASTER(self):
            return self.getToken(VisualFoxpro9Parser.MASTER, 0)

        def ZOOM(self):
            return self.getToken(VisualFoxpro9Parser.ZOOM, 0)

        def MIN(self):
            return self.getToken(VisualFoxpro9Parser.MIN, 0)

        def MAX(self):
            return self.getToken(VisualFoxpro9Parser.MAX, 0)

        def NORM(self):
            return self.getToken(VisualFoxpro9Parser.NORM, 0)

        def SIZE(self):
            return self.getToken(VisualFoxpro9Parser.SIZE, 0)

        def TITLE(self):
            return self.getToken(VisualFoxpro9Parser.TITLE, 0)

        def ICON(self):
            return self.getToken(VisualFoxpro9Parser.ICON, 0)

        def FILL(self):
            return self.getToken(VisualFoxpro9Parser.FILL, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_identifier

        def accept(self, visitor):
            if hasattr(visitor, "visitIdentifier"):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = VisualFoxpro9Parser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2128
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.SHOW - 129)) | (1 << (VisualFoxpro9Parser.HIDE - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.SEEK - 193)) | (1 << (VisualFoxpro9Parser.WHERE - 193)) | (1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.MEMO - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.MENUS - 262)) | (1 << (VisualFoxpro9Parser.RESOURCES - 262)) | (1 << (VisualFoxpro9Parser.LIST - 262)) | (1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.MODIFY - 262)) | (1 << (VisualFoxpro9Parser.COMMAND - 262)) | (1 << (VisualFoxpro9Parser.UNLOCK - 262)) | (1 << (VisualFoxpro9Parser.COMPILE - 262)) | (1 << (VisualFoxpro9Parser.SORT - 262)) | (1 << (VisualFoxpro9Parser.UPDATE - 262)) | (1 << (VisualFoxpro9Parser.RESTORE - 262)) | (1 << (VisualFoxpro9Parser.ZOOM - 262)) | (1 << (VisualFoxpro9Parser.MIN - 262)) | (1 << (VisualFoxpro9Parser.MAX - 262)) | (1 << (VisualFoxpro9Parser.NORM - 262)) | (1 << (VisualFoxpro9Parser.SIZE - 262)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 262)) | (1 << (VisualFoxpro9Parser.FORCE - 262)) | (1 << (VisualFoxpro9Parser.JOIN - 262)) | (1 << (VisualFoxpro9Parser.TEXT - 262)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 262)) | (1 << (VisualFoxpro9Parser.LINKED - 262)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 262)) | (1 << (VisualFoxpro9Parser.FLAGS - 262)) | (1 << (VisualFoxpro9Parser.PRETEXT - 262)) | (1 << (VisualFoxpro9Parser.MASTER - 262)) | (1 << (VisualFoxpro9Parser.TITLE - 262)) | (1 << (VisualFoxpro9Parser.ICON - 262)) | (1 << (VisualFoxpro9Parser.FILL - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx, ruleIndex, predIndex):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[45] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx, predIndex):
            if predIndex == 0:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 4)
         




