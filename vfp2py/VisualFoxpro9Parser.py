# Generated from VisualFoxpro9.g4 by ANTLR 4.7
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3")
        buf.write(u"\u0119\u06ff\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6")
        buf.write(u"\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4")
        buf.write(u"\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t")
        buf.write(u"\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27")
        buf.write(u"\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4")
        buf.write(u"\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t")
        buf.write(u"#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4")
        buf.write(u",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62")
        buf.write(u"\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4")
        buf.write(u"8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@")
        buf.write(u"\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\t")
        buf.write(u"I\4J\tJ\3\2\3\2\3\2\3\3\7\3\u0099\n\3\f\3\16\3\u009c")
        buf.write(u"\13\3\3\4\3\4\3\4\3\4\3\4\5\4\u00a3\n\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\5\4\u00ab\n\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write(u"\3\4\7\4\u00b5\n\4\f\4\16\4\u00b8\13\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\7\4\u00c9")
        buf.write(u"\n\4\f\4\16\4\u00cc\13\4\3\4\3\4\3\4\3\4\7\4\u00d2\n")
        buf.write(u"\4\f\4\16\4\u00d5\13\4\3\4\5\4\u00d8\n\4\5\4\u00da\n")
        buf.write(u"\4\3\5\3\5\3\5\7\5\u00df\n\5\f\5\16\5\u00e2\13\5\3\5")
        buf.write(u"\3\5\3\6\3\6\3\7\3\7\3\7\5\7\u00eb\n\7\3\b\3\b\3\t\7")
        buf.write(u"\t\u00f0\n\t\f\t\16\t\u00f3\13\t\3\n\3\n\3\n\3\n\3\n")
        buf.write(u"\5\n\u00fa\n\n\3\n\3\n\3\13\3\13\3\13\3\13\7\13\u0102")
        buf.write(u"\n\13\f\13\16\13\u0105\13\13\3\13\3\13\3\13\3\f\3\f\3")
        buf.write(u"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\7\f\u0118")
        buf.write(u"\n\f\f\f\16\f\u011b\13\f\5\f\u011d\n\f\3\f\3\f\3\f\3")
        buf.write(u"\f\3\f\3\f\5\f\u0125\n\f\3\r\5\r\u0128\n\r\3\r\3\r\3")
        buf.write(u"\r\3\r\5\r\u012e\n\r\3\r\5\r\u0131\n\r\3\r\3\r\5\r\u0135")
        buf.write(u"\n\r\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\20\3\20\3\20")
        buf.write(u"\5\20\u0141\n\20\3\21\3\21\3\21\5\21\u0146\n\21\3\22")
        buf.write(u"\3\22\3\22\7\22\u014b\n\22\f\22\16\22\u014e\13\22\3\23")
        buf.write(u"\3\23\3\23\5\23\u0153\n\23\3\23\3\23\3\24\3\24\3\24\3")
        buf.write(u"\24\3\24\5\24\u015c\n\24\3\24\3\24\3\24\3\25\3\25\3\25")
        buf.write(u"\3\25\3\25\3\25\3\25\3\25\5\25\u0169\n\25\3\25\3\25\3")
        buf.write(u"\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u0174\n\25\3\26")
        buf.write(u"\3\26\3\26\5\26\u0179\n\26\5\26\u017b\n\26\3\27\3\27")
        buf.write(u"\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3")
        buf.write(u"\32\3\32\3\32\3\32\3\33\3\33\5\33\u018f\n\33\3\34\3\34")
        buf.write(u"\3\34\3\34\7\34\u0195\n\34\f\34\16\34\u0198\13\34\3\34")
        buf.write(u"\5\34\u019b\n\34\3\34\7\34\u019e\n\34\f\34\16\34\u01a1")
        buf.write(u"\13\34\3\34\3\34\3\34\3\35\5\35\u01a7\n\35\3\35\3\35")
        buf.write(u"\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3")
        buf.write(u"\37\3\37\3\37\3\37\3 \3 \5 \u01bb\n \3 \3 \5 \u01bf\n")
        buf.write(u" \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\5!\u01cc\n!\3!\3!")
        buf.write(u"\5!\u01d0\n!\3!\3!\3!\5!\u01d5\n!\3!\3!\3!\3\"\3\"\3")
        buf.write(u"\"\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u01e9\n$\3")
        buf.write(u"%\3%\3%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&")
        buf.write(u"\u01fc\n&\3\'\3\'\3\'\5\'\u0201\n\'\3\'\3\'\3\'\3\'\5")
        buf.write(u"\'\u0207\n\'\5\'\u0209\n\'\3(\3(\3(\3(\3(\3(\5(\u0211")
        buf.write(u"\n(\5(\u0213\n(\3(\3(\3(\3(\5(\u0219\n(\3(\3(\3(\5(\u021e")
        buf.write(u"\n(\3(\3(\3(\5(\u0223\n(\3(\5(\u0226\n(\3(\3(\3(\3(\3")
        buf.write(u"(\3(\3(\5(\u022f\n(\3(\3(\5(\u0233\n(\3(\3(\5(\u0237")
        buf.write(u"\n(\5(\u0239\n(\3(\5(\u023c\n(\3(\3(\3(\3(\3(\3(\3(\3")
        buf.write(u"(\3(\3(\3(\5(\u0249\n(\3(\3(\3(\3(\5(\u024f\n(\3(\3(")
        buf.write(u"\3(\3(\5(\u0255\n(\5(\u0257\n(\3(\3(\3(\3(\3(\3(\3(\3")
        buf.write(u"(\5(\u0261\n(\5(\u0263\n(\5(\u0265\n(\5(\u0267\n(\3(")
        buf.write(u"\3(\5(\u026b\n(\3(\3(\5(\u026f\n(\3(\3(\3(\3(\5(\u0275")
        buf.write(u"\n(\3(\3(\5(\u0279\n(\5(\u027b\n(\3(\3(\5(\u027f\n(\3")
        buf.write(u"(\3(\3(\5(\u0284\n(\5(\u0286\n(\3(\3(\3(\5(\u028b\n(")
        buf.write(u"\3(\3(\3(\3(\5(\u0291\n(\3(\5(\u0294\n(\3(\5(\u0297\n")
        buf.write(u"(\3(\3(\3(\5(\u029c\n(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(")
        buf.write(u"\u02a7\n(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u02b1\n(\3(\3(\3")
        buf.write(u"(\3(\3(\3(\3(\3(\5(\u02bb\n(\3(\3(\3(\3(\3(\3(\3(\3(")
        buf.write(u"\3(\3(\3(\3(\5(\u02c9\n(\3(\3(\5(\u02cd\n(\3(\3(\5(\u02d1")
        buf.write(u"\n(\5(\u02d3\n(\3(\5(\u02d6\n(\3(\5(\u02d9\n(\3(\3(\3")
        buf.write(u"(\3(\5(\u02df\n(\3(\3(\5(\u02e3\n(\3(\3(\3(\3(\5(\u02e9")
        buf.write(u"\n(\3(\3(\5(\u02ed\n(\3(\3(\5(\u02f1\n(\3(\3(\3(\3(\5")
        buf.write(u"(\u02f7\n(\3(\3(\3(\3(\3(\3(\3(\3(\3(\7(\u0302\n(\f(")
        buf.write(u"\16(\u0305\13(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3")
        buf.write(u"(\3(\5(\u0315\n(\3(\3(\3(\5(\u031a\n(\3(\3(\5(\u031e")
        buf.write(u"\n(\3(\3(\5(\u0322\n(\3(\3(\5(\u0326\n(\3(\3(\3(\5(\u032b")
        buf.write(u"\n(\3(\3(\3(\5(\u0330\n(\5(\u0332\n(\3(\3(\5(\u0336\n")
        buf.write(u"(\3(\3(\3(\3(\3(\3(\3(\5(\u033f\n(\3(\5(\u0342\n(\3(")
        buf.write(u"\3(\5(\u0346\n(\3(\3(\3(\5(\u034b\n(\3(\3(\5(\u034f\n")
        buf.write(u"(\3(\5(\u0352\n(\3(\3(\3(\5(\u0357\n(\3(\3(\3(\3(\3(")
        buf.write(u"\5(\u035e\n(\3(\3(\3(\3(\3(\3(\5(\u0366\n(\3(\5(\u0369")
        buf.write(u"\n(\3(\5(\u036c\n(\3(\5(\u036f\n(\3(\3(\5(\u0373\n(\3")
        buf.write(u"(\3(\3(\3(\3(\3(\7(\u037b\n(\f(\16(\u037e\13(\3(\5(\u0381")
        buf.write(u"\n(\3(\3(\5(\u0385\n(\3(\3(\3(\3(\3(\3(\3(\3(\6(\u038f")
        buf.write(u"\n(\r(\16(\u0390\3(\3(\5(\u0395\n(\3(\3(\5(\u0399\n(")
        buf.write(u"\3(\3(\5(\u039d\n(\3(\3(\3(\3(\3(\3(\5(\u03a5\n(\3(\3")
        buf.write(u"(\3(\3(\3(\3(\3(\3(\3(\5(\u03b0\n(\3(\3(\5(\u03b4\n(")
        buf.write(u"\3(\3(\5(\u03b8\n(\3(\3(\3(\3(\3(\3(\5(\u03c0\n(\3(\3")
        buf.write(u"(\3(\3(\3(\3(\3(\3(\3(\5(\u03cb\n(\3(\3(\3(\3(\5(\u03d1")
        buf.write(u"\n(\3(\3(\3(\3(\3(\5(\u03d8\n(\3(\3(\3(\3(\5(\u03de\n")
        buf.write(u"(\3(\3(\3(\5(\u03e3\n(\3(\3(\3(\3(\3(\3(\3(\5(\u03ec")
        buf.write(u"\n(\5(\u03ee\n(\3(\3(\5(\u03f2\n(\3(\3(\3(\3(\3(\3(\3")
        buf.write(u"(\3(\5(\u03fc\n(\3(\5(\u03ff\n(\3(\5(\u0402\n(\5(\u0404")
        buf.write(u"\n(\3(\3(\5(\u0408\n(\3(\3(\3(\3(\5(\u040e\n(\3(\5(\u0411")
        buf.write(u"\n(\3(\3(\5(\u0415\n(\3(\3(\5(\u0419\n(\3(\3(\3(\3(\3")
        buf.write(u"(\5(\u0420\n(\3(\3(\7(\u0424\n(\f(\16(\u0427\13(\3(\3")
        buf.write(u"(\3(\5(\u042c\n(\3(\5(\u042f\n(\3(\5(\u0432\n(\3(\5(")
        buf.write(u"\u0435\n(\3(\3(\3(\3(\5(\u043b\n(\3(\3(\5(\u043f\n(\3")
        buf.write(u"(\3(\3(\5(\u0444\n(\3(\5(\u0447\n(\3(\5(\u044a\n(\3(")
        buf.write(u"\3(\3(\3(\3(\5(\u0451\n(\3(\3(\3(\5(\u0456\n(\3(\5(\u0459")
        buf.write(u"\n(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3")
        buf.write(u"(\3(\3(\3(\3(\3(\3(\5(\u0472\n(\3(\3(\3(\3(\5(\u0478")
        buf.write(u"\n(\3(\3(\3(\3(\5(\u047e\n(\3(\3(\3(\3(\5(\u0484\n(\3")
        buf.write(u"(\7(\u0487\n(\f(\16(\u048a\13(\3(\3(\5(\u048e\n(\3(\3")
        buf.write(u"(\3(\3(\3(\5(\u0495\n(\3(\5(\u0498\n(\3(\3(\3(\3(\5(")
        buf.write(u"\u049e\n(\3(\7(\u04a1\n(\f(\16(\u04a4\13(\3(\3(\3(\3")
        buf.write(u"(\5(\u04aa\n(\5(\u04ac\n(\3)\3)\3)\7)\u04b1\n)\f)\16")
        buf.write(u")\u04b4\13)\3*\3*\5*\u04b8\n*\3*\5*\u04bb\n*\3+\3+\5")
        buf.write(u"+\u04bf\n+\3+\5+\u04c2\n+\3+\5+\u04c5\n+\3,\3,\3,\3,")
        buf.write(u"\3,\3,\3,\3,\3,\5,\u04d0\n,\3,\3,\3,\3,\3,\3,\7,\u04d8")
        buf.write(u"\n,\f,\16,\u04db\13,\3-\3-\3-\5-\u04e0\n-\3-\3-\5-\u04e4")
        buf.write(u"\n-\3-\5-\u04e7\n-\3-\3-\3-\5-\u04ec\n-\3-\3-\3-\3-\3")
        buf.write(u"-\3-\5-\u04f4\n-\3.\3.\3/\3/\5/\u04fa\n/\3\60\3\60\3")
        buf.write(u"\60\5\60\u04ff\n\60\3\61\3\61\3\61\5\61\u0504\n\61\3")
        buf.write(u"\62\3\62\3\62\5\62\u0509\n\62\3\63\3\63\3\63\3\64\3\64")
        buf.write(u"\3\64\3\64\3\64\3\64\5\64\u0514\n\64\5\64\u0516\n\64")
        buf.write(u"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u051f\n\64\3")
        buf.write(u"\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0528\n\64\5\64")
        buf.write(u"\u052a\n\64\5\64\u052c\n\64\3\64\3\64\3\64\3\64\3\64")
        buf.write(u"\5\64\u0533\n\64\3\64\3\64\5\64\u0537\n\64\3\64\5\64")
        buf.write(u"\u053a\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3")
        buf.write(u"\64\5\64\u0545\n\64\5\64\u0547\n\64\3\64\3\64\3\64\5")
        buf.write(u"\64\u054c\n\64\3\64\3\64\3\64\3\64\5\64\u0552\n\64\3")
        buf.write(u"\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64")
        buf.write(u"\u055e\n\64\5\64\u0560\n\64\3\64\3\64\3\64\5\64\u0565")
        buf.write(u"\n\64\3\64\3\64\3\64\3\64\5\64\u056b\n\64\3\64\3\64\3")
        buf.write(u"\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0576\n\64\3\64")
        buf.write(u"\3\64\3\64\3\64\3\64\5\64\u057d\n\64\3\64\3\64\3\64\5")
        buf.write(u"\64\u0582\n\64\3\64\3\64\5\64\u0586\n\64\3\64\5\64\u0589")
        buf.write(u"\n\64\5\64\u058b\n\64\3\64\3\64\3\64\5\64\u0590\n\64")
        buf.write(u"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0599\n\64\5")
        buf.write(u"\64\u059b\n\64\5\64\u059d\n\64\3\64\3\64\3\64\3\64\3")
        buf.write(u"\64\7\64\u05a4\n\64\f\64\16\64\u05a7\13\64\3\64\5\64")
        buf.write(u"\u05aa\n\64\3\64\3\64\3\64\3\64\3\64\5\64\u05b1\n\64")
        buf.write(u"\3\64\3\64\3\64\3\64\5\64\u05b7\n\64\3\64\3\64\3\64\3")
        buf.write(u"\64\3\64\3\64\3\64\5\64\u05c0\n\64\3\64\3\64\5\64\u05c4")
        buf.write(u"\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u05cd\n")
        buf.write(u"\64\3\65\3\65\3\65\5\65\u05d2\n\65\3\65\3\65\3\65\5\65")
        buf.write(u"\u05d7\n\65\3\65\3\65\3\65\3\65\5\65\u05dd\n\65\3\66")
        buf.write(u"\3\66\3\66\7\66\u05e2\n\66\f\66\16\66\u05e5\13\66\3\66")
        buf.write(u"\5\66\u05e8\n\66\3\67\3\67\3\67\7\67\u05ed\n\67\f\67")
        buf.write(u"\16\67\u05f0\13\67\38\38\38\38\38\38\38\58\u05f9\n8\3")
        buf.write(u"8\38\58\u05fd\n8\58\u05ff\n8\39\39\39\3:\3:\3:\3;\3;")
        buf.write(u"\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\5;\u0619")
        buf.write(u"\n;\3;\3;\5;\u061d\n;\5;\u061f\n;\3;\3;\3;\3;\5;\u0625")
        buf.write(u"\n;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\7")
        buf.write(u";\u0637\n;\f;\16;\u063a\13;\3<\5<\u063d\n<\3<\3<\3<\3")
        buf.write(u"<\3<\3<\5<\u0645\n<\5<\u0647\n<\3=\3=\3=\5=\u064c\n=")
        buf.write(u"\3>\3>\5>\u0650\n>\3>\3>\3>\5>\u0655\n>\3>\5>\u0658\n")
        buf.write(u">\3>\5>\u065b\n>\3>\3>\3>\5>\u0660\n>\5>\u0662\n>\3?")
        buf.write(u"\3?\3?\5?\u0667\n?\3?\6?\u066a\n?\r?\16?\u066b\3@\3@")
        buf.write(u"\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3")
        buf.write(u"@\3@\3@\3@\3@\3@\5@\u0687\n@\3A\3A\3A\3A\3A\3A\3A\5A")
        buf.write(u"\u0690\nA\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\5B\u069c\nB\3")
        buf.write(u"B\3B\3B\3B\3B\3B\3B\3B\3B\3B\5B\u06a8\nB\3B\3B\3B\3B")
        buf.write(u"\3B\5B\u06af\nB\5B\u06b1\nB\3B\5B\u06b4\nB\5B\u06b6\n")
        buf.write(u"B\3B\3B\5B\u06ba\nB\3C\3C\3C\3C\3C\3C\7C\u06c2\nC\fC")
        buf.write(u"\16C\u06c5\13C\3C\3C\3C\3C\5C\u06cb\nC\3D\5D\u06ce\n")
        buf.write(u"D\3D\3D\3D\7D\u06d3\nD\fD\16D\u06d6\13D\3E\5E\u06d9\n")
        buf.write(u"E\3E\3E\5E\u06dd\nE\3F\3F\3F\3F\3G\3G\3G\5G\u06e6\nG")
        buf.write(u"\3G\3G\3G\3G\3G\5G\u06ed\nG\3G\3G\5G\u06f1\nG\3H\3H\3")
        buf.write(u"I\3I\3I\3I\3I\3I\5I\u06fb\nI\3J\3J\3J\4\u00f1\u066b\3")
        buf.write(u"tK\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60")
        buf.write(u"\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080")
        buf.write(u"\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092")
        buf.write(u"\2%\3\2\u0117\u0117\7\2//\61\62TT\u00cf\u00cf\u0117\u0117")
        buf.write(u"\4\3\27\27\u0117\u0117\3\3\u0117\u0117\3\2PQ\3\2RS\3")
        buf.write(u"\2wy\4\2PP\u00d0\u00d0\4\2\u00a5\u00a5\u00b6\u00b6\4")
        buf.write(u"\2\u0080\u0081\u00be\u00be\5\2EEGGaa\4\2EEaa\4\2kk\u009d")
        buf.write(u"\u009d\4\2++\u00d4\u00d4\3\2\u00d6\u00d7\4\2\u00d2\u00d2")
        buf.write(u"\u00d8\u00d8\3\2>?\4\2GG\u00f5\u00f5\3\2~\177\3\2\u0109")
        buf.write(u"\u010a\3\2\u00ef\u00f1\4\2\26\26\u00fb\u00fb\4\2\u009f")
        buf.write(u"\u00a0\u0106\u0106\3\2\63\64\4\2\63\64\u0091\u0092\3")
        buf.write(u"\2\u008f\u0090\3\2:<\4\2TT\u00da\u00da\3\2\t\n\4\2\26")
        buf.write(u"\26\u00db\u00db\4\2\b\b\13\13\6\2\24\25\27\33\35\35 ")
        buf.write(u" \3\2\u00dc\u00dd\3\2\u00e1\u00e4\13\2))+EG\\^\u00f1")
        buf.write(u"\u00f3\u00f4\u00f6\u00fb\u00fd\u0105\u0107\u010e\u0116")
        buf.write(u"\u0116\2\u0887\2\u0094\3\2\2\2\4\u009a\3\2\2\2\6\u00d9")
        buf.write(u"\3\2\2\2\b\u00e0\3\2\2\2\n\u00e5\3\2\2\2\f\u00ea\3\2")
        buf.write(u"\2\2\16\u00ec\3\2\2\2\20\u00f1\3\2\2\2\22\u00f4\3\2\2")
        buf.write(u"\2\24\u00fd\3\2\2\2\26\u0124\3\2\2\2\30\u0127\3\2\2\2")
        buf.write(u"\32\u0136\3\2\2\2\34\u0139\3\2\2\2\36\u013d\3\2\2\2 ")
        buf.write(u"\u0142\3\2\2\2\"\u0147\3\2\2\2$\u014f\3\2\2\2&\u0156")
        buf.write(u"\3\2\2\2(\u0173\3\2\2\2*\u017a\3\2\2\2,\u017c\3\2\2\2")
        buf.write(u".\u0181\3\2\2\2\60\u0185\3\2\2\2\62\u0188\3\2\2\2\64")
        buf.write(u"\u018e\3\2\2\2\66\u0190\3\2\2\28\u01a6\3\2\2\2:\u01ac")
        buf.write(u"\3\2\2\2<\u01b1\3\2\2\2>\u01b8\3\2\2\2@\u01c5\3\2\2\2")
        buf.write(u"B\u01d9\3\2\2\2D\u01dc\3\2\2\2F\u01e8\3\2\2\2H\u01ea")
        buf.write(u"\3\2\2\2J\u01fb\3\2\2\2L\u01fd\3\2\2\2N\u04ab\3\2\2\2")
        buf.write(u"P\u04ad\3\2\2\2R\u04b5\3\2\2\2T\u04c1\3\2\2\2V\u04c6")
        buf.write(u"\3\2\2\2X\u04f3\3\2\2\2Z\u04f5\3\2\2\2\\\u04f7\3\2\2")
        buf.write(u"\2^\u04fe\3\2\2\2`\u0500\3\2\2\2b\u0505\3\2\2\2d\u050a")
        buf.write(u"\3\2\2\2f\u05cc\3\2\2\2h\u05dc\3\2\2\2j\u05de\3\2\2\2")
        buf.write(u"l\u05e9\3\2\2\2n\u05fe\3\2\2\2p\u0600\3\2\2\2r\u0603")
        buf.write(u"\3\2\2\2t\u061e\3\2\2\2v\u0646\3\2\2\2x\u064b\3\2\2\2")
        buf.write(u"z\u0661\3\2\2\2|\u0666\3\2\2\2~\u0686\3\2\2\2\u0080\u068f")
        buf.write(u"\3\2\2\2\u0082\u06b9\3\2\2\2\u0084\u06ca\3\2\2\2\u0086")
        buf.write(u"\u06cd\3\2\2\2\u0088\u06d8\3\2\2\2\u008a\u06de\3\2\2")
        buf.write(u"\2\u008c\u06f0\3\2\2\2\u008e\u06f2\3\2\2\2\u0090\u06fa")
        buf.write(u"\3\2\2\2\u0092\u06fc\3\2\2\2\u0094\u0095\5\4\3\2\u0095")
        buf.write(u"\u0096\7\2\2\3\u0096\3\3\2\2\2\u0097\u0099\5\6\4\2\u0098")
        buf.write(u"\u0097\3\2\2\2\u0099\u009c\3\2\2\2\u009a\u0098\3\2\2")
        buf.write(u"\2\u009a\u009b\3\2\2\2\u009b\5\3\2\2\2\u009c\u009a\3")
        buf.write(u"\2\2\2\u009d\u00a2\7\27\2\2\u009e\u009f\7/\2\2\u009f")
        buf.write(u"\u00a3\5t;\2\u00a0\u00a1\7\u00c3\2\2\u00a1\u00a3\5\u0092")
        buf.write(u"J\2\u00a2\u009e\3\2\2\2\u00a2\u00a0\3\2\2\2\u00a3\u00a4")
        buf.write(u"\3\2\2\2\u00a4\u00a5\7\u0117\2\2\u00a5\u00aa\5\4\3\2")
        buf.write(u"\u00a6\u00a7\7\27\2\2\u00a7\u00a8\7\61\2\2\u00a8\u00a9")
        buf.write(u"\7\u0117\2\2\u00a9\u00ab\5\4\3\2\u00aa\u00a6\3\2\2\2")
        buf.write(u"\u00aa\u00ab\3\2\2\2\u00ab\u00ac\3\2\2\2\u00ac\u00ad")
        buf.write(u"\7\27\2\2\u00ad\u00ae\7\62\2\2\u00ae\u00af\5\16\b\2\u00af")
        buf.write(u"\u00da\3\2\2\2\u00b0\u00b1\7\27\2\2\u00b1\u00b2\7T\2")
        buf.write(u"\2\u00b2\u00b6\5\u0092J\2\u00b3\u00b5\n\2\2\2\u00b4\u00b3")
        buf.write(u"\3\2\2\2\u00b5\u00b8\3\2\2\2\u00b6\u00b4\3\2\2\2\u00b6")
        buf.write(u"\u00b7\3\2\2\2\u00b7\u00b9\3\2\2\2\u00b8\u00b6\3\2\2")
        buf.write(u"\2\u00b9\u00ba\5\16\b\2\u00ba\u00da\3\2\2\2\u00bb\u00bc")
        buf.write(u"\7\27\2\2\u00bc\u00bd\7\u00c2\2\2\u00bd\u00be\5\u0092")
        buf.write(u"J\2\u00be\u00bf\5\16\b\2\u00bf\u00da\3\2\2\2\u00c0\u00c1")
        buf.write(u"\7\27\2\2\u00c1\u00c2\7\u00cf\2\2\u00c2\u00c3\5\u0080")
        buf.write(u"A\2\u00c3\u00c4\5\16\b\2\u00c4\u00da\3\2\2\2\u00c5\u00c6")
        buf.write(u"\7\27\2\2\u00c6\u00ca\n\3\2\2\u00c7\u00c9\n\2\2\2\u00c8")
        buf.write(u"\u00c7\3\2\2\2\u00c9\u00cc\3\2\2\2\u00ca\u00c8\3\2\2")
        buf.write(u"\2\u00ca\u00cb\3\2\2\2\u00cb\u00cd\3\2\2\2\u00cc\u00ca")
        buf.write(u"\3\2\2\2\u00cd\u00da\5\16\b\2\u00ce\u00d8\7&\2\2\u00cf")
        buf.write(u"\u00d3\n\4\2\2\u00d0\u00d2\n\2\2\2\u00d1\u00d0\3\2\2")
        buf.write(u"\2\u00d2\u00d5\3\2\2\2\u00d3\u00d1\3\2\2\2\u00d3\u00d4")
        buf.write(u"\3\2\2\2\u00d4\u00d6\3\2\2\2\u00d5\u00d3\3\2\2\2\u00d6")
        buf.write(u"\u00d8\5\16\b\2\u00d7\u00ce\3\2\2\2\u00d7\u00cf\3\2\2")
        buf.write(u"\2\u00d8\u00da\3\2\2\2\u00d9\u009d\3\2\2\2\u00d9\u00b0")
        buf.write(u"\3\2\2\2\u00d9\u00bb\3\2\2\2\u00d9\u00c0\3\2\2\2\u00d9")
        buf.write(u"\u00c5\3\2\2\2\u00d9\u00d7\3\2\2\2\u00da\7\3\2\2\2\u00db")
        buf.write(u"\u00df\5\24\13\2\u00dc\u00df\5\36\20\2\u00dd\u00df\5")
        buf.write(u"\n\6\2\u00de\u00db\3\2\2\2\u00de\u00dc\3\2\2\2\u00de")
        buf.write(u"\u00dd\3\2\2\2\u00df\u00e2\3\2\2\2\u00e0\u00de\3\2\2")
        buf.write(u"\2\u00e0\u00e1\3\2\2\2\u00e1\u00e3\3\2\2\2\u00e2\u00e0")
        buf.write(u"\3\2\2\2\u00e3\u00e4\7\2\2\3\u00e4\t\3\2\2\2\u00e5\u00e6")
        buf.write(u"\7&\2\2\u00e6\13\3\2\2\2\u00e7\u00eb\5F$\2\u00e8\u00eb")
        buf.write(u"\5H%\2\u00e9\u00eb\5\n\6\2\u00ea\u00e7\3\2\2\2\u00ea")
        buf.write(u"\u00e8\3\2\2\2\u00ea\u00e9\3\2\2\2\u00eb\r\3\2\2\2\u00ec")
        buf.write(u"\u00ed\t\5\2\2\u00ed\17\3\2\2\2\u00ee\u00f0\5\f\7\2\u00ef")
        buf.write(u"\u00ee\3\2\2\2\u00f0\u00f3\3\2\2\2\u00f1\u00f2\3\2\2")
        buf.write(u"\2\u00f1\u00ef\3\2\2\2\u00f2\21\3\2\2\2\u00f3\u00f1\3")
        buf.write(u"\2\2\2\u00f4\u00f5\7T\2\2\u00f5\u00f6\7U\2\2\u00f6\u00f9")
        buf.write(u"\5\u0092J\2\u00f7\u00f8\7.\2\2\u00f8\u00fa\5\u0092J\2")
        buf.write(u"\u00f9\u00f7\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa\u00fb")
        buf.write(u"\3\2\2\2\u00fb\u00fc\7\u0117\2\2\u00fc\23\3\2\2\2\u00fd")
        buf.write(u"\u0103\5\22\n\2\u00fe\u0102\5\26\f\2\u00ff\u0102\5\36")
        buf.write(u"\20\2\u0100\u0102\5\n\6\2\u0101\u00fe\3\2\2\2\u0101\u00ff")
        buf.write(u"\3\2\2\2\u0101\u0100\3\2\2\2\u0102\u0105\3\2\2\2\u0103")
        buf.write(u"\u0101\3\2\2\2\u0103\u0104\3\2\2\2\u0104\u0106\3\2\2")
        buf.write(u"\2\u0105\u0103\3\2\2\2\u0106\u0107\7V\2\2\u0107\u0108")
        buf.write(u"\5\16\b\2\u0108\25\3\2\2\2\u0109\u010a\7g\2\2\u010a\u010b")
        buf.write(u"\7h\2\2\u010b\u010c\5\u0092J\2\u010c\u010d\7.\2\2\u010d")
        buf.write(u"\u011c\5\u0088E\2\u010e\u010f\78\2\2\u010f\u0110\5\u0088")
        buf.write(u"E\2\u0110\u0111\7\35\2\2\u0111\u0119\5t;\2\u0112\u0113")
        buf.write(u"\7\37\2\2\u0113\u0114\5\u0088E\2\u0114\u0115\7\35\2\2")
        buf.write(u"\u0115\u0116\5t;\2\u0116\u0118\3\2\2\2\u0117\u0112\3")
        buf.write(u"\2\2\2\u0118\u011b\3\2\2\2\u0119\u0117\3\2\2\2\u0119")
        buf.write(u"\u011a\3\2\2\2\u011a\u011d\3\2\2\2\u011b\u0119\3\2\2")
        buf.write(u"\2\u011c\u010e\3\2\2\2\u011c\u011d\3\2\2\2\u011d\u011e")
        buf.write(u"\3\2\2\2\u011e\u011f\7\u0117\2\2\u011f\u0125\3\2\2\2")
        buf.write(u"\u0120\u0121\5\u0084C\2\u0121\u0122\7\u0117\2\2\u0122")
        buf.write(u"\u0125\3\2\2\2\u0123\u0125\5\n\6\2\u0124\u0109\3\2\2")
        buf.write(u"\2\u0124\u0120\3\2\2\2\u0124\u0123\3\2\2\2\u0125\27\3")
        buf.write(u"\2\2\2\u0126\u0128\7\u00f7\2\2\u0127\u0126\3\2\2\2\u0127")
        buf.write(u"\u0128\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u012a\t\6\2")
        buf.write(u"\2\u012a\u0130\5\u0086D\2\u012b\u012d\7\21\2\2\u012c")
        buf.write(u"\u012e\5\"\22\2\u012d\u012c\3\2\2\2\u012d\u012e\3\2\2")
        buf.write(u"\2\u012e\u012f\3\2\2\2\u012f\u0131\7\22\2\2\u0130\u012b")
        buf.write(u"\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0132\3\2\2\2\u0132")
        buf.write(u"\u0134\7\u0117\2\2\u0133\u0135\5\34\17\2\u0134\u0133")
        buf.write(u"\3\2\2\2\u0134\u0135\3\2\2\2\u0135\31\3\2\2\2\u0136\u0137")
        buf.write(u"\t\7\2\2\u0137\u0138\5\16\b\2\u0138\33\3\2\2\2\u0139")
        buf.write(u"\u013a\t\b\2\2\u013a\u013b\5\"\22\2\u013b\u013c\7\u0117")
        buf.write(u"\2\2\u013c\35\3\2\2\2\u013d\u013e\5\30\r\2\u013e\u0140")
        buf.write(u"\5\20\t\2\u013f\u0141\5\32\16\2\u0140\u013f\3\2\2\2\u0140")
        buf.write(u"\u0141\3\2\2\2\u0141\37\3\2\2\2\u0142\u0145\5\u0088E")
        buf.write(u"\2\u0143\u0144\7.\2\2\u0144\u0146\5\u0088E\2\u0145\u0143")
        buf.write(u"\3\2\2\2\u0145\u0146\3\2\2\2\u0146!\3\2\2\2\u0147\u014c")
        buf.write(u"\5 \21\2\u0148\u0149\7\37\2\2\u0149\u014b\5 \21\2\u014a")
        buf.write(u"\u0148\3\2\2\2\u014b\u014e\3\2\2\2\u014c\u014a\3\2\2")
        buf.write(u"\2\u014c\u014d\3\2\2\2\u014d#\3\2\2\2\u014e\u014c\3\2")
        buf.write(u"\2\2\u014f\u0150\7/\2\2\u0150\u0152\5t;\2\u0151\u0153")
        buf.write(u"\7\u00c1\2\2\u0152\u0151\3\2\2\2\u0152\u0153\3\2\2\2")
        buf.write(u"\u0153\u0154\3\2\2\2\u0154\u0155\7\u0117\2\2\u0155%\3")
        buf.write(u"\2\2\2\u0156\u0157\5$\23\2\u0157\u015b\5\20\t\2\u0158")
        buf.write(u"\u0159\7\61\2\2\u0159\u015a\7\u0117\2\2\u015a\u015c\5")
        buf.write(u"\20\t\2\u015b\u0158\3\2\2\2\u015b\u015c\3\2\2\2\u015c")
        buf.write(u"\u015d\3\2\2\2\u015d\u015e\7\62\2\2\u015e\u015f\5\16")
        buf.write(u"\b\2\u015f\'\3\2\2\2\u0160\u0161\7Y\2\2\u0161\u0162\5")
        buf.write(u"\u0088E\2\u0162\u0163\7\35\2\2\u0163\u0164\5t;\2\u0164")
        buf.write(u"\u0165\7+\2\2\u0165\u0168\5t;\2\u0166\u0167\7\u00c0\2")
        buf.write(u"\2\u0167\u0169\5t;\2\u0168\u0166\3\2\2\2\u0168\u0169")
        buf.write(u"\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u016b\7\u0117\2\2")
        buf.write(u"\u016b\u0174\3\2\2\2\u016c\u016d\7Y\2\2\u016d\u016e\7")
        buf.write(u"\u00f9\2\2\u016e\u016f\5\u0088E\2\u016f\u0170\7-\2\2")
        buf.write(u"\u0170\u0171\5t;\2\u0171\u0172\7\u0117\2\2\u0172\u0174")
        buf.write(u"\3\2\2\2\u0173\u0160\3\2\2\2\u0173\u016c\3\2\2\2\u0174")
        buf.write(u")\3\2\2\2\u0175\u017b\7Z\2\2\u0176\u0178\7\u009a\2\2")
        buf.write(u"\u0177\u0179\5\u0088E\2\u0178\u0177\3\2\2\2\u0178\u0179")
        buf.write(u"\3\2\2\2\u0179\u017b\3\2\2\2\u017a\u0175\3\2\2\2\u017a")
        buf.write(u"\u0176\3\2\2\2\u017b+\3\2\2\2\u017c\u017d\5(\25\2\u017d")
        buf.write(u"\u017e\5\20\t\2\u017e\u017f\5*\26\2\u017f\u0180\5\16")
        buf.write(u"\b\2\u0180-\3\2\2\2\u0181\u0182\7\u0087\2\2\u0182\u0183")
        buf.write(u"\5t;\2\u0183\u0184\7\u0117\2\2\u0184/\3\2\2\2\u0185\u0186")
        buf.write(u"\5.\30\2\u0186\u0187\5\20\t\2\u0187\61\3\2\2\2\u0188")
        buf.write(u"\u0189\7\u0089\2\2\u0189\u018a\7\u0117\2\2\u018a\u018b")
        buf.write(u"\5\20\t\2\u018b\63\3\2\2\2\u018c\u018f\5\n\6\2\u018d")
        buf.write(u"\u018f\5\60\31\2\u018e\u018c\3\2\2\2\u018e\u018d\3\2")
        buf.write(u"\2\2\u018f\65\3\2\2\2\u0190\u0191\7,\2\2\u0191\u0192")
        buf.write(u"\7\u0087\2\2\u0192\u0196\7\u0117\2\2\u0193\u0195\5\64")
        buf.write(u"\33\2\u0194\u0193\3\2\2\2\u0195\u0198\3\2\2\2\u0196\u0194")
        buf.write(u"\3\2\2\2\u0196\u0197\3\2\2\2\u0197\u019a\3\2\2\2\u0198")
        buf.write(u"\u0196\3\2\2\2\u0199\u019b\5\62\32\2\u019a\u0199\3\2")
        buf.write(u"\2\2\u019a\u019b\3\2\2\2\u019b\u019f\3\2\2\2\u019c\u019e")
        buf.write(u"\5\n\6\2\u019d\u019c\3\2\2\2\u019e\u01a1\3\2\2\2\u019f")
        buf.write(u"\u019d\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u01a2\3\2\2")
        buf.write(u"\2\u01a1\u019f\3\2\2\2\u01a2\u01a3\7\u0088\2\2\u01a3")
        buf.write(u"\u01a4\5\16\b\2\u01a4\67\3\2\2\2\u01a5\u01a7\7,\2\2\u01a6")
        buf.write(u"\u01a5\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01a8\3\2\2")
        buf.write(u"\2\u01a8\u01a9\7[\2\2\u01a9\u01aa\5t;\2\u01aa\u01ab\7")
        buf.write(u"\u0117\2\2\u01ab9\3\2\2\2\u01ac\u01ad\58\35\2\u01ad\u01ae")
        buf.write(u"\5\20\t\2\u01ae\u01af\7q\2\2\u01af\u01b0\5\16\b\2\u01b0")
        buf.write(u";\3\2\2\2\u01b1\u01b2\78\2\2\u01b2\u01b3\5\u0088E\2\u01b3")
        buf.write(u"\u01b4\7\u0117\2\2\u01b4\u01b5\5\20\t\2\u01b5\u01b6\7")
        buf.write(u"\u00c7\2\2\u01b6\u01b7\5\16\b\2\u01b7=\3\2\2\2\u01b8")
        buf.write(u"\u01ba\7\u00de\2\2\u01b9\u01bb\5\u0090I\2\u01ba\u01b9")
        buf.write(u"\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\u01be\3\2\2\2\u01bc")
        buf.write(u"\u01bd\7Y\2\2\u01bd\u01bf\5t;\2\u01be\u01bc\3\2\2\2\u01be")
        buf.write(u"\u01bf\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0\u01c1\7\u0117")
        buf.write(u"\2\2\u01c1\u01c2\5\20\t\2\u01c2\u01c3\7\u00df\2\2\u01c3")
        buf.write(u"\u01c4\5\16\b\2\u01c4?\3\2\2\2\u01c5\u01c6\7\u00fd\2")
        buf.write(u"\2\u01c6\u01c7\7\u0117\2\2\u01c7\u01cf\5\20\t\2\u01c8")
        buf.write(u"\u01cb\7\u00fe\2\2\u01c9\u01ca\7+\2\2\u01ca\u01cc\5\u0092")
        buf.write(u"J\2\u01cb\u01c9\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\u01cd")
        buf.write(u"\3\2\2\2\u01cd\u01ce\7\u0117\2\2\u01ce\u01d0\5\20\t\2")
        buf.write(u"\u01cf\u01c8\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0\u01d4")
        buf.write(u"\3\2\2\2\u01d1\u01d2\7\u00ff\2\2\u01d2\u01d3\7\u0117")
        buf.write(u"\2\2\u01d3\u01d5\5\20\t\2\u01d4\u01d1\3\2\2\2\u01d4\u01d5")
        buf.write(u"\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01d7\7\u0100\2\2")
        buf.write(u"\u01d7\u01d8\5\16\b\2\u01d8A\3\2\2\2\u01d9\u01da\7\67")
        buf.write(u"\2\2\u01da\u01db\7\u0117\2\2\u01dbC\3\2\2\2\u01dc\u01dd")
        buf.write(u"\7\u00f2\2\2\u01dd\u01de\7\u0117\2\2\u01deE\3\2\2\2\u01df")
        buf.write(u"\u01e9\5:\36\2\u01e0\u01e9\5&\24\2\u01e1\u01e9\5\66\34")
        buf.write(u"\2\u01e2\u01e9\5,\27\2\u01e3\u01e9\5<\37\2\u01e4\u01e9")
        buf.write(u"\5> \2\u01e5\u01e9\5@!\2\u01e6\u01e9\5B\"\2\u01e7\u01e9")
        buf.write(u"\5D#\2\u01e8\u01df\3\2\2\2\u01e8\u01e0\3\2\2\2\u01e8")
        buf.write(u"\u01e1\3\2\2\2\u01e8\u01e2\3\2\2\2\u01e8\u01e3\3\2\2")
        buf.write(u"\2\u01e8\u01e4\3\2\2\2\u01e8\u01e5\3\2\2\2\u01e8\u01e6")
        buf.write(u"\3\2\2\2\u01e8\u01e7\3\2\2\2\u01e9G\3\2\2\2\u01ea\u01eb")
        buf.write(u"\5J&\2\u01eb\u01ec\5\16\b\2\u01ecI\3\2\2\2\u01ed\u01fc")
        buf.write(u"\5n8\2\u01ee\u01fc\5\u0084C\2\u01ef\u01fc\5h\65\2\u01f0")
        buf.write(u"\u01fc\5T+\2\u01f1\u01fc\5V,\2\u01f2\u01fc\5X-\2\u01f3")
        buf.write(u"\u01fc\5\\/\2\u01f4\u01fc\5Z.\2\u01f5\u01fc\5L\'\2\u01f6")
        buf.write(u"\u01fc\5^\60\2\u01f7\u01fc\5N(\2\u01f8\u01f9\7\35\2\2")
        buf.write(u"\u01f9\u01fc\5t;\2\u01fa\u01fc\5v<\2\u01fb\u01ed\3\2")
        buf.write(u"\2\2\u01fb\u01ee\3\2\2\2\u01fb\u01ef\3\2\2\2\u01fb\u01f0")
        buf.write(u"\3\2\2\2\u01fb\u01f1\3\2\2\2\u01fb\u01f2\3\2\2\2\u01fb")
        buf.write(u"\u01f3\3\2\2\2\u01fb\u01f4\3\2\2\2\u01fb\u01f5\3\2\2")
        buf.write(u"\2\u01fb\u01f6\3\2\2\2\u01fb\u01f7\3\2\2\2\u01fb\u01f8")
        buf.write(u"\3\2\2\2\u01fb\u01fa\3\2\2\2\u01fcK\3\2\2\2\u01fd\u0208")
        buf.write(u"\7B\2\2\u01fe\u0209\7|\2\2\u01ff\u0201\t\t\2\2\u0200")
        buf.write(u"\u01ff\3\2\2\2\u0200\u0201\3\2\2\2\u0201\u0202\3\2\2")
        buf.write(u"\2\u0202\u0209\5j\66\2\u0203\u0204\7\u00b7\2\2\u0204")
        buf.write(u"\u0206\5j\66\2\u0205\u0207\7\u00b8\2\2\u0206\u0205\3")
        buf.write(u"\2\2\2\u0206\u0207\3\2\2\2\u0207\u0209\3\2\2\2\u0208")
        buf.write(u"\u01fe\3\2\2\2\u0208\u0200\3\2\2\2\u0208\u0203\3\2\2")
        buf.write(u"\2\u0209M\3\2\2\2\u020a\u020b\7\63\2\2\u020b\u0212\7")
        buf.write(u"\u00a1\2\2\u020c\u020d\7\u00a3\2\2\u020d\u0210\5\u0092")
        buf.write(u"J\2\u020e\u020f\7\t\2\2\u020f\u0211\5\u0092J\2\u0210")
        buf.write(u"\u020e\3\2\2\2\u0210\u0211\3\2\2\2\u0211\u0213\3\2\2")
        buf.write(u"\2\u0212\u020c\3\2\2\2\u0212\u0213\3\2\2\2\u0213\u0214")
        buf.write(u"\3\2\2\2\u0214\u04ac\5J&\2\u0215\u0216\7\u00c4\2\2\u0216")
        buf.write(u"\u0218\7\u00a1\2\2\u0217\u0219\7O\2\2\u0218\u0217\3\2")
        buf.write(u"\2\2\u0218\u0219\3\2\2\2\u0219\u04ac\3\2\2\2\u021a\u021b")
        buf.write(u"\7\u00c5\2\2\u021b\u021d\7\u00a1\2\2\u021c\u021e\7|\2")
        buf.write(u"\2\u021d\u021c\3\2\2\2\u021d\u021e\3\2\2\2\u021e\u04ac")
        buf.write(u"\3\2\2\2\u021f\u0220\7\u00a2\2\2\u0220\u0222\5t;\2\u0221")
        buf.write(u"\u0223\7\u00a4\2\2\u0222\u0221\3\2\2\2\u0222\u0223\3")
        buf.write(u"\2\2\2\u0223\u0225\3\2\2\2\u0224\u0226\7O\2\2\u0225\u0224")
        buf.write(u"\3\2\2\2\u0225\u0226\3\2\2\2\u0226\u04ac\3\2\2\2\u0227")
        buf.write(u"\u0228\7T\2\2\u0228\u0229\7\u00a5\2\2\u0229\u022a\5\u0092")
        buf.write(u"J\2\u022a\u022e\7_\2\2\u022b\u022c\7\u00a6\2\2\u022c")
        buf.write(u"\u022d\7\u00a7\2\2\u022d\u022f\7\4\2\2\u022e\u022b\3")
        buf.write(u"\2\2\2\u022e\u022f\3\2\2\2\u022f\u0238\3\2\2\2\u0230")
        buf.write(u"\u0236\7-\2\2\u0231\u0233\7m\2\2\u0232\u0231\3\2\2\2")
        buf.write(u"\u0232\u0233\3\2\2\2\u0233\u0234\3\2\2\2\u0234\u0237")
        buf.write(u"\5\u0092J\2\u0235\u0237\7\u00a8\2\2\u0236\u0232\3\2\2")
        buf.write(u"\2\u0236\u0235\3\2\2\2\u0237\u0239\3\2\2\2\u0238\u0230")
        buf.write(u"\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u023b\3\2\2\2\u023a")
        buf.write(u"\u023c\7\u00a9\2\2\u023b\u023a\3\2\2\2\u023b\u023c\3")
        buf.write(u"\2\2\2\u023c\u04ac\3\2\2\2\u023d\u023e\7T\2\2\u023e\u023f")
        buf.write(u"\7\u00aa\2\2\u023f\u0240\5\u0092J\2\u0240\u0241\7\u00ab")
        buf.write(u"\2\2\u0241\u0242\5t;\2\u0242\u0243\7\u008f\2\2\u0243")
        buf.write(u"\u0248\5t;\2\u0244\u0245\7\u00a6\2\2\u0245\u0246\7\4")
        buf.write(u"\2\2\u0246\u0247\7\37\2\2\u0247\u0249\7\4\2\2\u0248\u0244")
        buf.write(u"\3\2\2\2\u0248\u0249\3\2\2\2\u0249\u024e\3\2\2\2\u024a")
        buf.write(u"\u024b\7\u00ae\2\2\u024b\u024f\5\u0092J\2\u024c\u024d")
        buf.write(u"\7\u00af\2\2\u024d\u024f\5\u0092J\2\u024e\u024a\3\2\2")
        buf.write(u"\2\u024e\u024c\3\2\2\2\u024e\u024f\3\2\2\2\u024f\u0256")
        buf.write(u"\3\2\2\2\u0250\u0251\7\u00b0\2\2\u0251\u0254\5\u0092")
        buf.write(u"J\2\u0252\u0253\7\37\2\2\u0253\u0255\5\u0092J\2\u0254")
        buf.write(u"\u0252\3\2\2\2\u0254\u0255\3\2\2\2\u0255\u0257\3\2\2")
        buf.write(u"\2\u0256\u0250\3\2\2\2\u0256\u0257\3\2\2\2\u0257\u0266")
        buf.write(u"\3\2\2\2\u0258\u0259\7\u00b1\2\2\u0259\u0264\5\u0092")
        buf.write(u"J\2\u025a\u025b\7\37\2\2\u025b\u0262\7\4\2\2\u025c\u025d")
        buf.write(u"\7\37\2\2\u025d\u0260\7%\2\2\u025e\u025f\7\37\2\2\u025f")
        buf.write(u"\u0261\5\u0092J\2\u0260\u025e\3\2\2\2\u0260\u0261\3\2")
        buf.write(u"\2\2\u0261\u0263\3\2\2\2\u0262\u025c\3\2\2\2\u0262\u0263")
        buf.write(u"\3\2\2\2\u0263\u0265\3\2\2\2\u0264\u025a\3\2\2\2\u0264")
        buf.write(u"\u0265\3\2\2\2\u0265\u0267\3\2\2\2\u0266\u0258\3\2\2")
        buf.write(u"\2\u0266\u0267\3\2\2\2\u0267\u026a\3\2\2\2\u0268\u0269")
        buf.write(u"\7\u00b2\2\2\u0269\u026b\5\u0092J\2\u026a\u0268\3\2\2")
        buf.write(u"\2\u026a\u026b\3\2\2\2\u026b\u026e\3\2\2\2\u026c\u026d")
        buf.write(u"\7\u00b4\2\2\u026d\u026f\5t;\2\u026e\u026c\3\2\2\2\u026e")
        buf.write(u"\u026f\3\2\2\2\u026f\u027a\3\2\2\2\u0270\u0271\7\u00a1")
        buf.write(u"\2\2\u0271\u0274\5\u0092J\2\u0272\u0273\7\t\2\2\u0273")
        buf.write(u"\u0275\5\u0092J\2\u0274\u0272\3\2\2\2\u0274\u0275\3\2")
        buf.write(u"\2\2\u0275\u0278\3\2\2\2\u0276\u0277\7\37\2\2\u0277\u0279")
        buf.write(u"\7%\2\2\u0278\u0276\3\2\2\2\u0278\u0279\3\2\2\2\u0279")
        buf.write(u"\u027b\3\2\2\2\u027a\u0270\3\2\2\2\u027a\u027b\3\2\2")
        buf.write(u"\2\u027b\u027e\3\2\2\2\u027c\u027d\7\u00b3\2\2\u027d")
        buf.write(u"\u027f\5\u0092J\2\u027e\u027c\3\2\2\2\u027e\u027f\3\2")
        buf.write(u"\2\2\u027f\u0285\3\2\2\2\u0280\u0283\7\u009c\2\2\u0281")
        buf.write(u"\u0282\7Y\2\2\u0282\u0284\5t;\2\u0283\u0281\3\2\2\2\u0283")
        buf.write(u"\u0284\3\2\2\2\u0284\u0286\3\2\2\2\u0285\u0280\3\2\2")
        buf.write(u"\2\u0285\u0286\3\2\2\2\u0286\u028a\3\2\2\2\u0287\u0288")
        buf.write(u"\7\u00ac\2\2\u0288\u0289\7\u00ad\2\2\u0289\u028b\7\4")
        buf.write(u"\2\2\u028a\u0287\3\2\2\2\u028a\u028b\3\2\2\2\u028b\u04ac")
        buf.write(u"\3\2\2\2\u028c\u028d\7T\2\2\u028d\u028e\7\u00b6\2\2\u028e")
        buf.write(u"\u0290\5\u0092J\2\u028f\u0291\7\u00b9\2\2\u0290\u028f")
        buf.write(u"\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u0293\3\2\2\2\u0292")
        buf.write(u"\u0294\7\u00ba\2\2\u0293\u0292\3\2\2\2\u0293\u0294\3")
        buf.write(u"\2\2\2\u0294\u0296\3\2\2\2\u0295\u0297\7\u00bb\2\2\u0296")
        buf.write(u"\u0295\3\2\2\2\u0296\u0297\3\2\2\2\u0297\u029b\3\2\2")
        buf.write(u"\2\u0298\u0299\7\u00ac\2\2\u0299\u029a\7\u00ad\2\2\u029a")
        buf.write(u"\u029c\7\4\2\2\u029b\u0298\3\2\2\2\u029b\u029c\3\2\2")
        buf.write(u"\2\u029c\u04ac\3\2\2\2\u029d\u029e\7T\2\2\u029e\u029f")
        buf.write(u"\7_\2\2\u029f\u02a0\7\4\2\2\u02a0\u02a1\7\u00ab\2\2\u02a1")
        buf.write(u"\u02a2\5\u0092J\2\u02a2\u02a3\7\u008f\2\2\u02a3\u02a6")
        buf.write(u"\5t;\2\u02a4\u02a5\7\u00b4\2\2\u02a5\u02a7\5t;\2\u02a6")
        buf.write(u"\u02a4\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u04ac\3\2\2")
        buf.write(u"\2\u02a8\u02a9\7\63\2\2\u02a9\u02aa\7\u00aa\2\2\u02aa")
        buf.write(u"\u02ab\5\u0092J\2\u02ab\u02ac\7\u00ab\2\2\u02ac\u02b0")
        buf.write(u"\5\u0092J\2\u02ad\u02ae\7\u00b5\2\2\u02ae\u02af\t\n\2")
        buf.write(u"\2\u02af\u02b1\5\u0092J\2\u02b0\u02ad\3\2\2\2\u02b0\u02b1")
        buf.write(u"\3\2\2\2\u02b1\u04ac\3\2\2\2\u02b2\u02b3\7\63\2\2\u02b3")
        buf.write(u"\u02b4\7_\2\2\u02b4\u02b5\7\4\2\2\u02b5\u02b6\7\u00ab")
        buf.write(u"\2\2\u02b6\u02ba\5\u0092J\2\u02b7\u02b8\7\u00b5\2\2\u02b8")
        buf.write(u"\u02b9\t\n\2\2\u02b9\u02bb\5\u0092J\2\u02ba\u02b7\3\2")
        buf.write(u"\2\2\u02ba\u02bb\3\2\2\2\u02bb\u04ac\3\2\2\2\u02bc\u02bd")
        buf.write(u"\7\63\2\2\u02bd\u02be\7\u00bc\2\2\u02be\u02bf\7_\2\2")
        buf.write(u"\u02bf\u02c0\7\4\2\2\u02c0\u02c1\7\u00ab\2\2\u02c1\u02c2")
        buf.write(u"\5\u0092J\2\u02c2\u02c3\5J&\2\u02c3\u04ac\3\2\2\2\u02c4")
        buf.write(u"\u02c5\7\u00b5\2\2\u02c5\u02c8\7m\2\2\u02c6\u02c9\5\"")
        buf.write(u"\22\2\u02c7\u02c9\7|\2\2\u02c8\u02c6\3\2\2\2\u02c8\u02c7")
        buf.write(u"\3\2\2\2\u02c9\u02d2\3\2\2\2\u02ca\u02d0\7-\2\2\u02cb")
        buf.write(u"\u02cd\7m\2\2\u02cc\u02cb\3\2\2\2\u02cc\u02cd\3\2\2\2")
        buf.write(u"\u02cd\u02ce\3\2\2\2\u02ce\u02d1\5\u0092J\2\u02cf\u02d1")
        buf.write(u"\7\u00a8\2\2\u02d0\u02cc\3\2\2\2\u02d0\u02cf\3\2\2\2")
        buf.write(u"\u02d1\u02d3\3\2\2\2\u02d2\u02ca\3\2\2\2\u02d2\u02d3")
        buf.write(u"\3\2\2\2\u02d3\u02d5\3\2\2\2\u02d4\u02d6\t\13\2\2\u02d5")
        buf.write(u"\u02d4\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6\u02d8\3\2\2")
        buf.write(u"\2\u02d7\u02d9\7\u00bf\2\2\u02d8\u02d7\3\2\2\2\u02d8")
        buf.write(u"\u02d9\3\2\2\2\u02d9\u04ac\3\2\2\2\u02da\u02db\7\u00b5")
        buf.write(u"\2\2\u02db\u02dc\7\u00a5\2\2\u02dc\u02de\5\u0092J\2\u02dd")
        buf.write(u"\u02df\7n\2\2\u02de\u02dd\3\2\2\2\u02de\u02df\3\2\2\2")
        buf.write(u"\u02df\u02e2\3\2\2\2\u02e0\u02e1\7\u00aa\2\2\u02e1\u02e3")
        buf.write(u"\5\u0092J\2\u02e2\u02e0\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3")
        buf.write(u"\u04ac\3\2\2\2\u02e4\u02e5\7\u00bd\2\2\u02e5\u02e8\t")
        buf.write(u"\n\2\2\u02e6\u02e9\7|\2\2\u02e7\u02e9\5\"\22\2\u02e8")
        buf.write(u"\u02e6\3\2\2\2\u02e8\u02e7\3\2\2\2\u02e9\u04ac\3\2\2")
        buf.write(u"\2\u02ea\u02ec\7\65\2\2\u02eb\u02ed\5t;\2\u02ec\u02eb")
        buf.write(u"\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed\u04ac\3\2\2\2\u02ee")
        buf.write(u"\u02f0\7\u00f8\2\2\u02ef\u02f1\5t;\2\u02f0\u02ef\3\2")
        buf.write(u"\2\2\u02f0\u02f1\3\2\2\2\u02f1\u04ac\3\2\2\2\u02f2\u02f3")
        buf.write(u"\7D\2\2\u02f3\u02f4\t\f\2\2\u02f4\u02f6\5\u0080A\2\u02f5")
        buf.write(u"\u02f7\7I\2\2\u02f6\u02f5\3\2\2\2\u02f6\u02f7\3\2\2\2")
        buf.write(u"\u02f7\u02f8\3\2\2\2\u02f8\u02f9\7\21\2\2\u02f9\u02fa")
        buf.write(u"\5\u0092J\2\u02fa\u02fb\5\u0092J\2\u02fb\u0303\5\u008c")
        buf.write(u"G\2\u02fc\u02fd\7\37\2\2\u02fd\u02fe\5\u0092J\2\u02fe")
        buf.write(u"\u02ff\5\u0092J\2\u02ff\u0300\5\u008cG\2\u0300\u0302")
        buf.write(u"\3\2\2\2\u0301\u02fc\3\2\2\2\u0302\u0305\3\2\2\2\u0303")
        buf.write(u"\u0301\3\2\2\2\u0303\u0304\3\2\2\2\u0304\u0306\3\2\2")
        buf.write(u"\2\u0305\u0303\3\2\2\2\u0306\u0307\7\22\2\2\u0307\u04ac")
        buf.write(u"\3\2\2\2\u0308\u0309\7\u010c\2\2\u0309\u030a\7E\2\2\u030a")
        buf.write(u"\u0314\5\u0080A\2\u030b\u030c\7g\2\2\u030c\u030d\7\u010d")
        buf.write(u"\2\2\u030d\u030e\5\u0092J\2\u030e\u030f\5\u0092J\2\u030f")
        buf.write(u"\u0310\5\u008cG\2\u0310\u0315\3\2\2\2\u0311\u0312\7\u010e")
        buf.write(u"\2\2\u0312\u0313\7\u010d\2\2\u0313\u0315\5\u0092J\2\u0314")
        buf.write(u"\u030b\3\2\2\2\u0314\u0311\3\2\2\2\u0315\u04ac\3\2\2")
        buf.write(u"\2\u0316\u0331\7J\2\2\u0317\u0332\5\u0080A\2\u0318\u031a")
        buf.write(u"\7\u0098\2\2\u0319\u0318\3\2\2\2\u0319\u031a\3\2\2\2")
        buf.write(u"\u031a\u031d\3\2\2\2\u031b\u031e\5l\67\2\u031c\u031e")
        buf.write(u"\7\b\2\2\u031d\u031b\3\2\2\2\u031d\u031c\3\2\2\2\u031e")
        buf.write(u"\u0321\3\2\2\2\u031f\u0320\7\u008a\2\2\u0320\u0322\5")
        buf.write(u"\u0080A\2\u0321\u031f\3\2\2\2\u0321\u0322\3\2\2\2\u0322")
        buf.write(u"\u0325\3\2\2\2\u0323\u0324\7\u00cc\2\2\u0324\u0326\5")
        buf.write(u"t;\2\u0325\u0323\3\2\2\2\u0325\u0326\3\2\2\2\u0326\u032a")
        buf.write(u"\3\2\2\2\u0327\u0328\7\u0099\2\2\u0328\u0329\t\r\2\2")
        buf.write(u"\u0329\u032b\5\u0080A\2\u032a\u0327\3\2\2\2\u032a\u032b")
        buf.write(u"\3\2\2\2\u032b\u032f\3\2\2\2\u032c\u032d\7\u00ca\2\2")
        buf.write(u"\u032d\u032e\7\u00d1\2\2\u032e\u0330\5\u0092J\2\u032f")
        buf.write(u"\u032c\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u0332\3\2\2")
        buf.write(u"\2\u0331\u0317\3\2\2\2\u0331\u0319\3\2\2\2\u0332\u04ac")
        buf.write(u"\3\2\2\2\u0333\u0335\7K\2\2\u0334\u0336\t\16\2\2\u0335")
        buf.write(u"\u0334\3\2\2\2\u0335\u0336\3\2\2\2\u0336\u033e\3\2\2")
        buf.write(u"\2\u0337\u0338\7-\2\2\u0338\u033f\5\u0080A\2\u0339\u033a")
        buf.write(u"\5\u0080A\2\u033a\u033b\7-\2\2\u033b\u033c\5\u0080A\2")
        buf.write(u"\u033c\u033f\3\2\2\2\u033d\u033f\5\u0080A\2\u033e\u0337")
        buf.write(u"\3\2\2\2\u033e\u0339\3\2\2\2\u033e\u033d\3\2\2\2\u033e")
        buf.write(u"\u033f\3\2\2\2\u033f\u0341\3\2\2\2\u0340\u0342\t\16\2")
        buf.write(u"\2\u0341\u0340\3\2\2\2\u0341\u0342\3\2\2\2\u0342\u0345")
        buf.write(u"\3\2\2\2\u0343\u0344\7\u00c9\2\2\u0344\u0346\5\u0092")
        buf.write(u"J\2\u0345\u0343\3\2\2\2\u0345\u0346\3\2\2\2\u0346\u04ac")
        buf.write(u"\3\2\2\2\u0347\u034a\7W\2\2\u0348\u0349\7Y\2\2\u0349")
        buf.write(u"\u034b\5t;\2\u034a\u0348\3\2\2\2\u034a\u034b\3\2\2\2")
        buf.write(u"\u034b\u034e\3\2\2\2\u034c\u034d\7[\2\2\u034d\u034f\5")
        buf.write(u"t;\2\u034e\u034c\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0351")
        buf.write(u"\3\2\2\2\u0350\u0352\7\\\2\2\u0351\u0350\3\2\2\2\u0351")
        buf.write(u"\u0352\3\2\2\2\u0352\u04ac\3\2\2\2\u0353\u04ac\7X\2\2")
        buf.write(u"\u0354\u0356\7i\2\2\u0355\u0357\5\u0090I\2\u0356\u0355")
        buf.write(u"\3\2\2\2\u0356\u0357\3\2\2\2\u0357\u0358\3\2\2\2\u0358")
        buf.write(u"\u0359\5\u0080A\2\u0359\u035a\78\2\2\u035a\u035d\5t;")
        buf.write(u"\2\u035b\u035c\7Y\2\2\u035c\u035e\5t;\2\u035d\u035b\3")
        buf.write(u"\2\2\2\u035d\u035e\3\2\2\2\u035e\u04ac\3\2\2\2\u035f")
        buf.write(u"\u0360\7\u00d3\2\2\u0360\u0361\7\63\2\2\u0361\u0362\5")
        buf.write(u"\u0080A\2\u0362\u0363\t\17\2\2\u0363\u0365\5\u0080A\2")
        buf.write(u"\u0364\u0366\7\u00d5\2\2\u0365\u0364\3\2\2\2\u0365\u0366")
        buf.write(u"\3\2\2\2\u0366\u0368\3\2\2\2\u0367\u0369\t\20\2\2\u0368")
        buf.write(u"\u0367\3\2\2\2\u0368\u0369\3\2\2\2\u0369\u036b\3\2\2")
        buf.write(u"\2\u036a\u036c\t\21\2\2\u036b\u036a\3\2\2\2\u036b\u036c")
        buf.write(u"\3\2\2\2\u036c\u036e\3\2\2\2\u036d\u036f\7\u00d9\2\2")
        buf.write(u"\u036e\u036d\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u04ac")
        buf.write(u"\3\2\2\2\u0370\u0372\7}\2\2\u0371\u0373\5\u0090I\2\u0372")
        buf.write(u"\u0371\3\2\2\2\u0372\u0373\3\2\2\2\u0373\u037c\3\2\2")
        buf.write(u"\2\u0374\u0375\7Y\2\2\u0375\u037b\5t;\2\u0376\u0377\7")
        buf.write(u"[\2\2\u0377\u037b\5t;\2\u0378\u0379\7+\2\2\u0379\u037b")
        buf.write(u"\5t;\2\u037a\u0374\3\2\2\2\u037a\u0376\3\2\2\2\u037a")
        buf.write(u"\u0378\3\2\2\2\u037b\u037e\3\2\2\2\u037c\u037a\3\2\2")
        buf.write(u"\2\u037c\u037d\3\2\2\2\u037d\u0380\3\2\2\2\u037e\u037c")
        buf.write(u"\3\2\2\2\u037f\u0381\7\\\2\2\u0380\u037f\3\2\2\2\u0380")
        buf.write(u"\u0381\3\2\2\2\u0381\u04ac\3\2\2\2\u0382\u0384\7\u0097")
        buf.write(u"\2\2\u0383\u0385\5\u0090I\2\u0384\u0383\3\2\2\2\u0384")
        buf.write(u"\u0385\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u038e\5t;\2")
        buf.write(u"\u0387\u0388\7Y\2\2\u0388\u038f\5t;\2\u0389\u038a\7[")
        buf.write(u"\2\2\u038a\u038f\5t;\2\u038b\u038c\7+\2\2\u038c\u038f")
        buf.write(u"\5t;\2\u038d\u038f\7\\\2\2\u038e\u0387\3\2\2\2\u038e")
        buf.write(u"\u0389\3\2\2\2\u038e\u038b\3\2\2\2\u038e\u038d\3\2\2")
        buf.write(u"\2\u038f\u0390\3\2\2\2\u0390\u038e\3\2\2\2\u0390\u0391")
        buf.write(u"\3\2\2\2\u0391\u04ac\3\2\2\2\u0392\u0394\t\22\2\2\u0393")
        buf.write(u"\u0395\5\u0090I\2\u0394\u0393\3\2\2\2\u0394\u0395\3\2")
        buf.write(u"\2\2\u0395\u0398\3\2\2\2\u0396\u0397\7Y\2\2\u0397\u0399")
        buf.write(u"\5t;\2\u0398\u0396\3\2\2\2\u0398\u0399\3\2\2\2\u0399")
        buf.write(u"\u039c\3\2\2\2\u039a\u039b\7[\2\2\u039b\u039d\5t;\2\u039c")
        buf.write(u"\u039a\3\2\2\2\u039c\u039d\3\2\2\2\u039d\u03a4\3\2\2")
        buf.write(u"\2\u039e\u039f\7-\2\2\u039f\u03a0\5\u0080A\2\u03a0\u03a1")
        buf.write(u"\7\\\2\2\u03a1\u03a5\3\2\2\2\u03a2\u03a3\7-\2\2\u03a3")
        buf.write(u"\u03a5\5\u0080A\2\u03a4\u039e\3\2\2\2\u03a4\u03a2\3\2")
        buf.write(u"\2\2\u03a4\u03a5\3\2\2\2\u03a5\u04ac\3\2\2\2\u03a6\u03a7")
        buf.write(u"\7\u0084\2\2\u03a7\u03af\7\u008a\2\2\u03a8\u03a9\7=\2")
        buf.write(u"\2\u03a9\u03b0\5t;\2\u03aa\u03ab\5\u0080A\2\u03ab\u03ac")
        buf.write(u"\7Y\2\2\u03ac\u03ad\5t;\2\u03ad\u03b0\3\2\2\2\u03ae\u03b0")
        buf.write(u"\5\u0080A\2\u03af\u03a8\3\2\2\2\u03af\u03aa\3\2\2\2\u03af")
        buf.write(u"\u03ae\3\2\2\2\u03b0\u03b3\3\2\2\2\u03b1\u03b2\7\u0105")
        buf.write(u"\2\2\u03b2\u03b4\5\u0080A\2\u03b3\u03b1\3\2\2\2\u03b3")
        buf.write(u"\u03b4\3\2\2\2\u03b4\u04ac\3\2\2\2\u03b5\u03b7\7\u0084")
        buf.write(u"\2\2\u03b6\u03b8\7\u0085\2\2\u03b7\u03b6\3\2\2\2\u03b7")
        buf.write(u"\u03b8\3\2\2\2\u03b8\u03bf\3\2\2\2\u03b9\u03ba\7-\2\2")
        buf.write(u"\u03ba\u03bb\5\u0080A\2\u03bb\u03bc\7\u0086\2\2\u03bc")
        buf.write(u"\u03c0\3\2\2\2\u03bd\u03be\7-\2\2\u03be\u03c0\5\u0080")
        buf.write(u"A\2\u03bf\u03b9\3\2\2\2\u03bf\u03bd\3\2\2\2\u03bf\u03c0")
        buf.write(u"\3\2\2\2\u03c0\u04ac\3\2\2\2\u03c1\u03c2\7\u0102\2\2")
        buf.write(u"\u03c2\u03c3\7\u0099\2\2\u03c3\u03d7\5\u0080A\2\u03c4")
        buf.write(u"\u03ca\7\u008a\2\2\u03c5\u03c6\7=\2\2\u03c6\u03cb\5t")
        buf.write(u";\2\u03c7\u03cb\7\u0104\2\2\u03c8\u03c9\7H\2\2\u03c9")
        buf.write(u"\u03cb\5t;\2\u03ca\u03c5\3\2\2\2\u03ca\u03c7\3\2\2\2")
        buf.write(u"\u03ca\u03c8\3\2\2\2\u03cb\u03d8\3\2\2\2\u03cc\u03cd")
        buf.write(u"\7\21\2\2\u03cd\u03ce\5l\67\2\u03ce\u03cf\7\22\2\2\u03cf")
        buf.write(u"\u03d1\3\2\2\2\u03d0\u03cc\3\2\2\2\u03d0\u03d1\3\2\2")
        buf.write(u"\2\u03d1\u03d2\3\2\2\2\u03d2\u03d3\7\u0103\2\2\u03d3")
        buf.write(u"\u03d4\7\21\2\2\u03d4\u03d5\5j\66\2\u03d5\u03d6\7\22")
        buf.write(u"\2\2\u03d6\u03d8\3\2\2\2\u03d7\u03c4\3\2\2\2\u03d7\u03d0")
        buf.write(u"\3\2\2\2\u03d8\u04ac\3\2\2\2\u03d9\u03da\7\u009c\2\2")
        buf.write(u"\u03da\u03dd\5t;\2\u03db\u03dc\7-\2\2\u03dc\u03de\5\u0080")
        buf.write(u"A\2\u03dd\u03db\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u04ac")
        buf.write(u"\3\2\2\2\u03df\u03ed\7\u00f3\2\2\u03e0\u03ee\7\u00ee")
        buf.write(u"\2\2\u03e1\u03e3\t\23\2\2\u03e2\u03e1\3\2\2\2\u03e2\u03e3")
        buf.write(u"\3\2\2\2\u03e3\u03eb\3\2\2\2\u03e4\u03e5\7-\2\2\u03e5")
        buf.write(u"\u03ec\5\u0080A\2\u03e6\u03e7\5\u0080A\2\u03e7\u03e8")
        buf.write(u"\7-\2\2\u03e8\u03e9\5\u0080A\2\u03e9\u03ec\3\2\2\2\u03ea")
        buf.write(u"\u03ec\5\u0080A\2\u03eb\u03e4\3\2\2\2\u03eb\u03e6\3\2")
        buf.write(u"\2\2\u03eb\u03ea\3\2\2\2\u03eb\u03ec\3\2\2\2\u03ec\u03ee")
        buf.write(u"\3\2\2\2\u03ed\u03e0\3\2\2\2\u03ed\u03e2\3\2\2\2\u03ee")
        buf.write(u"\u04ac\3\2\2\2\u03ef\u03f1\7\u00f4\2\2\u03f0\u03f2\7")
        buf.write(u"\u00d5\2\2\u03f1\u03f0\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2")
        buf.write(u"\u04ac\3\2\2\2\u03f3\u03f4\7\u00cb\2\2\u03f4\u0403\5")
        buf.write(u"t;\2\u03f5\u03f6\7\u00ca\2\2\u03f6\u03ff\5t;\2\u03f7")
        buf.write(u"\u03f8\7\u00d4\2\2\u03f8\u03fb\5\u0080A\2\u03f9\u03fa")
        buf.write(u"\7\u00ab\2\2\u03fa\u03fc\5\u0080A\2\u03fb\u03f9\3\2\2")
        buf.write(u"\2\u03fb\u03fc\3\2\2\2\u03fc\u03ff\3\2\2\2\u03fd\u03ff")
        buf.write(u"\5\u0080A\2\u03fe\u03f5\3\2\2\2\u03fe\u03f7\3\2\2\2\u03fe")
        buf.write(u"\u03fd\3\2\2\2\u03ff\u0401\3\2\2\2\u0400\u0402\t\20\2")
        buf.write(u"\2\u0401\u0400\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u0404")
        buf.write(u"\3\2\2\2\u0403\u03fe\3\2\2\2\u0403\u0404\3\2\2\2\u0404")
        buf.write(u"\u0407\3\2\2\2\u0405\u0406\7-\2\2\u0406\u0408\5\u0080")
        buf.write(u"A\2\u0407\u0405\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u04ac")
        buf.write(u"\3\2\2\2\u0409\u0410\t\24\2\2\u040a\u0411\7\u0080\2\2")
        buf.write(u"\u040b\u0411\7\u0081\2\2\u040c\u040e\7\u0082\2\2\u040d")
        buf.write(u"\u040c\3\2\2\2\u040d\u040e\3\2\2\2\u040e\u040f\3\2\2")
        buf.write(u"\2\u040f\u0411\5t;\2\u0410\u040a\3\2\2\2\u0410\u040b")
        buf.write(u"\3\2\2\2\u0410\u040d\3\2\2\2\u0411\u0414\3\2\2\2\u0412")
        buf.write(u"\u0413\7-\2\2\u0413\u0415\5\u0080A\2\u0414\u0412\3\2")
        buf.write(u"\2\2\u0414\u0415\3\2\2\2\u0415\u04ac\3\2\2\2\u0416\u0418")
        buf.write(u"\7\u0094\2\2\u0417\u0419\7\u0095\2\2\u0418\u0417\3\2")
        buf.write(u"\2\2\u0418\u0419\3\2\2\2\u0419\u041a\3\2\2\2\u041a\u041b")
        buf.write(u"\7+\2\2\u041b\u04ac\5\u0080A\2\u041c\u041f\7\u00e9\2")
        buf.write(u"\2\u041d\u041e\7-\2\2\u041e\u0420\5\u0080A\2\u041f\u041d")
        buf.write(u"\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u04ac\3\2\2\2\u0421")
        buf.write(u"\u0425\7\u0101\2\2\u0422\u0424\n\2\2\2\u0423\u0422\3")
        buf.write(u"\2\2\2\u0424\u0427\3\2\2\2\u0425\u0423\3\2\2\2\u0425")
        buf.write(u"\u0426\3\2\2\2\u0426\u04ac\3\2\2\2\u0427\u0425\3\2\2")
        buf.write(u"\2\u0428\u042e\7\u0107\2\2\u0429\u042b\7\u010b\2\2\u042a")
        buf.write(u"\u042c\t\25\2\2\u042b\u042a\3\2\2\2\u042b\u042c\3\2\2")
        buf.write(u"\2\u042c\u042d\3\2\2\2\u042d\u042f\5t;\2\u042e\u0429")
        buf.write(u"\3\2\2\2\u042e\u042f\3\2\2\2\u042f\u0431\3\2\2\2\u0430")
        buf.write(u"\u0432\7\u00f5\2\2\u0431\u0430\3\2\2\2\u0431\u0432\3")
        buf.write(u"\2\2\2\u0432\u0434\3\2\2\2\u0433\u0435\7\u0085\2\2\u0434")
        buf.write(u"\u0433\3\2\2\2\u0434\u0435\3\2\2\2\u0435\u043e\3\2\2")
        buf.write(u"\2\u0436\u043f\7\u0104\2\2\u0437\u0438\7H\2\2\u0438\u043a")
        buf.write(u"\5t;\2\u0439\u043b\7\u00d9\2\2\u043a\u0439\3\2\2\2\u043a")
        buf.write(u"\u043b\3\2\2\2\u043b\u043f\3\2\2\2\u043c\u043d\7+\2\2")
        buf.write(u"\u043d\u043f\5t;\2\u043e\u0436\3\2\2\2\u043e\u0437\3")
        buf.write(u"\2\2\2\u043e\u043c\3\2\2\2\u043f\u04ac\3\2\2\2\u0440")
        buf.write(u"\u0446\7\u0108\2\2\u0441\u0443\7\u010b\2\2\u0442\u0444")
        buf.write(u"\t\25\2\2\u0443\u0442\3\2\2\2\u0443\u0444\3\2\2\2\u0444")
        buf.write(u"\u0445\3\2\2\2\u0445\u0447\5t;\2\u0446\u0441\3\2\2\2")
        buf.write(u"\u0446\u0447\3\2\2\2\u0447\u0449\3\2\2\2\u0448\u044a")
        buf.write(u"\7\u00f5\2\2\u0449\u0448\3\2\2\2\u0449\u044a\3\2\2\2")
        buf.write(u"\u044a\u044b\3\2\2\2\u044b\u0450\7\u008a\2\2\u044c\u0451")
        buf.write(u"\7\u0104\2\2\u044d\u044e\7H\2\2\u044e\u0451\5t;\2\u044f")
        buf.write(u"\u0451\5t;\2\u0450\u044c\3\2\2\2\u0450\u044d\3\2\2\2")
        buf.write(u"\u0450\u044f\3\2\2\2\u0451\u04ac\3\2\2\2\u0452\u0458")
        buf.write(u"\7\u0083\2\2\u0453\u0455\t\26\2\2\u0454\u0456\7|\2\2")
        buf.write(u"\u0455\u0454\3\2\2\2\u0455\u0456\3\2\2\2\u0456\u0459")
        buf.write(u"\3\2\2\2\u0457\u0459\7|\2\2\u0458\u0453\3\2\2\2\u0458")
        buf.write(u"\u0457\3\2\2\2\u0459\u04ac\3\2\2\2\u045a\u045b\7L\2\2")
        buf.write(u"\u045b\u04ac\7M\2\2\u045c\u0477\7O\2\2\u045d\u0478\7")
        buf.write(u"|\2\2\u045e\u045f\7U\2\2\u045f\u0478\5t;\2\u0460\u0461")
        buf.write(u"\7\u00d0\2\2\u0461\u0478\5\u0080A\2\u0462\u0478\7\u010f")
        buf.write(u"\2\2\u0463\u0464\7\u00e6\2\2\u0464\u0478\5l\67\2\u0465")
        buf.write(u"\u0478\7M\2\2\u0466\u0478\7\65\2\2\u0467\u0478\7\u010b")
        buf.write(u"\2\2\u0468\u0478\7\u0110\2\2\u0469\u0478\7\u00e7\2\2")
        buf.write(u"\u046a\u0478\7\u0112\2\2\u046b\u0478\7\u0113\2\2\u046c")
        buf.write(u"\u0478\7\u00b7\2\2\u046d\u0478\7\u00f6\2\2\u046e\u0478")
        buf.write(u"\7\u008f\2\2\u046f\u0471\7L\2\2\u0470\u0472\7|\2\2\u0471")
        buf.write(u"\u0470\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0478\3\2\2")
        buf.write(u"\2\u0473\u0474\7\u0114\2\2\u0474\u0478\5t;\2\u0475\u0478")
        buf.write(u"\7\u00c8\2\2\u0476\u0478\7\u0115\2\2\u0477\u045d\3\2")
        buf.write(u"\2\2\u0477\u045e\3\2\2\2\u0477\u0460\3\2\2\2\u0477\u0462")
        buf.write(u"\3\2\2\2\u0477\u0463\3\2\2\2\u0477\u0465\3\2\2\2\u0477")
        buf.write(u"\u0466\3\2\2\2\u0477\u0467\3\2\2\2\u0477\u0468\3\2\2")
        buf.write(u"\2\u0477\u0469\3\2\2\2\u0477\u046a\3\2\2\2\u0477\u046b")
        buf.write(u"\3\2\2\2\u0477\u046c\3\2\2\2\u0477\u046d\3\2\2\2\u0477")
        buf.write(u"\u046e\3\2\2\2\u0477\u046f\3\2\2\2\u0477\u0473\3\2\2")
        buf.write(u"\2\u0477\u0475\3\2\2\2\u0477\u0476\3\2\2\2\u0477\u0478")
        buf.write(u"\3\2\2\2\u0478\u04ac\3\2\2\2\u0479\u047a\7\u008b\2\2")
        buf.write(u"\u047a\u047d\7\u008c\2\2\u047b\u047e\7\"\2\2\u047c\u047e")
        buf.write(u"\5\u0080A\2\u047d\u047b\3\2\2\2\u047d\u047c\3\2\2\2\u047e")
        buf.write(u"\u0488\3\2\2\2\u047f\u0487\7\u008d\2\2\u0480\u0481\7")
        buf.write(u"+\2\2\u0481\u0483\7\u008e\2\2\u0482\u0484\7\u008f\2\2")
        buf.write(u"\u0483\u0482\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0487")
        buf.write(u"\3\2\2\2\u0485\u0487\7\u0093\2\2\u0486\u047f\3\2\2\2")
        buf.write(u"\u0486\u0480\3\2\2\2\u0486\u0485\3\2\2\2\u0487\u048a")
        buf.write(u"\3\2\2\2\u0488\u0486\3\2\2\2\u0488\u0489\3\2\2\2\u0489")
        buf.write(u"\u04ac\3\2\2\2\u048a\u0488\3\2\2\2\u048b\u048d\7r\2\2")
        buf.write(u"\u048c\u048e\5\u008eH\2\u048d\u048c\3\2\2\2\u048d\u048e")
        buf.write(u"\3\2\2\2\u048e\u048f\3\2\2\2\u048f\u0490\5\u0092J\2\u0490")
        buf.write(u"\u0491\7-\2\2\u0491\u0494\5\u0080A\2\u0492\u0493\7.\2")
        buf.write(u"\2\u0493\u0495\5\u0092J\2\u0494\u0492\3\2\2\2\u0494\u0495")
        buf.write(u"\3\2\2\2\u0495\u0497\3\2\2\2\u0496\u0498\5P)\2\u0497")
        buf.write(u"\u0496\3\2\2\2\u0497\u0498\3\2\2\2\u0498\u04ac\3\2\2")
        buf.write(u"\2\u0499\u04ac\7\u00e5\2\2\u049a\u049d\t\27\2\2\u049b")
        buf.write(u"\u049c\7\13\2\2\u049c\u049e\5\u0092J\2\u049d\u049b\3")
        buf.write(u"\2\2\2\u049d\u049e\3\2\2\2\u049e\u04a2\3\2\2\2\u049f")
        buf.write(u"\u04a1\n\2\2\2\u04a0\u049f\3\2\2\2\u04a1\u04a4\3\2\2")
        buf.write(u"\2\u04a2\u04a0\3\2\2\2\u04a2\u04a3\3\2\2\2\u04a3\u04ac")
        buf.write(u"\3\2\2\2\u04a4\u04a2\3\2\2\2\u04a5\u04a6\7)\2\2\u04a6")
        buf.write(u"\u04a9\5t;\2\u04a7\u04a8\7\u00b4\2\2\u04a8\u04aa\5t;")
        buf.write(u"\2\u04a9\u04a7\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04ac")
        buf.write(u"\3\2\2\2\u04ab\u020a\3\2\2\2\u04ab\u0215\3\2\2\2\u04ab")
        buf.write(u"\u021a\3\2\2\2\u04ab\u021f\3\2\2\2\u04ab\u0227\3\2\2")
        buf.write(u"\2\u04ab\u023d\3\2\2\2\u04ab\u028c\3\2\2\2\u04ab\u029d")
        buf.write(u"\3\2\2\2\u04ab\u02a8\3\2\2\2\u04ab\u02b2\3\2\2\2\u04ab")
        buf.write(u"\u02bc\3\2\2\2\u04ab\u02c4\3\2\2\2\u04ab\u02da\3\2\2")
        buf.write(u"\2\u04ab\u02e4\3\2\2\2\u04ab\u02ea\3\2\2\2\u04ab\u02ee")
        buf.write(u"\3\2\2\2\u04ab\u02f2\3\2\2\2\u04ab\u0308\3\2\2\2\u04ab")
        buf.write(u"\u0316\3\2\2\2\u04ab\u0333\3\2\2\2\u04ab\u0347\3\2\2")
        buf.write(u"\2\u04ab\u0353\3\2\2\2\u04ab\u0354\3\2\2\2\u04ab\u035f")
        buf.write(u"\3\2\2\2\u04ab\u0370\3\2\2\2\u04ab\u0382\3\2\2\2\u04ab")
        buf.write(u"\u0392\3\2\2\2\u04ab\u03a6\3\2\2\2\u04ab\u03b5\3\2\2")
        buf.write(u"\2\u04ab\u03c1\3\2\2\2\u04ab\u03d9\3\2\2\2\u04ab\u03df")
        buf.write(u"\3\2\2\2\u04ab\u03ef\3\2\2\2\u04ab\u03f3\3\2\2\2\u04ab")
        buf.write(u"\u0409\3\2\2\2\u04ab\u0416\3\2\2\2\u04ab\u041c\3\2\2")
        buf.write(u"\2\u04ab\u0421\3\2\2\2\u04ab\u0428\3\2\2\2\u04ab\u0440")
        buf.write(u"\3\2\2\2\u04ab\u0452\3\2\2\2\u04ab\u045a\3\2\2\2\u04ab")
        buf.write(u"\u045c\3\2\2\2\u04ab\u0479\3\2\2\2\u04ab\u048b\3\2\2")
        buf.write(u"\2\u04ab\u0499\3\2\2\2\u04ab\u049a\3\2\2\2\u04ab\u04a5")
        buf.write(u"\3\2\2\2\u04acO\3\2\2\2\u04ad\u04b2\5R*\2\u04ae\u04af")
        buf.write(u"\7\37\2\2\u04af\u04b1\5R*\2\u04b0\u04ae\3\2\2\2\u04b1")
        buf.write(u"\u04b4\3\2\2\2\u04b2\u04b0\3\2\2\2\u04b2\u04b3\3\2\2")
        buf.write(u"\2\u04b3Q\3\2\2\2\u04b4\u04b2\3\2\2\2\u04b5\u04b7\5\u008e")
        buf.write(u"H\2\u04b6\u04b8\7\7\2\2\u04b7\u04b6\3\2\2\2\u04b7\u04b8")
        buf.write(u"\3\2\2\2\u04b8\u04ba\3\2\2\2\u04b9\u04bb\5\u0092J\2\u04ba")
        buf.write(u"\u04b9\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bbS\3\2\2\2\u04bc")
        buf.write(u"\u04be\7\"\2\2\u04bd\u04bf\7\"\2\2\u04be\u04bd\3\2\2")
        buf.write(u"\2\u04be\u04bf\3\2\2\2\u04bf\u04c2\3\2\2\2\u04c0\u04c2")
        buf.write(u"\7\u0111\2\2\u04c1\u04bc\3\2\2\2\u04c1\u04c0\3\2\2\2")
        buf.write(u"\u04c2\u04c4\3\2\2\2\u04c3\u04c5\5j\66\2\u04c4\u04c3")
        buf.write(u"\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5U\3\2\2\2\u04c6\u04d9")
        buf.write(u"\7l\2\2\u04c7\u04c8\7+\2\2\u04c8\u04d8\5t;\2\u04c9\u04cf")
        buf.write(u"\7m\2\2\u04ca\u04cb\7\u00a6\2\2\u04cb\u04cc\5t;\2\u04cc")
        buf.write(u"\u04cd\7\37\2\2\u04cd\u04ce\5t;\2\u04ce\u04d0\3\2\2\2")
        buf.write(u"\u04cf\u04ca\3\2\2\2\u04cf\u04d0\3\2\2\2\u04d0\u04d8")
        buf.write(u"\3\2\2\2\u04d1\u04d8\7n\2\2\u04d2\u04d8\7O\2\2\u04d3")
        buf.write(u"\u04d8\7o\2\2\u04d4\u04d5\7\u00c6\2\2\u04d5\u04d8\5t")
        buf.write(u";\2\u04d6\u04d8\5t;\2\u04d7\u04c7\3\2\2\2\u04d7\u04c9")
        buf.write(u"\3\2\2\2\u04d7\u04d1\3\2\2\2\u04d7\u04d2\3\2\2\2\u04d7")
        buf.write(u"\u04d3\3\2\2\2\u04d7\u04d4\3\2\2\2\u04d7\u04d6\3\2\2")
        buf.write(u"\2\u04d8\u04db\3\2\2\2\u04d9\u04d7\3\2\2\2\u04d9\u04da")
        buf.write(u"\3\2\2\2\u04daW\3\2\2\2\u04db\u04d9\3\2\2\2\u04dc\u04e0")
        buf.write(u"\7s\2\2\u04dd\u04de\7>\2\2\u04de\u04e0\7@\2\2\u04df\u04dc")
        buf.write(u"\3\2\2\2\u04df\u04dd\3\2\2\2\u04e0\u04e3\3\2\2\2\u04e1")
        buf.write(u"\u04e4\5\u0080A\2\u04e2\u04e4\7\"\2\2\u04e3\u04e1\3\2")
        buf.write(u"\2\2\u04e3\u04e2\3\2\2\2\u04e4\u04e6\3\2\2\2\u04e5\u04e7")
        buf.write(u"\7C\2\2\u04e6\u04e5\3\2\2\2\u04e6\u04e7\3\2\2\2\u04e7")
        buf.write(u"\u04f4\3\2\2\2\u04e8\u04ec\7\u00ce\2\2\u04e9\u04ea\7")
        buf.write(u"\u0094\2\2\u04ea\u04ec\7@\2\2\u04eb\u04e8\3\2\2\2\u04eb")
        buf.write(u"\u04e9\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04ee\5\u0080")
        buf.write(u"A\2\u04ee\u04ef\7+\2\2\u04ef\u04f0\5\u0080A\2\u04f0\u04f4")
        buf.write(u"\3\2\2\2\u04f1\u04f2\t\30\2\2\u04f2\u04f4\5\u0080A\2")
        buf.write(u"\u04f3\u04df\3\2\2\2\u04f3\u04eb\3\2\2\2\u04f3\u04f1")
        buf.write(u"\3\2\2\2\u04f4Y\3\2\2\2\u04f5\u04f6\7\66\2\2\u04f6[\3")
        buf.write(u"\2\2\2\u04f7\u04f9\7v\2\2\u04f8\u04fa\5t;\2\u04f9\u04f8")
        buf.write(u"\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa]\3\2\2\2\u04fb\u04ff")
        buf.write(u"\5`\61\2\u04fc\u04ff\5d\63\2\u04fd\u04ff\5b\62\2\u04fe")
        buf.write(u"\u04fb\3\2\2\2\u04fe\u04fc\3\2\2\2\u04fe\u04fd\3\2\2")
        buf.write(u"\2\u04ff_\3\2\2\2\u0500\u0501\7\63\2\2\u0501\u0503\7")
        buf.write(u"\65\2\2\u0502\u0504\5J&\2\u0503\u0502\3\2\2\2\u0503\u0504")
        buf.write(u"\3\2\2\2\u0504a\3\2\2\2\u0505\u0506\7\63\2\2\u0506\u0508")
        buf.write(u"\7N\2\2\u0507\u0509\5J&\2\u0508\u0507\3\2\2\2\u0508\u0509")
        buf.write(u"\3\2\2\2\u0509c\3\2\2\2\u050a\u050b\7A\2\2\u050b\u050c")
        buf.write(u"\5f\64\2\u050ce\3\2\2\2\u050d\u0515\7z\2\2\u050e\u0516")
        buf.write(u"\7\63\2\2\u050f\u0516\7\64\2\2\u0510\u0511\7+\2\2\u0511")
        buf.write(u"\u0513\5\u0080A\2\u0512\u0514\7\u00d9\2\2\u0513\u0512")
        buf.write(u"\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0516\3\2\2\2\u0515")
        buf.write(u"\u050e\3\2\2\2\u0515\u050f\3\2\2\2\u0515\u0510\3\2\2")
        buf.write(u"\2\u0516\u05cd\3\2\2\2\u0517\u0518\7*\2\2\u0518\u05cd")
        buf.write(u"\t\31\2\2\u0519\u051e\7c\2\2\u051a\u051f\7\63\2\2\u051b")
        buf.write(u"\u051f\7\64\2\2\u051c\u051d\7+\2\2\u051d\u051f\5\u0080")
        buf.write(u"A\2\u051e\u051a\3\2\2\2\u051e\u051b\3\2\2\2\u051e\u051c")
        buf.write(u"\3\2\2\2\u051f\u05cd\3\2\2\2\u0520\u052b\7d\2\2\u0521")
        buf.write(u"\u052c\7\63\2\2\u0522\u052c\7\64\2\2\u0523\u0529\7+\2")
        buf.write(u"\2\u0524\u0527\5t;\2\u0525\u0526\7\u00ea\2\2\u0526\u0528")
        buf.write(u"\5t;\2\u0527\u0525\3\2\2\2\u0527\u0528\3\2\2\2\u0528")
        buf.write(u"\u052a\3\2\2\2\u0529\u0524\3\2\2\2\u0529\u052a\3\2\2")
        buf.write(u"\2\u052a\u052c\3\2\2\2\u052b\u0521\3\2\2\2\u052b\u0522")
        buf.write(u"\3\2\2\2\u052b\u0523\3\2\2\2\u052c\u05cd\3\2\2\2\u052d")
        buf.write(u"\u052e\7\u00d0\2\2\u052e\u052f\7+\2\2\u052f\u0532\5\u0080")
        buf.write(u"A\2\u0530\u0531\7-\2\2\u0531\u0533\5\u0080A\2\u0532\u0530")
        buf.write(u"\3\2\2\2\u0532\u0533\3\2\2\2\u0533\u0536\3\2\2\2\u0534")
        buf.write(u"\u0535\7\u00c9\2\2\u0535\u0537\5\u0080A\2\u0536\u0534")
        buf.write(u"\3\2\2\2\u0536\u0537\3\2\2\2\u0537\u0539\3\2\2\2\u0538")
        buf.write(u"\u053a\7\u00d9\2\2\u0539\u0538\3\2\2\2\u0539\u053a\3")
        buf.write(u"\2\2\2\u053a\u05cd\3\2\2\2\u053b\u0546\7u\2\2\u053c\u0547")
        buf.write(u"\7\63\2\2\u053d\u0547\7\64\2\2\u053e\u0547\7^\2\2\u053f")
        buf.write(u"\u0544\7+\2\2\u0540\u0541\5t;\2\u0541\u0542\7\37\2\2")
        buf.write(u"\u0542\u0543\5t;\2\u0543\u0545\3\2\2\2\u0544\u0540\3")
        buf.write(u"\2\2\2\u0544\u0545\3\2\2\2\u0545\u0547\3\2\2\2\u0546")
        buf.write(u"\u053c\3\2\2\2\u0546\u053d\3\2\2\2\u0546\u053e\3\2\2")
        buf.write(u"\2\u0546\u053f\3\2\2\2\u0547\u05cd\3\2\2\2\u0548\u0549")
        buf.write(u"\7e\2\2\u0549\u054b\t\32\2\2\u054a\u054c\t\33\2\2\u054b")
        buf.write(u"\u054a\3\2\2\2\u054b\u054c\3\2\2\2\u054c\u05cd\3\2\2")
        buf.write(u"\2\u054d\u054e\7a\2\2\u054e\u05cd\t\31\2\2\u054f\u0551")
        buf.write(u"\7f\2\2\u0550\u0552\7+\2\2\u0551\u0550\3\2\2\2\u0551")
        buf.write(u"\u0552\3\2\2\2\u0552\u0553\3\2\2\2\u0553\u05cd\5\u0092")
        buf.write(u"J\2\u0554\u0555\7\u0096\2\2\u0555\u05cd\t\31\2\2\u0556")
        buf.write(u"\u0557\7{\2\2\u0557\u05cd\t\31\2\2\u0558\u0559\7\u00cd")
        buf.write(u"\2\2\u0559\u055f\7+\2\2\u055a\u055d\5\u0080A\2\u055b")
        buf.write(u"\u055c\7-\2\2\u055c\u055e\5\u0080A\2\u055d\u055b\3\2")
        buf.write(u"\2\2\u055d\u055e\3\2\2\2\u055e\u0560\3\2\2\2\u055f\u055a")
        buf.write(u"\3\2\2\2\u055f\u0560\3\2\2\2\u0560\u05cd\3\2\2\2\u0561")
        buf.write(u"\u0562\7\u00d3\2\2\u0562\u0564\7+\2\2\u0563\u0565\5\u0080")
        buf.write(u"A\2\u0564\u0563\3\2\2\2\u0564\u0565\3\2\2\2\u0565\u05cd")
        buf.write(u"\3\2\2\2\u0566\u0567\7j\2\2\u0567\u0568\7+\2\2\u0568")
        buf.write(u"\u056a\5\u0080A\2\u0569\u056b\7\u00d9\2\2\u056a\u0569")
        buf.write(u"\3\2\2\2\u056a\u056b\3\2\2\2\u056b\u05cd\3\2\2\2\u056c")
        buf.write(u"\u056d\7`\2\2\u056d\u056e\7+\2\2\u056e\u05cd\5t;\2\u056f")
        buf.write(u"\u0570\7\u00fc\2\2\u0570\u05cd\t\31\2\2\u0571\u0572\7")
        buf.write(u"\u009e\2\2\u0572\u05cd\t\31\2\2\u0573\u0575\7p\2\2\u0574")
        buf.write(u"\u0576\7a\2\2\u0575\u0574\3\2\2\2\u0575\u0576\3\2\2\2")
        buf.write(u"\u0576\u0577\3\2\2\2\u0577\u05cd\t\31\2\2\u0578\u0579")
        buf.write(u"\7\u00ca\2\2\u0579\u058a\7+\2\2\u057a\u058b\5\u0080A")
        buf.write(u"\2\u057b\u057d\7\u00d4\2\2\u057c\u057b\3\2\2\2\u057c")
        buf.write(u"\u057d\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u0581\5\u0080")
        buf.write(u"A\2\u057f\u0580\7\u00ab\2\2\u0580\u0582\5\u0080A\2\u0581")
        buf.write(u"\u057f\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0585\3\2\2")
        buf.write(u"\2\u0583\u0584\7-\2\2\u0584\u0586\5\u0080A\2\u0585\u0583")
        buf.write(u"\3\2\2\2\u0585\u0586\3\2\2\2\u0586\u0588\3\2\2\2\u0587")
        buf.write(u"\u0589\t\20\2\2\u0588\u0587\3\2\2\2\u0588\u0589\3\2\2")
        buf.write(u"\2\u0589\u058b\3\2\2\2\u058a\u057a\3\2\2\2\u058a\u057c")
        buf.write(u"\3\2\2\2\u058a\u058b\3\2\2\2\u058b\u05cd\3\2\2\2\u058c")
        buf.write(u"\u059c\7\u008e\2\2\u058d\u058f\7\63\2\2\u058e\u0590\7")
        buf.write(u"\u008f\2\2\u058f\u058e\3\2\2\2\u058f\u0590\3\2\2\2\u0590")
        buf.write(u"\u059d\3\2\2\2\u0591\u059d\7\64\2\2\u0592\u059a\7+\2")
        buf.write(u"\2\u0593\u059b\7\u00eb\2\2\u0594\u0595\7H\2\2\u0595\u059b")
        buf.write(u"\5\u0080A\2\u0596\u0598\5\u0080A\2\u0597\u0599\7\u00d9")
        buf.write(u"\2\2\u0598\u0597\3\2\2\2\u0598\u0599\3\2\2\2\u0599\u059b")
        buf.write(u"\3\2\2\2\u059a\u0593\3\2\2\2\u059a\u0594\3\2\2\2\u059a")
        buf.write(u"\u0596\3\2\2\2\u059a\u059b\3\2\2\2\u059b\u059d\3\2\2")
        buf.write(u"\2\u059c\u058d\3\2\2\2\u059c\u0591\3\2\2\2\u059c\u0592")
        buf.write(u"\3\2\2\2\u059d\u05cd\3\2\2\2\u059e\u059f\7P\2\2\u059f")
        buf.write(u"\u05a0\7+\2\2\u05a0\u05a5\5\u0080A\2\u05a1\u05a2\7\37")
        buf.write(u"\2\2\u05a2\u05a4\5\u0080A\2\u05a3\u05a1\3\2\2\2\u05a4")
        buf.write(u"\u05a7\3\2\2\2\u05a5\u05a3\3\2\2\2\u05a5\u05a6\3\2\2")
        buf.write(u"\2\u05a6\u05a9\3\2\2\2\u05a7\u05a5\3\2\2\2\u05a8\u05aa")
        buf.write(u"\7\u00d9\2\2\u05a9\u05a8\3\2\2\2\u05a9\u05aa\3\2\2\2")
        buf.write(u"\u05aa\u05cd\3\2\2\2\u05ab\u05ac\7b\2\2\u05ac\u05ad\7")
        buf.write(u"+\2\2\u05ad\u05b0\5t;\2\u05ae\u05af\7\37\2\2\u05af\u05b1")
        buf.write(u"\5t;\2\u05b0\u05ae\3\2\2\2\u05b0\u05b1\3\2\2\2\u05b1")
        buf.write(u"\u05cd\3\2\2\2\u05b2\u05b3\7]\2\2\u05b3\u05cd\t\31\2")
        buf.write(u"\2\u05b4\u05b6\7^\2\2\u05b5\u05b7\7_\2\2\u05b6\u05b5")
        buf.write(u"\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7\u05b8\3\2\2\2\u05b8")
        buf.write(u"\u05cd\t\31\2\2\u05b9\u05c3\7t\2\2\u05ba\u05c4\7\63\2")
        buf.write(u"\2\u05bb\u05c4\7\64\2\2\u05bc\u05bf\7+\2\2\u05bd\u05c0")
        buf.write(u"\7\u00eb\2\2\u05be\u05c0\5t;\2\u05bf\u05bd\3\2\2\2\u05bf")
        buf.write(u"\u05be\3\2\2\2\u05bf\u05c0\3\2\2\2\u05c0\u05c4\3\2\2")
        buf.write(u"\2\u05c1\u05c4\7\u00ec\2\2\u05c2\u05c4\7\u00ed\2\2\u05c3")
        buf.write(u"\u05ba\3\2\2\2\u05c3\u05bb\3\2\2\2\u05c3\u05bc\3\2\2")
        buf.write(u"\2\u05c3\u05c1\3\2\2\2\u05c3\u05c2\3\2\2\2\u05c4\u05cd")
        buf.write(u"\3\2\2\2\u05c5\u05c6\7F\2\2\u05c6\u05cd\t\31\2\2\u05c7")
        buf.write(u"\u05c8\7\u00c8\2\2\u05c8\u05c9\7+\2\2\u05c9\u05cd\5t")
        buf.write(u";\2\u05ca\u05cb\7\u00d2\2\2\u05cb\u05cd\t\31\2\2\u05cc")
        buf.write(u"\u050d\3\2\2\2\u05cc\u0517\3\2\2\2\u05cc\u0519\3\2\2")
        buf.write(u"\2\u05cc\u0520\3\2\2\2\u05cc\u052d\3\2\2\2\u05cc\u053b")
        buf.write(u"\3\2\2\2\u05cc\u0548\3\2\2\2\u05cc\u054d\3\2\2\2\u05cc")
        buf.write(u"\u054f\3\2\2\2\u05cc\u0554\3\2\2\2\u05cc\u0556\3\2\2")
        buf.write(u"\2\u05cc\u0558\3\2\2\2\u05cc\u0561\3\2\2\2\u05cc\u0566")
        buf.write(u"\3\2\2\2\u05cc\u056c\3\2\2\2\u05cc\u056f\3\2\2\2\u05cc")
        buf.write(u"\u0571\3\2\2\2\u05cc\u0573\3\2\2\2\u05cc\u0578\3\2\2")
        buf.write(u"\2\u05cc\u058c\3\2\2\2\u05cc\u059e\3\2\2\2\u05cc\u05ab")
        buf.write(u"\3\2\2\2\u05cc\u05b2\3\2\2\2\u05cc\u05b4\3\2\2\2\u05cc")
        buf.write(u"\u05b9\3\2\2\2\u05cc\u05c5\3\2\2\2\u05cc\u05c7\3\2\2")
        buf.write(u"\2\u05cc\u05ca\3\2\2\2\u05cdg\3\2\2\2\u05ce\u05d6\t\34")
        buf.write(u"\2\2\u05cf\u05d7\5\"\22\2\u05d0\u05d2\7=\2\2\u05d1\u05d0")
        buf.write(u"\3\2\2\2\u05d1\u05d2\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3")
        buf.write(u"\u05d4\5\u0092J\2\u05d4\u05d5\5\u008cG\2\u05d5\u05d7")
        buf.write(u"\3\2\2\2\u05d6\u05cf\3\2\2\2\u05d6\u05d1\3\2\2\2\u05d7")
        buf.write(u"\u05dd\3\2\2\2\u05d8\u05d9\t\35\2\2\u05d9\u05da\5\u0092")
        buf.write(u"J\2\u05da\u05db\5\u008cG\2\u05db\u05dd\3\2\2\2\u05dc")
        buf.write(u"\u05ce\3\2\2\2\u05dc\u05d8\3\2\2\2\u05ddi\3\2\2\2\u05de")
        buf.write(u"\u05e3\5t;\2\u05df\u05e0\7\37\2\2\u05e0\u05e2\5t;\2\u05e1")
        buf.write(u"\u05df\3\2\2\2\u05e2\u05e5\3\2\2\2\u05e3\u05e1\3\2\2")
        buf.write(u"\2\u05e3\u05e4\3\2\2\2\u05e4\u05e7\3\2\2\2\u05e5\u05e3")
        buf.write(u"\3\2\2\2\u05e6\u05e8\7\37\2\2\u05e7\u05e6\3\2\2\2\u05e7")
        buf.write(u"\u05e8\3\2\2\2\u05e8k\3\2\2\2\u05e9\u05ee\5\u0080A\2")
        buf.write(u"\u05ea\u05eb\7\37\2\2\u05eb\u05ed\5\u0080A\2\u05ec\u05ea")
        buf.write(u"\3\2\2\2\u05ed\u05f0\3\2\2\2\u05ee\u05ec\3\2\2\2\u05ee")
        buf.write(u"\u05ef\3\2\2\2\u05efm\3\2\2\2\u05f0\u05ee\3\2\2\2\u05f1")
        buf.write(u"\u05f2\7,\2\2\u05f2\u05f3\7\u008c\2\2\u05f3\u05ff\5\u0080")
        buf.write(u"A\2\u05f4\u05f5\7,\2\2\u05f5\u05f8\5\u0080A\2\u05f6\u05f7")
        buf.write(u"\7-\2\2\u05f7\u05f9\5\u0080A\2\u05f8\u05f6\3\2\2\2\u05f8")
        buf.write(u"\u05f9\3\2\2\2\u05f9\u05fc\3\2\2\2\u05fa\u05fb\78\2\2")
        buf.write(u"\u05fb\u05fd\5j\66\2\u05fc\u05fa\3\2\2\2\u05fc\u05fd")
        buf.write(u"\3\2\2\2\u05fd\u05ff\3\2\2\2\u05fe\u05f1\3\2\2\2\u05fe")
        buf.write(u"\u05f4\3\2\2\2\u05ffo\3\2\2\2\u0600\u0601\7\7\2\2\u0601")
        buf.write(u"\u0602\5\u0088E\2\u0602q\3\2\2\2\u0603\u0604\7\6\2\2")
        buf.write(u"\u0604\u0605\5\u0092J\2\u0605s\3\2\2\2\u0606\u0607\b")
        buf.write(u";\1\2\u0607\u0608\7\21\2\2\u0608\u0609\5t;\2\u0609\u060a")
        buf.write(u"\7\22\2\2\u060a\u061f\3\2\2\2\u060b\u060c\t\36\2\2\u060c")
        buf.write(u"\u061f\5t;\r\u060d\u060e\t\37\2\2\u060e\u061f\5t;\f\u060f")
        buf.write(u"\u061f\5\u0082B\2\u0610\u0611\7\u00fa\2\2\u0611\u0612")
        buf.write(u"\7\21\2\2\u0612\u0613\5t;\2\u0613\u0614\7.\2\2\u0614")
        buf.write(u"\u0615\5\u008eH\2\u0615\u0616\7\22\2\2\u0616\u061f\3")
        buf.write(u"\2\2\2\u0617\u0619\7\f\2\2\u0618\u0617\3\2\2\2\u0618")
        buf.write(u"\u0619\3\2\2\2\u0619\u061a\3\2\2\2\u061a\u061c\5x=\2")
        buf.write(u"\u061b\u061d\5z>\2\u061c\u061b\3\2\2\2\u061c\u061d\3")
        buf.write(u"\2\2\2\u061d\u061f\3\2\2\2\u061e\u0606\3\2\2\2\u061e")
        buf.write(u"\u060b\3\2\2\2\u061e\u060d\3\2\2\2\u061e\u060f\3\2\2")
        buf.write(u"\2\u061e\u0610\3\2\2\2\u061e\u0618\3\2\2\2\u061f\u0638")
        buf.write(u"\3\2\2\2\u0620\u0624\f\13\2\2\u0621\u0622\7\b\2\2\u0622")
        buf.write(u"\u0625\7\b\2\2\u0623\u0625\7\36\2\2\u0624\u0621\3\2\2")
        buf.write(u"\2\u0624\u0623\3\2\2\2\u0625\u0626\3\2\2\2\u0626\u0637")
        buf.write(u"\5t;\f\u0627\u0628\f\n\2\2\u0628\u0629\t \2\2\u0629\u0637")
        buf.write(u"\5t;\13\u062a\u062b\f\t\2\2\u062b\u062c\7\34\2\2\u062c")
        buf.write(u"\u0637\5t;\n\u062d\u062e\f\b\2\2\u062e\u062f\t\36\2\2")
        buf.write(u"\u062f\u0637\5t;\t\u0630\u0631\f\7\2\2\u0631\u0632\t")
        buf.write(u"!\2\2\u0632\u0637\5t;\b\u0633\u0634\f\6\2\2\u0634\u0635")
        buf.write(u"\t\"\2\2\u0635\u0637\5t;\7\u0636\u0620\3\2\2\2\u0636")
        buf.write(u"\u0627\3\2\2\2\u0636\u062a\3\2\2\2\u0636\u062d\3\2\2")
        buf.write(u"\2\u0636\u0630\3\2\2\2\u0636\u0633\3\2\2\2\u0637\u063a")
        buf.write(u"\3\2\2\2\u0638\u0636\3\2\2\2\u0638\u0639\3\2\2\2\u0639")
        buf.write(u"u\3\2\2\2\u063a\u0638\3\2\2\2\u063b\u063d\7\f\2\2\u063c")
        buf.write(u"\u063b\3\2\2\2\u063c\u063d\3\2\2\2\u063d\u063e\3\2\2")
        buf.write(u"\2\u063e\u063f\5x=\2\u063f\u0640\5z>\2\u0640\u0647\3")
        buf.write(u"\2\2\2\u0641\u0642\7\f\2\2\u0642\u0644\5x=\2\u0643\u0645")
        buf.write(u"\5z>\2\u0644\u0643\3\2\2\2\u0644\u0645\3\2\2\2\u0645")
        buf.write(u"\u0647\3\2\2\2\u0646\u063c\3\2\2\2\u0646\u0641\3\2\2")
        buf.write(u"\2\u0647w\3\2\2\2\u0648\u064c\5\u0092J\2\u0649\u064c")
        buf.write(u"\5p9\2\u064a\u064c\5r:\2\u064b\u0648\3\2\2\2\u064b\u0649")
        buf.write(u"\3\2\2\2\u064b\u064a\3\2\2\2\u064cy\3\2\2\2\u064d\u064f")
        buf.write(u"\7\21\2\2\u064e\u0650\5j\66\2\u064f\u064e\3\2\2\2\u064f")
        buf.write(u"\u0650\3\2\2\2\u0650\u0651\3\2\2\2\u0651\u0658\7\22\2")
        buf.write(u"\2\u0652\u0654\7\r\2\2\u0653\u0655\5j\66\2\u0654\u0653")
        buf.write(u"\3\2\2\2\u0654\u0655\3\2\2\2\u0655\u0656\3\2\2\2\u0656")
        buf.write(u"\u0658\7\16\2\2\u0657\u064d\3\2\2\2\u0657\u0652\3\2\2")
        buf.write(u"\2\u0658\u065a\3\2\2\2\u0659\u065b\5z>\2\u065a\u0659")
        buf.write(u"\3\2\2\2\u065a\u065b\3\2\2\2\u065b\u0662\3\2\2\2\u065c")
        buf.write(u"\u065d\7\f\2\2\u065d\u065f\5\u0092J\2\u065e\u0660\5z")
        buf.write(u">\2\u065f\u065e\3\2\2\2\u065f\u0660\3\2\2\2\u0660\u0662")
        buf.write(u"\3\2\2\2\u0661\u0657\3\2\2\2\u0661\u065c\3\2\2\2\u0662")
        buf.write(u"{\3\2\2\2\u0663\u0664\5\u0092J\2\u0664\u0665\7!\2\2\u0665")
        buf.write(u"\u0667\3\2\2\2\u0666\u0663\3\2\2\2\u0666\u0667\3\2\2")
        buf.write(u"\2\u0667\u0669\3\2\2\2\u0668\u066a\5~@\2\u0669\u0668")
        buf.write(u"\3\2\2\2\u066a\u066b\3\2\2\2\u066b\u066c\3\2\2\2\u066b")
        buf.write(u"\u0669\3\2\2\2\u066c}\3\2\2\2\u066d\u0687\5\u0092J\2")
        buf.write(u"\u066e\u0687\7\4\2\2\u066f\u0687\7\23\2\2\u0670\u0687")
        buf.write(u"\7\5\2\2\u0671\u0687\7\6\2\2\u0672\u0687\7\7\2\2\u0673")
        buf.write(u"\u0687\7\t\2\2\u0674\u0687\7\n\2\2\u0675\u0687\7\f\2")
        buf.write(u"\2\u0676\u0687\7\r\2\2\u0677\u0687\7\16\2\2\u0678\u0687")
        buf.write(u"\7\17\2\2\u0679\u0687\7\20\2\2\u067a\u0687\7\21\2\2\u067b")
        buf.write(u"\u0687\7\22\2\2\u067c\u0687\7\26\2\2\u067d\u0687\7\27")
        buf.write(u"\2\2\u067e\u0687\7\30\2\2\u067f\u0687\7\31\2\2\u0680")
        buf.write(u"\u0687\7\34\2\2\u0681\u0687\7\35\2\2\u0682\u0687\7\36")
        buf.write(u"\2\2\u0683\u0687\7\37\2\2\u0684\u0687\7 \2\2\u0685\u0687")
        buf.write(u"\7\3\2\2\u0686\u066d\3\2\2\2\u0686\u066e\3\2\2\2\u0686")
        buf.write(u"\u066f\3\2\2\2\u0686\u0670\3\2\2\2\u0686\u0671\3\2\2")
        buf.write(u"\2\u0686\u0672\3\2\2\2\u0686\u0673\3\2\2\2\u0686\u0674")
        buf.write(u"\3\2\2\2\u0686\u0675\3\2\2\2\u0686\u0676\3\2\2\2\u0686")
        buf.write(u"\u0677\3\2\2\2\u0686\u0678\3\2\2\2\u0686\u0679\3\2\2")
        buf.write(u"\2\u0686\u067a\3\2\2\2\u0686\u067b\3\2\2\2\u0686\u067c")
        buf.write(u"\3\2\2\2\u0686\u067d\3\2\2\2\u0686\u067e\3\2\2\2\u0686")
        buf.write(u"\u067f\3\2\2\2\u0686\u0680\3\2\2\2\u0686\u0681\3\2\2")
        buf.write(u"\2\u0686\u0682\3\2\2\2\u0686\u0683\3\2\2\2\u0686\u0684")
        buf.write(u"\3\2\2\2\u0686\u0685\3\2\2\2\u0687\177\3\2\2\2\u0688")
        buf.write(u"\u0689\7\21\2\2\u0689\u068a\5t;\2\u068a\u068b\7\22\2")
        buf.write(u"\2\u068b\u0690\3\2\2\2\u068c\u0690\5\u0082B\2\u068d\u0690")
        buf.write(u"\5|?\2\u068e\u0690\5t;\2\u068f\u0688\3\2\2\2\u068f\u068c")
        buf.write(u"\3\2\2\2\u068f\u068d\3\2\2\2\u068f\u068e\3\2\2\2\u0690")
        buf.write(u"\u0081\3\2\2\2\u0691\u06ba\7\4\2\2\u0692\u0693\7 \2\2")
        buf.write(u"\u0693\u06ba\7\4\2\2\u0694\u0695\7\f\2\2\u0695\u0696")
        buf.write(u"\t#\2\2\u0696\u06ba\7\f\2\2\u0697\u0698\7\f\2\2\u0698")
        buf.write(u"\u0699\7\u00e0\2\2\u0699\u069c\7\f\2\2\u069a\u069c\7")
        buf.write(u"\u00e0\2\2\u069b\u0697\3\2\2\2\u069b\u069a\3\2\2\2\u069c")
        buf.write(u"\u06ba\3\2\2\2\u069d\u06b5\7\17\2\2\u069e\u069f\7\13")
        buf.write(u"\2\2\u069f\u06b6\7\13\2\2\u06a0\u06a1\7\36\2\2\u06a1")
        buf.write(u"\u06a2\7\4\2\2\u06a2\u06a3\7\n\2\2\u06a3\u06a4\7\4\2")
        buf.write(u"\2\u06a4\u06a5\7\n\2\2\u06a5\u06b3\7\4\2\2\u06a6\u06a8")
        buf.write(u"\7\37\2\2\u06a7\u06a6\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8")
        buf.write(u"\u06a9\3\2\2\2\u06a9\u06b0\7\4\2\2\u06aa\u06ab\7!\2\2")
        buf.write(u"\u06ab\u06ae\7\4\2\2\u06ac\u06ad\7!\2\2\u06ad\u06af\7")
        buf.write(u"\4\2\2\u06ae\u06ac\3\2\2\2\u06ae\u06af\3\2\2\2\u06af")
        buf.write(u"\u06b1\3\2\2\2\u06b0\u06aa\3\2\2\2\u06b0\u06b1\3\2\2")
        buf.write(u"\2\u06b1\u06b2\3\2\2\2\u06b2\u06b4\5\u0092J\2\u06b3\u06a7")
        buf.write(u"\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4\u06b6\3\2\2\2\u06b5")
        buf.write(u"\u069e\3\2\2\2\u06b5\u06a0\3\2\2\2\u06b6\u06b7\3\2\2")
        buf.write(u"\2\u06b7\u06ba\7\20\2\2\u06b8\u06ba\7%\2\2\u06b9\u0691")
        buf.write(u"\3\2\2\2\u06b9\u0692\3\2\2\2\u06b9\u0694\3\2\2\2\u06b9")
        buf.write(u"\u069b\3\2\2\2\u06b9\u069d\3\2\2\2\u06b9\u06b8\3\2\2")
        buf.write(u"\2\u06ba\u0083\3\2\2\2\u06bb\u06bc\79\2\2\u06bc\u06bd")
        buf.write(u"\5t;\2\u06bd\u06be\7+\2\2\u06be\u06c3\5\u0088E\2\u06bf")
        buf.write(u"\u06c0\7\37\2\2\u06c0\u06c2\5\u0088E\2\u06c1\u06bf\3")
        buf.write(u"\2\2\2\u06c2\u06c5\3\2\2\2\u06c3\u06c1\3\2\2\2\u06c3")
        buf.write(u"\u06c4\3\2\2\2\u06c4\u06cb\3\2\2\2\u06c5\u06c3\3\2\2")
        buf.write(u"\2\u06c6\u06c7\5\u0088E\2\u06c7\u06c8\7\35\2\2\u06c8")
        buf.write(u"\u06c9\5t;\2\u06c9\u06cb\3\2\2\2\u06ca\u06bb\3\2\2\2")
        buf.write(u"\u06ca\u06c6\3\2\2\2\u06cb\u0085\3\2\2\2\u06cc\u06ce")
        buf.write(u"\7\f\2\2\u06cd\u06cc\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce")
        buf.write(u"\u06cf\3\2\2\2\u06cf\u06d4\5\u0092J\2\u06d0\u06d1\7\f")
        buf.write(u"\2\2\u06d1\u06d3\5\u0092J\2\u06d2\u06d0\3\2\2\2\u06d3")
        buf.write(u"\u06d6\3\2\2\2\u06d4\u06d2\3\2\2\2\u06d4\u06d5\3\2\2")
        buf.write(u"\2\u06d5\u0087\3\2\2\2\u06d6\u06d4\3\2\2\2\u06d7\u06d9")
        buf.write(u"\7\f\2\2\u06d8\u06d7\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9")
        buf.write(u"\u06da\3\2\2\2\u06da\u06dc\5\u0092J\2\u06db\u06dd\5z")
        buf.write(u">\2\u06dc\u06db\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd\u0089")
        buf.write(u"\3\2\2\2\u06de\u06df\5t;\2\u06df\u06e0\7\37\2\2\u06e0")
        buf.write(u"\u06e1\5t;\2\u06e1\u008b\3\2\2\2\u06e2\u06e5\7\21\2\2")
        buf.write(u"\u06e3\u06e6\5t;\2\u06e4\u06e6\5\u008aF\2\u06e5\u06e3")
        buf.write(u"\3\2\2\2\u06e5\u06e4\3\2\2\2\u06e6\u06e7\3\2\2\2\u06e7")
        buf.write(u"\u06e8\7\22\2\2\u06e8\u06f1\3\2\2\2\u06e9\u06ec\7\r\2")
        buf.write(u"\2\u06ea\u06ed\5t;\2\u06eb\u06ed\5\u008aF\2\u06ec\u06ea")
        buf.write(u"\3\2\2\2\u06ec\u06eb\3\2\2\2\u06ed\u06ee\3\2\2\2\u06ee")
        buf.write(u"\u06ef\7\16\2\2\u06ef\u06f1\3\2\2\2\u06f0\u06e2\3\2\2")
        buf.write(u"\2\u06f0\u06e9\3\2\2\2\u06f1\u008d\3\2\2\2\u06f2\u06f3")
        buf.write(u"\5\u0092J\2\u06f3\u008f\3\2\2\2\u06f4\u06fb\7|\2\2\u06f5")
        buf.write(u"\u06f6\7\u009a\2\2\u06f6\u06fb\5t;\2\u06f7\u06f8\7\u0082")
        buf.write(u"\2\2\u06f8\u06fb\5t;\2\u06f9\u06fb\7\u009b\2\2\u06fa")
        buf.write(u"\u06f4\3\2\2\2\u06fa\u06f5\3\2\2\2\u06fa\u06f7\3\2\2")
        buf.write(u"\2\u06fa\u06f9\3\2\2\2\u06fb\u0091\3\2\2\2\u06fc\u06fd")
        buf.write(u"\t$\2\2\u06fd\u0093\3\2\2\2\u0112\u009a\u00a2\u00aa\u00b6")
        buf.write(u"\u00ca\u00d3\u00d7\u00d9\u00de\u00e0\u00ea\u00f1\u00f9")
        buf.write(u"\u0101\u0103\u0119\u011c\u0124\u0127\u012d\u0130\u0134")
        buf.write(u"\u0140\u0145\u014c\u0152\u015b\u0168\u0173\u0178\u017a")
        buf.write(u"\u018e\u0196\u019a\u019f\u01a6\u01ba\u01be\u01cb\u01cf")
        buf.write(u"\u01d4\u01e8\u01fb\u0200\u0206\u0208\u0210\u0212\u0218")
        buf.write(u"\u021d\u0222\u0225\u022e\u0232\u0236\u0238\u023b\u0248")
        buf.write(u"\u024e\u0254\u0256\u0260\u0262\u0264\u0266\u026a\u026e")
        buf.write(u"\u0274\u0278\u027a\u027e\u0283\u0285\u028a\u0290\u0293")
        buf.write(u"\u0296\u029b\u02a6\u02b0\u02ba\u02c8\u02cc\u02d0\u02d2")
        buf.write(u"\u02d5\u02d8\u02de\u02e2\u02e8\u02ec\u02f0\u02f6\u0303")
        buf.write(u"\u0314\u0319\u031d\u0321\u0325\u032a\u032f\u0331\u0335")
        buf.write(u"\u033e\u0341\u0345\u034a\u034e\u0351\u0356\u035d\u0365")
        buf.write(u"\u0368\u036b\u036e\u0372\u037a\u037c\u0380\u0384\u038e")
        buf.write(u"\u0390\u0394\u0398\u039c\u03a4\u03af\u03b3\u03b7\u03bf")
        buf.write(u"\u03ca\u03d0\u03d7\u03dd\u03e2\u03eb\u03ed\u03f1\u03fb")
        buf.write(u"\u03fe\u0401\u0403\u0407\u040d\u0410\u0414\u0418\u041f")
        buf.write(u"\u0425\u042b\u042e\u0431\u0434\u043a\u043e\u0443\u0446")
        buf.write(u"\u0449\u0450\u0455\u0458\u0471\u0477\u047d\u0483\u0486")
        buf.write(u"\u0488\u048d\u0494\u0497\u049d\u04a2\u04a9\u04ab\u04b2")
        buf.write(u"\u04b7\u04ba\u04be\u04c1\u04c4\u04cf\u04d7\u04d9\u04df")
        buf.write(u"\u04e3\u04e6\u04eb\u04f3\u04f9\u04fe\u0503\u0508\u0513")
        buf.write(u"\u0515\u051e\u0527\u0529\u052b\u0532\u0536\u0539\u0544")
        buf.write(u"\u0546\u054b\u0551\u055d\u055f\u0564\u056a\u0575\u057c")
        buf.write(u"\u0581\u0585\u0588\u058a\u058f\u0598\u059a\u059c\u05a5")
        buf.write(u"\u05a9\u05b0\u05b6\u05bf\u05c3\u05cc\u05d1\u05d6\u05dc")
        buf.write(u"\u05e3\u05e7\u05ee\u05f8\u05fc\u05fe\u0618\u061c\u061e")
        buf.write(u"\u0624\u0636\u0638\u063c\u0644\u0646\u064b\u064f\u0654")
        buf.write(u"\u0657\u065a\u065f\u0661\u0666\u066b\u0686\u068f\u069b")
        buf.write(u"\u06a7\u06ae\u06b0\u06b3\u06b5\u06b9\u06c3\u06ca\u06cd")
        buf.write(u"\u06d4\u06d8\u06dc\u06e5\u06ec\u06f0\u06fa")
        return buf.getvalue()


class VisualFoxpro9Parser ( Parser ):

    grammarFileName = "VisualFoxpro9.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"'_'", u"<INVALID>", u"';'", u"'&'", 
                     u"'@'", u"'*'", u"'+'", u"'-'", u"'/'", u"'.'", u"'['", 
                     u"']'", u"'{'", u"'}'", u"'('", u"')'", u"'\\'", u"'<'", 
                     u"'>'", u"'!'", u"'#'", u"'=='", u"<INVALID>", u"'>='", 
                     u"'<='", u"'%'", u"'='", u"'^'", u"','", u"'$'", u"':'", 
                     u"'?'", u"'\"'", u"'''", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"'\n'" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"NUMBER_LITERAL", u"SEMICOLON", 
                      u"AMPERSAND", u"COMMERCIALAT", u"ASTERISK", u"PLUS_SIGN", 
                      u"MINUS_SIGN", u"FORWARDSLASH", u"PERIOD", u"LEFTBRACKET", 
                      u"RIGHTBRACKET", u"LEFTBRACE", u"RIGHTBRACE", u"LEFTPAREN", 
                      u"RIGHTPAREN", u"BACKSLASH", u"LESSTHAN", u"GREATERTHAN", 
                      u"EXCLAMATION", u"HASH", u"DOUBLEEQUALS", u"NOTEQUALS", 
                      u"GTEQ", u"LTEQ", u"MODULO", u"EQUALS", u"CARAT", 
                      u"COMMA", u"DOLLAR", u"COLON", u"QUESTION", u"DOUBLEQUOTE", 
                      u"SINGLEQUOTE", u"STRING_LITERAL", u"LINECOMMENT", 
                      u"COMMENT", u"LINECONT", u"ASSERT", u"ASSERTS", u"TO", 
                      u"DO", u"IN", u"AS", u"IF", u"ELIF", u"ELSE", u"ENDIF", 
                      u"ON", u"OFF", u"ERROR", u"QUIT", u"EXIT", u"WITH", 
                      u"STORE", u"PUBLIC", u"PRIVATE", u"LOCAL", u"ARRAY", 
                      u"DELETE", u"RECALL", u"FILE", u"SET", u"RELEASE", 
                      u"RECYCLE", u"CREATE", u"TABLE", u"TABLEPROMPT", u"DBF", 
                      u"NAME", u"FREE", u"SELECT", u"USE", u"READ", u"EVENTS", 
                      u"SHUTDOWN", u"CLEAR", u"PROCEDURE", u"FUNCTION", 
                      u"ENDPROC", u"ENDFUNC", u"DEFINE", u"CLASS", u"ENDDEFINE", 
                      u"LOCATE", u"CONTINUE", u"FOR", u"ENDFOR", u"WHILE", 
                      u"NOOPTIMIZE", u"SAFETY", u"STATUS", u"BAR", u"MEMOWIDTH", 
                      u"CURSOR", u"REFRESH", u"BELL", u"CENTURY", u"COMPATIBLE", 
                      u"DATE", u"ADD", u"OBJECT", u"REPLACE", u"LIBRARY", 
                      u"SHARED", u"WAIT", u"WINDOW", u"NOWAIT", u"NOCLEAR", 
                      u"NOTIFY", u"ENDDO", u"DECLARE", u"ERASE", u"SYSMENU", 
                      u"CLOCK", u"RETURN", u"LPARAMETERS", u"LPARAMETER", 
                      u"PARAMETERS", u"ALTERNATE", u"EXACT", u"ALL", u"COUNT", 
                      u"GOTO", u"GO", u"TOP", u"BOTTOM", u"RECORD", u"CLOSE", 
                      u"APPEND", u"BLANK", u"NOMENU", u"CASE", u"ENDCASE", 
                      u"OTHERWISE", u"FROM", u"REPORT", u"FORM", u"NOEJECT", 
                      u"PRINTER", u"PROMPT", u"NOPROMPT", u"DB4", u"FOXPLUS", 
                      u"NOCONSOLE", u"COPY", u"STRUCTURE", u"DELETED", u"SUM", 
                      u"DISTINCT", u"INTO", u"NEXT", u"REST", u"SKIPKW", 
                      u"EXCLUSIVE", u"NEAR", u"MKDIR", u"RMDIR", u"KEY", 
                      u"KEYBOARD", u"LABEL", u"PLAIN", u"MENU", u"AT", u"LINE", 
                      u"SCREEN", u"NOMARGIN", u"PAD", u"OF", u"COLOR", u"SCHEME", 
                      u"BEFORE", u"AFTER", u"NEGOTIATE", u"FONT", u"STYLE", 
                      u"MARK", u"MESSAGE", u"ACTIVATE", u"POPUP", u"POPUPS", 
                      u"EXTENDED", u"SHADOW", u"MARGIN", u"RELATIVE", u"SELECTION", 
                      u"DEACTIVATE", u"SAME", u"NOSHOW", u"STEP", u"THEN", 
                      u"UNDEFINE", u"IFDEF", u"PUSH", u"POP", u"TIMEOUT", 
                      u"ENDWITH", u"TYPEAHEAD", u"ALIAS", u"ORDER", u"SEEK", 
                      u"WHERE", u"FILTER", u"RENAME", u"INCLUDE", u"CLASSLIB", 
                      u"BY", u"UNIQUE", u"INDEX", u"TAG", u"COMPACT", u"ASCENDING", 
                      u"DESCENDING", u"CANDIDATE", u"ADDITIVE", u"DIMENSION", 
                      u"NOT", u"AND", u"OR", u"SCAN", u"ENDSCAN", u"NULL", 
                      u"T", u"F", u"Y", u"N", u"NODEFAULT", u"DLLS", u"MACROS", 
                      u"NUMBER", u"ZAP", u"ROLLOVER", u"DEFAULT", u"SAVE", 
                      u"NOSAVE", u"DATABASE", u"DATABASES", u"TABLES", u"INDEXES", 
                      u"LOOP", u"PACK", u"REINDEX", u"MEMO", u"PROGRAM", 
                      u"PROTECTED", u"THROW", u"EACH", u"CAST", u"RUN", 
                      u"MULTILOCKS", u"TRY", u"CATCH", u"FINALLY", u"ENDTRY", 
                      u"BROWSE", u"INSERT", u"VALUES", u"MEMVAR", u"TYPE", 
                      u"CHDIR", u"SCATTER", u"GATHER", u"EXCEPT", u"LIKE", 
                      u"FIELDS", u"ALTER", u"COLUMN", u"DROP", u"DEBUG", 
                      u"GETS", u"DEBUGOUT", u"MEMORY", u"MENUS", u"RESOURCES", 
                      u"WINDOWS", u"ID", u"NL", u"WS", u"UNMATCHED" ]

    RULE_preprocessorCode = 0
    RULE_preprocessorLines = 1
    RULE_preprocessorLine = 2
    RULE_prg = 3
    RULE_lineComment = 4
    RULE_line = 5
    RULE_lineEnd = 6
    RULE_lines = 7
    RULE_classDefStart = 8
    RULE_classDef = 9
    RULE_classDefProperty = 10
    RULE_funcDefStart = 11
    RULE_funcDefEnd = 12
    RULE_parameterDef = 13
    RULE_funcDef = 14
    RULE_parameter = 15
    RULE_parameters = 16
    RULE_ifStart = 17
    RULE_ifStmt = 18
    RULE_forStart = 19
    RULE_forEnd = 20
    RULE_forStmt = 21
    RULE_caseExpr = 22
    RULE_singleCase = 23
    RULE_otherwise = 24
    RULE_caseElement = 25
    RULE_caseStmt = 26
    RULE_whileStart = 27
    RULE_whileStmt = 28
    RULE_withStmt = 29
    RULE_scanStmt = 30
    RULE_tryStmt = 31
    RULE_breakLoop = 32
    RULE_continueLoop = 33
    RULE_controlStmt = 34
    RULE_cmdStmt = 35
    RULE_cmd = 36
    RULE_release = 37
    RULE_otherCmds = 38
    RULE_dllArgs = 39
    RULE_dllArg = 40
    RULE_printStmt = 41
    RULE_waitCmd = 42
    RULE_filesystemCmd = 43
    RULE_quit = 44
    RULE_returnStmt = 45
    RULE_setup = 46
    RULE_onError = 47
    RULE_onShutdown = 48
    RULE_setStmt = 49
    RULE_setCmd = 50
    RULE_declaration = 51
    RULE_args = 52
    RULE_specialArgs = 53
    RULE_funcDo = 54
    RULE_reference = 55
    RULE_argReplace = 56
    RULE_expr = 57
    RULE_complexId = 58
    RULE_atom = 59
    RULE_trailer = 60
    RULE_pathname = 61
    RULE_pathElement = 62
    RULE_specialExpr = 63
    RULE_constant = 64
    RULE_assign = 65
    RULE_idAttr2 = 66
    RULE_idAttr = 67
    RULE_twoExpr = 68
    RULE_arrayIndex = 69
    RULE_datatype = 70
    RULE_scopeClause = 71
    RULE_identifier = 72

    ruleNames =  [ u"preprocessorCode", u"preprocessorLines", u"preprocessorLine", 
                   u"prg", u"lineComment", u"line", u"lineEnd", u"lines", 
                   u"classDefStart", u"classDef", u"classDefProperty", u"funcDefStart", 
                   u"funcDefEnd", u"parameterDef", u"funcDef", u"parameter", 
                   u"parameters", u"ifStart", u"ifStmt", u"forStart", u"forEnd", 
                   u"forStmt", u"caseExpr", u"singleCase", u"otherwise", 
                   u"caseElement", u"caseStmt", u"whileStart", u"whileStmt", 
                   u"withStmt", u"scanStmt", u"tryStmt", u"breakLoop", u"continueLoop", 
                   u"controlStmt", u"cmdStmt", u"cmd", u"release", u"otherCmds", 
                   u"dllArgs", u"dllArg", u"printStmt", u"waitCmd", u"filesystemCmd", 
                   u"quit", u"returnStmt", u"setup", u"onError", u"onShutdown", 
                   u"setStmt", u"setCmd", u"declaration", u"args", u"specialArgs", 
                   u"funcDo", u"reference", u"argReplace", u"expr", u"complexId", 
                   u"atom", u"trailer", u"pathname", u"pathElement", u"specialExpr", 
                   u"constant", u"assign", u"idAttr2", u"idAttr", u"twoExpr", 
                   u"arrayIndex", u"datatype", u"scopeClause", u"identifier" ]

    EOF = Token.EOF
    T__0=1
    NUMBER_LITERAL=2
    SEMICOLON=3
    AMPERSAND=4
    COMMERCIALAT=5
    ASTERISK=6
    PLUS_SIGN=7
    MINUS_SIGN=8
    FORWARDSLASH=9
    PERIOD=10
    LEFTBRACKET=11
    RIGHTBRACKET=12
    LEFTBRACE=13
    RIGHTBRACE=14
    LEFTPAREN=15
    RIGHTPAREN=16
    BACKSLASH=17
    LESSTHAN=18
    GREATERTHAN=19
    EXCLAMATION=20
    HASH=21
    DOUBLEEQUALS=22
    NOTEQUALS=23
    GTEQ=24
    LTEQ=25
    MODULO=26
    EQUALS=27
    CARAT=28
    COMMA=29
    DOLLAR=30
    COLON=31
    QUESTION=32
    DOUBLEQUOTE=33
    SINGLEQUOTE=34
    STRING_LITERAL=35
    LINECOMMENT=36
    COMMENT=37
    LINECONT=38
    ASSERT=39
    ASSERTS=40
    TO=41
    DO=42
    IN=43
    AS=44
    IF=45
    ELIF=46
    ELSE=47
    ENDIF=48
    ON=49
    OFF=50
    ERROR=51
    QUIT=52
    EXIT=53
    WITH=54
    STORE=55
    PUBLIC=56
    PRIVATE=57
    LOCAL=58
    ARRAY=59
    DELETE=60
    RECALL=61
    FILE=62
    SET=63
    RELEASE=64
    RECYCLE=65
    CREATE=66
    TABLE=67
    TABLEPROMPT=68
    DBF=69
    NAME=70
    FREE=71
    SELECT=72
    USE=73
    READ=74
    EVENTS=75
    SHUTDOWN=76
    CLEAR=77
    PROCEDURE=78
    FUNCTION=79
    ENDPROC=80
    ENDFUNC=81
    DEFINE=82
    CLASS=83
    ENDDEFINE=84
    LOCATE=85
    CONTINUE=86
    FOR=87
    ENDFOR=88
    WHILE=89
    NOOPTIMIZE=90
    SAFETY=91
    STATUS=92
    BAR=93
    MEMOWIDTH=94
    CURSOR=95
    REFRESH=96
    BELL=97
    CENTURY=98
    COMPATIBLE=99
    DATE=100
    ADD=101
    OBJECT=102
    REPLACE=103
    LIBRARY=104
    SHARED=105
    WAIT=106
    WINDOW=107
    NOWAIT=108
    NOCLEAR=109
    NOTIFY=110
    ENDDO=111
    DECLARE=112
    ERASE=113
    SYSMENU=114
    CLOCK=115
    RETURN=116
    LPARAMETERS=117
    LPARAMETER=118
    PARAMETERS=119
    ALTERNATE=120
    EXACT=121
    ALL=122
    COUNT=123
    GOTO=124
    GO=125
    TOP=126
    BOTTOM=127
    RECORD=128
    CLOSE=129
    APPEND=130
    BLANK=131
    NOMENU=132
    CASE=133
    ENDCASE=134
    OTHERWISE=135
    FROM=136
    REPORT=137
    FORM=138
    NOEJECT=139
    PRINTER=140
    PROMPT=141
    NOPROMPT=142
    DB4=143
    FOXPLUS=144
    NOCONSOLE=145
    COPY=146
    STRUCTURE=147
    DELETED=148
    SUM=149
    DISTINCT=150
    INTO=151
    NEXT=152
    REST=153
    SKIPKW=154
    EXCLUSIVE=155
    NEAR=156
    MKDIR=157
    RMDIR=158
    KEY=159
    KEYBOARD=160
    LABEL=161
    PLAIN=162
    MENU=163
    AT=164
    LINE=165
    SCREEN=166
    NOMARGIN=167
    PAD=168
    OF=169
    COLOR=170
    SCHEME=171
    BEFORE=172
    AFTER=173
    NEGOTIATE=174
    FONT=175
    STYLE=176
    MARK=177
    MESSAGE=178
    ACTIVATE=179
    POPUP=180
    POPUPS=181
    EXTENDED=182
    SHADOW=183
    MARGIN=184
    RELATIVE=185
    SELECTION=186
    DEACTIVATE=187
    SAME=188
    NOSHOW=189
    STEP=190
    THEN=191
    UNDEFINE=192
    IFDEF=193
    PUSH=194
    POP=195
    TIMEOUT=196
    ENDWITH=197
    TYPEAHEAD=198
    ALIAS=199
    ORDER=200
    SEEK=201
    WHERE=202
    FILTER=203
    RENAME=204
    INCLUDE=205
    CLASSLIB=206
    BY=207
    UNIQUE=208
    INDEX=209
    TAG=210
    COMPACT=211
    ASCENDING=212
    DESCENDING=213
    CANDIDATE=214
    ADDITIVE=215
    DIMENSION=216
    NOT=217
    AND=218
    OR=219
    SCAN=220
    ENDSCAN=221
    NULL=222
    T=223
    F=224
    Y=225
    N=226
    NODEFAULT=227
    DLLS=228
    MACROS=229
    NUMBER=230
    ZAP=231
    ROLLOVER=232
    DEFAULT=233
    SAVE=234
    NOSAVE=235
    DATABASE=236
    DATABASES=237
    TABLES=238
    INDEXES=239
    LOOP=240
    PACK=241
    REINDEX=242
    MEMO=243
    PROGRAM=244
    PROTECTED=245
    THROW=246
    EACH=247
    CAST=248
    RUN=249
    MULTILOCKS=250
    TRY=251
    CATCH=252
    FINALLY=253
    ENDTRY=254
    BROWSE=255
    INSERT=256
    VALUES=257
    MEMVAR=258
    TYPE=259
    CHDIR=260
    SCATTER=261
    GATHER=262
    EXCEPT=263
    LIKE=264
    FIELDS=265
    ALTER=266
    COLUMN=267
    DROP=268
    DEBUG=269
    GETS=270
    DEBUGOUT=271
    MEMORY=272
    MENUS=273
    RESOURCES=274
    WINDOWS=275
    ID=276
    NL=277
    WS=278
    UNMATCHED=279

    def __init__(self, input, output=sys.stdout):
        super(VisualFoxpro9Parser, self).__init__(input, output=output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class PreprocessorCodeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PreprocessorCodeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def preprocessorLines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.PreprocessorLinesContext,0)


        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_preprocessorCode

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorCode"):
                return visitor.visitPreprocessorCode(self)
            else:
                return visitor.visitChildren(self)




    def preprocessorCode(self):

        localctx = VisualFoxpro9Parser.PreprocessorCodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_preprocessorCode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 146
            self.preprocessorLines()
            self.state = 147
            self.match(VisualFoxpro9Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PreprocessorLinesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PreprocessorLinesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def preprocessorLine(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.PreprocessorLineContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.PreprocessorLineContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_preprocessorLines

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorLines"):
                return visitor.visitPreprocessorLines(self)
            else:
                return visitor.visitChildren(self)




    def preprocessorLines(self):

        localctx = VisualFoxpro9Parser.PreprocessorLinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_preprocessorLines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 152
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 149
                    self.preprocessorLine() 
                self.state = 154
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PreprocessorLineContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PreprocessorLineContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_preprocessorLine

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.PreprocessorLineContext, self).copyFrom(ctx)



    class NonpreprocessorLineContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.NonpreprocessorLineContext, self).__init__(parser)
            self.copyFrom(ctx)

        def LINECOMMENT(self):
            return self.getToken(VisualFoxpro9Parser.LINECOMMENT, 0)
        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)
        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitNonpreprocessorLine"):
                return visitor.visitNonpreprocessorLine(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorUndefineContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorUndefineContext, self).__init__(parser)
            self.copyFrom(ctx)

        def UNDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.UNDEFINE, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorUndefine"):
                return visitor.visitPreprocessorUndefine(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorIfContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorIfContext, self).__init__(parser)
            self.ifBody = None # PreprocessorLinesContext
            self.elseBody = None # PreprocessorLinesContext
            self.copyFrom(ctx)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)
        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)
        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def preprocessorLines(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.PreprocessorLinesContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.PreprocessorLinesContext,i)

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def IFDEF(self):
            return self.getToken(VisualFoxpro9Parser.IFDEF, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorIf"):
                return visitor.visitPreprocessorIf(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorJunkContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorJunkContext, self).__init__(parser)
            self.copyFrom(ctx)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)
        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)
        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)
        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def INCLUDE(self):
            return self.getToken(VisualFoxpro9Parser.INCLUDE, 0)
        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorJunk"):
                return visitor.visitPreprocessorJunk(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorDefineContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorDefineContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorDefine"):
                return visitor.visitPreprocessorDefine(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorIncludeContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorIncludeContext, self).__init__(parser)
            self.copyFrom(ctx)

        def INCLUDE(self):
            return self.getToken(VisualFoxpro9Parser.INCLUDE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorInclude"):
                return visitor.visitPreprocessorInclude(self)
            else:
                return visitor.visitChildren(self)



    def preprocessorLine(self):

        localctx = VisualFoxpro9Parser.PreprocessorLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_preprocessorLine)
        self._la = 0 # Token type
        try:
            self.state = 215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.PreprocessorIfContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 155
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 160
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.IF]:
                    self.state = 156
                    self.match(VisualFoxpro9Parser.IF)
                    self.state = 157
                    self.expr(0)
                    pass
                elif token in [VisualFoxpro9Parser.IFDEF]:
                    self.state = 158
                    self.match(VisualFoxpro9Parser.IFDEF)
                    self.state = 159
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 162
                self.match(VisualFoxpro9Parser.NL)
                self.state = 163
                localctx.ifBody = self.preprocessorLines()
                self.state = 168
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 164
                    self.match(VisualFoxpro9Parser.HASH)
                    self.state = 165
                    self.match(VisualFoxpro9Parser.ELSE)
                    self.state = 166
                    self.match(VisualFoxpro9Parser.NL)
                    self.state = 167
                    localctx.elseBody = self.preprocessorLines()


                self.state = 170
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 171
                self.match(VisualFoxpro9Parser.ENDIF)
                self.state = 172
                self.lineEnd()
                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.PreprocessorDefineContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 174
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 175
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 176
                self.identifier()
                self.state = 180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.STRING_LITERAL) | (1 << VisualFoxpro9Parser.LINECOMMENT) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.QUIT) | (1 << VisualFoxpro9Parser.EXIT) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.RELEASE - 64)) | (1 << (VisualFoxpro9Parser.RECYCLE - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.TABLE - 64)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.FUNCTION - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 64)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.GO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.RECORD - 128)) | (1 << (VisualFoxpro9Parser.CLOSE - 128)) | (1 << (VisualFoxpro9Parser.APPEND - 128)) | (1 << (VisualFoxpro9Parser.BLANK - 128)) | (1 << (VisualFoxpro9Parser.NOMENU - 128)) | (1 << (VisualFoxpro9Parser.CASE - 128)) | (1 << (VisualFoxpro9Parser.ENDCASE - 128)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.POPUPS - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.UNDEFINE - 192)) | (1 << (VisualFoxpro9Parser.IFDEF - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 192)) | (1 << (VisualFoxpro9Parser.ENDWITH - 192)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 192)) | (1 << (VisualFoxpro9Parser.ALIAS - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.T - 192)) | (1 << (VisualFoxpro9Parser.F - 192)) | (1 << (VisualFoxpro9Parser.Y - 192)) | (1 << (VisualFoxpro9Parser.N - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.DATABASES - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.LOOP - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROTECTED - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.INSERT - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.MEMVAR - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.CHDIR - 256)) | (1 << (VisualFoxpro9Parser.SCATTER - 256)) | (1 << (VisualFoxpro9Parser.GATHER - 256)) | (1 << (VisualFoxpro9Parser.EXCEPT - 256)) | (1 << (VisualFoxpro9Parser.LIKE - 256)) | (1 << (VisualFoxpro9Parser.FIELDS - 256)) | (1 << (VisualFoxpro9Parser.ALTER - 256)) | (1 << (VisualFoxpro9Parser.COLUMN - 256)) | (1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.WINDOWS - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 177
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 182
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 183
                self.lineEnd()
                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.PreprocessorUndefineContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 185
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 186
                self.match(VisualFoxpro9Parser.UNDEFINE)
                self.state = 187
                self.identifier()
                self.state = 188
                self.lineEnd()
                pass

            elif la_ == 4:
                localctx = VisualFoxpro9Parser.PreprocessorIncludeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 190
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 191
                self.match(VisualFoxpro9Parser.INCLUDE)
                self.state = 192
                self.specialExpr()
                self.state = 193
                self.lineEnd()
                pass

            elif la_ == 5:
                localctx = VisualFoxpro9Parser.PreprocessorJunkContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 195
                self.match(VisualFoxpro9Parser.HASH)

                self.state = 196
                _la = self._input.LA(1)
                if _la <= 0 or ((((_la - 45)) & ~0x3f) == 0 and ((1 << (_la - 45)) & ((1 << (VisualFoxpro9Parser.IF - 45)) | (1 << (VisualFoxpro9Parser.ELSE - 45)) | (1 << (VisualFoxpro9Parser.ENDIF - 45)) | (1 << (VisualFoxpro9Parser.DEFINE - 45)))) != 0) or _la==VisualFoxpro9Parser.INCLUDE or _la==VisualFoxpro9Parser.NL:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.STRING_LITERAL) | (1 << VisualFoxpro9Parser.LINECOMMENT) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.QUIT) | (1 << VisualFoxpro9Parser.EXIT) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.RELEASE - 64)) | (1 << (VisualFoxpro9Parser.RECYCLE - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.TABLE - 64)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.FUNCTION - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 64)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.GO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.RECORD - 128)) | (1 << (VisualFoxpro9Parser.CLOSE - 128)) | (1 << (VisualFoxpro9Parser.APPEND - 128)) | (1 << (VisualFoxpro9Parser.BLANK - 128)) | (1 << (VisualFoxpro9Parser.NOMENU - 128)) | (1 << (VisualFoxpro9Parser.CASE - 128)) | (1 << (VisualFoxpro9Parser.ENDCASE - 128)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.POPUPS - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.UNDEFINE - 192)) | (1 << (VisualFoxpro9Parser.IFDEF - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 192)) | (1 << (VisualFoxpro9Parser.ENDWITH - 192)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 192)) | (1 << (VisualFoxpro9Parser.ALIAS - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.T - 192)) | (1 << (VisualFoxpro9Parser.F - 192)) | (1 << (VisualFoxpro9Parser.Y - 192)) | (1 << (VisualFoxpro9Parser.N - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.DATABASES - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.LOOP - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROTECTED - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.INSERT - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.MEMVAR - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.CHDIR - 256)) | (1 << (VisualFoxpro9Parser.SCATTER - 256)) | (1 << (VisualFoxpro9Parser.GATHER - 256)) | (1 << (VisualFoxpro9Parser.EXCEPT - 256)) | (1 << (VisualFoxpro9Parser.LIKE - 256)) | (1 << (VisualFoxpro9Parser.FIELDS - 256)) | (1 << (VisualFoxpro9Parser.ALTER - 256)) | (1 << (VisualFoxpro9Parser.COLUMN - 256)) | (1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.WINDOWS - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 197
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 202
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 203
                self.lineEnd()
                pass

            elif la_ == 6:
                localctx = VisualFoxpro9Parser.NonpreprocessorLineContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 204
                    self.match(VisualFoxpro9Parser.LINECOMMENT)
                    pass

                elif la_ == 2:
                    self.state = 205
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.EOF or _la==VisualFoxpro9Parser.HASH or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 209
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.STRING_LITERAL) | (1 << VisualFoxpro9Parser.LINECOMMENT) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.QUIT) | (1 << VisualFoxpro9Parser.EXIT) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.RELEASE - 64)) | (1 << (VisualFoxpro9Parser.RECYCLE - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.TABLE - 64)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.FUNCTION - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 64)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.GO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.RECORD - 128)) | (1 << (VisualFoxpro9Parser.CLOSE - 128)) | (1 << (VisualFoxpro9Parser.APPEND - 128)) | (1 << (VisualFoxpro9Parser.BLANK - 128)) | (1 << (VisualFoxpro9Parser.NOMENU - 128)) | (1 << (VisualFoxpro9Parser.CASE - 128)) | (1 << (VisualFoxpro9Parser.ENDCASE - 128)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.POPUPS - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.UNDEFINE - 192)) | (1 << (VisualFoxpro9Parser.IFDEF - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 192)) | (1 << (VisualFoxpro9Parser.ENDWITH - 192)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 192)) | (1 << (VisualFoxpro9Parser.ALIAS - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.T - 192)) | (1 << (VisualFoxpro9Parser.F - 192)) | (1 << (VisualFoxpro9Parser.Y - 192)) | (1 << (VisualFoxpro9Parser.N - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.DATABASES - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.LOOP - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROTECTED - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.INSERT - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.MEMVAR - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.CHDIR - 256)) | (1 << (VisualFoxpro9Parser.SCATTER - 256)) | (1 << (VisualFoxpro9Parser.GATHER - 256)) | (1 << (VisualFoxpro9Parser.EXCEPT - 256)) | (1 << (VisualFoxpro9Parser.LIKE - 256)) | (1 << (VisualFoxpro9Parser.FIELDS - 256)) | (1 << (VisualFoxpro9Parser.ALTER - 256)) | (1 << (VisualFoxpro9Parser.COLUMN - 256)) | (1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.WINDOWS - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                        self.state = 206
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 211
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 212
                    self.lineEnd()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrgContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PrgContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def classDef(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ClassDefContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ClassDefContext,i)


        def funcDef(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.FuncDefContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDefContext,i)


        def lineComment(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineCommentContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_prg

        def accept(self, visitor):
            if hasattr(visitor, "visitPrg"):
                return visitor.visitPrg(self)
            else:
                return visitor.visitChildren(self)




    def prg(self):

        localctx = VisualFoxpro9Parser.PrgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_prg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 36)) & ~0x3f) == 0 and ((1 << (_la - 36)) & ((1 << (VisualFoxpro9Parser.LINECOMMENT - 36)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 36)) | (1 << (VisualFoxpro9Parser.FUNCTION - 36)) | (1 << (VisualFoxpro9Parser.DEFINE - 36)))) != 0) or _la==VisualFoxpro9Parser.PROTECTED:
                self.state = 220
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.DEFINE]:
                    self.state = 217
                    self.classDef()
                    pass
                elif token in [VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.FUNCTION, VisualFoxpro9Parser.PROTECTED]:
                    self.state = 218
                    self.funcDef()
                    pass
                elif token in [VisualFoxpro9Parser.LINECOMMENT]:
                    self.state = 219
                    self.lineComment()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 225
            self.match(VisualFoxpro9Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LineCommentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.LineCommentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LINECOMMENT(self):
            return self.getToken(VisualFoxpro9Parser.LINECOMMENT, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_lineComment

        def accept(self, visitor):
            if hasattr(visitor, "visitLineComment"):
                return visitor.visitLineComment(self)
            else:
                return visitor.visitChildren(self)




    def lineComment(self):

        localctx = VisualFoxpro9Parser.LineCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_lineComment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.match(VisualFoxpro9Parser.LINECOMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LineContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.LineContext, self).__init__(parent, invokingState)
            self.parser = parser

        def controlStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ControlStmtContext,0)


        def cmdStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdStmtContext,0)


        def lineComment(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_line

        def accept(self, visitor):
            if hasattr(visitor, "visitLine"):
                return visitor.visitLine(self)
            else:
                return visitor.visitChildren(self)




    def line(self):

        localctx = VisualFoxpro9Parser.LineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_line)
        try:
            self.state = 232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 229
                self.controlStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 230
                self.cmdStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 231
                self.lineComment()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LineEndContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.LineEndContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_lineEnd

        def accept(self, visitor):
            if hasattr(visitor, "visitLineEnd"):
                return visitor.visitLineEnd(self)
            else:
                return visitor.visitChildren(self)




    def lineEnd(self):

        localctx = VisualFoxpro9Parser.LineEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_lineEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            _la = self._input.LA(1)
            if not(_la==VisualFoxpro9Parser.EOF or _la==VisualFoxpro9Parser.NL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.LinesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def line(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_lines

        def accept(self, visitor):
            if hasattr(visitor, "visitLines"):
                return visitor.visitLines(self)
            else:
                return visitor.visitChildren(self)




    def lines(self):

        localctx = VisualFoxpro9Parser.LinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_lines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 236
                    self.line() 
                self.state = 241
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDefStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ClassDefStartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)

        def CLASS(self):
            return self.getToken(VisualFoxpro9Parser.CLASS, 0)

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_classDefStart

        def accept(self, visitor):
            if hasattr(visitor, "visitClassDefStart"):
                return visitor.visitClassDefStart(self)
            else:
                return visitor.visitChildren(self)




    def classDefStart(self):

        localctx = VisualFoxpro9Parser.ClassDefStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_classDefStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.match(VisualFoxpro9Parser.DEFINE)
            self.state = 243
            self.match(VisualFoxpro9Parser.CLASS)
            self.state = 244
            self.identifier()
            self.state = 247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.AS:
                self.state = 245
                self.match(VisualFoxpro9Parser.AS)
                self.state = 246
                self.identifier()


            self.state = 249
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDefContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ClassDefContext, self).__init__(parent, invokingState)
            self.parser = parser

        def classDefStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ClassDefStartContext,0)


        def ENDDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.ENDDEFINE, 0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def classDefProperty(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ClassDefPropertyContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ClassDefPropertyContext,i)


        def funcDef(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.FuncDefContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDefContext,i)


        def lineComment(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineCommentContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_classDef

        def accept(self, visitor):
            if hasattr(visitor, "visitClassDef"):
                return visitor.visitClassDef(self)
            else:
                return visitor.visitChildren(self)




    def classDef(self):

        localctx = VisualFoxpro9Parser.ClassDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_classDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.classDefStart()
            self.state = 257
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 255
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        self.state = 252
                        self.classDefProperty()
                        pass

                    elif la_ == 2:
                        self.state = 253
                        self.funcDef()
                        pass

                    elif la_ == 3:
                        self.state = 254
                        self.lineComment()
                        pass

             
                self.state = 259
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

            self.state = 260
            self.match(VisualFoxpro9Parser.ENDDEFINE)
            self.state = 261
            self.lineEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDefPropertyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ClassDefPropertyContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_classDefProperty

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.ClassDefPropertyContext, self).copyFrom(ctx)



    class ClassDefAddObjectContext(ClassDefPropertyContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ClassDefPropertyContext)
            super(VisualFoxpro9Parser.ClassDefAddObjectContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(VisualFoxpro9Parser.ADD, 0)
        def OBJECT(self):
            return self.getToken(VisualFoxpro9Parser.OBJECT, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)
        def idAttr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdAttrContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,i)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)
        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitClassDefAddObject"):
                return visitor.visitClassDefAddObject(self)
            else:
                return visitor.visitChildren(self)


    class ClassDefAssignContext(ClassDefPropertyContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ClassDefPropertyContext)
            super(VisualFoxpro9Parser.ClassDefAssignContext, self).__init__(parser)
            self.copyFrom(ctx)

        def assign(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AssignContext,0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitClassDefAssign"):
                return visitor.visitClassDefAssign(self)
            else:
                return visitor.visitChildren(self)


    class ClassDefLineCommentContext(ClassDefPropertyContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ClassDefPropertyContext)
            super(VisualFoxpro9Parser.ClassDefLineCommentContext, self).__init__(parser)
            self.copyFrom(ctx)

        def lineComment(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitClassDefLineComment"):
                return visitor.visitClassDefLineComment(self)
            else:
                return visitor.visitChildren(self)



    def classDefProperty(self):

        localctx = VisualFoxpro9Parser.ClassDefPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_classDefProperty)
        self._la = 0 # Token type
        try:
            self.state = 290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.ClassDefAddObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 263
                self.match(VisualFoxpro9Parser.ADD)
                self.state = 264
                self.match(VisualFoxpro9Parser.OBJECT)
                self.state = 265
                self.identifier()
                self.state = 266
                self.match(VisualFoxpro9Parser.AS)
                self.state = 267
                self.idAttr()
                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.WITH:
                    self.state = 268
                    self.match(VisualFoxpro9Parser.WITH)
                    self.state = 269
                    self.idAttr()
                    self.state = 270
                    self.match(VisualFoxpro9Parser.EQUALS)
                    self.state = 271
                    self.expr(0)
                    self.state = 279
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==VisualFoxpro9Parser.COMMA:
                        self.state = 272
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 273
                        self.idAttr()
                        self.state = 274
                        self.match(VisualFoxpro9Parser.EQUALS)
                        self.state = 275
                        self.expr(0)
                        self.state = 281
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 284
                self.match(VisualFoxpro9Parser.NL)
                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.ClassDefAssignContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 286
                self.assign()
                self.state = 287
                self.match(VisualFoxpro9Parser.NL)
                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.ClassDefLineCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 289
                self.lineComment()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncDefStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.FuncDefStartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def idAttr2(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttr2Context,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def FUNCTION(self):
            return self.getToken(VisualFoxpro9Parser.FUNCTION, 0)

        def PROTECTED(self):
            return self.getToken(VisualFoxpro9Parser.PROTECTED, 0)

        def parameterDef(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParameterDefContext,0)


        def parameters(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParametersContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_funcDefStart

        def accept(self, visitor):
            if hasattr(visitor, "visitFuncDefStart"):
                return visitor.visitFuncDefStart(self)
            else:
                return visitor.visitChildren(self)




    def funcDefStart(self):

        localctx = VisualFoxpro9Parser.FuncDefStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_funcDefStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.PROTECTED:
                self.state = 292
                self.match(VisualFoxpro9Parser.PROTECTED)


            self.state = 295
            _la = self._input.LA(1)
            if not(_la==VisualFoxpro9Parser.PROCEDURE or _la==VisualFoxpro9Parser.FUNCTION):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 296
            self.idAttr2()
            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.LEFTPAREN:
                self.state = 297
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.QUIT) | (1 << VisualFoxpro9Parser.EXIT) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.RELEASE - 64)) | (1 << (VisualFoxpro9Parser.RECYCLE - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.TABLE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.FUNCTION - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 64)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.GO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.RECORD - 128)) | (1 << (VisualFoxpro9Parser.CLOSE - 128)) | (1 << (VisualFoxpro9Parser.APPEND - 128)) | (1 << (VisualFoxpro9Parser.BLANK - 128)) | (1 << (VisualFoxpro9Parser.NOMENU - 128)) | (1 << (VisualFoxpro9Parser.CASE - 128)) | (1 << (VisualFoxpro9Parser.ENDCASE - 128)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.POPUPS - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.UNDEFINE - 192)) | (1 << (VisualFoxpro9Parser.IFDEF - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 192)) | (1 << (VisualFoxpro9Parser.ENDWITH - 192)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 192)) | (1 << (VisualFoxpro9Parser.ALIAS - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.T - 192)) | (1 << (VisualFoxpro9Parser.F - 192)) | (1 << (VisualFoxpro9Parser.Y - 192)) | (1 << (VisualFoxpro9Parser.N - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.DATABASES - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROTECTED - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.INSERT - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.MEMVAR - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.SCATTER - 256)) | (1 << (VisualFoxpro9Parser.GATHER - 256)) | (1 << (VisualFoxpro9Parser.EXCEPT - 256)) | (1 << (VisualFoxpro9Parser.LIKE - 256)) | (1 << (VisualFoxpro9Parser.FIELDS - 256)) | (1 << (VisualFoxpro9Parser.ALTER - 256)) | (1 << (VisualFoxpro9Parser.COLUMN - 256)) | (1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 298
                    self.parameters()


                self.state = 301
                self.match(VisualFoxpro9Parser.RIGHTPAREN)


            self.state = 304
            self.match(VisualFoxpro9Parser.NL)
            self.state = 306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 305
                self.parameterDef()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncDefEndContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.FuncDefEndContext, self).__init__(parent, invokingState)
            self.parser = parser

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def ENDPROC(self):
            return self.getToken(VisualFoxpro9Parser.ENDPROC, 0)

        def ENDFUNC(self):
            return self.getToken(VisualFoxpro9Parser.ENDFUNC, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_funcDefEnd

        def accept(self, visitor):
            if hasattr(visitor, "visitFuncDefEnd"):
                return visitor.visitFuncDefEnd(self)
            else:
                return visitor.visitChildren(self)




    def funcDefEnd(self):

        localctx = VisualFoxpro9Parser.FuncDefEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_funcDefEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            _la = self._input.LA(1)
            if not(_la==VisualFoxpro9Parser.ENDPROC or _la==VisualFoxpro9Parser.ENDFUNC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 309
            self.lineEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterDefContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ParameterDefContext, self).__init__(parent, invokingState)
            self.parser = parser

        def parameters(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParametersContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def LPARAMETER(self):
            return self.getToken(VisualFoxpro9Parser.LPARAMETER, 0)

        def LPARAMETERS(self):
            return self.getToken(VisualFoxpro9Parser.LPARAMETERS, 0)

        def PARAMETERS(self):
            return self.getToken(VisualFoxpro9Parser.PARAMETERS, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_parameterDef

        def accept(self, visitor):
            if hasattr(visitor, "visitParameterDef"):
                return visitor.visitParameterDef(self)
            else:
                return visitor.visitChildren(self)




    def parameterDef(self):

        localctx = VisualFoxpro9Parser.ParameterDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_parameterDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            _la = self._input.LA(1)
            if not(((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (VisualFoxpro9Parser.LPARAMETERS - 117)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 117)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 117)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 312
            self.parameters()
            self.state = 313
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncDefContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.FuncDefContext, self).__init__(parent, invokingState)
            self.parser = parser

        def funcDefStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDefStartContext,0)


        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def funcDefEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDefEndContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_funcDef

        def accept(self, visitor):
            if hasattr(visitor, "visitFuncDef"):
                return visitor.visitFuncDef(self)
            else:
                return visitor.visitChildren(self)




    def funcDef(self):

        localctx = VisualFoxpro9Parser.FuncDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_funcDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.funcDefStart()
            self.state = 316
            self.lines()
            self.state = 318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 317
                self.funcDefEnd()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ParameterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def idAttr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdAttrContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,i)


        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_parameter

        def accept(self, visitor):
            if hasattr(visitor, "visitParameter"):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = VisualFoxpro9Parser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self.idAttr()
            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.AS:
                self.state = 321
                self.match(VisualFoxpro9Parser.AS)
                self.state = 322
                self.idAttr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ParametersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ParameterContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ParameterContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_parameters

        def accept(self, visitor):
            if hasattr(visitor, "visitParameters"):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = VisualFoxpro9Parser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self.parameter()
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.COMMA:
                self.state = 326
                self.match(VisualFoxpro9Parser.COMMA)
                self.state = 327
                self.parameter()
                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IfStartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def THEN(self):
            return self.getToken(VisualFoxpro9Parser.THEN, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_ifStart

        def accept(self, visitor):
            if hasattr(visitor, "visitIfStart"):
                return visitor.visitIfStart(self)
            else:
                return visitor.visitChildren(self)




    def ifStart(self):

        localctx = VisualFoxpro9Parser.IfStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_ifStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(VisualFoxpro9Parser.IF)
            self.state = 334
            self.expr(0)
            self.state = 336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.THEN:
                self.state = 335
                self.match(VisualFoxpro9Parser.THEN)


            self.state = 338
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IfStmtContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.ifBody = None # LinesContext
            self.elseBody = None # LinesContext

        def ifStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IfStartContext,0)


        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def lines(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LinesContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,i)


        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_ifStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitIfStmt"):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = VisualFoxpro9Parser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.ifStart()
            self.state = 341
            localctx.ifBody = self.lines()
            self.state = 345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.ELSE:
                self.state = 342
                self.match(VisualFoxpro9Parser.ELSE)
                self.state = 343
                self.match(VisualFoxpro9Parser.NL)
                self.state = 344
                localctx.elseBody = self.lines()


            self.state = 347
            self.match(VisualFoxpro9Parser.ENDIF)
            self.state = 348
            self.lineEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ForStartContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.loopStart = None # ExprContext
            self.loopStop = None # ExprContext
            self.loopStep = None # ExprContext

        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def STEP(self):
            return self.getToken(VisualFoxpro9Parser.STEP, 0)

        def EACH(self):
            return self.getToken(VisualFoxpro9Parser.EACH, 0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_forStart

        def accept(self, visitor):
            if hasattr(visitor, "visitForStart"):
                return visitor.visitForStart(self)
            else:
                return visitor.visitChildren(self)




    def forStart(self):

        localctx = VisualFoxpro9Parser.ForStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_forStart)
        self._la = 0 # Token type
        try:
            self.state = 369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 350
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 351
                self.idAttr()
                self.state = 352
                self.match(VisualFoxpro9Parser.EQUALS)
                self.state = 353
                localctx.loopStart = self.expr(0)
                self.state = 354
                self.match(VisualFoxpro9Parser.TO)
                self.state = 355
                localctx.loopStop = self.expr(0)
                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.STEP:
                    self.state = 356
                    self.match(VisualFoxpro9Parser.STEP)
                    self.state = 357
                    localctx.loopStep = self.expr(0)


                self.state = 360
                self.match(VisualFoxpro9Parser.NL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 362
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 363
                self.match(VisualFoxpro9Parser.EACH)
                self.state = 364
                self.idAttr()
                self.state = 365
                self.match(VisualFoxpro9Parser.IN)
                self.state = 366
                self.expr(0)
                self.state = 367
                self.match(VisualFoxpro9Parser.NL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForEndContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ForEndContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ENDFOR(self):
            return self.getToken(VisualFoxpro9Parser.ENDFOR, 0)

        def NEXT(self):
            return self.getToken(VisualFoxpro9Parser.NEXT, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_forEnd

        def accept(self, visitor):
            if hasattr(visitor, "visitForEnd"):
                return visitor.visitForEnd(self)
            else:
                return visitor.visitChildren(self)




    def forEnd(self):

        localctx = VisualFoxpro9Parser.ForEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_forEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ENDFOR]:
                self.state = 371
                self.match(VisualFoxpro9Parser.ENDFOR)
                pass
            elif token in [VisualFoxpro9Parser.NEXT]:
                self.state = 372
                self.match(VisualFoxpro9Parser.NEXT)
                self.state = 374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.QUIT) | (1 << VisualFoxpro9Parser.EXIT) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.RELEASE - 64)) | (1 << (VisualFoxpro9Parser.RECYCLE - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.TABLE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.FUNCTION - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 64)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.GO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.RECORD - 128)) | (1 << (VisualFoxpro9Parser.CLOSE - 128)) | (1 << (VisualFoxpro9Parser.APPEND - 128)) | (1 << (VisualFoxpro9Parser.BLANK - 128)) | (1 << (VisualFoxpro9Parser.NOMENU - 128)) | (1 << (VisualFoxpro9Parser.CASE - 128)) | (1 << (VisualFoxpro9Parser.ENDCASE - 128)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.POPUPS - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.UNDEFINE - 192)) | (1 << (VisualFoxpro9Parser.IFDEF - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 192)) | (1 << (VisualFoxpro9Parser.ENDWITH - 192)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 192)) | (1 << (VisualFoxpro9Parser.ALIAS - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.T - 192)) | (1 << (VisualFoxpro9Parser.F - 192)) | (1 << (VisualFoxpro9Parser.Y - 192)) | (1 << (VisualFoxpro9Parser.N - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.DATABASES - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROTECTED - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.INSERT - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.MEMVAR - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.SCATTER - 256)) | (1 << (VisualFoxpro9Parser.GATHER - 256)) | (1 << (VisualFoxpro9Parser.EXCEPT - 256)) | (1 << (VisualFoxpro9Parser.LIKE - 256)) | (1 << (VisualFoxpro9Parser.FIELDS - 256)) | (1 << (VisualFoxpro9Parser.ALTER - 256)) | (1 << (VisualFoxpro9Parser.COLUMN - 256)) | (1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 373
                    self.idAttr()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ForStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def forStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ForStartContext,0)


        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def forEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ForEndContext,0)


        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_forStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitForStmt"):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = VisualFoxpro9Parser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.forStart()
            self.state = 379
            self.lines()
            self.state = 380
            self.forEnd()
            self.state = 381
            self.lineEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.CaseExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(VisualFoxpro9Parser.CASE, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_caseExpr

        def accept(self, visitor):
            if hasattr(visitor, "visitCaseExpr"):
                return visitor.visitCaseExpr(self)
            else:
                return visitor.visitChildren(self)




    def caseExpr(self):

        localctx = VisualFoxpro9Parser.CaseExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_caseExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self.match(VisualFoxpro9Parser.CASE)
            self.state = 384
            self.expr(0)
            self.state = 385
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleCaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SingleCaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def caseExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CaseExprContext,0)


        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_singleCase

        def accept(self, visitor):
            if hasattr(visitor, "visitSingleCase"):
                return visitor.visitSingleCase(self)
            else:
                return visitor.visitChildren(self)




    def singleCase(self):

        localctx = VisualFoxpro9Parser.SingleCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_singleCase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.caseExpr()
            self.state = 388
            self.lines()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OtherwiseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.OtherwiseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OTHERWISE(self):
            return self.getToken(VisualFoxpro9Parser.OTHERWISE, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_otherwise

        def accept(self, visitor):
            if hasattr(visitor, "visitOtherwise"):
                return visitor.visitOtherwise(self)
            else:
                return visitor.visitChildren(self)




    def otherwise(self):

        localctx = VisualFoxpro9Parser.OtherwiseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_otherwise)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(VisualFoxpro9Parser.OTHERWISE)
            self.state = 391
            self.match(VisualFoxpro9Parser.NL)
            self.state = 392
            self.lines()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.CaseElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def lineComment(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,0)


        def singleCase(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SingleCaseContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_caseElement

        def accept(self, visitor):
            if hasattr(visitor, "visitCaseElement"):
                return visitor.visitCaseElement(self)
            else:
                return visitor.visitChildren(self)




    def caseElement(self):

        localctx = VisualFoxpro9Parser.CaseElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_caseElement)
        try:
            self.state = 396
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.LINECOMMENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 394
                self.lineComment()
                pass
            elif token in [VisualFoxpro9Parser.CASE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 395
                self.singleCase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.CaseStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)

        def CASE(self):
            return self.getToken(VisualFoxpro9Parser.CASE, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def ENDCASE(self):
            return self.getToken(VisualFoxpro9Parser.ENDCASE, 0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def caseElement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.CaseElementContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.CaseElementContext,i)


        def otherwise(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.OtherwiseContext,0)


        def lineComment(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineCommentContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_caseStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitCaseStmt"):
                return visitor.visitCaseStmt(self)
            else:
                return visitor.visitChildren(self)




    def caseStmt(self):

        localctx = VisualFoxpro9Parser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_caseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.match(VisualFoxpro9Parser.DO)
            self.state = 399
            self.match(VisualFoxpro9Parser.CASE)
            self.state = 400
            self.match(VisualFoxpro9Parser.NL)
            self.state = 404
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 401
                    self.caseElement() 
                self.state = 406
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.OTHERWISE:
                self.state = 407
                self.otherwise()


            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.LINECOMMENT:
                self.state = 410
                self.lineComment()
                self.state = 415
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 416
            self.match(VisualFoxpro9Parser.ENDCASE)
            self.state = 417
            self.lineEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.WhileStartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(VisualFoxpro9Parser.WHILE, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_whileStart

        def accept(self, visitor):
            if hasattr(visitor, "visitWhileStart"):
                return visitor.visitWhileStart(self)
            else:
                return visitor.visitChildren(self)




    def whileStart(self):

        localctx = VisualFoxpro9Parser.WhileStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_whileStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.DO:
                self.state = 419
                self.match(VisualFoxpro9Parser.DO)


            self.state = 422
            self.match(VisualFoxpro9Parser.WHILE)
            self.state = 423
            self.expr(0)
            self.state = 424
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.WhileStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def whileStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.WhileStartContext,0)


        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDDO(self):
            return self.getToken(VisualFoxpro9Parser.ENDDO, 0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_whileStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitWhileStmt"):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = VisualFoxpro9Parser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.whileStart()
            self.state = 427
            self.lines()
            self.state = 428
            self.match(VisualFoxpro9Parser.ENDDO)
            self.state = 429
            self.lineEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WithStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.WithStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDWITH(self):
            return self.getToken(VisualFoxpro9Parser.ENDWITH, 0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_withStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitWithStmt"):
                return visitor.visitWithStmt(self)
            else:
                return visitor.visitChildren(self)




    def withStmt(self):

        localctx = VisualFoxpro9Parser.WithStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_withStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.match(VisualFoxpro9Parser.WITH)
            self.state = 432
            self.idAttr()
            self.state = 433
            self.match(VisualFoxpro9Parser.NL)
            self.state = 434
            self.lines()
            self.state = 435
            self.match(VisualFoxpro9Parser.ENDWITH)
            self.state = 436
            self.lineEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScanStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ScanStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SCAN(self):
            return self.getToken(VisualFoxpro9Parser.SCAN, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDSCAN(self):
            return self.getToken(VisualFoxpro9Parser.ENDSCAN, 0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def scopeClause(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScopeClauseContext,0)


        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_scanStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitScanStmt"):
                return visitor.visitScanStmt(self)
            else:
                return visitor.visitChildren(self)




    def scanStmt(self):

        localctx = VisualFoxpro9Parser.ScanStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_scanStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(VisualFoxpro9Parser.SCAN)
            self.state = 440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (VisualFoxpro9Parser.ALL - 122)) | (1 << (VisualFoxpro9Parser.RECORD - 122)) | (1 << (VisualFoxpro9Parser.NEXT - 122)) | (1 << (VisualFoxpro9Parser.REST - 122)))) != 0):
                self.state = 439
                self.scopeClause()


            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.FOR:
                self.state = 442
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 443
                self.expr(0)


            self.state = 446
            self.match(VisualFoxpro9Parser.NL)
            self.state = 447
            self.lines()
            self.state = 448
            self.match(VisualFoxpro9Parser.ENDSCAN)
            self.state = 449
            self.lineEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.TryStmtContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.tryLines = None # LinesContext
            self.catchLines = None # LinesContext
            self.finallyLines = None # LinesContext

        def TRY(self):
            return self.getToken(VisualFoxpro9Parser.TRY, 0)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def ENDTRY(self):
            return self.getToken(VisualFoxpro9Parser.ENDTRY, 0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def lines(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LinesContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,i)


        def CATCH(self):
            return self.getToken(VisualFoxpro9Parser.CATCH, 0)

        def FINALLY(self):
            return self.getToken(VisualFoxpro9Parser.FINALLY, 0)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_tryStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitTryStmt"):
                return visitor.visitTryStmt(self)
            else:
                return visitor.visitChildren(self)




    def tryStmt(self):

        localctx = VisualFoxpro9Parser.TryStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_tryStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.match(VisualFoxpro9Parser.TRY)
            self.state = 452
            self.match(VisualFoxpro9Parser.NL)
            self.state = 453
            localctx.tryLines = self.lines()
            self.state = 461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.CATCH:
                self.state = 454
                self.match(VisualFoxpro9Parser.CATCH)
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.TO:
                    self.state = 455
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 456
                    self.identifier()


                self.state = 459
                self.match(VisualFoxpro9Parser.NL)
                self.state = 460
                localctx.catchLines = self.lines()


            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.FINALLY:
                self.state = 463
                self.match(VisualFoxpro9Parser.FINALLY)
                self.state = 464
                self.match(VisualFoxpro9Parser.NL)
                self.state = 465
                localctx.finallyLines = self.lines()


            self.state = 468
            self.match(VisualFoxpro9Parser.ENDTRY)
            self.state = 469
            self.lineEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BreakLoopContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.BreakLoopContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(VisualFoxpro9Parser.EXIT, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_breakLoop

        def accept(self, visitor):
            if hasattr(visitor, "visitBreakLoop"):
                return visitor.visitBreakLoop(self)
            else:
                return visitor.visitChildren(self)




    def breakLoop(self):

        localctx = VisualFoxpro9Parser.BreakLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_breakLoop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.match(VisualFoxpro9Parser.EXIT)
            self.state = 472
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContinueLoopContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ContinueLoopContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self):
            return self.getToken(VisualFoxpro9Parser.LOOP, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_continueLoop

        def accept(self, visitor):
            if hasattr(visitor, "visitContinueLoop"):
                return visitor.visitContinueLoop(self)
            else:
                return visitor.visitChildren(self)




    def continueLoop(self):

        localctx = VisualFoxpro9Parser.ContinueLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_continueLoop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.match(VisualFoxpro9Parser.LOOP)
            self.state = 475
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ControlStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ControlStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def whileStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.WhileStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IfStmtContext,0)


        def caseStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CaseStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ForStmtContext,0)


        def withStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.WithStmtContext,0)


        def scanStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScanStmtContext,0)


        def tryStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TryStmtContext,0)


        def breakLoop(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.BreakLoopContext,0)


        def continueLoop(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ContinueLoopContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_controlStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitControlStmt"):
                return visitor.visitControlStmt(self)
            else:
                return visitor.visitChildren(self)




    def controlStmt(self):

        localctx = VisualFoxpro9Parser.ControlStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_controlStmt)
        try:
            self.state = 486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 477
                self.whileStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 478
                self.ifStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 479
                self.caseStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 480
                self.forStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 481
                self.withStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 482
                self.scanStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 483
                self.tryStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 484
                self.breakLoop()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 485
                self.continueLoop()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CmdStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.CmdStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)


        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_cmdStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitCmdStmt"):
                return visitor.visitCmdStmt(self)
            else:
                return visitor.visitChildren(self)




    def cmdStmt(self):

        localctx = VisualFoxpro9Parser.CmdStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_cmdStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.cmd()
            self.state = 489
            self.lineEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CmdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.CmdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def funcDo(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDoContext,0)


        def assign(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AssignContext,0)


        def declaration(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DeclarationContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.PrintStmtContext,0)


        def waitCmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.WaitCmdContext,0)


        def filesystemCmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.FilesystemCmdContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ReturnStmtContext,0)


        def quit(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.QuitContext,0)


        def release(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ReleaseContext,0)


        def setup(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SetupContext,0)


        def otherCmds(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.OtherCmdsContext,0)


        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def complexId(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ComplexIdContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_cmd

        def accept(self, visitor):
            if hasattr(visitor, "visitCmd"):
                return visitor.visitCmd(self)
            else:
                return visitor.visitChildren(self)




    def cmd(self):

        localctx = VisualFoxpro9Parser.CmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_cmd)
        try:
            self.state = 505
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 491
                self.funcDo()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 492
                self.assign()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 493
                self.declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 494
                self.printStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 495
                self.waitCmd()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 496
                self.filesystemCmd()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 497
                self.returnStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 498
                self.quit()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 499
                self.release()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 500
                self.setup()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 501
                self.otherCmds()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 502
                self.match(VisualFoxpro9Parser.EQUALS)
                self.state = 503
                self.expr(0)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 504
                self.complexId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReleaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ReleaseContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.vartype = None # Token

        def RELEASE(self):
            return self.getToken(VisualFoxpro9Parser.RELEASE, 0)

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)

        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)


        def POPUPS(self):
            return self.getToken(VisualFoxpro9Parser.POPUPS, 0)

        def EXTENDED(self):
            return self.getToken(VisualFoxpro9Parser.EXTENDED, 0)

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_release

        def accept(self, visitor):
            if hasattr(visitor, "visitRelease"):
                return visitor.visitRelease(self)
            else:
                return visitor.visitChildren(self)




    def release(self):

        localctx = VisualFoxpro9Parser.ReleaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_release)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.match(VisualFoxpro9Parser.RELEASE)
            self.state = 518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 508
                self.match(VisualFoxpro9Parser.ALL)
                pass

            elif la_ == 2:
                self.state = 510
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 509
                    localctx.vartype = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.PROCEDURE or _la==VisualFoxpro9Parser.CLASSLIB):
                        localctx.vartype = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 512
                self.args()
                pass

            elif la_ == 3:
                self.state = 513
                self.match(VisualFoxpro9Parser.POPUPS)
                self.state = 514
                self.args()
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.EXTENDED:
                    self.state = 515
                    self.match(VisualFoxpro9Parser.EXTENDED)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OtherCmdsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.OtherCmdsContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_otherCmds

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.OtherCmdsContext, self).copyFrom(ctx)



    class PushKeyContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.PushKeyContext, self).__init__(parser)
            self.copyFrom(ctx)

        def PUSH(self):
            return self.getToken(VisualFoxpro9Parser.PUSH, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitPushKey"):
                return visitor.visitPushKey(self)
            else:
                return visitor.visitChildren(self)


    class GoRecordContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.GoRecordContext, self).__init__(parser)
            self.copyFrom(ctx)

        def GO(self):
            return self.getToken(VisualFoxpro9Parser.GO, 0)
        def GOTO(self):
            return self.getToken(VisualFoxpro9Parser.GOTO, 0)
        def TOP(self):
            return self.getToken(VisualFoxpro9Parser.TOP, 0)
        def BOTTOM(self):
            return self.getToken(VisualFoxpro9Parser.BOTTOM, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def RECORD(self):
            return self.getToken(VisualFoxpro9Parser.RECORD, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitGoRecord"):
                return visitor.visitGoRecord(self)
            else:
                return visitor.visitChildren(self)


    class ThrowErrorContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ThrowErrorContext, self).__init__(parser)
            self.copyFrom(ctx)

        def THROW(self):
            return self.getToken(VisualFoxpro9Parser.THROW, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitThrowError"):
                return visitor.visitThrowError(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.CreateTableContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(VisualFoxpro9Parser.CREATE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def arrayIndex(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArrayIndexContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArrayIndexContext,i)

        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)
        def DBF(self):
            return self.getToken(VisualFoxpro9Parser.DBF, 0)
        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)
        def FREE(self):
            return self.getToken(VisualFoxpro9Parser.FREE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCreateTable"):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class SelectContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.SelectContext, self).__init__(parser)
            self.tablename = None # SpecialExprContext
            self.fromExpr = None # SpecialExprContext
            self.whereExpr = None # ExprContext
            self.intoExpr = None # SpecialExprContext
            self.orderbyid = None # IdentifierContext
            self.copyFrom(ctx)

        def SELECT(self):
            return self.getToken(VisualFoxpro9Parser.SELECT, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def specialArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,0)

        def DISTINCT(self):
            return self.getToken(VisualFoxpro9Parser.DISTINCT, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def WHERE(self):
            return self.getToken(VisualFoxpro9Parser.WHERE, 0)
        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)
        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)
        def BY(self):
            return self.getToken(VisualFoxpro9Parser.BY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)
        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitSelect"):
                return visitor.visitSelect(self)
            else:
                return visitor.visitChildren(self)


    class LocateContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.LocateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def LOCATE(self):
            return self.getToken(VisualFoxpro9Parser.LOCATE, 0)
        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def WHILE(self):
            return self.getToken(VisualFoxpro9Parser.WHILE, 0)
        def NOOPTIMIZE(self):
            return self.getToken(VisualFoxpro9Parser.NOOPTIMIZE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitLocate"):
                return visitor.visitLocate(self)
            else:
                return visitor.visitChildren(self)


    class DefineMenuContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.DefineMenuContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def NOMARGIN(self):
            return self.getToken(VisualFoxpro9Parser.NOMARGIN, 0)
        def AT(self):
            return self.getToken(VisualFoxpro9Parser.AT, 0)
        def LINE(self):
            return self.getToken(VisualFoxpro9Parser.LINE, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)
        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefineMenu"):
                return visitor.visitDefineMenu(self)
            else:
                return visitor.visitChildren(self)


    class IndexOnContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.IndexOnContext, self).__init__(parser)
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(VisualFoxpro9Parser.INDEX, 0)
        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def COMPACT(self):
            return self.getToken(VisualFoxpro9Parser.COMPACT, 0)
        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)
        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)
        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)
        def UNIQUE(self):
            return self.getToken(VisualFoxpro9Parser.UNIQUE, 0)
        def CANDIDATE(self):
            return self.getToken(VisualFoxpro9Parser.CANDIDATE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitIndexOn"):
                return visitor.visitIndexOn(self)
            else:
                return visitor.visitChildren(self)


    class UseContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.UseContext, self).__init__(parser)
            self.workArea = None # SpecialExprContext
            self.name = None # SpecialExprContext
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(VisualFoxpro9Parser.USE, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def ALIAS(self):
            return self.getToken(VisualFoxpro9Parser.ALIAS, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def SHARED(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SHARED)
            else:
                return self.getToken(VisualFoxpro9Parser.SHARED, i)
        def EXCLUSIVE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.EXCLUSIVE)
            else:
                return self.getToken(VisualFoxpro9Parser.EXCLUSIVE, i)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitUse"):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)


    class ReplaceContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ReplaceContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REPLACE(self):
            return self.getToken(VisualFoxpro9Parser.REPLACE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def scopeClause(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScopeClauseContext,0)

        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitReplace"):
                return visitor.visitReplace(self)
            else:
                return visitor.visitChildren(self)


    class InsertContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.InsertContext, self).__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(VisualFoxpro9Parser.INSERT, 0)
        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def VALUES(self):
            return self.getToken(VisualFoxpro9Parser.VALUES, 0)
        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)

        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def MEMVAR(self):
            return self.getToken(VisualFoxpro9Parser.MEMVAR, 0)
        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)
        def specialArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitInsert"):
                return visitor.visitInsert(self)
            else:
                return visitor.visitChildren(self)


    class SumContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.SumContext, self).__init__(parser)
            self.sumExpr = None # ExprContext
            self.forExpr = None # ExprContext
            self.whileExpr = None # ExprContext
            self.toExpr = None # ExprContext
            self.copyFrom(ctx)

        def SUM(self):
            return self.getToken(VisualFoxpro9Parser.SUM, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def scopeClause(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScopeClauseContext,0)

        def FOR(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FOR)
            else:
                return self.getToken(VisualFoxpro9Parser.FOR, i)
        def WHILE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WHILE)
            else:
                return self.getToken(VisualFoxpro9Parser.WHILE, i)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def NOOPTIMIZE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOOPTIMIZE)
            else:
                return self.getToken(VisualFoxpro9Parser.NOOPTIMIZE, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitSum"):
                return visitor.visitSum(self)
            else:
                return visitor.visitChildren(self)


    class ClearStmtContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ClearStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def CLASS(self):
            return self.getToken(VisualFoxpro9Parser.CLASS, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def DEBUG(self):
            return self.getToken(VisualFoxpro9Parser.DEBUG, 0)
        def DLLS(self):
            return self.getToken(VisualFoxpro9Parser.DLLS, 0)
        def specialArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,0)

        def EVENTS(self):
            return self.getToken(VisualFoxpro9Parser.EVENTS, 0)
        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)
        def FIELDS(self):
            return self.getToken(VisualFoxpro9Parser.FIELDS, 0)
        def GETS(self):
            return self.getToken(VisualFoxpro9Parser.GETS, 0)
        def MACROS(self):
            return self.getToken(VisualFoxpro9Parser.MACROS, 0)
        def MEMORY(self):
            return self.getToken(VisualFoxpro9Parser.MEMORY, 0)
        def MENUS(self):
            return self.getToken(VisualFoxpro9Parser.MENUS, 0)
        def POPUPS(self):
            return self.getToken(VisualFoxpro9Parser.POPUPS, 0)
        def PROGRAM(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAM, 0)
        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)
        def READ(self):
            return self.getToken(VisualFoxpro9Parser.READ, 0)
        def RESOURCES(self):
            return self.getToken(VisualFoxpro9Parser.RESOURCES, 0)
        def TYPEAHEAD(self):
            return self.getToken(VisualFoxpro9Parser.TYPEAHEAD, 0)
        def WINDOWS(self):
            return self.getToken(VisualFoxpro9Parser.WINDOWS, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitClearStmt"):
                return visitor.visitClearStmt(self)
            else:
                return visitor.visitChildren(self)


    class OnKeyContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.OnKeyContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)

        def LABEL(self):
            return self.getToken(VisualFoxpro9Parser.LABEL, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitOnKey"):
                return visitor.visitOnKey(self)
            else:
                return visitor.visitChildren(self)


    class OnSelectionBarContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.OnSelectionBarContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def SELECTION(self):
            return self.getToken(VisualFoxpro9Parser.SELECTION, 0)
        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitOnSelectionBar"):
                return visitor.visitOnSelectionBar(self)
            else:
                return visitor.visitChildren(self)


    class DeactivateContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.DeactivateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.DEACTIVATE, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def parameters(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParametersContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitDeactivate"):
                return visitor.visitDeactivate(self)
            else:
                return visitor.visitChildren(self)


    class CopyToContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.CopyToContext, self).__init__(parser)
            self.copyFrom(ctx)

        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def STRUCTURE(self):
            return self.getToken(VisualFoxpro9Parser.STRUCTURE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCopyTo"):
                return visitor.visitCopyTo(self)
            else:
                return visitor.visitChildren(self)


    class ReadEventContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ReadEventContext, self).__init__(parser)
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(VisualFoxpro9Parser.READ, 0)
        def EVENTS(self):
            return self.getToken(VisualFoxpro9Parser.EVENTS, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitReadEvent"):
                return visitor.visitReadEvent(self)
            else:
                return visitor.visitChildren(self)


    class AppendFromContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.AppendFromContext, self).__init__(parser)
            self.typeExpr = None # SpecialExprContext
            self.copyFrom(ctx)

        def APPEND(self):
            return self.getToken(VisualFoxpro9Parser.APPEND, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)
        def TYPE(self):
            return self.getToken(VisualFoxpro9Parser.TYPE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitAppendFrom"):
                return visitor.visitAppendFrom(self)
            else:
                return visitor.visitChildren(self)


    class ContinueLocateContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ContinueLocateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(VisualFoxpro9Parser.CONTINUE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitContinueLocate"):
                return visitor.visitContinueLocate(self)
            else:
                return visitor.visitChildren(self)


    class ZapTableContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ZapTableContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ZAP(self):
            return self.getToken(VisualFoxpro9Parser.ZAP, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitZapTable"):
                return visitor.visitZapTable(self)
            else:
                return visitor.visitChildren(self)


    class DllDeclareContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.DllDeclareContext, self).__init__(parser)
            self.returnType = None # DatatypeContext
            self.alias = None # IdentifierContext
            self.copyFrom(ctx)

        def DECLARE(self):
            return self.getToken(VisualFoxpro9Parser.DECLARE, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)
        def dllArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DllArgsContext,0)

        def datatype(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DatatypeContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitDllDeclare"):
                return visitor.visitDllDeclare(self)
            else:
                return visitor.visitChildren(self)


    class SeekRecordContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.SeekRecordContext, self).__init__(parser)
            self.seekExpr = None # ExprContext
            self.orderExpr = None # ExprContext
            self.tagName = None # SpecialExprContext
            self.cdxFileExpr = None # SpecialExprContext
            self.idxFileExpr = None # SpecialExprContext
            self.tablenameExpr = None # SpecialExprContext
            self.copyFrom(ctx)

        def SEEK(self):
            return self.getToken(VisualFoxpro9Parser.SEEK, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)
        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)
        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)
        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitSeekRecord"):
                return visitor.visitSeekRecord(self)
            else:
                return visitor.visitChildren(self)


    class ActivateWindowContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ActivateWindowContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def WINDOW(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WINDOW)
            else:
                return self.getToken(VisualFoxpro9Parser.WINDOW, i)
        def parameters(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParametersContext,0)

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def NOSHOW(self):
            return self.getToken(VisualFoxpro9Parser.NOSHOW, 0)
        def BOTTOM(self):
            return self.getToken(VisualFoxpro9Parser.BOTTOM, 0)
        def TOP(self):
            return self.getToken(VisualFoxpro9Parser.TOP, 0)
        def SAME(self):
            return self.getToken(VisualFoxpro9Parser.SAME, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitActivateWindow"):
                return visitor.visitActivateWindow(self)
            else:
                return visitor.visitChildren(self)


    class AssertContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.AssertContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ASSERT(self):
            return self.getToken(VisualFoxpro9Parser.ASSERT, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitAssert"):
                return visitor.visitAssert(self)
            else:
                return visitor.visitChildren(self)


    class ShellRunContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ShellRunContext, self).__init__(parser)
            self.copyFrom(ctx)

        def RUN(self):
            return self.getToken(VisualFoxpro9Parser.RUN, 0)
        def EXCLAMATION(self):
            return self.getToken(VisualFoxpro9Parser.EXCLAMATION, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitShellRun"):
                return visitor.visitShellRun(self)
            else:
                return visitor.visitChildren(self)


    class GatherExprContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.GatherExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def GATHER(self):
            return self.getToken(VisualFoxpro9Parser.GATHER, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def MEMVAR(self):
            return self.getToken(VisualFoxpro9Parser.MEMVAR, 0)
        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def FIELDS(self):
            return self.getToken(VisualFoxpro9Parser.FIELDS, 0)
        def MEMO(self):
            return self.getToken(VisualFoxpro9Parser.MEMO, 0)
        def LIKE(self):
            return self.getToken(VisualFoxpro9Parser.LIKE, 0)
        def EXCEPT(self):
            return self.getToken(VisualFoxpro9Parser.EXCEPT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitGatherExpr"):
                return visitor.visitGatherExpr(self)
            else:
                return visitor.visitChildren(self)


    class CloseStmtContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.CloseStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CLOSE(self):
            return self.getToken(VisualFoxpro9Parser.CLOSE, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def DATABASES(self):
            return self.getToken(VisualFoxpro9Parser.DATABASES, 0)
        def INDEXES(self):
            return self.getToken(VisualFoxpro9Parser.INDEXES, 0)
        def TABLES(self):
            return self.getToken(VisualFoxpro9Parser.TABLES, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCloseStmt"):
                return visitor.visitCloseStmt(self)
            else:
                return visitor.visitChildren(self)


    class DefinePopupContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.DefinePopupContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def SHADOW(self):
            return self.getToken(VisualFoxpro9Parser.SHADOW, 0)
        def MARGIN(self):
            return self.getToken(VisualFoxpro9Parser.MARGIN, 0)
        def RELATIVE(self):
            return self.getToken(VisualFoxpro9Parser.RELATIVE, 0)
        def COLOR(self):
            return self.getToken(VisualFoxpro9Parser.COLOR, 0)
        def SCHEME(self):
            return self.getToken(VisualFoxpro9Parser.SCHEME, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefinePopup"):
                return visitor.visitDefinePopup(self)
            else:
                return visitor.visitChildren(self)


    class PopKeyContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.PopKeyContext, self).__init__(parser)
            self.copyFrom(ctx)

        def POP(self):
            return self.getToken(VisualFoxpro9Parser.POP, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitPopKey"):
                return visitor.visitPopKey(self)
            else:
                return visitor.visitChildren(self)


    class KeyboardContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.KeyboardContext, self).__init__(parser)
            self.copyFrom(ctx)

        def KEYBOARD(self):
            return self.getToken(VisualFoxpro9Parser.KEYBOARD, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def PLAIN(self):
            return self.getToken(VisualFoxpro9Parser.PLAIN, 0)
        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitKeyboard"):
                return visitor.visitKeyboard(self)
            else:
                return visitor.visitChildren(self)


    class ReindexContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ReindexContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REINDEX(self):
            return self.getToken(VisualFoxpro9Parser.REINDEX, 0)
        def COMPACT(self):
            return self.getToken(VisualFoxpro9Parser.COMPACT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitReindex"):
                return visitor.visitReindex(self)
            else:
                return visitor.visitChildren(self)


    class CountContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.CountContext, self).__init__(parser)
            self.forExpr = None # ExprContext
            self.whileExpr = None # ExprContext
            self.toExpr = None # ExprContext
            self.copyFrom(ctx)

        def COUNT(self):
            return self.getToken(VisualFoxpro9Parser.COUNT, 0)
        def scopeClause(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScopeClauseContext,0)

        def NOOPTIMIZE(self):
            return self.getToken(VisualFoxpro9Parser.NOOPTIMIZE, 0)
        def FOR(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FOR)
            else:
                return self.getToken(VisualFoxpro9Parser.FOR, i)
        def WHILE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WHILE)
            else:
                return self.getToken(VisualFoxpro9Parser.WHILE, i)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitCount"):
                return visitor.visitCount(self)
            else:
                return visitor.visitChildren(self)


    class SkipRecordContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.SkipRecordContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SKIPKW(self):
            return self.getToken(VisualFoxpro9Parser.SKIPKW, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitSkipRecord"):
                return visitor.visitSkipRecord(self)
            else:
                return visitor.visitChildren(self)


    class PackContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.PackContext, self).__init__(parser)
            self.workArea = None # SpecialExprContext
            self.tableName = None # SpecialExprContext
            self.copyFrom(ctx)

        def PACK(self):
            return self.getToken(VisualFoxpro9Parser.PACK, 0)
        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def MEMO(self):
            return self.getToken(VisualFoxpro9Parser.MEMO, 0)
        def DBF(self):
            return self.getToken(VisualFoxpro9Parser.DBF, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitPack"):
                return visitor.visitPack(self)
            else:
                return visitor.visitChildren(self)


    class DefinePadContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.DefinePadContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)
        def AT(self):
            return self.getToken(VisualFoxpro9Parser.AT, 0)
        def NUMBER_LITERAL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NUMBER_LITERAL)
            else:
                return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, i)
        def BEFORE(self):
            return self.getToken(VisualFoxpro9Parser.BEFORE, 0)
        def AFTER(self):
            return self.getToken(VisualFoxpro9Parser.AFTER, 0)
        def NEGOTIATE(self):
            return self.getToken(VisualFoxpro9Parser.NEGOTIATE, 0)
        def FONT(self):
            return self.getToken(VisualFoxpro9Parser.FONT, 0)
        def STYLE(self):
            return self.getToken(VisualFoxpro9Parser.STYLE, 0)
        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def MARK(self):
            return self.getToken(VisualFoxpro9Parser.MARK, 0)
        def SKIPKW(self):
            return self.getToken(VisualFoxpro9Parser.SKIPKW, 0)
        def COLOR(self):
            return self.getToken(VisualFoxpro9Parser.COLOR, 0)
        def SCHEME(self):
            return self.getToken(VisualFoxpro9Parser.SCHEME, 0)
        def STRING_LITERAL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.STRING_LITERAL)
            else:
                return self.getToken(VisualFoxpro9Parser.STRING_LITERAL, i)
        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefinePad"):
                return visitor.visitDefinePad(self)
            else:
                return visitor.visitChildren(self)


    class DefineBarContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.DefineBarContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefineBar"):
                return visitor.visitDefineBar(self)
            else:
                return visitor.visitChildren(self)


    class ActivateMenuContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ActivateMenuContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def NOWAIT(self):
            return self.getToken(VisualFoxpro9Parser.NOWAIT, 0)
        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitActivateMenu"):
                return visitor.visitActivateMenu(self)
            else:
                return visitor.visitChildren(self)


    class ReportContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ReportContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REPORT(self):
            return self.getToken(VisualFoxpro9Parser.REPORT, 0)
        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def NOEJECT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOEJECT)
            else:
                return self.getToken(VisualFoxpro9Parser.NOEJECT, i)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def PRINTER(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.PRINTER)
            else:
                return self.getToken(VisualFoxpro9Parser.PRINTER, i)
        def NOCONSOLE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOCONSOLE)
            else:
                return self.getToken(VisualFoxpro9Parser.NOCONSOLE, i)
        def PROMPT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.PROMPT)
            else:
                return self.getToken(VisualFoxpro9Parser.PROMPT, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitReport"):
                return visitor.visitReport(self)
            else:
                return visitor.visitChildren(self)


    class RaiseErrorContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.RaiseErrorContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitRaiseError"):
                return visitor.visitRaiseError(self)
            else:
                return visitor.visitChildren(self)


    class OnPadContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.OnPadContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitOnPad"):
                return visitor.visitOnPad(self)
            else:
                return visitor.visitChildren(self)


    class OnBarContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.OnBarContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitOnBar"):
                return visitor.visitOnBar(self)
            else:
                return visitor.visitChildren(self)


    class NodefaultContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.NodefaultContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NODEFAULT(self):
            return self.getToken(VisualFoxpro9Parser.NODEFAULT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitNodefault"):
                return visitor.visitNodefault(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.AlterTableContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(VisualFoxpro9Parser.ALTER, 0)
        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def ADD(self):
            return self.getToken(VisualFoxpro9Parser.ADD, 0)
        def COLUMN(self):
            return self.getToken(VisualFoxpro9Parser.COLUMN, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def arrayIndex(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArrayIndexContext,0)

        def DROP(self):
            return self.getToken(VisualFoxpro9Parser.DROP, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitAlterTable"):
                return visitor.visitAlterTable(self)
            else:
                return visitor.visitChildren(self)


    class AppendContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.AppendContext, self).__init__(parser)
            self.copyFrom(ctx)

        def APPEND(self):
            return self.getToken(VisualFoxpro9Parser.APPEND, 0)
        def BLANK(self):
            return self.getToken(VisualFoxpro9Parser.BLANK, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def NOMENU(self):
            return self.getToken(VisualFoxpro9Parser.NOMENU, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitAppend"):
                return visitor.visitAppend(self)
            else:
                return visitor.visitChildren(self)


    class ScatterExprContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ScatterExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SCATTER(self):
            return self.getToken(VisualFoxpro9Parser.SCATTER, 0)
        def MEMVAR(self):
            return self.getToken(VisualFoxpro9Parser.MEMVAR, 0)
        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def FIELDS(self):
            return self.getToken(VisualFoxpro9Parser.FIELDS, 0)
        def MEMO(self):
            return self.getToken(VisualFoxpro9Parser.MEMO, 0)
        def BLANK(self):
            return self.getToken(VisualFoxpro9Parser.BLANK, 0)
        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)
        def LIKE(self):
            return self.getToken(VisualFoxpro9Parser.LIKE, 0)
        def EXCEPT(self):
            return self.getToken(VisualFoxpro9Parser.EXCEPT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitScatterExpr"):
                return visitor.visitScatterExpr(self)
            else:
                return visitor.visitChildren(self)


    class DeleteRecordContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.DeleteRecordContext, self).__init__(parser)
            self.forExpr = None # ExprContext
            self.whileExpr = None # ExprContext
            self.inExpr = None # SpecialExprContext
            self.copyFrom(ctx)

        def RECALL(self):
            return self.getToken(VisualFoxpro9Parser.RECALL, 0)
        def DELETE(self):
            return self.getToken(VisualFoxpro9Parser.DELETE, 0)
        def scopeClause(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScopeClauseContext,0)

        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)
        def WHILE(self):
            return self.getToken(VisualFoxpro9Parser.WHILE, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def NOOPTIMIZE(self):
            return self.getToken(VisualFoxpro9Parser.NOOPTIMIZE, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitDeleteRecord"):
                return visitor.visitDeleteRecord(self)
            else:
                return visitor.visitChildren(self)


    class BrowseContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.BrowseContext, self).__init__(parser)
            self.copyFrom(ctx)

        def BROWSE(self):
            return self.getToken(VisualFoxpro9Parser.BROWSE, 0)
        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitBrowse"):
                return visitor.visitBrowse(self)
            else:
                return visitor.visitChildren(self)



    def otherCmds(self):

        localctx = VisualFoxpro9Parser.OtherCmdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_otherCmds)
        self._la = 0 # Token type
        try:
            self.state = 1193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.OnKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 520
                self.match(VisualFoxpro9Parser.ON)
                self.state = 521
                self.match(VisualFoxpro9Parser.KEY)
                self.state = 528
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 522
                    self.match(VisualFoxpro9Parser.LABEL)
                    self.state = 523
                    self.identifier()
                    self.state = 526
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.PLUS_SIGN:
                        self.state = 524
                        self.match(VisualFoxpro9Parser.PLUS_SIGN)
                        self.state = 525
                        self.identifier()




                self.state = 530
                self.cmd()
                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.PushKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 531
                self.match(VisualFoxpro9Parser.PUSH)
                self.state = 532
                self.match(VisualFoxpro9Parser.KEY)
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.CLEAR:
                    self.state = 533
                    self.match(VisualFoxpro9Parser.CLEAR)


                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.PopKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 536
                self.match(VisualFoxpro9Parser.POP)
                self.state = 537
                self.match(VisualFoxpro9Parser.KEY)
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ALL:
                    self.state = 538
                    self.match(VisualFoxpro9Parser.ALL)


                pass

            elif la_ == 4:
                localctx = VisualFoxpro9Parser.KeyboardContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 541
                self.match(VisualFoxpro9Parser.KEYBOARD)
                self.state = 542
                self.expr(0)
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.PLAIN:
                    self.state = 543
                    self.match(VisualFoxpro9Parser.PLAIN)


                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.CLEAR:
                    self.state = 546
                    self.match(VisualFoxpro9Parser.CLEAR)


                pass

            elif la_ == 5:
                localctx = VisualFoxpro9Parser.DefineMenuContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 549
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 550
                self.match(VisualFoxpro9Parser.MENU)
                self.state = 551
                self.identifier()

                self.state = 552
                self.match(VisualFoxpro9Parser.BAR)
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.AT:
                    self.state = 553
                    self.match(VisualFoxpro9Parser.AT)
                    self.state = 554
                    self.match(VisualFoxpro9Parser.LINE)
                    self.state = 555
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 558
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 564
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                    if la_ == 1:
                        self.state = 560
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                        if la_ == 1:
                            self.state = 559
                            self.match(VisualFoxpro9Parser.WINDOW)


                        self.state = 562
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 563
                        self.match(VisualFoxpro9Parser.SCREEN)
                        pass




                self.state = 569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NOMARGIN:
                    self.state = 568
                    self.match(VisualFoxpro9Parser.NOMARGIN)


                pass

            elif la_ == 6:
                localctx = VisualFoxpro9Parser.DefinePadContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 571
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 572
                self.match(VisualFoxpro9Parser.PAD)
                self.state = 573
                self.identifier()
                self.state = 574
                self.match(VisualFoxpro9Parser.OF)
                self.state = 575
                self.expr(0)
                self.state = 576
                self.match(VisualFoxpro9Parser.PROMPT)
                self.state = 577
                self.expr(0)
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.AT:
                    self.state = 578
                    self.match(VisualFoxpro9Parser.AT)
                    self.state = 579
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                    self.state = 580
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 581
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                self.state = 588
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.BEFORE]:
                    self.state = 584
                    self.match(VisualFoxpro9Parser.BEFORE)
                    self.state = 585
                    self.identifier()
                    pass
                elif token in [VisualFoxpro9Parser.AFTER]:
                    self.state = 586
                    self.match(VisualFoxpro9Parser.AFTER)
                    self.state = 587
                    self.identifier()
                    pass
                elif token in [VisualFoxpro9Parser.EOF, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.NL]:
                    pass
                else:
                    pass
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NEGOTIATE:
                    self.state = 590
                    self.match(VisualFoxpro9Parser.NEGOTIATE)
                    self.state = 591
                    self.identifier()
                    self.state = 594
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.COMMA:
                        self.state = 592
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 593
                        self.identifier()




                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.FONT:
                    self.state = 598
                    self.match(VisualFoxpro9Parser.FONT)
                    self.state = 599
                    self.identifier()
                    self.state = 610
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.COMMA:
                        self.state = 600
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 601
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 608
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.COMMA:
                            self.state = 602
                            self.match(VisualFoxpro9Parser.COMMA)
                            self.state = 603
                            self.match(VisualFoxpro9Parser.STRING_LITERAL)
                            self.state = 606
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==VisualFoxpro9Parser.COMMA:
                                self.state = 604
                                self.match(VisualFoxpro9Parser.COMMA)
                                self.state = 605
                                self.identifier()








                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.STYLE:
                    self.state = 614
                    self.match(VisualFoxpro9Parser.STYLE)
                    self.state = 615
                    self.identifier()


                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MESSAGE:
                    self.state = 618
                    self.match(VisualFoxpro9Parser.MESSAGE)
                    self.state = 619
                    self.expr(0)


                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.KEY:
                    self.state = 622
                    self.match(VisualFoxpro9Parser.KEY)
                    self.state = 623
                    self.identifier()
                    self.state = 626
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.PLUS_SIGN:
                        self.state = 624
                        self.match(VisualFoxpro9Parser.PLUS_SIGN)
                        self.state = 625
                        self.identifier()


                    self.state = 630
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.COMMA:
                        self.state = 628
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 629
                        self.match(VisualFoxpro9Parser.STRING_LITERAL)




                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MARK:
                    self.state = 634
                    self.match(VisualFoxpro9Parser.MARK)
                    self.state = 635
                    self.identifier()


                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.SKIPKW:
                    self.state = 638
                    self.match(VisualFoxpro9Parser.SKIPKW)
                    self.state = 641
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.FOR:
                        self.state = 639
                        self.match(VisualFoxpro9Parser.FOR)
                        self.state = 640
                        self.expr(0)




                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COLOR:
                    self.state = 645
                    self.match(VisualFoxpro9Parser.COLOR)
                    self.state = 646
                    self.match(VisualFoxpro9Parser.SCHEME)
                    self.state = 647
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                pass

            elif la_ == 7:
                localctx = VisualFoxpro9Parser.DefinePopupContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 650
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 651
                self.match(VisualFoxpro9Parser.POPUP)
                self.state = 652
                self.identifier()
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.SHADOW:
                    self.state = 653
                    self.match(VisualFoxpro9Parser.SHADOW)


                self.state = 657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MARGIN:
                    self.state = 656
                    self.match(VisualFoxpro9Parser.MARGIN)


                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.RELATIVE:
                    self.state = 659
                    self.match(VisualFoxpro9Parser.RELATIVE)


                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COLOR:
                    self.state = 662
                    self.match(VisualFoxpro9Parser.COLOR)
                    self.state = 663
                    self.match(VisualFoxpro9Parser.SCHEME)
                    self.state = 664
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                pass

            elif la_ == 8:
                localctx = VisualFoxpro9Parser.DefineBarContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 667
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 668
                self.match(VisualFoxpro9Parser.BAR)
                self.state = 669
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                self.state = 670
                self.match(VisualFoxpro9Parser.OF)
                self.state = 671
                self.identifier()
                self.state = 672
                self.match(VisualFoxpro9Parser.PROMPT)
                self.state = 673
                self.expr(0)
                self.state = 676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MESSAGE:
                    self.state = 674
                    self.match(VisualFoxpro9Parser.MESSAGE)
                    self.state = 675
                    self.expr(0)


                pass

            elif la_ == 9:
                localctx = VisualFoxpro9Parser.OnPadContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 678
                self.match(VisualFoxpro9Parser.ON)
                self.state = 679
                self.match(VisualFoxpro9Parser.PAD)
                self.state = 680
                self.identifier()
                self.state = 681
                self.match(VisualFoxpro9Parser.OF)
                self.state = 682
                self.identifier()
                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ACTIVATE:
                    self.state = 683
                    self.match(VisualFoxpro9Parser.ACTIVATE)
                    self.state = 684
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.MENU or _la==VisualFoxpro9Parser.POPUP):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 685
                    self.identifier()


                pass

            elif la_ == 10:
                localctx = VisualFoxpro9Parser.OnBarContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 688
                self.match(VisualFoxpro9Parser.ON)
                self.state = 689
                self.match(VisualFoxpro9Parser.BAR)
                self.state = 690
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                self.state = 691
                self.match(VisualFoxpro9Parser.OF)
                self.state = 692
                self.identifier()
                self.state = 696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ACTIVATE:
                    self.state = 693
                    self.match(VisualFoxpro9Parser.ACTIVATE)
                    self.state = 694
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.MENU or _la==VisualFoxpro9Parser.POPUP):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 695
                    self.identifier()


                pass

            elif la_ == 11:
                localctx = VisualFoxpro9Parser.OnSelectionBarContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 698
                self.match(VisualFoxpro9Parser.ON)
                self.state = 699
                self.match(VisualFoxpro9Parser.SELECTION)
                self.state = 700
                self.match(VisualFoxpro9Parser.BAR)
                self.state = 701
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                self.state = 702
                self.match(VisualFoxpro9Parser.OF)
                self.state = 703
                self.identifier()
                self.state = 704
                self.cmd()
                pass

            elif la_ == 12:
                localctx = VisualFoxpro9Parser.ActivateWindowContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 706
                self.match(VisualFoxpro9Parser.ACTIVATE)
                self.state = 707
                self.match(VisualFoxpro9Parser.WINDOW)
                self.state = 710
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 708
                    self.parameters()
                    pass

                elif la_ == 2:
                    self.state = 709
                    self.match(VisualFoxpro9Parser.ALL)
                    pass


                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 712
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 718
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                    if la_ == 1:
                        self.state = 714
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                        if la_ == 1:
                            self.state = 713
                            self.match(VisualFoxpro9Parser.WINDOW)


                        self.state = 716
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 717
                        self.match(VisualFoxpro9Parser.SCREEN)
                        pass




                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & ((1 << (VisualFoxpro9Parser.TOP - 126)) | (1 << (VisualFoxpro9Parser.BOTTOM - 126)) | (1 << (VisualFoxpro9Parser.SAME - 126)))) != 0):
                    self.state = 722
                    _la = self._input.LA(1)
                    if not(((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & ((1 << (VisualFoxpro9Parser.TOP - 126)) | (1 << (VisualFoxpro9Parser.BOTTOM - 126)) | (1 << (VisualFoxpro9Parser.SAME - 126)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NOSHOW:
                    self.state = 725
                    self.match(VisualFoxpro9Parser.NOSHOW)


                pass

            elif la_ == 13:
                localctx = VisualFoxpro9Parser.ActivateMenuContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 728
                self.match(VisualFoxpro9Parser.ACTIVATE)
                self.state = 729
                self.match(VisualFoxpro9Parser.MENU)
                self.state = 730
                self.identifier()
                self.state = 732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NOWAIT:
                    self.state = 731
                    self.match(VisualFoxpro9Parser.NOWAIT)


                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.PAD:
                    self.state = 734
                    self.match(VisualFoxpro9Parser.PAD)
                    self.state = 735
                    self.identifier()


                pass

            elif la_ == 14:
                localctx = VisualFoxpro9Parser.DeactivateContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 738
                self.match(VisualFoxpro9Parser.DEACTIVATE)
                self.state = 739
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.MENU or _la==VisualFoxpro9Parser.POPUP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 742
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 740
                    self.match(VisualFoxpro9Parser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 741
                    self.parameters()
                    pass


                pass

            elif la_ == 15:
                localctx = VisualFoxpro9Parser.RaiseErrorContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 744
                self.match(VisualFoxpro9Parser.ERROR)
                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.STRING_LITERAL) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.QUIT) | (1 << VisualFoxpro9Parser.EXIT) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.RELEASE - 64)) | (1 << (VisualFoxpro9Parser.RECYCLE - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.TABLE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.FUNCTION - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 64)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.GO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.RECORD - 128)) | (1 << (VisualFoxpro9Parser.CLOSE - 128)) | (1 << (VisualFoxpro9Parser.APPEND - 128)) | (1 << (VisualFoxpro9Parser.BLANK - 128)) | (1 << (VisualFoxpro9Parser.NOMENU - 128)) | (1 << (VisualFoxpro9Parser.CASE - 128)) | (1 << (VisualFoxpro9Parser.ENDCASE - 128)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.POPUPS - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.UNDEFINE - 192)) | (1 << (VisualFoxpro9Parser.IFDEF - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 192)) | (1 << (VisualFoxpro9Parser.ENDWITH - 192)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 192)) | (1 << (VisualFoxpro9Parser.ALIAS - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.T - 192)) | (1 << (VisualFoxpro9Parser.F - 192)) | (1 << (VisualFoxpro9Parser.Y - 192)) | (1 << (VisualFoxpro9Parser.N - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.DATABASES - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROTECTED - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.INSERT - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.MEMVAR - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.SCATTER - 256)) | (1 << (VisualFoxpro9Parser.GATHER - 256)) | (1 << (VisualFoxpro9Parser.EXCEPT - 256)) | (1 << (VisualFoxpro9Parser.LIKE - 256)) | (1 << (VisualFoxpro9Parser.FIELDS - 256)) | (1 << (VisualFoxpro9Parser.ALTER - 256)) | (1 << (VisualFoxpro9Parser.COLUMN - 256)) | (1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 745
                    self.expr(0)


                pass

            elif la_ == 16:
                localctx = VisualFoxpro9Parser.ThrowErrorContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 748
                self.match(VisualFoxpro9Parser.THROW)
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.STRING_LITERAL) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.QUIT) | (1 << VisualFoxpro9Parser.EXIT) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.RELEASE - 64)) | (1 << (VisualFoxpro9Parser.RECYCLE - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.TABLE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.FUNCTION - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 64)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.GO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.RECORD - 128)) | (1 << (VisualFoxpro9Parser.CLOSE - 128)) | (1 << (VisualFoxpro9Parser.APPEND - 128)) | (1 << (VisualFoxpro9Parser.BLANK - 128)) | (1 << (VisualFoxpro9Parser.NOMENU - 128)) | (1 << (VisualFoxpro9Parser.CASE - 128)) | (1 << (VisualFoxpro9Parser.ENDCASE - 128)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.POPUPS - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.UNDEFINE - 192)) | (1 << (VisualFoxpro9Parser.IFDEF - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 192)) | (1 << (VisualFoxpro9Parser.ENDWITH - 192)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 192)) | (1 << (VisualFoxpro9Parser.ALIAS - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.T - 192)) | (1 << (VisualFoxpro9Parser.F - 192)) | (1 << (VisualFoxpro9Parser.Y - 192)) | (1 << (VisualFoxpro9Parser.N - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.DATABASES - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROTECTED - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.INSERT - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.MEMVAR - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.SCATTER - 256)) | (1 << (VisualFoxpro9Parser.GATHER - 256)) | (1 << (VisualFoxpro9Parser.EXCEPT - 256)) | (1 << (VisualFoxpro9Parser.LIKE - 256)) | (1 << (VisualFoxpro9Parser.FIELDS - 256)) | (1 << (VisualFoxpro9Parser.ALTER - 256)) | (1 << (VisualFoxpro9Parser.COLUMN - 256)) | (1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 749
                    self.expr(0)


                pass

            elif la_ == 17:
                localctx = VisualFoxpro9Parser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 752
                self.match(VisualFoxpro9Parser.CREATE)
                self.state = 753
                _la = self._input.LA(1)
                if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (VisualFoxpro9Parser.TABLE - 67)) | (1 << (VisualFoxpro9Parser.DBF - 67)) | (1 << (VisualFoxpro9Parser.CURSOR - 67)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 754
                self.specialExpr()
                self.state = 756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.FREE:
                    self.state = 755
                    self.match(VisualFoxpro9Parser.FREE)


                self.state = 758
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 759
                self.identifier()
                self.state = 760
                self.identifier()
                self.state = 761
                self.arrayIndex()
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.COMMA:
                    self.state = 762
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 763
                    self.identifier()
                    self.state = 764
                    self.identifier()
                    self.state = 765
                    self.arrayIndex()
                    self.state = 771
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 772
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass

            elif la_ == 18:
                localctx = VisualFoxpro9Parser.AlterTableContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 774
                self.match(VisualFoxpro9Parser.ALTER)
                self.state = 775
                self.match(VisualFoxpro9Parser.TABLE)
                self.state = 776
                self.specialExpr()
                self.state = 786
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ADD]:
                    self.state = 777
                    self.match(VisualFoxpro9Parser.ADD)
                    self.state = 778
                    self.match(VisualFoxpro9Parser.COLUMN)
                    self.state = 779
                    self.identifier()
                    self.state = 780
                    self.identifier()
                    self.state = 781
                    self.arrayIndex()
                    pass
                elif token in [VisualFoxpro9Parser.DROP]:
                    self.state = 783
                    self.match(VisualFoxpro9Parser.DROP)
                    self.state = 784
                    self.match(VisualFoxpro9Parser.COLUMN)
                    self.state = 785
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                localctx = VisualFoxpro9Parser.SelectContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 788
                self.match(VisualFoxpro9Parser.SELECT)
                self.state = 815
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 789
                    localctx.tablename = self.specialExpr()
                    pass

                elif la_ == 2:
                    self.state = 791
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                    if la_ == 1:
                        self.state = 790
                        self.match(VisualFoxpro9Parser.DISTINCT)


                    self.state = 795
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.HASH, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.STRING_LITERAL, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.QUIT, VisualFoxpro9Parser.EXIT, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.PUBLIC, VisualFoxpro9Parser.PRIVATE, VisualFoxpro9Parser.LOCAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.FUNCTION, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.ENDFUNC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.LPARAMETERS, VisualFoxpro9Parser.LPARAMETER, VisualFoxpro9Parser.PARAMETERS, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.GO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.POPUPS, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.T, VisualFoxpro9Parser.F, VisualFoxpro9Parser.Y, VisualFoxpro9Parser.N, VisualFoxpro9Parser.NODEFAULT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.DATABASES, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.PROTECTED, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.ID]:
                        self.state = 793
                        self.specialArgs()
                        pass
                    elif token in [VisualFoxpro9Parser.ASTERISK]:
                        self.state = 794
                        self.match(VisualFoxpro9Parser.ASTERISK)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.FROM:
                        self.state = 797
                        self.match(VisualFoxpro9Parser.FROM)
                        self.state = 798
                        localctx.fromExpr = self.specialExpr()


                    self.state = 803
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.WHERE:
                        self.state = 801
                        self.match(VisualFoxpro9Parser.WHERE)
                        self.state = 802
                        localctx.whereExpr = self.expr(0)


                    self.state = 808
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.INTO:
                        self.state = 805
                        self.match(VisualFoxpro9Parser.INTO)
                        self.state = 806
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.TABLE or _la==VisualFoxpro9Parser.CURSOR):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 807
                        localctx.intoExpr = self.specialExpr()


                    self.state = 813
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ORDER:
                        self.state = 810
                        self.match(VisualFoxpro9Parser.ORDER)
                        self.state = 811
                        self.match(VisualFoxpro9Parser.BY)
                        self.state = 812
                        localctx.orderbyid = self.identifier()


                    pass


                pass

            elif la_ == 20:
                localctx = VisualFoxpro9Parser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 817
                self.match(VisualFoxpro9Parser.USE)
                self.state = 819
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 818
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.SHARED or _la==VisualFoxpro9Parser.EXCLUSIVE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 828
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 821
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 822
                    localctx.workArea = self.specialExpr()

                elif la_ == 2:
                    self.state = 823
                    localctx.name = self.specialExpr()
                    self.state = 824
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 825
                    localctx.workArea = self.specialExpr()

                elif la_ == 3:
                    self.state = 827
                    localctx.name = self.specialExpr()


                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.SHARED or _la==VisualFoxpro9Parser.EXCLUSIVE:
                    self.state = 830
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.SHARED or _la==VisualFoxpro9Parser.EXCLUSIVE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ALIAS:
                    self.state = 833
                    self.match(VisualFoxpro9Parser.ALIAS)
                    self.state = 834
                    self.identifier()


                pass

            elif la_ == 21:
                localctx = VisualFoxpro9Parser.LocateContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 837
                self.match(VisualFoxpro9Parser.LOCATE)
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.FOR:
                    self.state = 838
                    self.match(VisualFoxpro9Parser.FOR)
                    self.state = 839
                    self.expr(0)


                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.WHILE:
                    self.state = 842
                    self.match(VisualFoxpro9Parser.WHILE)
                    self.state = 843
                    self.expr(0)


                self.state = 847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NOOPTIMIZE:
                    self.state = 846
                    self.match(VisualFoxpro9Parser.NOOPTIMIZE)


                pass

            elif la_ == 22:
                localctx = VisualFoxpro9Parser.ContinueLocateContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 849
                self.match(VisualFoxpro9Parser.CONTINUE)
                pass

            elif la_ == 23:
                localctx = VisualFoxpro9Parser.ReplaceContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 850
                self.match(VisualFoxpro9Parser.REPLACE)
                self.state = 852
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 851
                    self.scopeClause()


                self.state = 854
                self.specialExpr()
                self.state = 855
                self.match(VisualFoxpro9Parser.WITH)
                self.state = 856
                self.expr(0)
                self.state = 859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.FOR:
                    self.state = 857
                    self.match(VisualFoxpro9Parser.FOR)
                    self.state = 858
                    self.expr(0)


                pass

            elif la_ == 24:
                localctx = VisualFoxpro9Parser.IndexOnContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 861
                self.match(VisualFoxpro9Parser.INDEX)
                self.state = 862
                self.match(VisualFoxpro9Parser.ON)
                self.state = 863
                self.specialExpr()
                self.state = 864
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.TO or _la==VisualFoxpro9Parser.TAG):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 865
                self.specialExpr()
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COMPACT:
                    self.state = 866
                    self.match(VisualFoxpro9Parser.COMPACT)


                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING:
                    self.state = 869
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.UNIQUE or _la==VisualFoxpro9Parser.CANDIDATE:
                    self.state = 872
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.UNIQUE or _la==VisualFoxpro9Parser.CANDIDATE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 875
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass

            elif la_ == 25:
                localctx = VisualFoxpro9Parser.CountContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 878
                self.match(VisualFoxpro9Parser.COUNT)
                self.state = 880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (VisualFoxpro9Parser.ALL - 122)) | (1 << (VisualFoxpro9Parser.RECORD - 122)) | (1 << (VisualFoxpro9Parser.NEXT - 122)) | (1 << (VisualFoxpro9Parser.REST - 122)))) != 0):
                    self.state = 879
                    self.scopeClause()


                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 41)) & ~0x3f) == 0 and ((1 << (_la - 41)) & ((1 << (VisualFoxpro9Parser.TO - 41)) | (1 << (VisualFoxpro9Parser.FOR - 41)) | (1 << (VisualFoxpro9Parser.WHILE - 41)))) != 0):
                    self.state = 888
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.FOR]:
                        self.state = 882
                        self.match(VisualFoxpro9Parser.FOR)
                        self.state = 883
                        localctx.forExpr = self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.WHILE]:
                        self.state = 884
                        self.match(VisualFoxpro9Parser.WHILE)
                        self.state = 885
                        localctx.whileExpr = self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.TO]:
                        self.state = 886
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 887
                        localctx.toExpr = self.expr(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 892
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NOOPTIMIZE:
                    self.state = 893
                    self.match(VisualFoxpro9Parser.NOOPTIMIZE)


                pass

            elif la_ == 26:
                localctx = VisualFoxpro9Parser.SumContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 896
                self.match(VisualFoxpro9Parser.SUM)
                self.state = 898
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 897
                    self.scopeClause()


                self.state = 900
                localctx.sumExpr = self.expr(0)
                self.state = 908 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 908
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.FOR]:
                        self.state = 901
                        self.match(VisualFoxpro9Parser.FOR)
                        self.state = 902
                        localctx.forExpr = self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.WHILE]:
                        self.state = 903
                        self.match(VisualFoxpro9Parser.WHILE)
                        self.state = 904
                        localctx.whileExpr = self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.TO]:
                        self.state = 905
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 906
                        localctx.toExpr = self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.NOOPTIMIZE]:
                        self.state = 907
                        self.match(VisualFoxpro9Parser.NOOPTIMIZE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 910 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 41)) & ~0x3f) == 0 and ((1 << (_la - 41)) & ((1 << (VisualFoxpro9Parser.TO - 41)) | (1 << (VisualFoxpro9Parser.FOR - 41)) | (1 << (VisualFoxpro9Parser.WHILE - 41)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 41)))) != 0)):
                        break

                pass

            elif la_ == 27:
                localctx = VisualFoxpro9Parser.DeleteRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 912
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.DELETE or _la==VisualFoxpro9Parser.RECALL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (VisualFoxpro9Parser.ALL - 122)) | (1 << (VisualFoxpro9Parser.RECORD - 122)) | (1 << (VisualFoxpro9Parser.NEXT - 122)) | (1 << (VisualFoxpro9Parser.REST - 122)))) != 0):
                    self.state = 913
                    self.scopeClause()


                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.FOR:
                    self.state = 916
                    self.match(VisualFoxpro9Parser.FOR)
                    self.state = 917
                    localctx.forExpr = self.expr(0)


                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.WHILE:
                    self.state = 920
                    self.match(VisualFoxpro9Parser.WHILE)
                    self.state = 921
                    localctx.whileExpr = self.expr(0)


                self.state = 930
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 924
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 925
                    localctx.inExpr = self.specialExpr()
                    self.state = 926
                    self.match(VisualFoxpro9Parser.NOOPTIMIZE)

                elif la_ == 2:
                    self.state = 928
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 929
                    localctx.inExpr = self.specialExpr()


                pass

            elif la_ == 28:
                localctx = VisualFoxpro9Parser.AppendFromContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 932
                self.match(VisualFoxpro9Parser.APPEND)
                self.state = 933
                self.match(VisualFoxpro9Parser.FROM)
                self.state = 941
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                if la_ == 1:
                    self.state = 934
                    self.match(VisualFoxpro9Parser.ARRAY)
                    self.state = 935
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 936
                    self.specialExpr()
                    self.state = 937
                    self.match(VisualFoxpro9Parser.FOR)
                    self.state = 938
                    self.expr(0)
                    pass

                elif la_ == 3:
                    self.state = 940
                    self.specialExpr()
                    pass


                self.state = 945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.TYPE:
                    self.state = 943
                    self.match(VisualFoxpro9Parser.TYPE)
                    self.state = 944
                    localctx.typeExpr = self.specialExpr()


                pass

            elif la_ == 29:
                localctx = VisualFoxpro9Parser.AppendContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 947
                self.match(VisualFoxpro9Parser.APPEND)
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.BLANK:
                    self.state = 948
                    self.match(VisualFoxpro9Parser.BLANK)


                self.state = 957
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                if la_ == 1:
                    self.state = 951
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 952
                    self.specialExpr()
                    self.state = 953
                    self.match(VisualFoxpro9Parser.NOMENU)

                elif la_ == 2:
                    self.state = 955
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 956
                    self.specialExpr()


                pass

            elif la_ == 30:
                localctx = VisualFoxpro9Parser.InsertContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 959
                self.match(VisualFoxpro9Parser.INSERT)
                self.state = 960
                self.match(VisualFoxpro9Parser.INTO)
                self.state = 961
                self.specialExpr()
                self.state = 981
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.FROM]:
                    self.state = 962
                    self.match(VisualFoxpro9Parser.FROM)
                    self.state = 968
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.ARRAY]:
                        self.state = 963
                        self.match(VisualFoxpro9Parser.ARRAY)
                        self.state = 964
                        self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.MEMVAR]:
                        self.state = 965
                        self.match(VisualFoxpro9Parser.MEMVAR)
                        pass
                    elif token in [VisualFoxpro9Parser.NAME]:
                        self.state = 966
                        self.match(VisualFoxpro9Parser.NAME)
                        self.state = 967
                        self.expr(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.VALUES]:
                    self.state = 974
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.LEFTPAREN:
                        self.state = 970
                        self.match(VisualFoxpro9Parser.LEFTPAREN)
                        self.state = 971
                        self.specialArgs()
                        self.state = 972
                        self.match(VisualFoxpro9Parser.RIGHTPAREN)


                    self.state = 976
                    self.match(VisualFoxpro9Parser.VALUES)
                    self.state = 977
                    self.match(VisualFoxpro9Parser.LEFTPAREN)
                    self.state = 978
                    self.args()
                    self.state = 979
                    self.match(VisualFoxpro9Parser.RIGHTPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 31:
                localctx = VisualFoxpro9Parser.SkipRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 983
                self.match(VisualFoxpro9Parser.SKIPKW)
                self.state = 984
                self.expr(0)
                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 985
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 986
                    self.specialExpr()


                pass

            elif la_ == 32:
                localctx = VisualFoxpro9Parser.PackContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 989
                self.match(VisualFoxpro9Parser.PACK)
                self.state = 1003
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 990
                    self.match(VisualFoxpro9Parser.DATABASE)
                    pass

                elif la_ == 2:
                    self.state = 992
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                    if la_ == 1:
                        self.state = 991
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.DBF or _la==VisualFoxpro9Parser.MEMO):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1001
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                    if la_ == 1:
                        self.state = 994
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 995
                        localctx.workArea = self.specialExpr()

                    elif la_ == 2:
                        self.state = 996
                        localctx.tableName = self.specialExpr()
                        self.state = 997
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 998
                        localctx.workArea = self.specialExpr()

                    elif la_ == 3:
                        self.state = 1000
                        localctx.tableName = self.specialExpr()


                    pass


                pass

            elif la_ == 33:
                localctx = VisualFoxpro9Parser.ReindexContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 1005
                self.match(VisualFoxpro9Parser.REINDEX)
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COMPACT:
                    self.state = 1006
                    self.match(VisualFoxpro9Parser.COMPACT)


                pass

            elif la_ == 34:
                localctx = VisualFoxpro9Parser.SeekRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 1009
                self.match(VisualFoxpro9Parser.SEEK)
                self.state = 1010
                localctx.seekExpr = self.expr(0)
                self.state = 1025
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                if la_ == 1:
                    self.state = 1020
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                    if la_ == 1:
                        self.state = 1011
                        self.match(VisualFoxpro9Parser.ORDER)
                        self.state = 1012
                        localctx.orderExpr = self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 1013
                        self.match(VisualFoxpro9Parser.TAG)
                        self.state = 1014
                        localctx.tagName = self.specialExpr()
                        self.state = 1017
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.OF:
                            self.state = 1015
                            self.match(VisualFoxpro9Parser.OF)
                            self.state = 1016
                            localctx.cdxFileExpr = self.specialExpr()


                        pass

                    elif la_ == 3:
                        self.state = 1019
                        localctx.idxFileExpr = self.specialExpr()
                        pass


                    self.state = 1023
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING:
                        self.state = 1022
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1027
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1028
                    localctx.tablenameExpr = self.specialExpr()


                pass

            elif la_ == 35:
                localctx = VisualFoxpro9Parser.GoRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 1031
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.GOTO or _la==VisualFoxpro9Parser.GO):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1038
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                if la_ == 1:
                    self.state = 1032
                    self.match(VisualFoxpro9Parser.TOP)
                    pass

                elif la_ == 2:
                    self.state = 1033
                    self.match(VisualFoxpro9Parser.BOTTOM)
                    pass

                elif la_ == 3:
                    self.state = 1035
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                    if la_ == 1:
                        self.state = 1034
                        self.match(VisualFoxpro9Parser.RECORD)


                    self.state = 1037
                    self.expr(0)
                    pass


                self.state = 1042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1040
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1041
                    self.specialExpr()


                pass

            elif la_ == 36:
                localctx = VisualFoxpro9Parser.CopyToContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 1044
                self.match(VisualFoxpro9Parser.COPY)
                self.state = 1046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.STRUCTURE:
                    self.state = 1045
                    self.match(VisualFoxpro9Parser.STRUCTURE)


                self.state = 1048
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1049
                self.specialExpr()
                pass

            elif la_ == 37:
                localctx = VisualFoxpro9Parser.ZapTableContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 1050
                self.match(VisualFoxpro9Parser.ZAP)
                self.state = 1053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1051
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1052
                    self.specialExpr()


                pass

            elif la_ == 38:
                localctx = VisualFoxpro9Parser.BrowseContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 1055
                self.match(VisualFoxpro9Parser.BROWSE)
                self.state = 1059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.STRING_LITERAL) | (1 << VisualFoxpro9Parser.LINECOMMENT) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.QUIT) | (1 << VisualFoxpro9Parser.EXIT) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.RELEASE - 64)) | (1 << (VisualFoxpro9Parser.RECYCLE - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.TABLE - 64)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.FUNCTION - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 64)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.GO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.RECORD - 128)) | (1 << (VisualFoxpro9Parser.CLOSE - 128)) | (1 << (VisualFoxpro9Parser.APPEND - 128)) | (1 << (VisualFoxpro9Parser.BLANK - 128)) | (1 << (VisualFoxpro9Parser.NOMENU - 128)) | (1 << (VisualFoxpro9Parser.CASE - 128)) | (1 << (VisualFoxpro9Parser.ENDCASE - 128)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.POPUPS - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.UNDEFINE - 192)) | (1 << (VisualFoxpro9Parser.IFDEF - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 192)) | (1 << (VisualFoxpro9Parser.ENDWITH - 192)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 192)) | (1 << (VisualFoxpro9Parser.ALIAS - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.T - 192)) | (1 << (VisualFoxpro9Parser.F - 192)) | (1 << (VisualFoxpro9Parser.Y - 192)) | (1 << (VisualFoxpro9Parser.N - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.DATABASES - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.LOOP - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROTECTED - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.INSERT - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.MEMVAR - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.CHDIR - 256)) | (1 << (VisualFoxpro9Parser.SCATTER - 256)) | (1 << (VisualFoxpro9Parser.GATHER - 256)) | (1 << (VisualFoxpro9Parser.EXCEPT - 256)) | (1 << (VisualFoxpro9Parser.LIKE - 256)) | (1 << (VisualFoxpro9Parser.FIELDS - 256)) | (1 << (VisualFoxpro9Parser.ALTER - 256)) | (1 << (VisualFoxpro9Parser.COLUMN - 256)) | (1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.WINDOWS - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 1056
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1061
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 39:
                localctx = VisualFoxpro9Parser.ScatterExprContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 1062
                self.match(VisualFoxpro9Parser.SCATTER)
                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.FIELDS:
                    self.state = 1063
                    self.match(VisualFoxpro9Parser.FIELDS)
                    self.state = 1065
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                    if la_ == 1:
                        self.state = 1064
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.EXCEPT or _la==VisualFoxpro9Parser.LIKE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1067
                    self.expr(0)


                self.state = 1071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MEMO:
                    self.state = 1070
                    self.match(VisualFoxpro9Parser.MEMO)


                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.BLANK:
                    self.state = 1073
                    self.match(VisualFoxpro9Parser.BLANK)


                self.state = 1084
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.MEMVAR]:
                    self.state = 1076
                    self.match(VisualFoxpro9Parser.MEMVAR)
                    pass
                elif token in [VisualFoxpro9Parser.NAME]:
                    self.state = 1077
                    self.match(VisualFoxpro9Parser.NAME)
                    self.state = 1078
                    self.expr(0)
                    self.state = 1080
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ADDITIVE:
                        self.state = 1079
                        self.match(VisualFoxpro9Parser.ADDITIVE)


                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1082
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1083
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 40:
                localctx = VisualFoxpro9Parser.GatherExprContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 1086
                self.match(VisualFoxpro9Parser.GATHER)
                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.FIELDS:
                    self.state = 1087
                    self.match(VisualFoxpro9Parser.FIELDS)
                    self.state = 1089
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                    if la_ == 1:
                        self.state = 1088
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.EXCEPT or _la==VisualFoxpro9Parser.LIKE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1091
                    self.expr(0)


                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MEMO:
                    self.state = 1094
                    self.match(VisualFoxpro9Parser.MEMO)


                self.state = 1097
                self.match(VisualFoxpro9Parser.FROM)
                self.state = 1102
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1098
                    self.match(VisualFoxpro9Parser.MEMVAR)
                    pass

                elif la_ == 2:
                    self.state = 1099
                    self.match(VisualFoxpro9Parser.NAME)
                    self.state = 1100
                    self.expr(0)
                    pass

                elif la_ == 3:
                    self.state = 1101
                    self.expr(0)
                    pass


                pass

            elif la_ == 41:
                localctx = VisualFoxpro9Parser.CloseStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 1104
                self.match(VisualFoxpro9Parser.CLOSE)
                self.state = 1110
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.DATABASES, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES]:
                    self.state = 1105
                    _la = self._input.LA(1)
                    if not(((((_la - 237)) & ~0x3f) == 0 and ((1 << (_la - 237)) & ((1 << (VisualFoxpro9Parser.DATABASES - 237)) | (1 << (VisualFoxpro9Parser.TABLES - 237)) | (1 << (VisualFoxpro9Parser.INDEXES - 237)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1107
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ALL:
                        self.state = 1106
                        self.match(VisualFoxpro9Parser.ALL)


                    pass
                elif token in [VisualFoxpro9Parser.ALL]:
                    self.state = 1109
                    self.match(VisualFoxpro9Parser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 42:
                localctx = VisualFoxpro9Parser.ReadEventContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 1112
                self.match(VisualFoxpro9Parser.READ)
                self.state = 1113
                self.match(VisualFoxpro9Parser.EVENTS)
                pass

            elif la_ == 43:
                localctx = VisualFoxpro9Parser.ClearStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 1114
                self.match(VisualFoxpro9Parser.CLEAR)
                self.state = 1141
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ALL]:
                    self.state = 1115
                    self.match(VisualFoxpro9Parser.ALL)
                    pass
                elif token in [VisualFoxpro9Parser.CLASS]:
                    self.state = 1116
                    self.match(VisualFoxpro9Parser.CLASS)
                    self.state = 1117
                    self.expr(0)
                    pass
                elif token in [VisualFoxpro9Parser.CLASSLIB]:
                    self.state = 1118
                    self.match(VisualFoxpro9Parser.CLASSLIB)
                    self.state = 1119
                    self.specialExpr()
                    pass
                elif token in [VisualFoxpro9Parser.DEBUG]:
                    self.state = 1120
                    self.match(VisualFoxpro9Parser.DEBUG)
                    pass
                elif token in [VisualFoxpro9Parser.DLLS]:
                    self.state = 1121
                    self.match(VisualFoxpro9Parser.DLLS)
                    self.state = 1122
                    self.specialArgs()
                    pass
                elif token in [VisualFoxpro9Parser.EVENTS]:
                    self.state = 1123
                    self.match(VisualFoxpro9Parser.EVENTS)
                    pass
                elif token in [VisualFoxpro9Parser.ERROR]:
                    self.state = 1124
                    self.match(VisualFoxpro9Parser.ERROR)
                    pass
                elif token in [VisualFoxpro9Parser.FIELDS]:
                    self.state = 1125
                    self.match(VisualFoxpro9Parser.FIELDS)
                    pass
                elif token in [VisualFoxpro9Parser.GETS]:
                    self.state = 1126
                    self.match(VisualFoxpro9Parser.GETS)
                    pass
                elif token in [VisualFoxpro9Parser.MACROS]:
                    self.state = 1127
                    self.match(VisualFoxpro9Parser.MACROS)
                    pass
                elif token in [VisualFoxpro9Parser.MEMORY]:
                    self.state = 1128
                    self.match(VisualFoxpro9Parser.MEMORY)
                    pass
                elif token in [VisualFoxpro9Parser.MENUS]:
                    self.state = 1129
                    self.match(VisualFoxpro9Parser.MENUS)
                    pass
                elif token in [VisualFoxpro9Parser.POPUPS]:
                    self.state = 1130
                    self.match(VisualFoxpro9Parser.POPUPS)
                    pass
                elif token in [VisualFoxpro9Parser.PROGRAM]:
                    self.state = 1131
                    self.match(VisualFoxpro9Parser.PROGRAM)
                    pass
                elif token in [VisualFoxpro9Parser.PROMPT]:
                    self.state = 1132
                    self.match(VisualFoxpro9Parser.PROMPT)
                    pass
                elif token in [VisualFoxpro9Parser.READ]:
                    self.state = 1133
                    self.match(VisualFoxpro9Parser.READ)
                    self.state = 1135
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ALL:
                        self.state = 1134
                        self.match(VisualFoxpro9Parser.ALL)


                    pass
                elif token in [VisualFoxpro9Parser.RESOURCES]:
                    self.state = 1137
                    self.match(VisualFoxpro9Parser.RESOURCES)
                    self.state = 1138
                    self.expr(0)
                    pass
                elif token in [VisualFoxpro9Parser.TYPEAHEAD]:
                    self.state = 1139
                    self.match(VisualFoxpro9Parser.TYPEAHEAD)
                    pass
                elif token in [VisualFoxpro9Parser.WINDOWS]:
                    self.state = 1140
                    self.match(VisualFoxpro9Parser.WINDOWS)
                    pass
                elif token in [VisualFoxpro9Parser.EOF, VisualFoxpro9Parser.NL]:
                    pass
                else:
                    pass
                pass

            elif la_ == 44:
                localctx = VisualFoxpro9Parser.ReportContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 1143
                self.match(VisualFoxpro9Parser.REPORT)
                self.state = 1144
                self.match(VisualFoxpro9Parser.FORM)
                self.state = 1147
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.QUESTION]:
                    self.state = 1145
                    self.match(VisualFoxpro9Parser.QUESTION)
                    pass
                elif token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.HASH, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.STRING_LITERAL, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.QUIT, VisualFoxpro9Parser.EXIT, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.PUBLIC, VisualFoxpro9Parser.PRIVATE, VisualFoxpro9Parser.LOCAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.FUNCTION, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.ENDFUNC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.LPARAMETERS, VisualFoxpro9Parser.LPARAMETER, VisualFoxpro9Parser.PARAMETERS, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.GO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.POPUPS, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.T, VisualFoxpro9Parser.F, VisualFoxpro9Parser.Y, VisualFoxpro9Parser.N, VisualFoxpro9Parser.NODEFAULT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.DATABASES, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.PROTECTED, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.ID]:
                    self.state = 1146
                    self.specialExpr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.TO or _la==VisualFoxpro9Parser.NOEJECT or _la==VisualFoxpro9Parser.NOCONSOLE:
                    self.state = 1156
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.NOEJECT]:
                        self.state = 1149
                        self.match(VisualFoxpro9Parser.NOEJECT)
                        pass
                    elif token in [VisualFoxpro9Parser.TO]:
                        self.state = 1150
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1151
                        self.match(VisualFoxpro9Parser.PRINTER)
                        self.state = 1153
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.PROMPT:
                            self.state = 1152
                            self.match(VisualFoxpro9Parser.PROMPT)


                        pass
                    elif token in [VisualFoxpro9Parser.NOCONSOLE]:
                        self.state = 1155
                        self.match(VisualFoxpro9Parser.NOCONSOLE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1160
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 45:
                localctx = VisualFoxpro9Parser.DllDeclareContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 1161
                self.match(VisualFoxpro9Parser.DECLARE)
                self.state = 1163
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1162
                    localctx.returnType = self.datatype()


                self.state = 1165
                self.identifier()
                self.state = 1166
                self.match(VisualFoxpro9Parser.IN)
                self.state = 1167
                self.specialExpr()
                self.state = 1170
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 1168
                    self.match(VisualFoxpro9Parser.AS)
                    self.state = 1169
                    localctx.alias = self.identifier()


                self.state = 1173
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (VisualFoxpro9Parser.ASSERT - 39)) | (1 << (VisualFoxpro9Parser.TO - 39)) | (1 << (VisualFoxpro9Parser.DO - 39)) | (1 << (VisualFoxpro9Parser.IN - 39)) | (1 << (VisualFoxpro9Parser.AS - 39)) | (1 << (VisualFoxpro9Parser.IF - 39)) | (1 << (VisualFoxpro9Parser.ELIF - 39)) | (1 << (VisualFoxpro9Parser.ELSE - 39)) | (1 << (VisualFoxpro9Parser.ENDIF - 39)) | (1 << (VisualFoxpro9Parser.ON - 39)) | (1 << (VisualFoxpro9Parser.OFF - 39)) | (1 << (VisualFoxpro9Parser.ERROR - 39)) | (1 << (VisualFoxpro9Parser.QUIT - 39)) | (1 << (VisualFoxpro9Parser.EXIT - 39)) | (1 << (VisualFoxpro9Parser.WITH - 39)) | (1 << (VisualFoxpro9Parser.STORE - 39)) | (1 << (VisualFoxpro9Parser.PUBLIC - 39)) | (1 << (VisualFoxpro9Parser.PRIVATE - 39)) | (1 << (VisualFoxpro9Parser.LOCAL - 39)) | (1 << (VisualFoxpro9Parser.ARRAY - 39)) | (1 << (VisualFoxpro9Parser.DELETE - 39)) | (1 << (VisualFoxpro9Parser.RECALL - 39)) | (1 << (VisualFoxpro9Parser.FILE - 39)) | (1 << (VisualFoxpro9Parser.SET - 39)) | (1 << (VisualFoxpro9Parser.RELEASE - 39)) | (1 << (VisualFoxpro9Parser.RECYCLE - 39)) | (1 << (VisualFoxpro9Parser.CREATE - 39)) | (1 << (VisualFoxpro9Parser.TABLE - 39)) | (1 << (VisualFoxpro9Parser.DBF - 39)) | (1 << (VisualFoxpro9Parser.NAME - 39)) | (1 << (VisualFoxpro9Parser.FREE - 39)) | (1 << (VisualFoxpro9Parser.SELECT - 39)) | (1 << (VisualFoxpro9Parser.USE - 39)) | (1 << (VisualFoxpro9Parser.READ - 39)) | (1 << (VisualFoxpro9Parser.EVENTS - 39)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 39)) | (1 << (VisualFoxpro9Parser.CLEAR - 39)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 39)) | (1 << (VisualFoxpro9Parser.FUNCTION - 39)) | (1 << (VisualFoxpro9Parser.ENDPROC - 39)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 39)) | (1 << (VisualFoxpro9Parser.DEFINE - 39)) | (1 << (VisualFoxpro9Parser.CLASS - 39)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 39)) | (1 << (VisualFoxpro9Parser.LOCATE - 39)) | (1 << (VisualFoxpro9Parser.CONTINUE - 39)) | (1 << (VisualFoxpro9Parser.FOR - 39)) | (1 << (VisualFoxpro9Parser.ENDFOR - 39)) | (1 << (VisualFoxpro9Parser.WHILE - 39)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 39)) | (1 << (VisualFoxpro9Parser.STATUS - 39)) | (1 << (VisualFoxpro9Parser.BAR - 39)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 39)) | (1 << (VisualFoxpro9Parser.CURSOR - 39)) | (1 << (VisualFoxpro9Parser.REFRESH - 39)) | (1 << (VisualFoxpro9Parser.BELL - 39)) | (1 << (VisualFoxpro9Parser.CENTURY - 39)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 39)) | (1 << (VisualFoxpro9Parser.DATE - 39)) | (1 << (VisualFoxpro9Parser.ADD - 39)) | (1 << (VisualFoxpro9Parser.OBJECT - 39)))) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (VisualFoxpro9Parser.REPLACE - 103)) | (1 << (VisualFoxpro9Parser.LIBRARY - 103)) | (1 << (VisualFoxpro9Parser.SHARED - 103)) | (1 << (VisualFoxpro9Parser.WAIT - 103)) | (1 << (VisualFoxpro9Parser.WINDOW - 103)) | (1 << (VisualFoxpro9Parser.NOWAIT - 103)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 103)) | (1 << (VisualFoxpro9Parser.NOTIFY - 103)) | (1 << (VisualFoxpro9Parser.ENDDO - 103)) | (1 << (VisualFoxpro9Parser.DECLARE - 103)) | (1 << (VisualFoxpro9Parser.ERASE - 103)) | (1 << (VisualFoxpro9Parser.SYSMENU - 103)) | (1 << (VisualFoxpro9Parser.CLOCK - 103)) | (1 << (VisualFoxpro9Parser.RETURN - 103)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 103)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 103)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 103)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 103)) | (1 << (VisualFoxpro9Parser.EXACT - 103)) | (1 << (VisualFoxpro9Parser.ALL - 103)) | (1 << (VisualFoxpro9Parser.COUNT - 103)) | (1 << (VisualFoxpro9Parser.GOTO - 103)) | (1 << (VisualFoxpro9Parser.GO - 103)) | (1 << (VisualFoxpro9Parser.TOP - 103)) | (1 << (VisualFoxpro9Parser.BOTTOM - 103)) | (1 << (VisualFoxpro9Parser.RECORD - 103)) | (1 << (VisualFoxpro9Parser.CLOSE - 103)) | (1 << (VisualFoxpro9Parser.APPEND - 103)) | (1 << (VisualFoxpro9Parser.BLANK - 103)) | (1 << (VisualFoxpro9Parser.NOMENU - 103)) | (1 << (VisualFoxpro9Parser.CASE - 103)) | (1 << (VisualFoxpro9Parser.ENDCASE - 103)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 103)) | (1 << (VisualFoxpro9Parser.FROM - 103)) | (1 << (VisualFoxpro9Parser.REPORT - 103)) | (1 << (VisualFoxpro9Parser.FORM - 103)) | (1 << (VisualFoxpro9Parser.NOEJECT - 103)) | (1 << (VisualFoxpro9Parser.PRINTER - 103)) | (1 << (VisualFoxpro9Parser.PROMPT - 103)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 103)) | (1 << (VisualFoxpro9Parser.DB4 - 103)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 103)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 103)) | (1 << (VisualFoxpro9Parser.COPY - 103)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 103)) | (1 << (VisualFoxpro9Parser.DELETED - 103)) | (1 << (VisualFoxpro9Parser.SUM - 103)) | (1 << (VisualFoxpro9Parser.DISTINCT - 103)) | (1 << (VisualFoxpro9Parser.INTO - 103)) | (1 << (VisualFoxpro9Parser.NEXT - 103)) | (1 << (VisualFoxpro9Parser.REST - 103)) | (1 << (VisualFoxpro9Parser.SKIPKW - 103)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 103)) | (1 << (VisualFoxpro9Parser.NEAR - 103)) | (1 << (VisualFoxpro9Parser.MKDIR - 103)) | (1 << (VisualFoxpro9Parser.RMDIR - 103)) | (1 << (VisualFoxpro9Parser.KEY - 103)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 103)) | (1 << (VisualFoxpro9Parser.LABEL - 103)) | (1 << (VisualFoxpro9Parser.PLAIN - 103)) | (1 << (VisualFoxpro9Parser.MENU - 103)) | (1 << (VisualFoxpro9Parser.AT - 103)) | (1 << (VisualFoxpro9Parser.LINE - 103)) | (1 << (VisualFoxpro9Parser.SCREEN - 103)))) != 0) or ((((_la - 167)) & ~0x3f) == 0 and ((1 << (_la - 167)) & ((1 << (VisualFoxpro9Parser.NOMARGIN - 167)) | (1 << (VisualFoxpro9Parser.PAD - 167)) | (1 << (VisualFoxpro9Parser.OF - 167)) | (1 << (VisualFoxpro9Parser.COLOR - 167)) | (1 << (VisualFoxpro9Parser.SCHEME - 167)) | (1 << (VisualFoxpro9Parser.BEFORE - 167)) | (1 << (VisualFoxpro9Parser.AFTER - 167)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 167)) | (1 << (VisualFoxpro9Parser.FONT - 167)) | (1 << (VisualFoxpro9Parser.STYLE - 167)) | (1 << (VisualFoxpro9Parser.MARK - 167)) | (1 << (VisualFoxpro9Parser.MESSAGE - 167)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 167)) | (1 << (VisualFoxpro9Parser.POPUP - 167)) | (1 << (VisualFoxpro9Parser.POPUPS - 167)) | (1 << (VisualFoxpro9Parser.EXTENDED - 167)) | (1 << (VisualFoxpro9Parser.SHADOW - 167)) | (1 << (VisualFoxpro9Parser.MARGIN - 167)) | (1 << (VisualFoxpro9Parser.RELATIVE - 167)) | (1 << (VisualFoxpro9Parser.SELECTION - 167)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 167)) | (1 << (VisualFoxpro9Parser.SAME - 167)) | (1 << (VisualFoxpro9Parser.NOSHOW - 167)) | (1 << (VisualFoxpro9Parser.STEP - 167)) | (1 << (VisualFoxpro9Parser.THEN - 167)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 167)) | (1 << (VisualFoxpro9Parser.IFDEF - 167)) | (1 << (VisualFoxpro9Parser.PUSH - 167)) | (1 << (VisualFoxpro9Parser.POP - 167)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 167)) | (1 << (VisualFoxpro9Parser.ENDWITH - 167)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 167)) | (1 << (VisualFoxpro9Parser.ALIAS - 167)) | (1 << (VisualFoxpro9Parser.ORDER - 167)) | (1 << (VisualFoxpro9Parser.SEEK - 167)) | (1 << (VisualFoxpro9Parser.WHERE - 167)) | (1 << (VisualFoxpro9Parser.FILTER - 167)) | (1 << (VisualFoxpro9Parser.RENAME - 167)) | (1 << (VisualFoxpro9Parser.INCLUDE - 167)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 167)) | (1 << (VisualFoxpro9Parser.BY - 167)) | (1 << (VisualFoxpro9Parser.UNIQUE - 167)) | (1 << (VisualFoxpro9Parser.INDEX - 167)) | (1 << (VisualFoxpro9Parser.TAG - 167)) | (1 << (VisualFoxpro9Parser.COMPACT - 167)) | (1 << (VisualFoxpro9Parser.ASCENDING - 167)) | (1 << (VisualFoxpro9Parser.DESCENDING - 167)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 167)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 167)) | (1 << (VisualFoxpro9Parser.DIMENSION - 167)) | (1 << (VisualFoxpro9Parser.NOT - 167)) | (1 << (VisualFoxpro9Parser.AND - 167)) | (1 << (VisualFoxpro9Parser.OR - 167)) | (1 << (VisualFoxpro9Parser.SCAN - 167)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 167)) | (1 << (VisualFoxpro9Parser.NULL - 167)) | (1 << (VisualFoxpro9Parser.T - 167)) | (1 << (VisualFoxpro9Parser.F - 167)) | (1 << (VisualFoxpro9Parser.Y - 167)) | (1 << (VisualFoxpro9Parser.N - 167)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 167)) | (1 << (VisualFoxpro9Parser.DLLS - 167)) | (1 << (VisualFoxpro9Parser.MACROS - 167)) | (1 << (VisualFoxpro9Parser.NUMBER - 167)))) != 0) or ((((_la - 231)) & ~0x3f) == 0 and ((1 << (_la - 231)) & ((1 << (VisualFoxpro9Parser.ZAP - 231)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 231)) | (1 << (VisualFoxpro9Parser.DEFAULT - 231)) | (1 << (VisualFoxpro9Parser.SAVE - 231)) | (1 << (VisualFoxpro9Parser.NOSAVE - 231)) | (1 << (VisualFoxpro9Parser.DATABASE - 231)) | (1 << (VisualFoxpro9Parser.DATABASES - 231)) | (1 << (VisualFoxpro9Parser.TABLES - 231)) | (1 << (VisualFoxpro9Parser.INDEXES - 231)) | (1 << (VisualFoxpro9Parser.PACK - 231)) | (1 << (VisualFoxpro9Parser.REINDEX - 231)) | (1 << (VisualFoxpro9Parser.PROGRAM - 231)) | (1 << (VisualFoxpro9Parser.PROTECTED - 231)) | (1 << (VisualFoxpro9Parser.THROW - 231)) | (1 << (VisualFoxpro9Parser.EACH - 231)) | (1 << (VisualFoxpro9Parser.CAST - 231)) | (1 << (VisualFoxpro9Parser.RUN - 231)) | (1 << (VisualFoxpro9Parser.TRY - 231)) | (1 << (VisualFoxpro9Parser.CATCH - 231)) | (1 << (VisualFoxpro9Parser.FINALLY - 231)) | (1 << (VisualFoxpro9Parser.ENDTRY - 231)) | (1 << (VisualFoxpro9Parser.BROWSE - 231)) | (1 << (VisualFoxpro9Parser.INSERT - 231)) | (1 << (VisualFoxpro9Parser.VALUES - 231)) | (1 << (VisualFoxpro9Parser.MEMVAR - 231)) | (1 << (VisualFoxpro9Parser.TYPE - 231)) | (1 << (VisualFoxpro9Parser.SCATTER - 231)) | (1 << (VisualFoxpro9Parser.GATHER - 231)) | (1 << (VisualFoxpro9Parser.EXCEPT - 231)) | (1 << (VisualFoxpro9Parser.LIKE - 231)) | (1 << (VisualFoxpro9Parser.FIELDS - 231)) | (1 << (VisualFoxpro9Parser.ALTER - 231)) | (1 << (VisualFoxpro9Parser.COLUMN - 231)) | (1 << (VisualFoxpro9Parser.DROP - 231)) | (1 << (VisualFoxpro9Parser.ID - 231)))) != 0):
                    self.state = 1172
                    self.dllArgs()


                pass

            elif la_ == 46:
                localctx = VisualFoxpro9Parser.NodefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 1175
                self.match(VisualFoxpro9Parser.NODEFAULT)
                pass

            elif la_ == 47:
                localctx = VisualFoxpro9Parser.ShellRunContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 1176
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.EXCLAMATION or _la==VisualFoxpro9Parser.RUN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1179
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1177
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    self.state = 1178
                    self.identifier()


                self.state = 1184
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.STRING_LITERAL) | (1 << VisualFoxpro9Parser.LINECOMMENT) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.QUIT) | (1 << VisualFoxpro9Parser.EXIT) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.RELEASE - 64)) | (1 << (VisualFoxpro9Parser.RECYCLE - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.TABLE - 64)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.FUNCTION - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 64)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.GO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.RECORD - 128)) | (1 << (VisualFoxpro9Parser.CLOSE - 128)) | (1 << (VisualFoxpro9Parser.APPEND - 128)) | (1 << (VisualFoxpro9Parser.BLANK - 128)) | (1 << (VisualFoxpro9Parser.NOMENU - 128)) | (1 << (VisualFoxpro9Parser.CASE - 128)) | (1 << (VisualFoxpro9Parser.ENDCASE - 128)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.POPUPS - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.UNDEFINE - 192)) | (1 << (VisualFoxpro9Parser.IFDEF - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 192)) | (1 << (VisualFoxpro9Parser.ENDWITH - 192)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 192)) | (1 << (VisualFoxpro9Parser.ALIAS - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.T - 192)) | (1 << (VisualFoxpro9Parser.F - 192)) | (1 << (VisualFoxpro9Parser.Y - 192)) | (1 << (VisualFoxpro9Parser.N - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.DATABASES - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.LOOP - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROTECTED - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.INSERT - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.MEMVAR - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.CHDIR - 256)) | (1 << (VisualFoxpro9Parser.SCATTER - 256)) | (1 << (VisualFoxpro9Parser.GATHER - 256)) | (1 << (VisualFoxpro9Parser.EXCEPT - 256)) | (1 << (VisualFoxpro9Parser.LIKE - 256)) | (1 << (VisualFoxpro9Parser.FIELDS - 256)) | (1 << (VisualFoxpro9Parser.ALTER - 256)) | (1 << (VisualFoxpro9Parser.COLUMN - 256)) | (1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.WINDOWS - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 1181
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1186
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 48:
                localctx = VisualFoxpro9Parser.AssertContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 1187
                self.match(VisualFoxpro9Parser.ASSERT)
                self.state = 1188
                self.expr(0)
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MESSAGE:
                    self.state = 1189
                    self.match(VisualFoxpro9Parser.MESSAGE)
                    self.state = 1190
                    self.expr(0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DllArgsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DllArgsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def dllArg(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.DllArgContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.DllArgContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_dllArgs

        def accept(self, visitor):
            if hasattr(visitor, "visitDllArgs"):
                return visitor.visitDllArgs(self)
            else:
                return visitor.visitChildren(self)




    def dllArgs(self):

        localctx = VisualFoxpro9Parser.DllArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_dllArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1195
            self.dllArg()
            self.state = 1200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.COMMA:
                self.state = 1196
                self.match(VisualFoxpro9Parser.COMMA)
                self.state = 1197
                self.dllArg()
                self.state = 1202
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DllArgContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DllArgContext, self).__init__(parent, invokingState)
            self.parser = parser

        def datatype(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DatatypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_dllArg

        def accept(self, visitor):
            if hasattr(visitor, "visitDllArg"):
                return visitor.visitDllArg(self)
            else:
                return visitor.visitChildren(self)




    def dllArg(self):

        localctx = VisualFoxpro9Parser.DllArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_dllArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self.datatype()
            self.state = 1205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.COMMERCIALAT:
                self.state = 1204
                self.match(VisualFoxpro9Parser.COMMERCIALAT)


            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (VisualFoxpro9Parser.ASSERT - 39)) | (1 << (VisualFoxpro9Parser.TO - 39)) | (1 << (VisualFoxpro9Parser.DO - 39)) | (1 << (VisualFoxpro9Parser.IN - 39)) | (1 << (VisualFoxpro9Parser.AS - 39)) | (1 << (VisualFoxpro9Parser.IF - 39)) | (1 << (VisualFoxpro9Parser.ELIF - 39)) | (1 << (VisualFoxpro9Parser.ELSE - 39)) | (1 << (VisualFoxpro9Parser.ENDIF - 39)) | (1 << (VisualFoxpro9Parser.ON - 39)) | (1 << (VisualFoxpro9Parser.OFF - 39)) | (1 << (VisualFoxpro9Parser.ERROR - 39)) | (1 << (VisualFoxpro9Parser.QUIT - 39)) | (1 << (VisualFoxpro9Parser.EXIT - 39)) | (1 << (VisualFoxpro9Parser.WITH - 39)) | (1 << (VisualFoxpro9Parser.STORE - 39)) | (1 << (VisualFoxpro9Parser.PUBLIC - 39)) | (1 << (VisualFoxpro9Parser.PRIVATE - 39)) | (1 << (VisualFoxpro9Parser.LOCAL - 39)) | (1 << (VisualFoxpro9Parser.ARRAY - 39)) | (1 << (VisualFoxpro9Parser.DELETE - 39)) | (1 << (VisualFoxpro9Parser.RECALL - 39)) | (1 << (VisualFoxpro9Parser.FILE - 39)) | (1 << (VisualFoxpro9Parser.SET - 39)) | (1 << (VisualFoxpro9Parser.RELEASE - 39)) | (1 << (VisualFoxpro9Parser.RECYCLE - 39)) | (1 << (VisualFoxpro9Parser.CREATE - 39)) | (1 << (VisualFoxpro9Parser.TABLE - 39)) | (1 << (VisualFoxpro9Parser.DBF - 39)) | (1 << (VisualFoxpro9Parser.NAME - 39)) | (1 << (VisualFoxpro9Parser.FREE - 39)) | (1 << (VisualFoxpro9Parser.SELECT - 39)) | (1 << (VisualFoxpro9Parser.USE - 39)) | (1 << (VisualFoxpro9Parser.READ - 39)) | (1 << (VisualFoxpro9Parser.EVENTS - 39)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 39)) | (1 << (VisualFoxpro9Parser.CLEAR - 39)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 39)) | (1 << (VisualFoxpro9Parser.FUNCTION - 39)) | (1 << (VisualFoxpro9Parser.ENDPROC - 39)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 39)) | (1 << (VisualFoxpro9Parser.DEFINE - 39)) | (1 << (VisualFoxpro9Parser.CLASS - 39)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 39)) | (1 << (VisualFoxpro9Parser.LOCATE - 39)) | (1 << (VisualFoxpro9Parser.CONTINUE - 39)) | (1 << (VisualFoxpro9Parser.FOR - 39)) | (1 << (VisualFoxpro9Parser.ENDFOR - 39)) | (1 << (VisualFoxpro9Parser.WHILE - 39)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 39)) | (1 << (VisualFoxpro9Parser.STATUS - 39)) | (1 << (VisualFoxpro9Parser.BAR - 39)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 39)) | (1 << (VisualFoxpro9Parser.CURSOR - 39)) | (1 << (VisualFoxpro9Parser.REFRESH - 39)) | (1 << (VisualFoxpro9Parser.BELL - 39)) | (1 << (VisualFoxpro9Parser.CENTURY - 39)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 39)) | (1 << (VisualFoxpro9Parser.DATE - 39)) | (1 << (VisualFoxpro9Parser.ADD - 39)) | (1 << (VisualFoxpro9Parser.OBJECT - 39)))) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (VisualFoxpro9Parser.REPLACE - 103)) | (1 << (VisualFoxpro9Parser.LIBRARY - 103)) | (1 << (VisualFoxpro9Parser.SHARED - 103)) | (1 << (VisualFoxpro9Parser.WAIT - 103)) | (1 << (VisualFoxpro9Parser.WINDOW - 103)) | (1 << (VisualFoxpro9Parser.NOWAIT - 103)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 103)) | (1 << (VisualFoxpro9Parser.NOTIFY - 103)) | (1 << (VisualFoxpro9Parser.ENDDO - 103)) | (1 << (VisualFoxpro9Parser.DECLARE - 103)) | (1 << (VisualFoxpro9Parser.ERASE - 103)) | (1 << (VisualFoxpro9Parser.SYSMENU - 103)) | (1 << (VisualFoxpro9Parser.CLOCK - 103)) | (1 << (VisualFoxpro9Parser.RETURN - 103)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 103)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 103)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 103)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 103)) | (1 << (VisualFoxpro9Parser.EXACT - 103)) | (1 << (VisualFoxpro9Parser.ALL - 103)) | (1 << (VisualFoxpro9Parser.COUNT - 103)) | (1 << (VisualFoxpro9Parser.GOTO - 103)) | (1 << (VisualFoxpro9Parser.GO - 103)) | (1 << (VisualFoxpro9Parser.TOP - 103)) | (1 << (VisualFoxpro9Parser.BOTTOM - 103)) | (1 << (VisualFoxpro9Parser.RECORD - 103)) | (1 << (VisualFoxpro9Parser.CLOSE - 103)) | (1 << (VisualFoxpro9Parser.APPEND - 103)) | (1 << (VisualFoxpro9Parser.BLANK - 103)) | (1 << (VisualFoxpro9Parser.NOMENU - 103)) | (1 << (VisualFoxpro9Parser.CASE - 103)) | (1 << (VisualFoxpro9Parser.ENDCASE - 103)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 103)) | (1 << (VisualFoxpro9Parser.FROM - 103)) | (1 << (VisualFoxpro9Parser.REPORT - 103)) | (1 << (VisualFoxpro9Parser.FORM - 103)) | (1 << (VisualFoxpro9Parser.NOEJECT - 103)) | (1 << (VisualFoxpro9Parser.PRINTER - 103)) | (1 << (VisualFoxpro9Parser.PROMPT - 103)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 103)) | (1 << (VisualFoxpro9Parser.DB4 - 103)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 103)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 103)) | (1 << (VisualFoxpro9Parser.COPY - 103)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 103)) | (1 << (VisualFoxpro9Parser.DELETED - 103)) | (1 << (VisualFoxpro9Parser.SUM - 103)) | (1 << (VisualFoxpro9Parser.DISTINCT - 103)) | (1 << (VisualFoxpro9Parser.INTO - 103)) | (1 << (VisualFoxpro9Parser.NEXT - 103)) | (1 << (VisualFoxpro9Parser.REST - 103)) | (1 << (VisualFoxpro9Parser.SKIPKW - 103)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 103)) | (1 << (VisualFoxpro9Parser.NEAR - 103)) | (1 << (VisualFoxpro9Parser.MKDIR - 103)) | (1 << (VisualFoxpro9Parser.RMDIR - 103)) | (1 << (VisualFoxpro9Parser.KEY - 103)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 103)) | (1 << (VisualFoxpro9Parser.LABEL - 103)) | (1 << (VisualFoxpro9Parser.PLAIN - 103)) | (1 << (VisualFoxpro9Parser.MENU - 103)) | (1 << (VisualFoxpro9Parser.AT - 103)) | (1 << (VisualFoxpro9Parser.LINE - 103)) | (1 << (VisualFoxpro9Parser.SCREEN - 103)))) != 0) or ((((_la - 167)) & ~0x3f) == 0 and ((1 << (_la - 167)) & ((1 << (VisualFoxpro9Parser.NOMARGIN - 167)) | (1 << (VisualFoxpro9Parser.PAD - 167)) | (1 << (VisualFoxpro9Parser.OF - 167)) | (1 << (VisualFoxpro9Parser.COLOR - 167)) | (1 << (VisualFoxpro9Parser.SCHEME - 167)) | (1 << (VisualFoxpro9Parser.BEFORE - 167)) | (1 << (VisualFoxpro9Parser.AFTER - 167)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 167)) | (1 << (VisualFoxpro9Parser.FONT - 167)) | (1 << (VisualFoxpro9Parser.STYLE - 167)) | (1 << (VisualFoxpro9Parser.MARK - 167)) | (1 << (VisualFoxpro9Parser.MESSAGE - 167)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 167)) | (1 << (VisualFoxpro9Parser.POPUP - 167)) | (1 << (VisualFoxpro9Parser.POPUPS - 167)) | (1 << (VisualFoxpro9Parser.EXTENDED - 167)) | (1 << (VisualFoxpro9Parser.SHADOW - 167)) | (1 << (VisualFoxpro9Parser.MARGIN - 167)) | (1 << (VisualFoxpro9Parser.RELATIVE - 167)) | (1 << (VisualFoxpro9Parser.SELECTION - 167)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 167)) | (1 << (VisualFoxpro9Parser.SAME - 167)) | (1 << (VisualFoxpro9Parser.NOSHOW - 167)) | (1 << (VisualFoxpro9Parser.STEP - 167)) | (1 << (VisualFoxpro9Parser.THEN - 167)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 167)) | (1 << (VisualFoxpro9Parser.IFDEF - 167)) | (1 << (VisualFoxpro9Parser.PUSH - 167)) | (1 << (VisualFoxpro9Parser.POP - 167)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 167)) | (1 << (VisualFoxpro9Parser.ENDWITH - 167)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 167)) | (1 << (VisualFoxpro9Parser.ALIAS - 167)) | (1 << (VisualFoxpro9Parser.ORDER - 167)) | (1 << (VisualFoxpro9Parser.SEEK - 167)) | (1 << (VisualFoxpro9Parser.WHERE - 167)) | (1 << (VisualFoxpro9Parser.FILTER - 167)) | (1 << (VisualFoxpro9Parser.RENAME - 167)) | (1 << (VisualFoxpro9Parser.INCLUDE - 167)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 167)) | (1 << (VisualFoxpro9Parser.BY - 167)) | (1 << (VisualFoxpro9Parser.UNIQUE - 167)) | (1 << (VisualFoxpro9Parser.INDEX - 167)) | (1 << (VisualFoxpro9Parser.TAG - 167)) | (1 << (VisualFoxpro9Parser.COMPACT - 167)) | (1 << (VisualFoxpro9Parser.ASCENDING - 167)) | (1 << (VisualFoxpro9Parser.DESCENDING - 167)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 167)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 167)) | (1 << (VisualFoxpro9Parser.DIMENSION - 167)) | (1 << (VisualFoxpro9Parser.NOT - 167)) | (1 << (VisualFoxpro9Parser.AND - 167)) | (1 << (VisualFoxpro9Parser.OR - 167)) | (1 << (VisualFoxpro9Parser.SCAN - 167)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 167)) | (1 << (VisualFoxpro9Parser.NULL - 167)) | (1 << (VisualFoxpro9Parser.T - 167)) | (1 << (VisualFoxpro9Parser.F - 167)) | (1 << (VisualFoxpro9Parser.Y - 167)) | (1 << (VisualFoxpro9Parser.N - 167)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 167)) | (1 << (VisualFoxpro9Parser.DLLS - 167)) | (1 << (VisualFoxpro9Parser.MACROS - 167)) | (1 << (VisualFoxpro9Parser.NUMBER - 167)))) != 0) or ((((_la - 231)) & ~0x3f) == 0 and ((1 << (_la - 231)) & ((1 << (VisualFoxpro9Parser.ZAP - 231)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 231)) | (1 << (VisualFoxpro9Parser.DEFAULT - 231)) | (1 << (VisualFoxpro9Parser.SAVE - 231)) | (1 << (VisualFoxpro9Parser.NOSAVE - 231)) | (1 << (VisualFoxpro9Parser.DATABASE - 231)) | (1 << (VisualFoxpro9Parser.DATABASES - 231)) | (1 << (VisualFoxpro9Parser.TABLES - 231)) | (1 << (VisualFoxpro9Parser.INDEXES - 231)) | (1 << (VisualFoxpro9Parser.PACK - 231)) | (1 << (VisualFoxpro9Parser.REINDEX - 231)) | (1 << (VisualFoxpro9Parser.PROGRAM - 231)) | (1 << (VisualFoxpro9Parser.PROTECTED - 231)) | (1 << (VisualFoxpro9Parser.THROW - 231)) | (1 << (VisualFoxpro9Parser.EACH - 231)) | (1 << (VisualFoxpro9Parser.CAST - 231)) | (1 << (VisualFoxpro9Parser.RUN - 231)) | (1 << (VisualFoxpro9Parser.TRY - 231)) | (1 << (VisualFoxpro9Parser.CATCH - 231)) | (1 << (VisualFoxpro9Parser.FINALLY - 231)) | (1 << (VisualFoxpro9Parser.ENDTRY - 231)) | (1 << (VisualFoxpro9Parser.BROWSE - 231)) | (1 << (VisualFoxpro9Parser.INSERT - 231)) | (1 << (VisualFoxpro9Parser.VALUES - 231)) | (1 << (VisualFoxpro9Parser.MEMVAR - 231)) | (1 << (VisualFoxpro9Parser.TYPE - 231)) | (1 << (VisualFoxpro9Parser.SCATTER - 231)) | (1 << (VisualFoxpro9Parser.GATHER - 231)) | (1 << (VisualFoxpro9Parser.EXCEPT - 231)) | (1 << (VisualFoxpro9Parser.LIKE - 231)) | (1 << (VisualFoxpro9Parser.FIELDS - 231)) | (1 << (VisualFoxpro9Parser.ALTER - 231)) | (1 << (VisualFoxpro9Parser.COLUMN - 231)) | (1 << (VisualFoxpro9Parser.DROP - 231)) | (1 << (VisualFoxpro9Parser.ID - 231)))) != 0):
                self.state = 1207
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrintStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PrintStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEBUGOUT(self):
            return self.getToken(VisualFoxpro9Parser.DEBUGOUT, 0)

        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_printStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitPrintStmt"):
                return visitor.visitPrintStmt(self)
            else:
                return visitor.visitChildren(self)




    def printStmt(self):

        localctx = VisualFoxpro9Parser.PrintStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_printStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1215
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.QUESTION]:
                self.state = 1210
                self.match(VisualFoxpro9Parser.QUESTION)
                self.state = 1212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.QUESTION:
                    self.state = 1211
                    self.match(VisualFoxpro9Parser.QUESTION)


                pass
            elif token in [VisualFoxpro9Parser.DEBUGOUT]:
                self.state = 1214
                self.match(VisualFoxpro9Parser.DEBUGOUT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.STRING_LITERAL) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.QUIT) | (1 << VisualFoxpro9Parser.EXIT) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.RELEASE - 64)) | (1 << (VisualFoxpro9Parser.RECYCLE - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.TABLE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.FUNCTION - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 64)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.GO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.RECORD - 128)) | (1 << (VisualFoxpro9Parser.CLOSE - 128)) | (1 << (VisualFoxpro9Parser.APPEND - 128)) | (1 << (VisualFoxpro9Parser.BLANK - 128)) | (1 << (VisualFoxpro9Parser.NOMENU - 128)) | (1 << (VisualFoxpro9Parser.CASE - 128)) | (1 << (VisualFoxpro9Parser.ENDCASE - 128)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.POPUPS - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.UNDEFINE - 192)) | (1 << (VisualFoxpro9Parser.IFDEF - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 192)) | (1 << (VisualFoxpro9Parser.ENDWITH - 192)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 192)) | (1 << (VisualFoxpro9Parser.ALIAS - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.T - 192)) | (1 << (VisualFoxpro9Parser.F - 192)) | (1 << (VisualFoxpro9Parser.Y - 192)) | (1 << (VisualFoxpro9Parser.N - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.DATABASES - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROTECTED - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.INSERT - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.MEMVAR - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.SCATTER - 256)) | (1 << (VisualFoxpro9Parser.GATHER - 256)) | (1 << (VisualFoxpro9Parser.EXCEPT - 256)) | (1 << (VisualFoxpro9Parser.LIKE - 256)) | (1 << (VisualFoxpro9Parser.FIELDS - 256)) | (1 << (VisualFoxpro9Parser.ALTER - 256)) | (1 << (VisualFoxpro9Parser.COLUMN - 256)) | (1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                self.state = 1217
                self.args()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WaitCmdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.WaitCmdContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.toExpr = None # ExprContext
            self.atExpr1 = None # ExprContext
            self.atExpr2 = None # ExprContext
            self.timeout = None # ExprContext
            self.message = None # ExprContext

        def WAIT(self):
            return self.getToken(VisualFoxpro9Parser.WAIT, 0)

        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)

        def WINDOW(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WINDOW)
            else:
                return self.getToken(VisualFoxpro9Parser.WINDOW, i)

        def NOWAIT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOWAIT)
            else:
                return self.getToken(VisualFoxpro9Parser.NOWAIT, i)

        def CLEAR(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.CLEAR)
            else:
                return self.getToken(VisualFoxpro9Parser.CLEAR, i)

        def NOCLEAR(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOCLEAR)
            else:
                return self.getToken(VisualFoxpro9Parser.NOCLEAR, i)

        def TIMEOUT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TIMEOUT)
            else:
                return self.getToken(VisualFoxpro9Parser.TIMEOUT, i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def AT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.AT)
            else:
                return self.getToken(VisualFoxpro9Parser.AT, i)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_waitCmd

        def accept(self, visitor):
            if hasattr(visitor, "visitWaitCmd"):
                return visitor.visitWaitCmd(self)
            else:
                return visitor.visitChildren(self)




    def waitCmd(self):

        localctx = VisualFoxpro9Parser.WaitCmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_waitCmd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self.match(VisualFoxpro9Parser.WAIT)
            self.state = 1239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.STRING_LITERAL) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.QUIT) | (1 << VisualFoxpro9Parser.EXIT) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.RELEASE - 64)) | (1 << (VisualFoxpro9Parser.RECYCLE - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.TABLE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.FUNCTION - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 64)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.GO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.RECORD - 128)) | (1 << (VisualFoxpro9Parser.CLOSE - 128)) | (1 << (VisualFoxpro9Parser.APPEND - 128)) | (1 << (VisualFoxpro9Parser.BLANK - 128)) | (1 << (VisualFoxpro9Parser.NOMENU - 128)) | (1 << (VisualFoxpro9Parser.CASE - 128)) | (1 << (VisualFoxpro9Parser.ENDCASE - 128)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.POPUPS - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.UNDEFINE - 192)) | (1 << (VisualFoxpro9Parser.IFDEF - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 192)) | (1 << (VisualFoxpro9Parser.ENDWITH - 192)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 192)) | (1 << (VisualFoxpro9Parser.ALIAS - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.T - 192)) | (1 << (VisualFoxpro9Parser.F - 192)) | (1 << (VisualFoxpro9Parser.Y - 192)) | (1 << (VisualFoxpro9Parser.N - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.DATABASES - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROTECTED - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.INSERT - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.MEMVAR - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.SCATTER - 256)) | (1 << (VisualFoxpro9Parser.GATHER - 256)) | (1 << (VisualFoxpro9Parser.EXCEPT - 256)) | (1 << (VisualFoxpro9Parser.LIKE - 256)) | (1 << (VisualFoxpro9Parser.FIELDS - 256)) | (1 << (VisualFoxpro9Parser.ALTER - 256)) | (1 << (VisualFoxpro9Parser.COLUMN - 256)) | (1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                self.state = 1237
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1221
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1222
                    localctx.toExpr = self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 1223
                    self.match(VisualFoxpro9Parser.WINDOW)
                    self.state = 1229
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                    if la_ == 1:
                        self.state = 1224
                        self.match(VisualFoxpro9Parser.AT)
                        self.state = 1225
                        localctx.atExpr1 = self.expr(0)
                        self.state = 1226
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 1227
                        localctx.atExpr2 = self.expr(0)


                    pass

                elif la_ == 3:
                    self.state = 1231
                    self.match(VisualFoxpro9Parser.NOWAIT)
                    pass

                elif la_ == 4:
                    self.state = 1232
                    self.match(VisualFoxpro9Parser.CLEAR)
                    pass

                elif la_ == 5:
                    self.state = 1233
                    self.match(VisualFoxpro9Parser.NOCLEAR)
                    pass

                elif la_ == 6:
                    self.state = 1234
                    self.match(VisualFoxpro9Parser.TIMEOUT)
                    self.state = 1235
                    localctx.timeout = self.expr(0)
                    pass

                elif la_ == 7:
                    self.state = 1236
                    localctx.message = self.expr(0)
                    pass


                self.state = 1241
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FilesystemCmdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.FilesystemCmdContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_filesystemCmd

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.FilesystemCmdContext, self).copyFrom(ctx)



    class DeleteFileContext(FilesystemCmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.FilesystemCmdContext)
            super(VisualFoxpro9Parser.DeleteFileContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ERASE(self):
            return self.getToken(VisualFoxpro9Parser.ERASE, 0)
        def DELETE(self):
            return self.getToken(VisualFoxpro9Parser.DELETE, 0)
        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def RECYCLE(self):
            return self.getToken(VisualFoxpro9Parser.RECYCLE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDeleteFile"):
                return visitor.visitDeleteFile(self)
            else:
                return visitor.visitChildren(self)


    class ChMkRmDirContext(FilesystemCmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.FilesystemCmdContext)
            super(VisualFoxpro9Parser.ChMkRmDirContext, self).__init__(parser)
            self.copyFrom(ctx)

        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def CHDIR(self):
            return self.getToken(VisualFoxpro9Parser.CHDIR, 0)
        def MKDIR(self):
            return self.getToken(VisualFoxpro9Parser.MKDIR, 0)
        def RMDIR(self):
            return self.getToken(VisualFoxpro9Parser.RMDIR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitChMkRmDir"):
                return visitor.visitChMkRmDir(self)
            else:
                return visitor.visitChildren(self)


    class CopyMoveFileContext(FilesystemCmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.FilesystemCmdContext)
            super(VisualFoxpro9Parser.CopyMoveFileContext, self).__init__(parser)
            self.copyFrom(ctx)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def RENAME(self):
            return self.getToken(VisualFoxpro9Parser.RENAME, 0)
        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)
        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCopyMoveFile"):
                return visitor.visitCopyMoveFile(self)
            else:
                return visitor.visitChildren(self)



    def filesystemCmd(self):

        localctx = VisualFoxpro9Parser.FilesystemCmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_filesystemCmd)
        self._la = 0 # Token type
        try:
            self.state = 1265
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.ERASE]:
                localctx = VisualFoxpro9Parser.DeleteFileContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1245
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ERASE]:
                    self.state = 1242
                    self.match(VisualFoxpro9Parser.ERASE)
                    pass
                elif token in [VisualFoxpro9Parser.DELETE]:
                    self.state = 1243
                    self.match(VisualFoxpro9Parser.DELETE)
                    self.state = 1244
                    self.match(VisualFoxpro9Parser.FILE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1249
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.HASH, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.STRING_LITERAL, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.QUIT, VisualFoxpro9Parser.EXIT, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.PUBLIC, VisualFoxpro9Parser.PRIVATE, VisualFoxpro9Parser.LOCAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.FUNCTION, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.ENDFUNC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.LPARAMETERS, VisualFoxpro9Parser.LPARAMETER, VisualFoxpro9Parser.PARAMETERS, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.GO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.POPUPS, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.T, VisualFoxpro9Parser.F, VisualFoxpro9Parser.Y, VisualFoxpro9Parser.N, VisualFoxpro9Parser.NODEFAULT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.DATABASES, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.PROTECTED, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.ID]:
                    self.state = 1247
                    self.specialExpr()
                    pass
                elif token in [VisualFoxpro9Parser.QUESTION]:
                    self.state = 1248
                    self.match(VisualFoxpro9Parser.QUESTION)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.RECYCLE:
                    self.state = 1251
                    self.match(VisualFoxpro9Parser.RECYCLE)


                pass
            elif token in [VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.RENAME]:
                localctx = VisualFoxpro9Parser.CopyMoveFileContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1257
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.RENAME]:
                    self.state = 1254
                    self.match(VisualFoxpro9Parser.RENAME)
                    pass
                elif token in [VisualFoxpro9Parser.COPY]:
                    self.state = 1255
                    self.match(VisualFoxpro9Parser.COPY)
                    self.state = 1256
                    self.match(VisualFoxpro9Parser.FILE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1259
                self.specialExpr()
                self.state = 1260
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1261
                self.specialExpr()
                pass
            elif token in [VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.CHDIR]:
                localctx = VisualFoxpro9Parser.ChMkRmDirContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1263
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.MKDIR or _la==VisualFoxpro9Parser.RMDIR or _la==VisualFoxpro9Parser.CHDIR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1264
                self.specialExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.QuitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def QUIT(self):
            return self.getToken(VisualFoxpro9Parser.QUIT, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_quit

        def accept(self, visitor):
            if hasattr(visitor, "visitQuit"):
                return visitor.visitQuit(self)
            else:
                return visitor.visitChildren(self)




    def quit(self):

        localctx = VisualFoxpro9Parser.QuitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_quit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.match(VisualFoxpro9Parser.QUIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ReturnStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(VisualFoxpro9Parser.RETURN, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_returnStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitReturnStmt"):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = VisualFoxpro9Parser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1269
            self.match(VisualFoxpro9Parser.RETURN)
            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.STRING_LITERAL) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.QUIT) | (1 << VisualFoxpro9Parser.EXIT) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.RELEASE - 64)) | (1 << (VisualFoxpro9Parser.RECYCLE - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.TABLE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.FUNCTION - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 64)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.GO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.RECORD - 128)) | (1 << (VisualFoxpro9Parser.CLOSE - 128)) | (1 << (VisualFoxpro9Parser.APPEND - 128)) | (1 << (VisualFoxpro9Parser.BLANK - 128)) | (1 << (VisualFoxpro9Parser.NOMENU - 128)) | (1 << (VisualFoxpro9Parser.CASE - 128)) | (1 << (VisualFoxpro9Parser.ENDCASE - 128)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.POPUPS - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.UNDEFINE - 192)) | (1 << (VisualFoxpro9Parser.IFDEF - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 192)) | (1 << (VisualFoxpro9Parser.ENDWITH - 192)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 192)) | (1 << (VisualFoxpro9Parser.ALIAS - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.T - 192)) | (1 << (VisualFoxpro9Parser.F - 192)) | (1 << (VisualFoxpro9Parser.Y - 192)) | (1 << (VisualFoxpro9Parser.N - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.DATABASES - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROTECTED - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.INSERT - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.MEMVAR - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.SCATTER - 256)) | (1 << (VisualFoxpro9Parser.GATHER - 256)) | (1 << (VisualFoxpro9Parser.EXCEPT - 256)) | (1 << (VisualFoxpro9Parser.LIKE - 256)) | (1 << (VisualFoxpro9Parser.FIELDS - 256)) | (1 << (VisualFoxpro9Parser.ALTER - 256)) | (1 << (VisualFoxpro9Parser.COLUMN - 256)) | (1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                self.state = 1270
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetupContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SetupContext, self).__init__(parent, invokingState)
            self.parser = parser

        def onError(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.OnErrorContext,0)


        def setStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SetStmtContext,0)


        def onShutdown(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.OnShutdownContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_setup

        def accept(self, visitor):
            if hasattr(visitor, "visitSetup"):
                return visitor.visitSetup(self)
            else:
                return visitor.visitChildren(self)




    def setup(self):

        localctx = VisualFoxpro9Parser.SetupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_setup)
        try:
            self.state = 1276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1273
                self.onError()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1274
                self.setStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1275
                self.onShutdown()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OnErrorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.OnErrorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)

        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)

        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_onError

        def accept(self, visitor):
            if hasattr(visitor, "visitOnError"):
                return visitor.visitOnError(self)
            else:
                return visitor.visitChildren(self)




    def onError(self):

        localctx = VisualFoxpro9Parser.OnErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_onError)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.match(VisualFoxpro9Parser.ON)
            self.state = 1279
            self.match(VisualFoxpro9Parser.ERROR)
            self.state = 1281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.QUIT) | (1 << VisualFoxpro9Parser.EXIT) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.RELEASE - 64)) | (1 << (VisualFoxpro9Parser.RECYCLE - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.TABLE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.FUNCTION - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 64)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.GO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.RECORD - 128)) | (1 << (VisualFoxpro9Parser.CLOSE - 128)) | (1 << (VisualFoxpro9Parser.APPEND - 128)) | (1 << (VisualFoxpro9Parser.BLANK - 128)) | (1 << (VisualFoxpro9Parser.NOMENU - 128)) | (1 << (VisualFoxpro9Parser.CASE - 128)) | (1 << (VisualFoxpro9Parser.ENDCASE - 128)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.POPUPS - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.UNDEFINE - 192)) | (1 << (VisualFoxpro9Parser.IFDEF - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 192)) | (1 << (VisualFoxpro9Parser.ENDWITH - 192)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 192)) | (1 << (VisualFoxpro9Parser.ALIAS - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.T - 192)) | (1 << (VisualFoxpro9Parser.F - 192)) | (1 << (VisualFoxpro9Parser.Y - 192)) | (1 << (VisualFoxpro9Parser.N - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.DATABASES - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROTECTED - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.INSERT - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.MEMVAR - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.CHDIR - 256)) | (1 << (VisualFoxpro9Parser.SCATTER - 256)) | (1 << (VisualFoxpro9Parser.GATHER - 256)) | (1 << (VisualFoxpro9Parser.EXCEPT - 256)) | (1 << (VisualFoxpro9Parser.LIKE - 256)) | (1 << (VisualFoxpro9Parser.FIELDS - 256)) | (1 << (VisualFoxpro9Parser.ALTER - 256)) | (1 << (VisualFoxpro9Parser.COLUMN - 256)) | (1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                self.state = 1280
                self.cmd()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OnShutdownContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.OnShutdownContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)

        def SHUTDOWN(self):
            return self.getToken(VisualFoxpro9Parser.SHUTDOWN, 0)

        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_onShutdown

        def accept(self, visitor):
            if hasattr(visitor, "visitOnShutdown"):
                return visitor.visitOnShutdown(self)
            else:
                return visitor.visitChildren(self)




    def onShutdown(self):

        localctx = VisualFoxpro9Parser.OnShutdownContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_onShutdown)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.match(VisualFoxpro9Parser.ON)
            self.state = 1284
            self.match(VisualFoxpro9Parser.SHUTDOWN)
            self.state = 1286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.QUIT) | (1 << VisualFoxpro9Parser.EXIT) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.RELEASE - 64)) | (1 << (VisualFoxpro9Parser.RECYCLE - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.TABLE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.FUNCTION - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 64)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.GO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.RECORD - 128)) | (1 << (VisualFoxpro9Parser.CLOSE - 128)) | (1 << (VisualFoxpro9Parser.APPEND - 128)) | (1 << (VisualFoxpro9Parser.BLANK - 128)) | (1 << (VisualFoxpro9Parser.NOMENU - 128)) | (1 << (VisualFoxpro9Parser.CASE - 128)) | (1 << (VisualFoxpro9Parser.ENDCASE - 128)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.POPUPS - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.UNDEFINE - 192)) | (1 << (VisualFoxpro9Parser.IFDEF - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 192)) | (1 << (VisualFoxpro9Parser.ENDWITH - 192)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 192)) | (1 << (VisualFoxpro9Parser.ALIAS - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.T - 192)) | (1 << (VisualFoxpro9Parser.F - 192)) | (1 << (VisualFoxpro9Parser.Y - 192)) | (1 << (VisualFoxpro9Parser.N - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.DATABASES - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROTECTED - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.INSERT - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.MEMVAR - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.CHDIR - 256)) | (1 << (VisualFoxpro9Parser.SCATTER - 256)) | (1 << (VisualFoxpro9Parser.GATHER - 256)) | (1 << (VisualFoxpro9Parser.EXCEPT - 256)) | (1 << (VisualFoxpro9Parser.LIKE - 256)) | (1 << (VisualFoxpro9Parser.FIELDS - 256)) | (1 << (VisualFoxpro9Parser.ALTER - 256)) | (1 << (VisualFoxpro9Parser.COLUMN - 256)) | (1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                self.state = 1285
                self.cmd()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SetStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(VisualFoxpro9Parser.SET, 0)

        def setCmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SetCmdContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_setStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitSetStmt"):
                return visitor.visitSetStmt(self)
            else:
                return visitor.visitChildren(self)




    def setStmt(self):

        localctx = VisualFoxpro9Parser.SetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_setStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self.match(VisualFoxpro9Parser.SET)
            self.state = 1289
            self.setCmd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetCmdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SetCmdContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.setword = None # Token
            self.ofExpr = None # SpecialExprContext
            self.inExpr = None # SpecialExprContext

        def ALTERNATE(self):
            return self.getToken(VisualFoxpro9Parser.ALTERNATE, 0)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)

        def OFF(self):
            return self.getToken(VisualFoxpro9Parser.OFF, 0)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)

        def ASSERTS(self):
            return self.getToken(VisualFoxpro9Parser.ASSERTS, 0)

        def BELL(self):
            return self.getToken(VisualFoxpro9Parser.BELL, 0)

        def CENTURY(self):
            return self.getToken(VisualFoxpro9Parser.CENTURY, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def ROLLOVER(self):
            return self.getToken(VisualFoxpro9Parser.ROLLOVER, 0)

        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)

        def ALIAS(self):
            return self.getToken(VisualFoxpro9Parser.ALIAS, 0)

        def CLOCK(self):
            return self.getToken(VisualFoxpro9Parser.CLOCK, 0)

        def STATUS(self):
            return self.getToken(VisualFoxpro9Parser.STATUS, 0)

        def COMPATIBLE(self):
            return self.getToken(VisualFoxpro9Parser.COMPATIBLE, 0)

        def DB4(self):
            return self.getToken(VisualFoxpro9Parser.DB4, 0)

        def FOXPLUS(self):
            return self.getToken(VisualFoxpro9Parser.FOXPLUS, 0)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)

        def NOPROMPT(self):
            return self.getToken(VisualFoxpro9Parser.NOPROMPT, 0)

        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def DATE(self):
            return self.getToken(VisualFoxpro9Parser.DATE, 0)

        def DELETED(self):
            return self.getToken(VisualFoxpro9Parser.DELETED, 0)

        def EXACT(self):
            return self.getToken(VisualFoxpro9Parser.EXACT, 0)

        def FILTER(self):
            return self.getToken(VisualFoxpro9Parser.FILTER, 0)

        def INDEX(self):
            return self.getToken(VisualFoxpro9Parser.INDEX, 0)

        def LIBRARY(self):
            return self.getToken(VisualFoxpro9Parser.LIBRARY, 0)

        def MEMOWIDTH(self):
            return self.getToken(VisualFoxpro9Parser.MEMOWIDTH, 0)

        def MULTILOCKS(self):
            return self.getToken(VisualFoxpro9Parser.MULTILOCKS, 0)

        def NEAR(self):
            return self.getToken(VisualFoxpro9Parser.NEAR, 0)

        def NOTIFY(self):
            return self.getToken(VisualFoxpro9Parser.NOTIFY, 0)

        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)

        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)

        def PRINTER(self):
            return self.getToken(VisualFoxpro9Parser.PRINTER, 0)

        def DEFAULT(self):
            return self.getToken(VisualFoxpro9Parser.DEFAULT, 0)

        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def REFRESH(self):
            return self.getToken(VisualFoxpro9Parser.REFRESH, 0)

        def SAFETY(self):
            return self.getToken(VisualFoxpro9Parser.SAFETY, 0)

        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)

        def SYSMENU(self):
            return self.getToken(VisualFoxpro9Parser.SYSMENU, 0)

        def SAVE(self):
            return self.getToken(VisualFoxpro9Parser.SAVE, 0)

        def NOSAVE(self):
            return self.getToken(VisualFoxpro9Parser.NOSAVE, 0)

        def TABLEPROMPT(self):
            return self.getToken(VisualFoxpro9Parser.TABLEPROMPT, 0)

        def TYPEAHEAD(self):
            return self.getToken(VisualFoxpro9Parser.TYPEAHEAD, 0)

        def UNIQUE(self):
            return self.getToken(VisualFoxpro9Parser.UNIQUE, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_setCmd

        def accept(self, visitor):
            if hasattr(visitor, "visitSetCmd"):
                return visitor.visitSetCmd(self)
            else:
                return visitor.visitChildren(self)




    def setCmd(self):

        localctx = VisualFoxpro9Parser.SetCmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_setCmd)
        self._la = 0 # Token type
        try:
            self.state = 1482
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ALTERNATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1291
                localctx.setword = self.match(VisualFoxpro9Parser.ALTERNATE)
                self.state = 1299
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1292
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1293
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1294
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1295
                    self.specialExpr()
                    self.state = 1297
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ADDITIVE:
                        self.state = 1296
                        self.match(VisualFoxpro9Parser.ADDITIVE)


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.ASSERTS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1301
                localctx.setword = self.match(VisualFoxpro9Parser.ASSERTS)
                self.state = 1302
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.BELL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1303
                localctx.setword = self.match(VisualFoxpro9Parser.BELL)
                self.state = 1308
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1304
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1305
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1306
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1307
                    self.specialExpr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.CENTURY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1310
                localctx.setword = self.match(VisualFoxpro9Parser.CENTURY)
                self.state = 1321
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1311
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1312
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1313
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.STRING_LITERAL) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.QUIT) | (1 << VisualFoxpro9Parser.EXIT) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.RELEASE - 64)) | (1 << (VisualFoxpro9Parser.RECYCLE - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.TABLE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.FUNCTION - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 64)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.GO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.RECORD - 128)) | (1 << (VisualFoxpro9Parser.CLOSE - 128)) | (1 << (VisualFoxpro9Parser.APPEND - 128)) | (1 << (VisualFoxpro9Parser.BLANK - 128)) | (1 << (VisualFoxpro9Parser.NOMENU - 128)) | (1 << (VisualFoxpro9Parser.CASE - 128)) | (1 << (VisualFoxpro9Parser.ENDCASE - 128)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.POPUPS - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.UNDEFINE - 192)) | (1 << (VisualFoxpro9Parser.IFDEF - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 192)) | (1 << (VisualFoxpro9Parser.ENDWITH - 192)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 192)) | (1 << (VisualFoxpro9Parser.ALIAS - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.T - 192)) | (1 << (VisualFoxpro9Parser.F - 192)) | (1 << (VisualFoxpro9Parser.Y - 192)) | (1 << (VisualFoxpro9Parser.N - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.DATABASES - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROTECTED - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.INSERT - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.MEMVAR - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.SCATTER - 256)) | (1 << (VisualFoxpro9Parser.GATHER - 256)) | (1 << (VisualFoxpro9Parser.EXCEPT - 256)) | (1 << (VisualFoxpro9Parser.LIKE - 256)) | (1 << (VisualFoxpro9Parser.FIELDS - 256)) | (1 << (VisualFoxpro9Parser.ALTER - 256)) | (1 << (VisualFoxpro9Parser.COLUMN - 256)) | (1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                        self.state = 1314
                        self.expr(0)
                        self.state = 1317
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.ROLLOVER:
                            self.state = 1315
                            self.match(VisualFoxpro9Parser.ROLLOVER)
                            self.state = 1316
                            self.expr(0)




                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.CLASSLIB]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1323
                localctx.setword = self.match(VisualFoxpro9Parser.CLASSLIB)
                self.state = 1324
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1325
                self.specialExpr()
                self.state = 1328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1326
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1327
                    self.specialExpr()


                self.state = 1332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ALIAS:
                    self.state = 1330
                    self.match(VisualFoxpro9Parser.ALIAS)
                    self.state = 1331
                    self.specialExpr()


                self.state = 1335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1334
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [VisualFoxpro9Parser.CLOCK]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1337
                localctx.setword = self.match(VisualFoxpro9Parser.CLOCK)
                self.state = 1348
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1338
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1339
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.STATUS]:
                    self.state = 1340
                    self.match(VisualFoxpro9Parser.STATUS)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1341
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1346
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.STRING_LITERAL) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.QUIT) | (1 << VisualFoxpro9Parser.EXIT) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.RELEASE - 64)) | (1 << (VisualFoxpro9Parser.RECYCLE - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.TABLE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.FUNCTION - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 64)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.GO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.RECORD - 128)) | (1 << (VisualFoxpro9Parser.CLOSE - 128)) | (1 << (VisualFoxpro9Parser.APPEND - 128)) | (1 << (VisualFoxpro9Parser.BLANK - 128)) | (1 << (VisualFoxpro9Parser.NOMENU - 128)) | (1 << (VisualFoxpro9Parser.CASE - 128)) | (1 << (VisualFoxpro9Parser.ENDCASE - 128)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.POPUPS - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.UNDEFINE - 192)) | (1 << (VisualFoxpro9Parser.IFDEF - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 192)) | (1 << (VisualFoxpro9Parser.ENDWITH - 192)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 192)) | (1 << (VisualFoxpro9Parser.ALIAS - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.T - 192)) | (1 << (VisualFoxpro9Parser.F - 192)) | (1 << (VisualFoxpro9Parser.Y - 192)) | (1 << (VisualFoxpro9Parser.N - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.DATABASES - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROTECTED - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.INSERT - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.MEMVAR - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.SCATTER - 256)) | (1 << (VisualFoxpro9Parser.GATHER - 256)) | (1 << (VisualFoxpro9Parser.EXCEPT - 256)) | (1 << (VisualFoxpro9Parser.LIKE - 256)) | (1 << (VisualFoxpro9Parser.FIELDS - 256)) | (1 << (VisualFoxpro9Parser.ALTER - 256)) | (1 << (VisualFoxpro9Parser.COLUMN - 256)) | (1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                        self.state = 1342
                        self.expr(0)
                        self.state = 1343
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 1344
                        self.expr(0)


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.COMPATIBLE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1350
                localctx.setword = self.match(VisualFoxpro9Parser.COMPATIBLE)
                self.state = 1351
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF or _la==VisualFoxpro9Parser.DB4 or _la==VisualFoxpro9Parser.FOXPLUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.PROMPT or _la==VisualFoxpro9Parser.NOPROMPT:
                    self.state = 1352
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.PROMPT or _la==VisualFoxpro9Parser.NOPROMPT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [VisualFoxpro9Parser.CURSOR]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1355
                localctx.setword = self.match(VisualFoxpro9Parser.CURSOR)
                self.state = 1356
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.DATE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1357
                localctx.setword = self.match(VisualFoxpro9Parser.DATE)
                self.state = 1359
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 1358
                    self.match(VisualFoxpro9Parser.TO)


                self.state = 1361
                self.identifier()
                pass
            elif token in [VisualFoxpro9Parser.DELETED]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1362
                localctx.setword = self.match(VisualFoxpro9Parser.DELETED)
                self.state = 1363
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.EXACT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1364
                localctx.setword = self.match(VisualFoxpro9Parser.EXACT)
                self.state = 1365
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.FILTER]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1366
                localctx.setword = self.match(VisualFoxpro9Parser.FILTER)
                self.state = 1367
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.STRING_LITERAL) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.QUIT) | (1 << VisualFoxpro9Parser.EXIT) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.RELEASE - 64)) | (1 << (VisualFoxpro9Parser.RECYCLE - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.TABLE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.FUNCTION - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 64)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.GO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.RECORD - 128)) | (1 << (VisualFoxpro9Parser.CLOSE - 128)) | (1 << (VisualFoxpro9Parser.APPEND - 128)) | (1 << (VisualFoxpro9Parser.BLANK - 128)) | (1 << (VisualFoxpro9Parser.NOMENU - 128)) | (1 << (VisualFoxpro9Parser.CASE - 128)) | (1 << (VisualFoxpro9Parser.ENDCASE - 128)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.POPUPS - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.UNDEFINE - 192)) | (1 << (VisualFoxpro9Parser.IFDEF - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 192)) | (1 << (VisualFoxpro9Parser.ENDWITH - 192)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 192)) | (1 << (VisualFoxpro9Parser.ALIAS - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.T - 192)) | (1 << (VisualFoxpro9Parser.F - 192)) | (1 << (VisualFoxpro9Parser.Y - 192)) | (1 << (VisualFoxpro9Parser.N - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.DATABASES - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROTECTED - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.INSERT - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.MEMVAR - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.SCATTER - 256)) | (1 << (VisualFoxpro9Parser.GATHER - 256)) | (1 << (VisualFoxpro9Parser.EXCEPT - 256)) | (1 << (VisualFoxpro9Parser.LIKE - 256)) | (1 << (VisualFoxpro9Parser.FIELDS - 256)) | (1 << (VisualFoxpro9Parser.ALTER - 256)) | (1 << (VisualFoxpro9Parser.COLUMN - 256)) | (1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 1368
                    self.specialExpr()
                    self.state = 1371
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.IN:
                        self.state = 1369
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1370
                        self.specialExpr()




                pass
            elif token in [VisualFoxpro9Parser.INDEX]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1375
                localctx.setword = self.match(VisualFoxpro9Parser.INDEX)
                self.state = 1376
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.STRING_LITERAL) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.QUIT) | (1 << VisualFoxpro9Parser.EXIT) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.RELEASE - 64)) | (1 << (VisualFoxpro9Parser.RECYCLE - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.TABLE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.FUNCTION - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 64)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.GO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.RECORD - 128)) | (1 << (VisualFoxpro9Parser.CLOSE - 128)) | (1 << (VisualFoxpro9Parser.APPEND - 128)) | (1 << (VisualFoxpro9Parser.BLANK - 128)) | (1 << (VisualFoxpro9Parser.NOMENU - 128)) | (1 << (VisualFoxpro9Parser.CASE - 128)) | (1 << (VisualFoxpro9Parser.ENDCASE - 128)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.POPUPS - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.UNDEFINE - 192)) | (1 << (VisualFoxpro9Parser.IFDEF - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 192)) | (1 << (VisualFoxpro9Parser.ENDWITH - 192)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 192)) | (1 << (VisualFoxpro9Parser.ALIAS - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.T - 192)) | (1 << (VisualFoxpro9Parser.F - 192)) | (1 << (VisualFoxpro9Parser.Y - 192)) | (1 << (VisualFoxpro9Parser.N - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.DATABASES - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROTECTED - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.INSERT - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.MEMVAR - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.SCATTER - 256)) | (1 << (VisualFoxpro9Parser.GATHER - 256)) | (1 << (VisualFoxpro9Parser.EXCEPT - 256)) | (1 << (VisualFoxpro9Parser.LIKE - 256)) | (1 << (VisualFoxpro9Parser.FIELDS - 256)) | (1 << (VisualFoxpro9Parser.ALTER - 256)) | (1 << (VisualFoxpro9Parser.COLUMN - 256)) | (1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 1377
                    self.specialExpr()


                pass
            elif token in [VisualFoxpro9Parser.LIBRARY]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1380
                localctx.setword = self.match(VisualFoxpro9Parser.LIBRARY)
                self.state = 1381
                self.match(VisualFoxpro9Parser.TO)

                self.state = 1382
                self.specialExpr()
                self.state = 1384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1383
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [VisualFoxpro9Parser.MEMOWIDTH]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1386
                localctx.setword = self.match(VisualFoxpro9Parser.MEMOWIDTH)
                self.state = 1387
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1388
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.MULTILOCKS]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1389
                localctx.setword = self.match(VisualFoxpro9Parser.MULTILOCKS)
                self.state = 1390
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.NEAR]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1391
                localctx.setword = self.match(VisualFoxpro9Parser.NEAR)
                self.state = 1392
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.NOTIFY]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1393
                localctx.setword = self.match(VisualFoxpro9Parser.NOTIFY)
                self.state = 1395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.CURSOR:
                    self.state = 1394
                    self.match(VisualFoxpro9Parser.CURSOR)


                self.state = 1397
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.ORDER]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1398
                localctx.setword = self.match(VisualFoxpro9Parser.ORDER)
                self.state = 1399
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1416
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
                if la_ == 1:
                    self.state = 1400
                    self.specialExpr()

                elif la_ == 2:
                    self.state = 1402
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                    if la_ == 1:
                        self.state = 1401
                        self.match(VisualFoxpro9Parser.TAG)


                    self.state = 1404
                    self.specialExpr()
                    self.state = 1407
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.OF:
                        self.state = 1405
                        self.match(VisualFoxpro9Parser.OF)
                        self.state = 1406
                        localctx.ofExpr = self.specialExpr()


                    self.state = 1411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.IN:
                        self.state = 1409
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1410
                        localctx.inExpr = self.specialExpr()


                    self.state = 1414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING:
                        self.state = 1413
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                pass
            elif token in [VisualFoxpro9Parser.PRINTER]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1418
                localctx.setword = self.match(VisualFoxpro9Parser.PRINTER)
                self.state = 1434
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1419
                    self.match(VisualFoxpro9Parser.ON)
                    self.state = 1421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.PROMPT:
                        self.state = 1420
                        self.match(VisualFoxpro9Parser.PROMPT)


                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1423
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1424
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1432
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
                    if la_ == 1:
                        self.state = 1425
                        self.match(VisualFoxpro9Parser.DEFAULT)

                    elif la_ == 2:
                        self.state = 1426
                        self.match(VisualFoxpro9Parser.NAME)
                        self.state = 1427
                        self.specialExpr()

                    elif la_ == 3:
                        self.state = 1428
                        self.specialExpr()
                        self.state = 1430
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.ADDITIVE:
                            self.state = 1429
                            self.match(VisualFoxpro9Parser.ADDITIVE)




                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.PROCEDURE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1436
                localctx.setword = self.match(VisualFoxpro9Parser.PROCEDURE)
                self.state = 1437
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1438
                self.specialExpr()
                self.state = 1443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.COMMA:
                    self.state = 1439
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1440
                    self.specialExpr()
                    self.state = 1445
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1446
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [VisualFoxpro9Parser.REFRESH]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1449
                localctx.setword = self.match(VisualFoxpro9Parser.REFRESH)
                self.state = 1450
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1451
                self.expr(0)
                self.state = 1454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COMMA:
                    self.state = 1452
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1453
                    self.expr(0)


                pass
            elif token in [VisualFoxpro9Parser.SAFETY]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1456
                localctx.setword = self.match(VisualFoxpro9Parser.SAFETY)
                self.state = 1457
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.STATUS]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1458
                localctx.setword = self.match(VisualFoxpro9Parser.STATUS)
                self.state = 1460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.BAR:
                    self.state = 1459
                    self.match(VisualFoxpro9Parser.BAR)


                self.state = 1462
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.SYSMENU]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1463
                localctx.setword = self.match(VisualFoxpro9Parser.SYSMENU)
                self.state = 1473
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1464
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1465
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1466
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1469
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                    if la_ == 1:
                        self.state = 1467
                        self.match(VisualFoxpro9Parser.DEFAULT)

                    elif la_ == 2:
                        self.state = 1468
                        self.expr(0)


                    pass
                elif token in [VisualFoxpro9Parser.SAVE]:
                    self.state = 1471
                    self.match(VisualFoxpro9Parser.SAVE)
                    pass
                elif token in [VisualFoxpro9Parser.NOSAVE]:
                    self.state = 1472
                    self.match(VisualFoxpro9Parser.NOSAVE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.TABLEPROMPT]:
                self.enterOuterAlt(localctx, 26)
                self.state = 1475
                localctx.setword = self.match(VisualFoxpro9Parser.TABLEPROMPT)
                self.state = 1476
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.TYPEAHEAD]:
                self.enterOuterAlt(localctx, 27)
                self.state = 1477
                localctx.setword = self.match(VisualFoxpro9Parser.TYPEAHEAD)
                self.state = 1478
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1479
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.UNIQUE]:
                self.enterOuterAlt(localctx, 28)
                self.state = 1480
                localctx.setword = self.match(VisualFoxpro9Parser.UNIQUE)
                self.state = 1481
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(VisualFoxpro9Parser.PUBLIC, 0)

        def PRIVATE(self):
            return self.getToken(VisualFoxpro9Parser.PRIVATE, 0)

        def LOCAL(self):
            return self.getToken(VisualFoxpro9Parser.LOCAL, 0)

        def parameters(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParametersContext,0)


        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def arrayIndex(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArrayIndexContext,0)


        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)

        def DIMENSION(self):
            return self.getToken(VisualFoxpro9Parser.DIMENSION, 0)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_declaration

        def accept(self, visitor):
            if hasattr(visitor, "visitDeclaration"):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = VisualFoxpro9Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 1498
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.PUBLIC, VisualFoxpro9Parser.PRIVATE, VisualFoxpro9Parser.LOCAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1484
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1492
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                if la_ == 1:
                    self.state = 1485
                    self.parameters()
                    pass

                elif la_ == 2:
                    self.state = 1487
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                    if la_ == 1:
                        self.state = 1486
                        self.match(VisualFoxpro9Parser.ARRAY)


                    self.state = 1489
                    self.identifier()
                    self.state = 1490
                    self.arrayIndex()
                    pass


                pass
            elif token in [VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.DIMENSION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1494
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.DEFINE or _la==VisualFoxpro9Parser.DIMENSION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1495
                self.identifier()
                self.state = 1496
                self.arrayIndex()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ArgsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_args

        def accept(self, visitor):
            if hasattr(visitor, "visitArgs"):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = VisualFoxpro9Parser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_args)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1500
            self.expr(0)
            self.state = 1505
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,229,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1501
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1502
                    self.expr(0) 
                self.state = 1507
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,229,self._ctx)

            self.state = 1509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.COMMA:
                self.state = 1508
                self.match(VisualFoxpro9Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecialArgsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SpecialArgsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_specialArgs

        def accept(self, visitor):
            if hasattr(visitor, "visitSpecialArgs"):
                return visitor.visitSpecialArgs(self)
            else:
                return visitor.visitChildren(self)




    def specialArgs(self):

        localctx = VisualFoxpro9Parser.SpecialArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_specialArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1511
            self.specialExpr()
            self.state = 1516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.COMMA:
                self.state = 1512
                self.match(VisualFoxpro9Parser.COMMA)
                self.state = 1513
                self.specialExpr()
                self.state = 1518
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncDoContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.FuncDoContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)

        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)

        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)

        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_funcDo

        def accept(self, visitor):
            if hasattr(visitor, "visitFuncDo"):
                return visitor.visitFuncDo(self)
            else:
                return visitor.visitChildren(self)




    def funcDo(self):

        localctx = VisualFoxpro9Parser.FuncDoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_funcDo)
        self._la = 0 # Token type
        try:
            self.state = 1532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1519
                self.match(VisualFoxpro9Parser.DO)
                self.state = 1520
                self.match(VisualFoxpro9Parser.FORM)
                self.state = 1521
                self.specialExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1522
                self.match(VisualFoxpro9Parser.DO)
                self.state = 1523
                self.specialExpr()
                self.state = 1526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1524
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1525
                    self.specialExpr()


                self.state = 1530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.WITH:
                    self.state = 1528
                    self.match(VisualFoxpro9Parser.WITH)
                    self.state = 1529
                    self.args()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ReferenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_reference

        def accept(self, visitor):
            if hasattr(visitor, "visitReference"):
                return visitor.visitReference(self)
            else:
                return visitor.visitChildren(self)




    def reference(self):

        localctx = VisualFoxpro9Parser.ReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1534
            self.match(VisualFoxpro9Parser.COMMERCIALAT)
            self.state = 1535
            self.idAttr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgReplaceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ArgReplaceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_argReplace

        def accept(self, visitor):
            if hasattr(visitor, "visitArgReplace"):
                return visitor.visitArgReplace(self)
            else:
                return visitor.visitChildren(self)




    def argReplace(self):

        localctx = VisualFoxpro9Parser.ArgReplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_argReplace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1537
            self.match(VisualFoxpro9Parser.AMPERSAND)
            self.state = 1538
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ExprContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_expr

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.ExprContext, self).copyFrom(ctx)


    class ComparisonContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.ComparisonContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def NOTEQUALS(self):
            return self.getToken(VisualFoxpro9Parser.NOTEQUALS, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitComparison"):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)


    class CastExprContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.CastExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(VisualFoxpro9Parser.CAST, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)
        def datatype(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DatatypeContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitCastExpr"):
                return visitor.visitCastExpr(self)
            else:
                return visitor.visitChildren(self)


    class UnaryNegationContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.UnaryNegationContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitUnaryNegation"):
                return visitor.visitUnaryNegation(self)
            else:
                return visitor.visitChildren(self)


    class AtomExprContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.AtomExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def atom(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AtomContext,0)

        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)
        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitAtomExpr"):
                return visitor.visitAtomExpr(self)
            else:
                return visitor.visitChildren(self)


    class PowerContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.PowerContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitPower"):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)


    class MultiplicationContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.MultiplicationContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitMultiplication"):
                return visitor.visitMultiplication(self)
            else:
                return visitor.visitChildren(self)


    class BooleanOperationContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.BooleanOperationContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def OR(self):
            return self.getToken(VisualFoxpro9Parser.OR, 0)
        def AND(self):
            return self.getToken(VisualFoxpro9Parser.AND, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitBooleanOperation"):
                return visitor.visitBooleanOperation(self)
            else:
                return visitor.visitChildren(self)


    class SubExprContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.SubExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitSubExpr"):
                return visitor.visitSubExpr(self)
            else:
                return visitor.visitChildren(self)


    class ModuloContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.ModuloContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitModulo"):
                return visitor.visitModulo(self)
            else:
                return visitor.visitChildren(self)


    class BooleanNegationContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.BooleanNegationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def NOT(self):
            return self.getToken(VisualFoxpro9Parser.NOT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitBooleanNegation"):
                return visitor.visitBooleanNegation(self)
            else:
                return visitor.visitChildren(self)


    class ConstantExprContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.ConstantExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ConstantContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitConstantExpr"):
                return visitor.visitConstantExpr(self)
            else:
                return visitor.visitChildren(self)


    class AdditionContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.AdditionContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitAddition"):
                return visitor.visitAddition(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VisualFoxpro9Parser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 114
        self.enterRecursionRule(localctx, 114, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.SubExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1541
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 1542
                self.expr(0)
                self.state = 1543
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.UnaryNegationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1545
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.PLUS_SIGN or _la==VisualFoxpro9Parser.MINUS_SIGN):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1546
                self.expr(11)
                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.BooleanNegationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1547
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.EXCLAMATION or _la==VisualFoxpro9Parser.NOT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1548
                self.expr(10)
                pass

            elif la_ == 4:
                localctx = VisualFoxpro9Parser.ConstantExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1549
                self.constant()
                pass

            elif la_ == 5:
                localctx = VisualFoxpro9Parser.CastExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1550
                self.match(VisualFoxpro9Parser.CAST)
                self.state = 1551
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 1552
                self.expr(0)
                self.state = 1553
                self.match(VisualFoxpro9Parser.AS)
                self.state = 1554
                self.datatype()
                self.state = 1555
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass

            elif la_ == 6:
                localctx = VisualFoxpro9Parser.AtomExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.PERIOD:
                    self.state = 1557
                    self.match(VisualFoxpro9Parser.PERIOD)


                self.state = 1560
                self.atom()
                self.state = 1562
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
                if la_ == 1:
                    self.state = 1561
                    self.trailer()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1590
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,240,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1588
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
                    if la_ == 1:
                        localctx = VisualFoxpro9Parser.PowerContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1566
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1570
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [VisualFoxpro9Parser.ASTERISK]:
                            self.state = 1567
                            self.match(VisualFoxpro9Parser.ASTERISK)
                            self.state = 1568
                            self.match(VisualFoxpro9Parser.ASTERISK)
                            pass
                        elif token in [VisualFoxpro9Parser.CARAT]:
                            self.state = 1569
                            self.match(VisualFoxpro9Parser.CARAT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1572
                        self.expr(10)
                        pass

                    elif la_ == 2:
                        localctx = VisualFoxpro9Parser.MultiplicationContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1573
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1574
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.ASTERISK or _la==VisualFoxpro9Parser.FORWARDSLASH):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1575
                        self.expr(9)
                        pass

                    elif la_ == 3:
                        localctx = VisualFoxpro9Parser.ModuloContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1576
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1577
                        self.match(VisualFoxpro9Parser.MODULO)
                        self.state = 1578
                        self.expr(8)
                        pass

                    elif la_ == 4:
                        localctx = VisualFoxpro9Parser.AdditionContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1579
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1580
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.PLUS_SIGN or _la==VisualFoxpro9Parser.MINUS_SIGN):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1581
                        self.expr(7)
                        pass

                    elif la_ == 5:
                        localctx = VisualFoxpro9Parser.ComparisonContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1582
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1583
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.DOLLAR))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1584
                        self.expr(6)
                        pass

                    elif la_ == 6:
                        localctx = VisualFoxpro9Parser.BooleanOperationContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1585
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1586
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.AND or _la==VisualFoxpro9Parser.OR):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1587
                        self.expr(5)
                        pass

             
                self.state = 1592
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,240,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ComplexIdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ComplexIdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AtomContext,0)


        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_complexId

        def accept(self, visitor):
            if hasattr(visitor, "visitComplexId"):
                return visitor.visitComplexId(self)
            else:
                return visitor.visitChildren(self)




    def complexId(self):

        localctx = VisualFoxpro9Parser.ComplexIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_complexId)
        self._la = 0 # Token type
        try:
            self.state = 1604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.PERIOD:
                    self.state = 1593
                    self.match(VisualFoxpro9Parser.PERIOD)


                self.state = 1596
                self.atom()
                self.state = 1597
                self.trailer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1599
                self.match(VisualFoxpro9Parser.PERIOD)
                self.state = 1600
                self.atom()
                self.state = 1602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTPAREN))) != 0):
                    self.state = 1601
                    self.trailer()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.AtomContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def reference(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ReferenceContext,0)


        def argReplace(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgReplaceContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_atom

        def accept(self, visitor):
            if hasattr(visitor, "visitAtom"):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = VisualFoxpro9Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_atom)
        try:
            self.state = 1609
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.QUIT, VisualFoxpro9Parser.EXIT, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.PUBLIC, VisualFoxpro9Parser.PRIVATE, VisualFoxpro9Parser.LOCAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.FUNCTION, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.ENDFUNC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.LPARAMETERS, VisualFoxpro9Parser.LPARAMETER, VisualFoxpro9Parser.PARAMETERS, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.GO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.POPUPS, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.T, VisualFoxpro9Parser.F, VisualFoxpro9Parser.Y, VisualFoxpro9Parser.N, VisualFoxpro9Parser.NODEFAULT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.DATABASES, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.PROTECTED, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1606
                self.identifier()
                pass
            elif token in [VisualFoxpro9Parser.COMMERCIALAT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1607
                self.reference()
                pass
            elif token in [VisualFoxpro9Parser.AMPERSAND]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1608
                self.argReplace()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.TrailerContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_trailer

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.TrailerContext, self).copyFrom(ctx)



    class FuncCallTrailerContext(TrailerContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.TrailerContext)
            super(VisualFoxpro9Parser.FuncCallTrailerContext, self).__init__(parser)
            self.copyFrom(ctx)

        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)

        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitFuncCallTrailer"):
                return visitor.visitFuncCallTrailer(self)
            else:
                return visitor.visitChildren(self)


    class IdentTrailerContext(TrailerContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.TrailerContext)
            super(VisualFoxpro9Parser.IdentTrailerContext, self).__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitIdentTrailer"):
                return visitor.visitIdentTrailer(self)
            else:
                return visitor.visitChildren(self)



    def trailer(self):

        localctx = VisualFoxpro9Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 1631
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.LEFTPAREN]:
                localctx = VisualFoxpro9Parser.FuncCallTrailerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1621
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.LEFTPAREN]:
                    self.state = 1611
                    self.match(VisualFoxpro9Parser.LEFTPAREN)
                    self.state = 1613
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.STRING_LITERAL) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.QUIT) | (1 << VisualFoxpro9Parser.EXIT) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.RELEASE - 64)) | (1 << (VisualFoxpro9Parser.RECYCLE - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.TABLE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.FUNCTION - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 64)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.GO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.RECORD - 128)) | (1 << (VisualFoxpro9Parser.CLOSE - 128)) | (1 << (VisualFoxpro9Parser.APPEND - 128)) | (1 << (VisualFoxpro9Parser.BLANK - 128)) | (1 << (VisualFoxpro9Parser.NOMENU - 128)) | (1 << (VisualFoxpro9Parser.CASE - 128)) | (1 << (VisualFoxpro9Parser.ENDCASE - 128)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.POPUPS - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.UNDEFINE - 192)) | (1 << (VisualFoxpro9Parser.IFDEF - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 192)) | (1 << (VisualFoxpro9Parser.ENDWITH - 192)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 192)) | (1 << (VisualFoxpro9Parser.ALIAS - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.T - 192)) | (1 << (VisualFoxpro9Parser.F - 192)) | (1 << (VisualFoxpro9Parser.Y - 192)) | (1 << (VisualFoxpro9Parser.N - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.DATABASES - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROTECTED - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.INSERT - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.MEMVAR - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.SCATTER - 256)) | (1 << (VisualFoxpro9Parser.GATHER - 256)) | (1 << (VisualFoxpro9Parser.EXCEPT - 256)) | (1 << (VisualFoxpro9Parser.LIKE - 256)) | (1 << (VisualFoxpro9Parser.FIELDS - 256)) | (1 << (VisualFoxpro9Parser.ALTER - 256)) | (1 << (VisualFoxpro9Parser.COLUMN - 256)) | (1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                        self.state = 1612
                        self.args()


                    self.state = 1615
                    self.match(VisualFoxpro9Parser.RIGHTPAREN)
                    pass
                elif token in [VisualFoxpro9Parser.LEFTBRACKET]:
                    self.state = 1616
                    self.match(VisualFoxpro9Parser.LEFTBRACKET)
                    self.state = 1618
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.STRING_LITERAL) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.QUIT) | (1 << VisualFoxpro9Parser.EXIT) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.PUBLIC) | (1 << VisualFoxpro9Parser.PRIVATE) | (1 << VisualFoxpro9Parser.LOCAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.RELEASE - 64)) | (1 << (VisualFoxpro9Parser.RECYCLE - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.TABLE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.FUNCTION - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 64)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.GO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.RECORD - 128)) | (1 << (VisualFoxpro9Parser.CLOSE - 128)) | (1 << (VisualFoxpro9Parser.APPEND - 128)) | (1 << (VisualFoxpro9Parser.BLANK - 128)) | (1 << (VisualFoxpro9Parser.NOMENU - 128)) | (1 << (VisualFoxpro9Parser.CASE - 128)) | (1 << (VisualFoxpro9Parser.ENDCASE - 128)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.POPUPS - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.UNDEFINE - 192)) | (1 << (VisualFoxpro9Parser.IFDEF - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 192)) | (1 << (VisualFoxpro9Parser.ENDWITH - 192)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 192)) | (1 << (VisualFoxpro9Parser.ALIAS - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.SEEK - 192)) | (1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.T - 192)) | (1 << (VisualFoxpro9Parser.F - 192)) | (1 << (VisualFoxpro9Parser.Y - 192)) | (1 << (VisualFoxpro9Parser.N - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.DATABASES - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROTECTED - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.INSERT - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.MEMVAR - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.SCATTER - 256)) | (1 << (VisualFoxpro9Parser.GATHER - 256)) | (1 << (VisualFoxpro9Parser.EXCEPT - 256)) | (1 << (VisualFoxpro9Parser.LIKE - 256)) | (1 << (VisualFoxpro9Parser.FIELDS - 256)) | (1 << (VisualFoxpro9Parser.ALTER - 256)) | (1 << (VisualFoxpro9Parser.COLUMN - 256)) | (1 << (VisualFoxpro9Parser.DROP - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                        self.state = 1617
                        self.args()


                    self.state = 1620
                    self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1624
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                if la_ == 1:
                    self.state = 1623
                    self.trailer()


                pass
            elif token in [VisualFoxpro9Parser.PERIOD]:
                localctx = VisualFoxpro9Parser.IdentTrailerContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1626
                self.match(VisualFoxpro9Parser.PERIOD)
                self.state = 1627
                self.identifier()
                self.state = 1629
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
                if la_ == 1:
                    self.state = 1628
                    self.trailer()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathnameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PathnameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def pathElement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.PathElementContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.PathElementContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_pathname

        def accept(self, visitor):
            if hasattr(visitor, "visitPathname"):
                return visitor.visitPathname(self)
            else:
                return visitor.visitChildren(self)




    def pathname(self):

        localctx = VisualFoxpro9Parser.PathnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_pathname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.state = 1633
                self.identifier()
                self.state = 1634
                self.match(VisualFoxpro9Parser.COLON)


            self.state = 1639 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 1638
                    self.pathElement()

                else:
                    raise NoViableAltException(self)
                self.state = 1641 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PathElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)

        def BACKSLASH(self):
            return self.getToken(VisualFoxpro9Parser.BACKSLASH, 0)

        def NOTEQUALS(self):
            return self.getToken(VisualFoxpro9Parser.NOTEQUALS, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_pathElement

        def accept(self, visitor):
            if hasattr(visitor, "visitPathElement"):
                return visitor.visitPathElement(self)
            else:
                return visitor.visitChildren(self)




    def pathElement(self):

        localctx = VisualFoxpro9Parser.PathElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_pathElement)
        try:
            self.state = 1668
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.QUIT, VisualFoxpro9Parser.EXIT, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.PUBLIC, VisualFoxpro9Parser.PRIVATE, VisualFoxpro9Parser.LOCAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.FUNCTION, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.ENDFUNC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.LPARAMETERS, VisualFoxpro9Parser.LPARAMETER, VisualFoxpro9Parser.PARAMETERS, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.GO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.POPUPS, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.T, VisualFoxpro9Parser.F, VisualFoxpro9Parser.Y, VisualFoxpro9Parser.N, VisualFoxpro9Parser.NODEFAULT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.DATABASES, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.PROTECTED, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1643
                self.identifier()
                pass
            elif token in [VisualFoxpro9Parser.NUMBER_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1644
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                pass
            elif token in [VisualFoxpro9Parser.BACKSLASH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1645
                self.match(VisualFoxpro9Parser.BACKSLASH)
                pass
            elif token in [VisualFoxpro9Parser.SEMICOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1646
                self.match(VisualFoxpro9Parser.SEMICOLON)
                pass
            elif token in [VisualFoxpro9Parser.AMPERSAND]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1647
                self.match(VisualFoxpro9Parser.AMPERSAND)
                pass
            elif token in [VisualFoxpro9Parser.COMMERCIALAT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1648
                self.match(VisualFoxpro9Parser.COMMERCIALAT)
                pass
            elif token in [VisualFoxpro9Parser.PLUS_SIGN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1649
                self.match(VisualFoxpro9Parser.PLUS_SIGN)
                pass
            elif token in [VisualFoxpro9Parser.MINUS_SIGN]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1650
                self.match(VisualFoxpro9Parser.MINUS_SIGN)
                pass
            elif token in [VisualFoxpro9Parser.PERIOD]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1651
                self.match(VisualFoxpro9Parser.PERIOD)
                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACKET]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1652
                self.match(VisualFoxpro9Parser.LEFTBRACKET)
                pass
            elif token in [VisualFoxpro9Parser.RIGHTBRACKET]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1653
                self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1654
                self.match(VisualFoxpro9Parser.LEFTBRACE)
                pass
            elif token in [VisualFoxpro9Parser.RIGHTBRACE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1655
                self.match(VisualFoxpro9Parser.RIGHTBRACE)
                pass
            elif token in [VisualFoxpro9Parser.LEFTPAREN]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1656
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                pass
            elif token in [VisualFoxpro9Parser.RIGHTPAREN]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1657
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass
            elif token in [VisualFoxpro9Parser.EXCLAMATION]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1658
                self.match(VisualFoxpro9Parser.EXCLAMATION)
                pass
            elif token in [VisualFoxpro9Parser.HASH]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1659
                self.match(VisualFoxpro9Parser.HASH)
                pass
            elif token in [VisualFoxpro9Parser.DOUBLEEQUALS]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1660
                self.match(VisualFoxpro9Parser.DOUBLEEQUALS)
                pass
            elif token in [VisualFoxpro9Parser.NOTEQUALS]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1661
                self.match(VisualFoxpro9Parser.NOTEQUALS)
                pass
            elif token in [VisualFoxpro9Parser.MODULO]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1662
                self.match(VisualFoxpro9Parser.MODULO)
                pass
            elif token in [VisualFoxpro9Parser.EQUALS]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1663
                self.match(VisualFoxpro9Parser.EQUALS)
                pass
            elif token in [VisualFoxpro9Parser.CARAT]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1664
                self.match(VisualFoxpro9Parser.CARAT)
                pass
            elif token in [VisualFoxpro9Parser.COMMA]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1665
                self.match(VisualFoxpro9Parser.COMMA)
                pass
            elif token in [VisualFoxpro9Parser.DOLLAR]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1666
                self.match(VisualFoxpro9Parser.DOLLAR)
                pass
            elif token in [VisualFoxpro9Parser.T__0]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1667
                self.match(VisualFoxpro9Parser.T__0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecialExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SpecialExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def constant(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ConstantContext,0)


        def pathname(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.PathnameContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_specialExpr

        def accept(self, visitor):
            if hasattr(visitor, "visitSpecialExpr"):
                return visitor.visitSpecialExpr(self)
            else:
                return visitor.visitChildren(self)




    def specialExpr(self):

        localctx = VisualFoxpro9Parser.SpecialExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_specialExpr)
        try:
            self.state = 1677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1670
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 1671
                self.expr(0)
                self.state = 1672
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1674
                self.constant()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1675
                self.pathname()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1676
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ConstantContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_constant

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.ConstantContext, self).copyFrom(ctx)



    class DateContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.DateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NUMBER_LITERAL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NUMBER_LITERAL)
            else:
                return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, i)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitDate"):
                return visitor.visitDate(self)
            else:
                return visitor.visitChildren(self)


    class NumberContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.NumberContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitNumber"):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)


    class BooleanContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.BooleanContext, self).__init__(parser)
            self.copyFrom(ctx)

        def T(self):
            return self.getToken(VisualFoxpro9Parser.T, 0)
        def F(self):
            return self.getToken(VisualFoxpro9Parser.F, 0)
        def Y(self):
            return self.getToken(VisualFoxpro9Parser.Y, 0)
        def N(self):
            return self.getToken(VisualFoxpro9Parser.N, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitBoolean"):
                return visitor.visitBoolean(self)
            else:
                return visitor.visitChildren(self)


    class NullContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.NullContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(VisualFoxpro9Parser.NULL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitNull"):
                return visitor.visitNull(self)
            else:
                return visitor.visitChildren(self)


    class StringContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.StringContext, self).__init__(parser)
            self.copyFrom(ctx)

        def STRING_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.STRING_LITERAL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitString"):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)


    class CurrencyContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.CurrencyContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCurrency"):
                return visitor.visitCurrency(self)
            else:
                return visitor.visitChildren(self)



    def constant(self):

        localctx = VisualFoxpro9Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 1719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.NumberContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1679
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.CurrencyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1680
                self.match(VisualFoxpro9Parser.DOLLAR)
                self.state = 1681
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.BooleanContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1682
                self.match(VisualFoxpro9Parser.PERIOD)
                self.state = 1683
                _la = self._input.LA(1)
                if not(((((_la - 223)) & ~0x3f) == 0 and ((1 << (_la - 223)) & ((1 << (VisualFoxpro9Parser.T - 223)) | (1 << (VisualFoxpro9Parser.F - 223)) | (1 << (VisualFoxpro9Parser.Y - 223)) | (1 << (VisualFoxpro9Parser.N - 223)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1684
                self.match(VisualFoxpro9Parser.PERIOD)
                pass

            elif la_ == 4:
                localctx = VisualFoxpro9Parser.NullContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1689
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.PERIOD]:
                    self.state = 1685
                    self.match(VisualFoxpro9Parser.PERIOD)
                    self.state = 1686
                    self.match(VisualFoxpro9Parser.NULL)
                    self.state = 1687
                    self.match(VisualFoxpro9Parser.PERIOD)
                    pass
                elif token in [VisualFoxpro9Parser.NULL]:
                    self.state = 1688
                    self.match(VisualFoxpro9Parser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                localctx = VisualFoxpro9Parser.DateContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1691
                self.match(VisualFoxpro9Parser.LEFTBRACE)
                self.state = 1715
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.FORWARDSLASH]:
                    self.state = 1692
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    self.state = 1693
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    pass
                elif token in [VisualFoxpro9Parser.CARAT]:
                    self.state = 1694
                    self.match(VisualFoxpro9Parser.CARAT)
                    self.state = 1695
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                    self.state = 1696
                    self.match(VisualFoxpro9Parser.MINUS_SIGN)
                    self.state = 1697
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                    self.state = 1698
                    self.match(VisualFoxpro9Parser.MINUS_SIGN)
                    self.state = 1699
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                    self.state = 1713
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.NUMBER_LITERAL or _la==VisualFoxpro9Parser.COMMA:
                        self.state = 1701
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.COMMA:
                            self.state = 1700
                            self.match(VisualFoxpro9Parser.COMMA)


                        self.state = 1703
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 1710
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.COLON:
                            self.state = 1704
                            self.match(VisualFoxpro9Parser.COLON)
                            self.state = 1705
                            self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                            self.state = 1708
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==VisualFoxpro9Parser.COLON:
                                self.state = 1706
                                self.match(VisualFoxpro9Parser.COLON)
                                self.state = 1707
                                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)




                        self.state = 1712
                        self.identifier()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1717
                self.match(VisualFoxpro9Parser.RIGHTBRACE)
                pass

            elif la_ == 6:
                localctx = VisualFoxpro9Parser.StringContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1718
                self.match(VisualFoxpro9Parser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.AssignContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STORE(self):
            return self.getToken(VisualFoxpro9Parser.STORE, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def idAttr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdAttrContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_assign

        def accept(self, visitor):
            if hasattr(visitor, "visitAssign"):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)




    def assign(self):

        localctx = VisualFoxpro9Parser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_assign)
        self._la = 0 # Token type
        try:
            self.state = 1736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1721
                self.match(VisualFoxpro9Parser.STORE)
                self.state = 1722
                self.expr(0)
                self.state = 1723
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1724
                self.idAttr()
                self.state = 1729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.COMMA:
                    self.state = 1725
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1726
                    self.idAttr()
                    self.state = 1731
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1732
                self.idAttr()
                self.state = 1733
                self.match(VisualFoxpro9Parser.EQUALS)
                self.state = 1734
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdAttr2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IdAttr2Context, self).__init__(parent, invokingState)
            self.parser = parser
            self.startPeriod = None # Token

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_idAttr2

        def accept(self, visitor):
            if hasattr(visitor, "visitIdAttr2"):
                return visitor.visitIdAttr2(self)
            else:
                return visitor.visitChildren(self)




    def idAttr2(self):

        localctx = VisualFoxpro9Parser.IdAttr2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_idAttr2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.PERIOD:
                self.state = 1738
                localctx.startPeriod = self.match(VisualFoxpro9Parser.PERIOD)


            self.state = 1741
            self.identifier()
            self.state = 1746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.PERIOD:
                self.state = 1742
                self.match(VisualFoxpro9Parser.PERIOD)
                self.state = 1743
                self.identifier()
                self.state = 1748
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdAttrContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IdAttrContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)

        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_idAttr

        def accept(self, visitor):
            if hasattr(visitor, "visitIdAttr"):
                return visitor.visitIdAttr(self)
            else:
                return visitor.visitChildren(self)




    def idAttr(self):

        localctx = VisualFoxpro9Parser.IdAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_idAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.PERIOD:
                self.state = 1749
                self.match(VisualFoxpro9Parser.PERIOD)


            self.state = 1752
            self.identifier()
            self.state = 1754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.state = 1753
                self.trailer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TwoExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.TwoExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_twoExpr

        def accept(self, visitor):
            if hasattr(visitor, "visitTwoExpr"):
                return visitor.visitTwoExpr(self)
            else:
                return visitor.visitChildren(self)




    def twoExpr(self):

        localctx = VisualFoxpro9Parser.TwoExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_twoExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1756
            self.expr(0)
            self.state = 1757
            self.match(VisualFoxpro9Parser.COMMA)
            self.state = 1758
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayIndexContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ArrayIndexContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def twoExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TwoExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_arrayIndex

        def accept(self, visitor):
            if hasattr(visitor, "visitArrayIndex"):
                return visitor.visitArrayIndex(self)
            else:
                return visitor.visitChildren(self)




    def arrayIndex(self):

        localctx = VisualFoxpro9Parser.ArrayIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_arrayIndex)
        try:
            self.state = 1774
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.LEFTPAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1760
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 1763
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
                if la_ == 1:
                    self.state = 1761
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 1762
                    self.twoExpr()
                    pass


                self.state = 1765
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1767
                self.match(VisualFoxpro9Parser.LEFTBRACKET)
                self.state = 1770
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
                if la_ == 1:
                    self.state = 1768
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 1769
                    self.twoExpr()
                    pass


                self.state = 1772
                self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatatypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DatatypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_datatype

        def accept(self, visitor):
            if hasattr(visitor, "visitDatatype"):
                return visitor.visitDatatype(self)
            else:
                return visitor.visitChildren(self)




    def datatype(self):

        localctx = VisualFoxpro9Parser.DatatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_datatype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1776
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScopeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ScopeClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)

        def NEXT(self):
            return self.getToken(VisualFoxpro9Parser.NEXT, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def RECORD(self):
            return self.getToken(VisualFoxpro9Parser.RECORD, 0)

        def REST(self):
            return self.getToken(VisualFoxpro9Parser.REST, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_scopeClause

        def accept(self, visitor):
            if hasattr(visitor, "visitScopeClause"):
                return visitor.visitScopeClause(self)
            else:
                return visitor.visitChildren(self)




    def scopeClause(self):

        localctx = VisualFoxpro9Parser.ScopeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_scopeClause)
        try:
            self.state = 1784
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1778
                self.match(VisualFoxpro9Parser.ALL)
                pass
            elif token in [VisualFoxpro9Parser.NEXT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1779
                self.match(VisualFoxpro9Parser.NEXT)
                self.state = 1780
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.RECORD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1781
                self.match(VisualFoxpro9Parser.RECORD)
                self.state = 1782
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.REST]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1783
                self.match(VisualFoxpro9Parser.REST)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IdentifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)

        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)

        def ELIF(self):
            return self.getToken(VisualFoxpro9Parser.ELIF, 0)

        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)

        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)

        def OFF(self):
            return self.getToken(VisualFoxpro9Parser.OFF, 0)

        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)

        def QUIT(self):
            return self.getToken(VisualFoxpro9Parser.QUIT, 0)

        def EXIT(self):
            return self.getToken(VisualFoxpro9Parser.EXIT, 0)

        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)

        def STORE(self):
            return self.getToken(VisualFoxpro9Parser.STORE, 0)

        def PUBLIC(self):
            return self.getToken(VisualFoxpro9Parser.PUBLIC, 0)

        def PRIVATE(self):
            return self.getToken(VisualFoxpro9Parser.PRIVATE, 0)

        def LOCAL(self):
            return self.getToken(VisualFoxpro9Parser.LOCAL, 0)

        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)

        def RECALL(self):
            return self.getToken(VisualFoxpro9Parser.RECALL, 0)

        def DELETE(self):
            return self.getToken(VisualFoxpro9Parser.DELETE, 0)

        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)

        def SET(self):
            return self.getToken(VisualFoxpro9Parser.SET, 0)

        def RELEASE(self):
            return self.getToken(VisualFoxpro9Parser.RELEASE, 0)

        def RECYCLE(self):
            return self.getToken(VisualFoxpro9Parser.RECYCLE, 0)

        def CREATE(self):
            return self.getToken(VisualFoxpro9Parser.CREATE, 0)

        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)

        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)

        def DBF(self):
            return self.getToken(VisualFoxpro9Parser.DBF, 0)

        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)

        def FREE(self):
            return self.getToken(VisualFoxpro9Parser.FREE, 0)

        def SELECT(self):
            return self.getToken(VisualFoxpro9Parser.SELECT, 0)

        def USE(self):
            return self.getToken(VisualFoxpro9Parser.USE, 0)

        def READ(self):
            return self.getToken(VisualFoxpro9Parser.READ, 0)

        def EVENTS(self):
            return self.getToken(VisualFoxpro9Parser.EVENTS, 0)

        def SHUTDOWN(self):
            return self.getToken(VisualFoxpro9Parser.SHUTDOWN, 0)

        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def FUNCTION(self):
            return self.getToken(VisualFoxpro9Parser.FUNCTION, 0)

        def ENDFUNC(self):
            return self.getToken(VisualFoxpro9Parser.ENDFUNC, 0)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)

        def CLASS(self):
            return self.getToken(VisualFoxpro9Parser.CLASS, 0)

        def ENDDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.ENDDEFINE, 0)

        def LOCATE(self):
            return self.getToken(VisualFoxpro9Parser.LOCATE, 0)

        def CONTINUE(self):
            return self.getToken(VisualFoxpro9Parser.CONTINUE, 0)

        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def ENDFOR(self):
            return self.getToken(VisualFoxpro9Parser.ENDFOR, 0)

        def WHILE(self):
            return self.getToken(VisualFoxpro9Parser.WHILE, 0)

        def NOOPTIMIZE(self):
            return self.getToken(VisualFoxpro9Parser.NOOPTIMIZE, 0)

        def STATUS(self):
            return self.getToken(VisualFoxpro9Parser.STATUS, 0)

        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)

        def MEMOWIDTH(self):
            return self.getToken(VisualFoxpro9Parser.MEMOWIDTH, 0)

        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)

        def REFRESH(self):
            return self.getToken(VisualFoxpro9Parser.REFRESH, 0)

        def BELL(self):
            return self.getToken(VisualFoxpro9Parser.BELL, 0)

        def CENTURY(self):
            return self.getToken(VisualFoxpro9Parser.CENTURY, 0)

        def DATE(self):
            return self.getToken(VisualFoxpro9Parser.DATE, 0)

        def ADD(self):
            return self.getToken(VisualFoxpro9Parser.ADD, 0)

        def OBJECT(self):
            return self.getToken(VisualFoxpro9Parser.OBJECT, 0)

        def REPLACE(self):
            return self.getToken(VisualFoxpro9Parser.REPLACE, 0)

        def LIBRARY(self):
            return self.getToken(VisualFoxpro9Parser.LIBRARY, 0)

        def SHARED(self):
            return self.getToken(VisualFoxpro9Parser.SHARED, 0)

        def WAIT(self):
            return self.getToken(VisualFoxpro9Parser.WAIT, 0)

        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)

        def NOWAIT(self):
            return self.getToken(VisualFoxpro9Parser.NOWAIT, 0)

        def NOCLEAR(self):
            return self.getToken(VisualFoxpro9Parser.NOCLEAR, 0)

        def NOTIFY(self):
            return self.getToken(VisualFoxpro9Parser.NOTIFY, 0)

        def ENDDO(self):
            return self.getToken(VisualFoxpro9Parser.ENDDO, 0)

        def DECLARE(self):
            return self.getToken(VisualFoxpro9Parser.DECLARE, 0)

        def ERASE(self):
            return self.getToken(VisualFoxpro9Parser.ERASE, 0)

        def SYSMENU(self):
            return self.getToken(VisualFoxpro9Parser.SYSMENU, 0)

        def CLOCK(self):
            return self.getToken(VisualFoxpro9Parser.CLOCK, 0)

        def RETURN(self):
            return self.getToken(VisualFoxpro9Parser.RETURN, 0)

        def LPARAMETERS(self):
            return self.getToken(VisualFoxpro9Parser.LPARAMETERS, 0)

        def LPARAMETER(self):
            return self.getToken(VisualFoxpro9Parser.LPARAMETER, 0)

        def PARAMETERS(self):
            return self.getToken(VisualFoxpro9Parser.PARAMETERS, 0)

        def ALTERNATE(self):
            return self.getToken(VisualFoxpro9Parser.ALTERNATE, 0)

        def EXACT(self):
            return self.getToken(VisualFoxpro9Parser.EXACT, 0)

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)

        def COUNT(self):
            return self.getToken(VisualFoxpro9Parser.COUNT, 0)

        def GOTO(self):
            return self.getToken(VisualFoxpro9Parser.GOTO, 0)

        def GO(self):
            return self.getToken(VisualFoxpro9Parser.GO, 0)

        def TOP(self):
            return self.getToken(VisualFoxpro9Parser.TOP, 0)

        def BOTTOM(self):
            return self.getToken(VisualFoxpro9Parser.BOTTOM, 0)

        def RECORD(self):
            return self.getToken(VisualFoxpro9Parser.RECORD, 0)

        def CLOSE(self):
            return self.getToken(VisualFoxpro9Parser.CLOSE, 0)

        def APPEND(self):
            return self.getToken(VisualFoxpro9Parser.APPEND, 0)

        def BLANK(self):
            return self.getToken(VisualFoxpro9Parser.BLANK, 0)

        def NOMENU(self):
            return self.getToken(VisualFoxpro9Parser.NOMENU, 0)

        def CASE(self):
            return self.getToken(VisualFoxpro9Parser.CASE, 0)

        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)

        def REPORT(self):
            return self.getToken(VisualFoxpro9Parser.REPORT, 0)

        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)

        def NOEJECT(self):
            return self.getToken(VisualFoxpro9Parser.NOEJECT, 0)

        def PRINTER(self):
            return self.getToken(VisualFoxpro9Parser.PRINTER, 0)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)

        def NOPROMPT(self):
            return self.getToken(VisualFoxpro9Parser.NOPROMPT, 0)

        def NOCONSOLE(self):
            return self.getToken(VisualFoxpro9Parser.NOCONSOLE, 0)

        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)

        def STRUCTURE(self):
            return self.getToken(VisualFoxpro9Parser.STRUCTURE, 0)

        def DELETED(self):
            return self.getToken(VisualFoxpro9Parser.DELETED, 0)

        def SUM(self):
            return self.getToken(VisualFoxpro9Parser.SUM, 0)

        def DISTINCT(self):
            return self.getToken(VisualFoxpro9Parser.DISTINCT, 0)

        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)

        def NEXT(self):
            return self.getToken(VisualFoxpro9Parser.NEXT, 0)

        def REST(self):
            return self.getToken(VisualFoxpro9Parser.REST, 0)

        def SKIPKW(self):
            return self.getToken(VisualFoxpro9Parser.SKIPKW, 0)

        def PACK(self):
            return self.getToken(VisualFoxpro9Parser.PACK, 0)

        def EXCLUSIVE(self):
            return self.getToken(VisualFoxpro9Parser.EXCLUSIVE, 0)

        def NEAR(self):
            return self.getToken(VisualFoxpro9Parser.NEAR, 0)

        def MKDIR(self):
            return self.getToken(VisualFoxpro9Parser.MKDIR, 0)

        def RMDIR(self):
            return self.getToken(VisualFoxpro9Parser.RMDIR, 0)

        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)

        def KEYBOARD(self):
            return self.getToken(VisualFoxpro9Parser.KEYBOARD, 0)

        def LABEL(self):
            return self.getToken(VisualFoxpro9Parser.LABEL, 0)

        def PLAIN(self):
            return self.getToken(VisualFoxpro9Parser.PLAIN, 0)

        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)

        def AT(self):
            return self.getToken(VisualFoxpro9Parser.AT, 0)

        def LINE(self):
            return self.getToken(VisualFoxpro9Parser.LINE, 0)

        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)

        def NOMARGIN(self):
            return self.getToken(VisualFoxpro9Parser.NOMARGIN, 0)

        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def COLOR(self):
            return self.getToken(VisualFoxpro9Parser.COLOR, 0)

        def SCHEME(self):
            return self.getToken(VisualFoxpro9Parser.SCHEME, 0)

        def BEFORE(self):
            return self.getToken(VisualFoxpro9Parser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(VisualFoxpro9Parser.AFTER, 0)

        def NEGOTIATE(self):
            return self.getToken(VisualFoxpro9Parser.NEGOTIATE, 0)

        def FONT(self):
            return self.getToken(VisualFoxpro9Parser.FONT, 0)

        def STYLE(self):
            return self.getToken(VisualFoxpro9Parser.STYLE, 0)

        def MARK(self):
            return self.getToken(VisualFoxpro9Parser.MARK, 0)

        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)

        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)

        def SHADOW(self):
            return self.getToken(VisualFoxpro9Parser.SHADOW, 0)

        def MARGIN(self):
            return self.getToken(VisualFoxpro9Parser.MARGIN, 0)

        def RELATIVE(self):
            return self.getToken(VisualFoxpro9Parser.RELATIVE, 0)

        def SELECTION(self):
            return self.getToken(VisualFoxpro9Parser.SELECTION, 0)

        def DEACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.DEACTIVATE, 0)

        def SAME(self):
            return self.getToken(VisualFoxpro9Parser.SAME, 0)

        def NOSHOW(self):
            return self.getToken(VisualFoxpro9Parser.NOSHOW, 0)

        def STEP(self):
            return self.getToken(VisualFoxpro9Parser.STEP, 0)

        def THEN(self):
            return self.getToken(VisualFoxpro9Parser.THEN, 0)

        def UNDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.UNDEFINE, 0)

        def IFDEF(self):
            return self.getToken(VisualFoxpro9Parser.IFDEF, 0)

        def PUSH(self):
            return self.getToken(VisualFoxpro9Parser.PUSH, 0)

        def POP(self):
            return self.getToken(VisualFoxpro9Parser.POP, 0)

        def TIMEOUT(self):
            return self.getToken(VisualFoxpro9Parser.TIMEOUT, 0)

        def ENDWITH(self):
            return self.getToken(VisualFoxpro9Parser.ENDWITH, 0)

        def TYPEAHEAD(self):
            return self.getToken(VisualFoxpro9Parser.TYPEAHEAD, 0)

        def ALIAS(self):
            return self.getToken(VisualFoxpro9Parser.ALIAS, 0)

        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)

        def SEEK(self):
            return self.getToken(VisualFoxpro9Parser.SEEK, 0)

        def WHERE(self):
            return self.getToken(VisualFoxpro9Parser.WHERE, 0)

        def FILTER(self):
            return self.getToken(VisualFoxpro9Parser.FILTER, 0)

        def RENAME(self):
            return self.getToken(VisualFoxpro9Parser.RENAME, 0)

        def INCLUDE(self):
            return self.getToken(VisualFoxpro9Parser.INCLUDE, 0)

        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)

        def BY(self):
            return self.getToken(VisualFoxpro9Parser.BY, 0)

        def UNIQUE(self):
            return self.getToken(VisualFoxpro9Parser.UNIQUE, 0)

        def INDEX(self):
            return self.getToken(VisualFoxpro9Parser.INDEX, 0)

        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)

        def COMPACT(self):
            return self.getToken(VisualFoxpro9Parser.COMPACT, 0)

        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)

        def CANDIDATE(self):
            return self.getToken(VisualFoxpro9Parser.CANDIDATE, 0)

        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)

        def DIMENSION(self):
            return self.getToken(VisualFoxpro9Parser.DIMENSION, 0)

        def NOT(self):
            return self.getToken(VisualFoxpro9Parser.NOT, 0)

        def AND(self):
            return self.getToken(VisualFoxpro9Parser.AND, 0)

        def OR(self):
            return self.getToken(VisualFoxpro9Parser.OR, 0)

        def SCAN(self):
            return self.getToken(VisualFoxpro9Parser.SCAN, 0)

        def ENDSCAN(self):
            return self.getToken(VisualFoxpro9Parser.ENDSCAN, 0)

        def NULL(self):
            return self.getToken(VisualFoxpro9Parser.NULL, 0)

        def T(self):
            return self.getToken(VisualFoxpro9Parser.T, 0)

        def F(self):
            return self.getToken(VisualFoxpro9Parser.F, 0)

        def Y(self):
            return self.getToken(VisualFoxpro9Parser.Y, 0)

        def N(self):
            return self.getToken(VisualFoxpro9Parser.N, 0)

        def NODEFAULT(self):
            return self.getToken(VisualFoxpro9Parser.NODEFAULT, 0)

        def DLLS(self):
            return self.getToken(VisualFoxpro9Parser.DLLS, 0)

        def MACROS(self):
            return self.getToken(VisualFoxpro9Parser.MACROS, 0)

        def NUMBER(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER, 0)

        def ZAP(self):
            return self.getToken(VisualFoxpro9Parser.ZAP, 0)

        def ROLLOVER(self):
            return self.getToken(VisualFoxpro9Parser.ROLLOVER, 0)

        def DEFAULT(self):
            return self.getToken(VisualFoxpro9Parser.DEFAULT, 0)

        def SAVE(self):
            return self.getToken(VisualFoxpro9Parser.SAVE, 0)

        def NOSAVE(self):
            return self.getToken(VisualFoxpro9Parser.NOSAVE, 0)

        def PROGRAM(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAM, 0)

        def PROTECTED(self):
            return self.getToken(VisualFoxpro9Parser.PROTECTED, 0)

        def THROW(self):
            return self.getToken(VisualFoxpro9Parser.THROW, 0)

        def TABLES(self):
            return self.getToken(VisualFoxpro9Parser.TABLES, 0)

        def EACH(self):
            return self.getToken(VisualFoxpro9Parser.EACH, 0)

        def CAST(self):
            return self.getToken(VisualFoxpro9Parser.CAST, 0)

        def ENDCASE(self):
            return self.getToken(VisualFoxpro9Parser.ENDCASE, 0)

        def ENDPROC(self):
            return self.getToken(VisualFoxpro9Parser.ENDPROC, 0)

        def REINDEX(self):
            return self.getToken(VisualFoxpro9Parser.REINDEX, 0)

        def DATABASES(self):
            return self.getToken(VisualFoxpro9Parser.DATABASES, 0)

        def INDEXES(self):
            return self.getToken(VisualFoxpro9Parser.INDEXES, 0)

        def OTHERWISE(self):
            return self.getToken(VisualFoxpro9Parser.OTHERWISE, 0)

        def RUN(self):
            return self.getToken(VisualFoxpro9Parser.RUN, 0)

        def POPUPS(self):
            return self.getToken(VisualFoxpro9Parser.POPUPS, 0)

        def EXTENDED(self):
            return self.getToken(VisualFoxpro9Parser.EXTENDED, 0)

        def ASSERT(self):
            return self.getToken(VisualFoxpro9Parser.ASSERT, 0)

        def TRY(self):
            return self.getToken(VisualFoxpro9Parser.TRY, 0)

        def CATCH(self):
            return self.getToken(VisualFoxpro9Parser.CATCH, 0)

        def FINALLY(self):
            return self.getToken(VisualFoxpro9Parser.FINALLY, 0)

        def ENDTRY(self):
            return self.getToken(VisualFoxpro9Parser.ENDTRY, 0)

        def BROWSE(self):
            return self.getToken(VisualFoxpro9Parser.BROWSE, 0)

        def INSERT(self):
            return self.getToken(VisualFoxpro9Parser.INSERT, 0)

        def VALUES(self):
            return self.getToken(VisualFoxpro9Parser.VALUES, 0)

        def MEMVAR(self):
            return self.getToken(VisualFoxpro9Parser.MEMVAR, 0)

        def COMPATIBLE(self):
            return self.getToken(VisualFoxpro9Parser.COMPATIBLE, 0)

        def DB4(self):
            return self.getToken(VisualFoxpro9Parser.DB4, 0)

        def FOXPLUS(self):
            return self.getToken(VisualFoxpro9Parser.FOXPLUS, 0)

        def TYPE(self):
            return self.getToken(VisualFoxpro9Parser.TYPE, 0)

        def SCATTER(self):
            return self.getToken(VisualFoxpro9Parser.SCATTER, 0)

        def GATHER(self):
            return self.getToken(VisualFoxpro9Parser.GATHER, 0)

        def EXCEPT(self):
            return self.getToken(VisualFoxpro9Parser.EXCEPT, 0)

        def LIKE(self):
            return self.getToken(VisualFoxpro9Parser.LIKE, 0)

        def FIELDS(self):
            return self.getToken(VisualFoxpro9Parser.FIELDS, 0)

        def ALTER(self):
            return self.getToken(VisualFoxpro9Parser.ALTER, 0)

        def COLUMN(self):
            return self.getToken(VisualFoxpro9Parser.COLUMN, 0)

        def DROP(self):
            return self.getToken(VisualFoxpro9Parser.DROP, 0)

        def ID(self):
            return self.getToken(VisualFoxpro9Parser.ID, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_identifier

        def accept(self, visitor):
            if hasattr(visitor, "visitIdentifier"):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = VisualFoxpro9Parser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1786
            _la = self._input.LA(1)
            if not(((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (VisualFoxpro9Parser.ASSERT - 39)) | (1 << (VisualFoxpro9Parser.TO - 39)) | (1 << (VisualFoxpro9Parser.DO - 39)) | (1 << (VisualFoxpro9Parser.IN - 39)) | (1 << (VisualFoxpro9Parser.AS - 39)) | (1 << (VisualFoxpro9Parser.IF - 39)) | (1 << (VisualFoxpro9Parser.ELIF - 39)) | (1 << (VisualFoxpro9Parser.ELSE - 39)) | (1 << (VisualFoxpro9Parser.ENDIF - 39)) | (1 << (VisualFoxpro9Parser.ON - 39)) | (1 << (VisualFoxpro9Parser.OFF - 39)) | (1 << (VisualFoxpro9Parser.ERROR - 39)) | (1 << (VisualFoxpro9Parser.QUIT - 39)) | (1 << (VisualFoxpro9Parser.EXIT - 39)) | (1 << (VisualFoxpro9Parser.WITH - 39)) | (1 << (VisualFoxpro9Parser.STORE - 39)) | (1 << (VisualFoxpro9Parser.PUBLIC - 39)) | (1 << (VisualFoxpro9Parser.PRIVATE - 39)) | (1 << (VisualFoxpro9Parser.LOCAL - 39)) | (1 << (VisualFoxpro9Parser.ARRAY - 39)) | (1 << (VisualFoxpro9Parser.DELETE - 39)) | (1 << (VisualFoxpro9Parser.RECALL - 39)) | (1 << (VisualFoxpro9Parser.FILE - 39)) | (1 << (VisualFoxpro9Parser.SET - 39)) | (1 << (VisualFoxpro9Parser.RELEASE - 39)) | (1 << (VisualFoxpro9Parser.RECYCLE - 39)) | (1 << (VisualFoxpro9Parser.CREATE - 39)) | (1 << (VisualFoxpro9Parser.TABLE - 39)) | (1 << (VisualFoxpro9Parser.DBF - 39)) | (1 << (VisualFoxpro9Parser.NAME - 39)) | (1 << (VisualFoxpro9Parser.FREE - 39)) | (1 << (VisualFoxpro9Parser.SELECT - 39)) | (1 << (VisualFoxpro9Parser.USE - 39)) | (1 << (VisualFoxpro9Parser.READ - 39)) | (1 << (VisualFoxpro9Parser.EVENTS - 39)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 39)) | (1 << (VisualFoxpro9Parser.CLEAR - 39)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 39)) | (1 << (VisualFoxpro9Parser.FUNCTION - 39)) | (1 << (VisualFoxpro9Parser.ENDPROC - 39)) | (1 << (VisualFoxpro9Parser.ENDFUNC - 39)) | (1 << (VisualFoxpro9Parser.DEFINE - 39)) | (1 << (VisualFoxpro9Parser.CLASS - 39)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 39)) | (1 << (VisualFoxpro9Parser.LOCATE - 39)) | (1 << (VisualFoxpro9Parser.CONTINUE - 39)) | (1 << (VisualFoxpro9Parser.FOR - 39)) | (1 << (VisualFoxpro9Parser.ENDFOR - 39)) | (1 << (VisualFoxpro9Parser.WHILE - 39)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 39)) | (1 << (VisualFoxpro9Parser.STATUS - 39)) | (1 << (VisualFoxpro9Parser.BAR - 39)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 39)) | (1 << (VisualFoxpro9Parser.CURSOR - 39)) | (1 << (VisualFoxpro9Parser.REFRESH - 39)) | (1 << (VisualFoxpro9Parser.BELL - 39)) | (1 << (VisualFoxpro9Parser.CENTURY - 39)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 39)) | (1 << (VisualFoxpro9Parser.DATE - 39)) | (1 << (VisualFoxpro9Parser.ADD - 39)) | (1 << (VisualFoxpro9Parser.OBJECT - 39)))) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (VisualFoxpro9Parser.REPLACE - 103)) | (1 << (VisualFoxpro9Parser.LIBRARY - 103)) | (1 << (VisualFoxpro9Parser.SHARED - 103)) | (1 << (VisualFoxpro9Parser.WAIT - 103)) | (1 << (VisualFoxpro9Parser.WINDOW - 103)) | (1 << (VisualFoxpro9Parser.NOWAIT - 103)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 103)) | (1 << (VisualFoxpro9Parser.NOTIFY - 103)) | (1 << (VisualFoxpro9Parser.ENDDO - 103)) | (1 << (VisualFoxpro9Parser.DECLARE - 103)) | (1 << (VisualFoxpro9Parser.ERASE - 103)) | (1 << (VisualFoxpro9Parser.SYSMENU - 103)) | (1 << (VisualFoxpro9Parser.CLOCK - 103)) | (1 << (VisualFoxpro9Parser.RETURN - 103)) | (1 << (VisualFoxpro9Parser.LPARAMETERS - 103)) | (1 << (VisualFoxpro9Parser.LPARAMETER - 103)) | (1 << (VisualFoxpro9Parser.PARAMETERS - 103)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 103)) | (1 << (VisualFoxpro9Parser.EXACT - 103)) | (1 << (VisualFoxpro9Parser.ALL - 103)) | (1 << (VisualFoxpro9Parser.COUNT - 103)) | (1 << (VisualFoxpro9Parser.GOTO - 103)) | (1 << (VisualFoxpro9Parser.GO - 103)) | (1 << (VisualFoxpro9Parser.TOP - 103)) | (1 << (VisualFoxpro9Parser.BOTTOM - 103)) | (1 << (VisualFoxpro9Parser.RECORD - 103)) | (1 << (VisualFoxpro9Parser.CLOSE - 103)) | (1 << (VisualFoxpro9Parser.APPEND - 103)) | (1 << (VisualFoxpro9Parser.BLANK - 103)) | (1 << (VisualFoxpro9Parser.NOMENU - 103)) | (1 << (VisualFoxpro9Parser.CASE - 103)) | (1 << (VisualFoxpro9Parser.ENDCASE - 103)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 103)) | (1 << (VisualFoxpro9Parser.FROM - 103)) | (1 << (VisualFoxpro9Parser.REPORT - 103)) | (1 << (VisualFoxpro9Parser.FORM - 103)) | (1 << (VisualFoxpro9Parser.NOEJECT - 103)) | (1 << (VisualFoxpro9Parser.PRINTER - 103)) | (1 << (VisualFoxpro9Parser.PROMPT - 103)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 103)) | (1 << (VisualFoxpro9Parser.DB4 - 103)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 103)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 103)) | (1 << (VisualFoxpro9Parser.COPY - 103)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 103)) | (1 << (VisualFoxpro9Parser.DELETED - 103)) | (1 << (VisualFoxpro9Parser.SUM - 103)) | (1 << (VisualFoxpro9Parser.DISTINCT - 103)) | (1 << (VisualFoxpro9Parser.INTO - 103)) | (1 << (VisualFoxpro9Parser.NEXT - 103)) | (1 << (VisualFoxpro9Parser.REST - 103)) | (1 << (VisualFoxpro9Parser.SKIPKW - 103)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 103)) | (1 << (VisualFoxpro9Parser.NEAR - 103)) | (1 << (VisualFoxpro9Parser.MKDIR - 103)) | (1 << (VisualFoxpro9Parser.RMDIR - 103)) | (1 << (VisualFoxpro9Parser.KEY - 103)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 103)) | (1 << (VisualFoxpro9Parser.LABEL - 103)) | (1 << (VisualFoxpro9Parser.PLAIN - 103)) | (1 << (VisualFoxpro9Parser.MENU - 103)) | (1 << (VisualFoxpro9Parser.AT - 103)) | (1 << (VisualFoxpro9Parser.LINE - 103)) | (1 << (VisualFoxpro9Parser.SCREEN - 103)))) != 0) or ((((_la - 167)) & ~0x3f) == 0 and ((1 << (_la - 167)) & ((1 << (VisualFoxpro9Parser.NOMARGIN - 167)) | (1 << (VisualFoxpro9Parser.PAD - 167)) | (1 << (VisualFoxpro9Parser.OF - 167)) | (1 << (VisualFoxpro9Parser.COLOR - 167)) | (1 << (VisualFoxpro9Parser.SCHEME - 167)) | (1 << (VisualFoxpro9Parser.BEFORE - 167)) | (1 << (VisualFoxpro9Parser.AFTER - 167)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 167)) | (1 << (VisualFoxpro9Parser.FONT - 167)) | (1 << (VisualFoxpro9Parser.STYLE - 167)) | (1 << (VisualFoxpro9Parser.MARK - 167)) | (1 << (VisualFoxpro9Parser.MESSAGE - 167)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 167)) | (1 << (VisualFoxpro9Parser.POPUP - 167)) | (1 << (VisualFoxpro9Parser.POPUPS - 167)) | (1 << (VisualFoxpro9Parser.EXTENDED - 167)) | (1 << (VisualFoxpro9Parser.SHADOW - 167)) | (1 << (VisualFoxpro9Parser.MARGIN - 167)) | (1 << (VisualFoxpro9Parser.RELATIVE - 167)) | (1 << (VisualFoxpro9Parser.SELECTION - 167)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 167)) | (1 << (VisualFoxpro9Parser.SAME - 167)) | (1 << (VisualFoxpro9Parser.NOSHOW - 167)) | (1 << (VisualFoxpro9Parser.STEP - 167)) | (1 << (VisualFoxpro9Parser.THEN - 167)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 167)) | (1 << (VisualFoxpro9Parser.IFDEF - 167)) | (1 << (VisualFoxpro9Parser.PUSH - 167)) | (1 << (VisualFoxpro9Parser.POP - 167)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 167)) | (1 << (VisualFoxpro9Parser.ENDWITH - 167)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 167)) | (1 << (VisualFoxpro9Parser.ALIAS - 167)) | (1 << (VisualFoxpro9Parser.ORDER - 167)) | (1 << (VisualFoxpro9Parser.SEEK - 167)) | (1 << (VisualFoxpro9Parser.WHERE - 167)) | (1 << (VisualFoxpro9Parser.FILTER - 167)) | (1 << (VisualFoxpro9Parser.RENAME - 167)) | (1 << (VisualFoxpro9Parser.INCLUDE - 167)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 167)) | (1 << (VisualFoxpro9Parser.BY - 167)) | (1 << (VisualFoxpro9Parser.UNIQUE - 167)) | (1 << (VisualFoxpro9Parser.INDEX - 167)) | (1 << (VisualFoxpro9Parser.TAG - 167)) | (1 << (VisualFoxpro9Parser.COMPACT - 167)) | (1 << (VisualFoxpro9Parser.ASCENDING - 167)) | (1 << (VisualFoxpro9Parser.DESCENDING - 167)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 167)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 167)) | (1 << (VisualFoxpro9Parser.DIMENSION - 167)) | (1 << (VisualFoxpro9Parser.NOT - 167)) | (1 << (VisualFoxpro9Parser.AND - 167)) | (1 << (VisualFoxpro9Parser.OR - 167)) | (1 << (VisualFoxpro9Parser.SCAN - 167)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 167)) | (1 << (VisualFoxpro9Parser.NULL - 167)) | (1 << (VisualFoxpro9Parser.T - 167)) | (1 << (VisualFoxpro9Parser.F - 167)) | (1 << (VisualFoxpro9Parser.Y - 167)) | (1 << (VisualFoxpro9Parser.N - 167)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 167)) | (1 << (VisualFoxpro9Parser.DLLS - 167)) | (1 << (VisualFoxpro9Parser.MACROS - 167)) | (1 << (VisualFoxpro9Parser.NUMBER - 167)))) != 0) or ((((_la - 231)) & ~0x3f) == 0 and ((1 << (_la - 231)) & ((1 << (VisualFoxpro9Parser.ZAP - 231)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 231)) | (1 << (VisualFoxpro9Parser.DEFAULT - 231)) | (1 << (VisualFoxpro9Parser.SAVE - 231)) | (1 << (VisualFoxpro9Parser.NOSAVE - 231)) | (1 << (VisualFoxpro9Parser.DATABASE - 231)) | (1 << (VisualFoxpro9Parser.DATABASES - 231)) | (1 << (VisualFoxpro9Parser.TABLES - 231)) | (1 << (VisualFoxpro9Parser.INDEXES - 231)) | (1 << (VisualFoxpro9Parser.PACK - 231)) | (1 << (VisualFoxpro9Parser.REINDEX - 231)) | (1 << (VisualFoxpro9Parser.PROGRAM - 231)) | (1 << (VisualFoxpro9Parser.PROTECTED - 231)) | (1 << (VisualFoxpro9Parser.THROW - 231)) | (1 << (VisualFoxpro9Parser.EACH - 231)) | (1 << (VisualFoxpro9Parser.CAST - 231)) | (1 << (VisualFoxpro9Parser.RUN - 231)) | (1 << (VisualFoxpro9Parser.TRY - 231)) | (1 << (VisualFoxpro9Parser.CATCH - 231)) | (1 << (VisualFoxpro9Parser.FINALLY - 231)) | (1 << (VisualFoxpro9Parser.ENDTRY - 231)) | (1 << (VisualFoxpro9Parser.BROWSE - 231)) | (1 << (VisualFoxpro9Parser.INSERT - 231)) | (1 << (VisualFoxpro9Parser.VALUES - 231)) | (1 << (VisualFoxpro9Parser.MEMVAR - 231)) | (1 << (VisualFoxpro9Parser.TYPE - 231)) | (1 << (VisualFoxpro9Parser.SCATTER - 231)) | (1 << (VisualFoxpro9Parser.GATHER - 231)) | (1 << (VisualFoxpro9Parser.EXCEPT - 231)) | (1 << (VisualFoxpro9Parser.LIKE - 231)) | (1 << (VisualFoxpro9Parser.FIELDS - 231)) | (1 << (VisualFoxpro9Parser.ALTER - 231)) | (1 << (VisualFoxpro9Parser.COLUMN - 231)) | (1 << (VisualFoxpro9Parser.DROP - 231)) | (1 << (VisualFoxpro9Parser.ID - 231)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx, ruleIndex, predIndex):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[57] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx, predIndex):
            if predIndex == 0:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         




