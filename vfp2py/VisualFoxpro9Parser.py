# Generated from VisualFoxpro9.g4 by ANTLR 4.7
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3")
        buf.write(u"\u0112\u072d\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6")
        buf.write(u"\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4")
        buf.write(u"\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t")
        buf.write(u"\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27")
        buf.write(u"\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4")
        buf.write(u"\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t")
        buf.write(u"#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4")
        buf.write(u",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62")
        buf.write(u"\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4")
        buf.write(u"8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@")
        buf.write(u"\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\3\2\3\2\3\2\3\3")
        buf.write(u"\7\3\u0091\n\3\f\3\16\3\u0094\13\3\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\5\4\u009b\n\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u00a3\n")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\7\4\u00ad\n\4\f\4")
        buf.write(u"\16\4\u00b0\13\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write(u"\3\4\3\4\3\4\3\4\3\4\3\4\7\4\u00c1\n\4\f\4\16\4\u00c4")
        buf.write(u"\13\4\3\4\3\4\3\4\3\4\7\4\u00ca\n\4\f\4\16\4\u00cd\13")
        buf.write(u"\4\3\4\5\4\u00d0\n\4\5\4\u00d2\n\4\3\5\3\5\7\5\u00d6")
        buf.write(u"\n\5\f\5\16\5\u00d9\13\5\3\5\3\5\3\6\3\6\7\6\u00df\n")
        buf.write(u"\6\f\6\16\6\u00e2\13\6\3\6\3\6\5\6\u00e6\n\6\3\7\3\7")
        buf.write(u"\3\7\5\7\u00eb\n\7\3\7\3\7\5\7\u00ef\n\7\3\b\3\b\3\t")
        buf.write(u"\7\t\u00f4\n\t\f\t\16\t\u00f7\13\t\3\n\3\n\3\n\3\n\5")
        buf.write(u"\n\u00fd\n\n\3\n\3\n\3\13\3\13\3\13\7\13\u0104\n\13\f")
        buf.write(u"\13\16\13\u0107\13\13\3\13\3\13\3\13\7\13\u010c\n\13")
        buf.write(u"\f\13\16\13\u010f\13\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write(u"\f\3\f\3\f\3\f\3\f\3\f\7\f\u011e\n\f\f\f\16\f\u0121\13")
        buf.write(u"\f\5\f\u0123\n\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u012b\n")
        buf.write(u"\f\3\r\3\r\5\r\u012f\n\r\3\16\3\16\3\16\7\16\u0134\n")
        buf.write(u"\16\f\16\16\16\u0137\13\16\3\17\5\17\u013a\n\17\3\17")
        buf.write(u"\3\17\3\17\3\17\5\17\u0140\n\17\3\17\5\17\u0143\n\17")
        buf.write(u"\3\17\3\17\3\20\3\20\3\20\3\20\3\20\7\20\u014c\n\20\f")
        buf.write(u"\20\16\20\u014f\13\20\5\20\u0151\n\20\3\21\3\21\3\21")
        buf.write(u"\5\21\u0156\n\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\5")
        buf.write(u"\22\u015f\n\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write(u"\3\23\3\23\5\23\u016b\n\23\3\23\3\23\3\23\3\23\3\23\3")
        buf.write(u"\23\3\23\3\23\3\23\5\23\u0176\n\23\3\24\3\24\3\24\5\24")
        buf.write(u"\u017b\n\24\5\24\u017d\n\24\3\25\3\25\3\25\3\25\3\26")
        buf.write(u"\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\30\3\30\3")
        buf.write(u"\30\3\30\7\30\u0190\n\30\f\30\16\30\u0193\13\30\3\30")
        buf.write(u"\7\30\u0196\n\30\f\30\16\30\u0199\13\30\3\30\5\30\u019c")
        buf.write(u"\n\30\3\30\3\30\3\31\5\31\u01a1\n\31\3\31\3\31\3\31\3")
        buf.write(u"\31\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write(u"\3\34\3\34\5\34\u01b3\n\34\3\34\3\34\5\34\u01b7\n\34")
        buf.write(u"\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\5")
        buf.write(u"\35\u01c3\n\35\3\35\3\35\5\35\u01c7\n\35\3\35\3\35\3")
        buf.write(u"\35\5\35\u01cc\n\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36")
        buf.write(u"\3\36\3\36\5\36\u01d7\n\36\3\37\3\37\3\37\3\37\3\37\3")
        buf.write(u"\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u01e6\n\37")
        buf.write(u"\3 \3 \3 \5 \u01eb\n \3 \3 \3 \3 \5 \u01f1\n \5 \u01f3")
        buf.write(u"\n \3!\3!\3!\3!\3!\3!\5!\u01fb\n!\5!\u01fd\n!\3!\3!\3")
        buf.write(u"!\3!\3!\3!\3!\3!\7!\u0207\n!\f!\16!\u020a\13!\3!\3!\3")
        buf.write(u"!\5!\u020f\n!\3!\3!\3!\5!\u0214\n!\3!\3!\3!\5!\u0219")
        buf.write(u"\n!\3!\5!\u021c\n!\3!\3!\3!\3!\3!\3!\3!\5!\u0225\n!\3")
        buf.write(u"!\3!\5!\u0229\n!\3!\3!\5!\u022d\n!\5!\u022f\n!\3!\5!")
        buf.write(u"\u0232\n!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u023f\n")
        buf.write(u"!\3!\3!\3!\3!\5!\u0245\n!\3!\3!\3!\3!\5!\u024b\n!\5!")
        buf.write(u"\u024d\n!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u0257\n!\5!\u0259")
        buf.write(u"\n!\5!\u025b\n!\5!\u025d\n!\3!\3!\5!\u0261\n!\3!\3!\5")
        buf.write(u"!\u0265\n!\3!\3!\3!\3!\5!\u026b\n!\3!\3!\5!\u026f\n!")
        buf.write(u"\5!\u0271\n!\3!\3!\5!\u0275\n!\3!\3!\3!\5!\u027a\n!\5")
        buf.write(u"!\u027c\n!\3!\3!\3!\5!\u0281\n!\3!\3!\3!\3!\5!\u0287")
        buf.write(u"\n!\3!\5!\u028a\n!\3!\5!\u028d\n!\3!\3!\3!\5!\u0292\n")
        buf.write(u"!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u029d\n!\3!\3!\3!\3!")
        buf.write(u"\3!\3!\3!\3!\5!\u02a7\n!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u02b1")
        buf.write(u"\n!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u02bf\n!\3")
        buf.write(u"!\3!\5!\u02c3\n!\3!\3!\5!\u02c7\n!\5!\u02c9\n!\3!\5!")
        buf.write(u"\u02cc\n!\3!\5!\u02cf\n!\3!\3!\3!\3!\5!\u02d5\n!\3!\3")
        buf.write(u"!\5!\u02d9\n!\3!\3!\3!\3!\5!\u02df\n!\3!\3!\5!\u02e3")
        buf.write(u"\n!\3!\3!\5!\u02e7\n!\3!\3!\3!\3!\5!\u02ed\n!\3!\3!\3")
        buf.write(u"!\3!\3!\3!\3!\3!\3!\7!\u02f8\n!\f!\16!\u02fb\13!\3!\3")
        buf.write(u"!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u030b\n!\3!")
        buf.write(u"\3!\3!\5!\u0310\n!\3!\3!\5!\u0314\n!\3!\3!\5!\u0318\n")
        buf.write(u"!\3!\3!\5!\u031c\n!\3!\3!\3!\5!\u0321\n!\3!\3!\3!\5!")
        buf.write(u"\u0326\n!\5!\u0328\n!\3!\3!\5!\u032c\n!\3!\3!\3!\3!\3")
        buf.write(u"!\3!\3!\5!\u0335\n!\3!\5!\u0338\n!\3!\3!\5!\u033c\n!")
        buf.write(u"\3!\3!\7!\u0340\n!\f!\16!\u0343\13!\3!\3!\3!\3!\3!\3")
        buf.write(u"!\3!\7!\u034c\n!\f!\16!\u034f\13!\3!\3!\3!\3!\3!\3!\5")
        buf.write(u"!\u0357\n!\3!\5!\u035a\n!\3!\5!\u035d\n!\3!\5!\u0360")
        buf.write(u"\n!\3!\3!\3!\3!\7!\u0366\n!\f!\16!\u0369\13!\3!\3!\3")
        buf.write(u"!\3!\3!\7!\u0370\n!\f!\16!\u0373\13!\3!\3!\3!\3!\7!\u0379")
        buf.write(u"\n!\f!\16!\u037c\13!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u0387")
        buf.write(u"\n!\3!\3!\5!\u038b\n!\3!\3!\5!\u038f\n!\3!\3!\3!\3!\3")
        buf.write(u"!\3!\5!\u0397\n!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u03a2")
        buf.write(u"\n!\3!\3!\3!\3!\5!\u03a8\n!\3!\3!\3!\3!\3!\5!\u03af\n")
        buf.write(u"!\3!\3!\5!\u03b3\n!\3!\3!\5!\u03b7\n!\3!\3!\3!\5!\u03bc")
        buf.write(u"\n!\3!\3!\3!\3!\3!\3!\3!\5!\u03c5\n!\5!\u03c7\n!\3!\3")
        buf.write(u"!\5!\u03cb\n!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u03d5\n!\3!")
        buf.write(u"\5!\u03d8\n!\3!\5!\u03db\n!\5!\u03dd\n!\3!\3!\5!\u03e1")
        buf.write(u"\n!\3!\3!\3!\3!\5!\u03e7\n!\3!\5!\u03ea\n!\3!\3!\5!\u03ee")
        buf.write(u"\n!\3!\3!\5!\u03f2\n!\3!\3!\3!\3!\3!\5!\u03f9\n!\3!\3")
        buf.write(u"!\7!\u03fd\n!\f!\16!\u0400\13!\3!\3!\3!\5!\u0405\n!\3")
        buf.write(u"!\5!\u0408\n!\3!\5!\u040b\n!\3!\5!\u040e\n!\3!\3!\3!")
        buf.write(u"\3!\5!\u0414\n!\3!\3!\5!\u0418\n!\3!\3!\3!\5!\u041d\n")
        buf.write(u"!\3!\5!\u0420\n!\3!\5!\u0423\n!\3!\3!\3!\3!\3!\5!\u042a")
        buf.write(u"\n!\3!\3!\3!\5!\u042f\n!\3!\5!\u0432\n!\3!\3!\3!\3!\3")
        buf.write(u"!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!")
        buf.write(u"\3!\5!\u044b\n!\3!\3!\3!\3!\5!\u0451\n!\3!\3!\3!\3!\5")
        buf.write(u"!\u0457\n!\3!\3!\3!\3!\5!\u045d\n!\3!\7!\u0460\n!\f!")
        buf.write(u"\16!\u0463\13!\3!\3!\5!\u0467\n!\3!\3!\3!\3!\3!\5!\u046e")
        buf.write(u"\n!\3!\5!\u0471\n!\3!\3!\3!\3!\5!\u0477\n!\3!\7!\u047a")
        buf.write(u"\n!\f!\16!\u047d\13!\3!\3!\3!\3!\5!\u0483\n!\5!\u0485")
        buf.write(u"\n!\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u048d\n\"\3#\3#\3#\7")
        buf.write(u"#\u0492\n#\f#\16#\u0495\13#\3$\3$\5$\u0499\n$\3$\5$\u049c")
        buf.write(u"\n$\3%\3%\5%\u04a0\n%\3%\5%\u04a3\n%\3%\5%\u04a6\n%\3")
        buf.write(u"&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u04b1\n&\3&\3&\3&\3&\3&")
        buf.write(u"\3&\7&\u04b9\n&\f&\16&\u04bc\13&\3\'\3\'\3\'\5\'\u04c1")
        buf.write(u"\n\'\3\'\3\'\5\'\u04c5\n\'\3\'\5\'\u04c8\n\'\3\'\3\'")
        buf.write(u"\3\'\5\'\u04cd\n\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u04d5")
        buf.write(u"\n\'\3(\3(\5(\u04d9\n(\3)\3)\3)\5)\u04de\n)\3*\3*\3*")
        buf.write(u"\5*\u04e3\n*\3+\3+\3+\5+\u04e8\n+\3,\3,\3,\3-\3-\3-\3")
        buf.write(u"-\3-\3-\5-\u04f3\n-\5-\u04f5\n-\3-\3-\3-\3-\3-\3-\3-")
        buf.write(u"\5-\u04fe\n-\3-\3-\3-\3-\3-\3-\3-\5-\u0507\n-\5-\u0509")
        buf.write(u"\n-\5-\u050b\n-\3-\3-\3-\3-\3-\5-\u0512\n-\3-\3-\5-\u0516")
        buf.write(u"\n-\3-\5-\u0519\n-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u0524")
        buf.write(u"\n-\5-\u0526\n-\3-\3-\3-\5-\u052b\n-\3-\3-\3-\3-\5-\u0531")
        buf.write(u"\n-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u053f\n-\5")
        buf.write(u"-\u0541\n-\3-\3-\3-\3-\3-\5-\u0548\n-\3-\3-\5-\u054c")
        buf.write(u"\n-\3-\5-\u054f\n-\3-\3-\3-\5-\u0554\n-\3-\3-\3-\3-\5")
        buf.write(u"-\u055a\n-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u0565\n-\3-")
        buf.write(u"\3-\3-\3-\3-\5-\u056c\n-\3-\3-\3-\5-\u0571\n-\3-\3-\5")
        buf.write(u"-\u0575\n-\3-\5-\u0578\n-\5-\u057a\n-\3-\3-\3-\5-\u057f")
        buf.write(u"\n-\3-\3-\3-\3-\3-\3-\3-\5-\u0588\n-\5-\u058a\n-\5-\u058c")
        buf.write(u"\n-\3-\3-\3-\3-\3-\7-\u0593\n-\f-\16-\u0596\13-\3-\5")
        buf.write(u"-\u0599\n-\3-\3-\3-\3-\3-\5-\u05a0\n-\3-\3-\3-\3-\3-")
        buf.write(u"\3-\3-\5-\u05a9\n-\3-\5-\u05ac\n-\3-\3-\3-\3-\5-\u05b2")
        buf.write(u"\n-\3-\3-\3-\3-\3-\3-\3-\5-\u05bb\n-\3-\3-\5-\u05bf\n")
        buf.write(u"-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u05ca\n-\3.\3.\5.\u05ce")
        buf.write(u"\n.\3.\3.\3.\5.\u05d3\n.\3.\3.\3.\7.\u05d8\n.\f.\16.")
        buf.write(u"\u05db\13.\3.\3.\3.\5.\u05e0\n.\3/\3/\3/\3/\3/\5/\u05e7")
        buf.write(u"\n/\5/\u05e9\n/\3\60\3\60\3\60\3\61\3\61\3\61\5\61\u05f1")
        buf.write(u"\n\61\3\62\3\62\3\62\7\62\u05f6\n\62\f\62\16\62\u05f9")
        buf.write(u"\13\62\3\62\5\62\u05fc\n\62\3\63\3\63\3\63\7\63\u0601")
        buf.write(u"\n\63\f\63\16\63\u0604\13\63\3\64\3\64\3\64\3\64\3\64")
        buf.write(u"\3\64\3\64\5\64\u060d\n\64\3\64\3\64\5\64\u0611\n\64")
        buf.write(u"\5\64\u0613\n\64\3\65\3\65\3\65\3\66\3\66\3\66\3\67\3")
        buf.write(u"\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write(u"\3\67\3\67\3\67\3\67\3\67\5\67\u062c\n\67\3\67\3\67\5")
        buf.write(u"\67\u0630\n\67\5\67\u0632\n\67\3\67\3\67\3\67\3\67\5")
        buf.write(u"\67\u0638\n\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write(u"\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\7\67\u064a\n")
        buf.write(u"\67\f\67\16\67\u064d\13\67\38\58\u0650\n8\38\38\38\3")
        buf.write(u"8\38\38\58\u0658\n8\58\u065a\n8\39\39\39\59\u065f\n9")
        buf.write(u"\3:\3:\5:\u0663\n:\3:\3:\3:\5:\u0668\n:\3:\5:\u066b\n")
        buf.write(u":\3:\5:\u066e\n:\3:\3:\3:\5:\u0673\n:\5:\u0675\n:\3;")
        buf.write(u"\3;\3;\5;\u067a\n;\3;\6;\u067d\n;\r;\16;\u067e\3<\3<")
        buf.write(u"\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write(u"<\3<\3<\3<\3<\3<\5<\u069a\n<\3=\3=\5=\u069e\n=\3>\5>")
        buf.write(u"\u06a1\n>\3>\3>\3>\3>\3>\5>\u06a8\n>\3>\3>\3>\3>\3>\3")
        buf.write(u">\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u06b9\n>\3>\5>\u06bc")
        buf.write(u"\n>\3>\3>\3>\3>\3>\5>\u06c3\n>\5>\u06c5\n>\3>\5>\u06c8")
        buf.write(u"\n>\5>\u06ca\n>\3>\3>\3>\7>\u06cf\n>\f>\16>\u06d2\13")
        buf.write(u">\3>\3>\3>\7>\u06d7\n>\f>\16>\u06da\13>\3>\3>\3>\7>\u06df")
        buf.write(u"\n>\f>\16>\u06e2\13>\3>\5>\u06e5\n>\3>\5>\u06e8\n>\3")
        buf.write(u"?\3?\3?\3?\3?\3?\7?\u06f0\n?\f?\16?\u06f3\13?\3?\3?\3")
        buf.write(u"?\3?\5?\u06f9\n?\3@\5@\u06fc\n@\3@\3@\3@\7@\u0701\n@")
        buf.write(u"\f@\16@\u0704\13@\3A\5A\u0707\nA\3A\3A\5A\u070b\nA\3")
        buf.write(u"B\3B\3B\3B\3C\3C\3C\5C\u0714\nC\3C\3C\3C\3C\3C\5C\u071b")
        buf.write(u"\nC\3C\3C\5C\u071f\nC\3D\3D\3E\3E\3E\3E\3E\3E\5E\u0729")
        buf.write(u"\nE\3F\3F\3F\3\u067e\3lG\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write(u"\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`")
        buf.write(u"bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\2")
        buf.write(u"%\3\2\u0110\u0110\7\2//\61\62NN\u00c5\u00c5\u0110\u0110")
        buf.write(u"\4\3\30\30\u0110\u0110\4\2\t\t((\3\3\u0110\u0110\4\2")
        buf.write(u"LL\u00c6\u00c6\4\2\u009c\u009c\u00ad\u00ad\4\2wx\u00b4")
        buf.write(u"\u00b4\5\2AACC[[\4\2AA[[\4\2ee\u0094\u0094\4\2++\u00ca")
        buf.write(u"\u00ca\3\2\u00cc\u00cd\4\2\u00c8\u00c8\u00ce\u00ce\3")
        buf.write(u"\2:;\4\2CC\u00e8\u00e8\3\2\u00fc\u00fd\3\2\u00e3\u00e5")
        buf.write(u"\4\2\27\27\u00ee\u00ee\4\2\u0096\u0097\u00f9\u00f9\3")
        buf.write(u"\2\63\64\4\2\63\64\u0088\u0089\3\2\u0086\u0087\4\288")
        buf.write(u"\u00ea\u00ea\5\299ll\u00d0\u00d0\3\2\n\13\4\2\27\27\u00d1")
        buf.write(u"\u00d1\4\2\t\t\f\f\6\2\25\26\30\34\36\36!!\3\2\u00d2")
        buf.write(u"\u00d5\3\2\u00d8\u00d9\4\2%%\u0110\u0110\4\2$$\u0110")
        buf.write(u"\u0110\4\2\17\17\u0110\u0110\f\2))+ACVX\u00d2\u00d4\u00d4")
        buf.write(u"\u00d6\u00e7\u00e9\u00ee\u00f0\u00f8\u00fa\u0101\u0108")
        buf.write(u"\u010f\2\u08cc\2\u008c\3\2\2\2\4\u0092\3\2\2\2\6\u00d1")
        buf.write(u"\3\2\2\2\b\u00d7\3\2\2\2\n\u00e5\3\2\2\2\f\u00ee\3\2")
        buf.write(u"\2\2\16\u00f0\3\2\2\2\20\u00f5\3\2\2\2\22\u00f8\3\2\2")
        buf.write(u"\2\24\u0100\3\2\2\2\26\u012a\3\2\2\2\30\u012c\3\2\2\2")
        buf.write(u"\32\u0130\3\2\2\2\34\u0139\3\2\2\2\36\u0146\3\2\2\2 ")
        buf.write(u"\u0152\3\2\2\2\"\u0159\3\2\2\2$\u0175\3\2\2\2&\u017c")
        buf.write(u"\3\2\2\2(\u017e\3\2\2\2*\u0182\3\2\2\2,\u0187\3\2\2\2")
        buf.write(u".\u018b\3\2\2\2\60\u01a0\3\2\2\2\62\u01a6\3\2\2\2\64")
        buf.write(u"\u01aa\3\2\2\2\66\u01b0\3\2\2\28\u01bc\3\2\2\2:\u01d6")
        buf.write(u"\3\2\2\2<\u01e5\3\2\2\2>\u01e7\3\2\2\2@\u0484\3\2\2\2")
        buf.write(u"B\u048c\3\2\2\2D\u048e\3\2\2\2F\u0496\3\2\2\2H\u04a2")
        buf.write(u"\3\2\2\2J\u04a7\3\2\2\2L\u04d4\3\2\2\2N\u04d6\3\2\2\2")
        buf.write(u"P\u04dd\3\2\2\2R\u04df\3\2\2\2T\u04e4\3\2\2\2V\u04e9")
        buf.write(u"\3\2\2\2X\u05c9\3\2\2\2Z\u05df\3\2\2\2\\\u05e8\3\2\2")
        buf.write(u"\2^\u05ea\3\2\2\2`\u05ed\3\2\2\2b\u05f2\3\2\2\2d\u05fd")
        buf.write(u"\3\2\2\2f\u0612\3\2\2\2h\u0614\3\2\2\2j\u0617\3\2\2\2")
        buf.write(u"l\u0631\3\2\2\2n\u0659\3\2\2\2p\u065e\3\2\2\2r\u0674")
        buf.write(u"\3\2\2\2t\u0679\3\2\2\2v\u0699\3\2\2\2x\u069d\3\2\2\2")
        buf.write(u"z\u06e7\3\2\2\2|\u06f8\3\2\2\2~\u06fb\3\2\2\2\u0080\u0706")
        buf.write(u"\3\2\2\2\u0082\u070c\3\2\2\2\u0084\u071e\3\2\2\2\u0086")
        buf.write(u"\u0720\3\2\2\2\u0088\u0728\3\2\2\2\u008a\u072a\3\2\2")
        buf.write(u"\2\u008c\u008d\5\4\3\2\u008d\u008e\7\2\2\3\u008e\3\3")
        buf.write(u"\2\2\2\u008f\u0091\5\6\4\2\u0090\u008f\3\2\2\2\u0091")
        buf.write(u"\u0094\3\2\2\2\u0092\u0090\3\2\2\2\u0092\u0093\3\2\2")
        buf.write(u"\2\u0093\5\3\2\2\2\u0094\u0092\3\2\2\2\u0095\u009a\7")
        buf.write(u"\30\2\2\u0096\u0097\7/\2\2\u0097\u009b\5l\67\2\u0098")
        buf.write(u"\u0099\7\u00b9\2\2\u0099\u009b\5\u008aF\2\u009a\u0096")
        buf.write(u"\3\2\2\2\u009a\u0098\3\2\2\2\u009b\u009c\3\2\2\2\u009c")
        buf.write(u"\u009d\7\u0110\2\2\u009d\u00a2\5\4\3\2\u009e\u009f\7")
        buf.write(u"\30\2\2\u009f\u00a0\7\61\2\2\u00a0\u00a1\7\u0110\2\2")
        buf.write(u"\u00a1\u00a3\5\4\3\2\u00a2\u009e\3\2\2\2\u00a2\u00a3")
        buf.write(u"\3\2\2\2\u00a3\u00a4\3\2\2\2\u00a4\u00a5\7\30\2\2\u00a5")
        buf.write(u"\u00a6\7\62\2\2\u00a6\u00a7\5\16\b\2\u00a7\u00d2\3\2")
        buf.write(u"\2\2\u00a8\u00a9\7\30\2\2\u00a9\u00aa\7N\2\2\u00aa\u00ae")
        buf.write(u"\5\u008aF\2\u00ab\u00ad\n\2\2\2\u00ac\u00ab\3\2\2\2\u00ad")
        buf.write(u"\u00b0\3\2\2\2\u00ae\u00ac\3\2\2\2\u00ae\u00af\3\2\2")
        buf.write(u"\2\u00af\u00b1\3\2\2\2\u00b0\u00ae\3\2\2\2\u00b1\u00b2")
        buf.write(u"\5\16\b\2\u00b2\u00d2\3\2\2\2\u00b3\u00b4\7\30\2\2\u00b4")
        buf.write(u"\u00b5\7\u00b8\2\2\u00b5\u00b6\5\u008aF\2\u00b6\u00b7")
        buf.write(u"\5\16\b\2\u00b7\u00d2\3\2\2\2\u00b8\u00b9\7\30\2\2\u00b9")
        buf.write(u"\u00ba\7\u00c5\2\2\u00ba\u00bb\5x=\2\u00bb\u00bc\5\16")
        buf.write(u"\b\2\u00bc\u00d2\3\2\2\2\u00bd\u00be\7\30\2\2\u00be\u00c2")
        buf.write(u"\n\3\2\2\u00bf\u00c1\n\2\2\2\u00c0\u00bf\3\2\2\2\u00c1")
        buf.write(u"\u00c4\3\2\2\2\u00c2\u00c0\3\2\2\2\u00c2\u00c3\3\2\2")
        buf.write(u"\2\u00c3\u00c5\3\2\2\2\u00c4\u00c2\3\2\2\2\u00c5\u00d2")
        buf.write(u"\5\16\b\2\u00c6\u00d0\7\u0110\2\2\u00c7\u00cb\n\4\2\2")
        buf.write(u"\u00c8\u00ca\n\2\2\2\u00c9\u00c8\3\2\2\2\u00ca\u00cd")
        buf.write(u"\3\2\2\2\u00cb\u00c9\3\2\2\2\u00cb\u00cc\3\2\2\2\u00cc")
        buf.write(u"\u00ce\3\2\2\2\u00cd\u00cb\3\2\2\2\u00ce\u00d0\5\16\b")
        buf.write(u"\2\u00cf\u00c6\3\2\2\2\u00cf\u00c7\3\2\2\2\u00d0\u00d2")
        buf.write(u"\3\2\2\2\u00d1\u0095\3\2\2\2\u00d1\u00a8\3\2\2\2\u00d1")
        buf.write(u"\u00b3\3\2\2\2\u00d1\u00b8\3\2\2\2\u00d1\u00bd\3\2\2")
        buf.write(u"\2\u00d1\u00cf\3\2\2\2\u00d2\7\3\2\2\2\u00d3\u00d6\5")
        buf.write(u"\24\13\2\u00d4\u00d6\5\36\20\2\u00d5\u00d3\3\2\2\2\u00d5")
        buf.write(u"\u00d4\3\2\2\2\u00d6\u00d9\3\2\2\2\u00d7\u00d5\3\2\2")
        buf.write(u"\2\u00d7\u00d8\3\2\2\2\u00d8\u00da\3\2\2\2\u00d9\u00d7")
        buf.write(u"\3\2\2\2\u00da\u00db\7\2\2\3\u00db\t\3\2\2\2\u00dc\u00e0")
        buf.write(u"\t\5\2\2\u00dd\u00df\n\2\2\2\u00de\u00dd\3\2\2\2\u00df")
        buf.write(u"\u00e2\3\2\2\2\u00e0\u00de\3\2\2\2\u00e0\u00e1\3\2\2")
        buf.write(u"\2\u00e1\u00e3\3\2\2\2\u00e2\u00e0\3\2\2\2\u00e3\u00e6")
        buf.write(u"\5\16\b\2\u00e4\u00e6\7\u0110\2\2\u00e5\u00dc\3\2\2\2")
        buf.write(u"\u00e5\u00e4\3\2\2\2\u00e6\13\3\2\2\2\u00e7\u00ef\5\n")
        buf.write(u"\6\2\u00e8\u00eb\5:\36\2\u00e9\u00eb\5<\37\2\u00ea\u00e8")
        buf.write(u"\3\2\2\2\u00ea\u00e9\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec")
        buf.write(u"\u00ed\5\16\b\2\u00ed\u00ef\3\2\2\2\u00ee\u00e7\3\2\2")
        buf.write(u"\2\u00ee\u00ea\3\2\2\2\u00ef\r\3\2\2\2\u00f0\u00f1\t")
        buf.write(u"\6\2\2\u00f1\17\3\2\2\2\u00f2\u00f4\5\f\7\2\u00f3\u00f2")
        buf.write(u"\3\2\2\2\u00f4\u00f7\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f5")
        buf.write(u"\u00f6\3\2\2\2\u00f6\21\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f8")
        buf.write(u"\u00f9\7N\2\2\u00f9\u00fa\7O\2\2\u00fa\u00fc\5\u008a")
        buf.write(u"F\2\u00fb\u00fd\5`\61\2\u00fc\u00fb\3\2\2\2\u00fc\u00fd")
        buf.write(u"\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe\u00ff\7\u0110\2\2")
        buf.write(u"\u00ff\23\3\2\2\2\u0100\u0105\5\22\n\2\u0101\u0104\5")
        buf.write(u"\26\f\2\u0102\u0104\5\36\20\2\u0103\u0101\3\2\2\2\u0103")
        buf.write(u"\u0102\3\2\2\2\u0104\u0107\3\2\2\2\u0105\u0103\3\2\2")
        buf.write(u"\2\u0105\u0106\3\2\2\2\u0106\u0108\3\2\2\2\u0107\u0105")
        buf.write(u"\3\2\2\2\u0108\u0109\7P\2\2\u0109\u010d\5\16\b\2\u010a")
        buf.write(u"\u010c\5\n\6\2\u010b\u010a\3\2\2\2\u010c\u010f\3\2\2")
        buf.write(u"\2\u010d\u010b\3\2\2\2\u010d\u010e\3\2\2\2\u010e\25\3")
        buf.write(u"\2\2\2\u010f\u010d\3\2\2\2\u0110\u0111\7a\2\2\u0111\u0112")
        buf.write(u"\7b\2\2\u0112\u0113\5\u008aF\2\u0113\u0122\5^\60\2\u0114")
        buf.write(u"\u0115\7\66\2\2\u0115\u0116\5\u0080A\2\u0116\u0117\7")
        buf.write(u"\36\2\2\u0117\u011f\5l\67\2\u0118\u0119\7 \2\2\u0119")
        buf.write(u"\u011a\5\u0080A\2\u011a\u011b\7\36\2\2\u011b\u011c\5")
        buf.write(u"l\67\2\u011c\u011e\3\2\2\2\u011d\u0118\3\2\2\2\u011e")
        buf.write(u"\u0121\3\2\2\2\u011f\u011d\3\2\2\2\u011f\u0120\3\2\2")
        buf.write(u"\2\u0120\u0123\3\2\2\2\u0121\u011f\3\2\2\2\u0122\u0114")
        buf.write(u"\3\2\2\2\u0122\u0123\3\2\2\2\u0123\u0124\3\2\2\2\u0124")
        buf.write(u"\u0125\7\u0110\2\2\u0125\u012b\3\2\2\2\u0126\u0127\5")
        buf.write(u"|?\2\u0127\u0128\7\u0110\2\2\u0128\u012b\3\2\2\2\u0129")
        buf.write(u"\u012b\5\n\6\2\u012a\u0110\3\2\2\2\u012a\u0126\3\2\2")
        buf.write(u"\2\u012a\u0129\3\2\2\2\u012b\27\3\2\2\2\u012c\u012e\5")
        buf.write(u"\u0080A\2\u012d\u012f\5^\60\2\u012e\u012d\3\2\2\2\u012e")
        buf.write(u"\u012f\3\2\2\2\u012f\31\3\2\2\2\u0130\u0135\5\30\r\2")
        buf.write(u"\u0131\u0132\7 \2\2\u0132\u0134\5\30\r\2\u0133\u0131")
        buf.write(u"\3\2\2\2\u0134\u0137\3\2\2\2\u0135\u0133\3\2\2\2\u0135")
        buf.write(u"\u0136\3\2\2\2\u0136\33\3\2\2\2\u0137\u0135\3\2\2\2\u0138")
        buf.write(u"\u013a\7\u00ea\2\2\u0139\u0138\3\2\2\2\u0139\u013a\3")
        buf.write(u"\2\2\2\u013a\u013b\3\2\2\2\u013b\u013c\7L\2\2\u013c\u0142")
        buf.write(u"\5~@\2\u013d\u013f\7\22\2\2\u013e\u0140\5\32\16\2\u013f")
        buf.write(u"\u013e\3\2\2\2\u013f\u0140\3\2\2\2\u0140\u0141\3\2\2")
        buf.write(u"\2\u0141\u0143\7\23\2\2\u0142\u013d\3\2\2\2\u0142\u0143")
        buf.write(u"\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0145\7\u0110\2\2")
        buf.write(u"\u0145\35\3\2\2\2\u0146\u0147\5\34\17\2\u0147\u0150\5")
        buf.write(u"\20\t\2\u0148\u0149\7M\2\2\u0149\u014d\5\16\b\2\u014a")
        buf.write(u"\u014c\5\n\6\2\u014b\u014a\3\2\2\2\u014c\u014f\3\2\2")
        buf.write(u"\2\u014d\u014b\3\2\2\2\u014d\u014e\3\2\2\2\u014e\u0151")
        buf.write(u"\3\2\2\2\u014f\u014d\3\2\2\2\u0150\u0148\3\2\2\2\u0150")
        buf.write(u"\u0151\3\2\2\2\u0151\37\3\2\2\2\u0152\u0153\7/\2\2\u0153")
        buf.write(u"\u0155\5l\67\2\u0154\u0156\7\u00b7\2\2\u0155\u0154\3")
        buf.write(u"\2\2\2\u0155\u0156\3\2\2\2\u0156\u0157\3\2\2\2\u0157")
        buf.write(u"\u0158\7\u0110\2\2\u0158!\3\2\2\2\u0159\u015a\5 \21\2")
        buf.write(u"\u015a\u015e\5\20\t\2\u015b\u015c\7\61\2\2\u015c\u015d")
        buf.write(u"\7\u0110\2\2\u015d\u015f\5\20\t\2\u015e\u015b\3\2\2\2")
        buf.write(u"\u015e\u015f\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u0161")
        buf.write(u"\7\62\2\2\u0161#\3\2\2\2\u0162\u0163\7S\2\2\u0163\u0164")
        buf.write(u"\5\u0080A\2\u0164\u0165\7\36\2\2\u0165\u0166\5l\67\2")
        buf.write(u"\u0166\u0167\7+\2\2\u0167\u016a\5l\67\2\u0168\u0169\7")
        buf.write(u"\u00b6\2\2\u0169\u016b\5l\67\2\u016a\u0168\3\2\2\2\u016a")
        buf.write(u"\u016b\3\2\2\2\u016b\u016c\3\2\2\2\u016c\u016d\7\u0110")
        buf.write(u"\2\2\u016d\u0176\3\2\2\2\u016e\u016f\7S\2\2\u016f\u0170")
        buf.write(u"\7\u00ec\2\2\u0170\u0171\5\u0080A\2\u0171\u0172\7-\2")
        buf.write(u"\2\u0172\u0173\5l\67\2\u0173\u0174\7\u0110\2\2\u0174")
        buf.write(u"\u0176\3\2\2\2\u0175\u0162\3\2\2\2\u0175\u016e\3\2\2")
        buf.write(u"\2\u0176%\3\2\2\2\u0177\u017d\7T\2\2\u0178\u017a\7\u0091")
        buf.write(u"\2\2\u0179\u017b\5\u0080A\2\u017a\u0179\3\2\2\2\u017a")
        buf.write(u"\u017b\3\2\2\2\u017b\u017d\3\2\2\2\u017c\u0177\3\2\2")
        buf.write(u"\2\u017c\u0178\3\2\2\2\u017d\'\3\2\2\2\u017e\u017f\5")
        buf.write(u"$\23\2\u017f\u0180\5\20\t\2\u0180\u0181\5&\24\2\u0181")
        buf.write(u")\3\2\2\2\u0182\u0183\7~\2\2\u0183\u0184\5l\67\2\u0184")
        buf.write(u"\u0185\7\u0110\2\2\u0185\u0186\5\20\t\2\u0186+\3\2\2")
        buf.write(u"\2\u0187\u0188\7\u0080\2\2\u0188\u0189\7\u0110\2\2\u0189")
        buf.write(u"\u018a\5\20\t\2\u018a-\3\2\2\2\u018b\u018c\7,\2\2\u018c")
        buf.write(u"\u018d\7~\2\2\u018d\u0191\7\u0110\2\2\u018e\u0190\5\n")
        buf.write(u"\6\2\u018f\u018e\3\2\2\2\u0190\u0193\3\2\2\2\u0191\u018f")
        buf.write(u"\3\2\2\2\u0191\u0192\3\2\2\2\u0192\u0197\3\2\2\2\u0193")
        buf.write(u"\u0191\3\2\2\2\u0194\u0196\5*\26\2\u0195\u0194\3\2\2")
        buf.write(u"\2\u0196\u0199\3\2\2\2\u0197\u0195\3\2\2\2\u0197\u0198")
        buf.write(u"\3\2\2\2\u0198\u019b\3\2\2\2\u0199\u0197\3\2\2\2\u019a")
        buf.write(u"\u019c\5,\27\2\u019b\u019a\3\2\2\2\u019b\u019c\3\2\2")
        buf.write(u"\2\u019c\u019d\3\2\2\2\u019d\u019e\7\177\2\2\u019e/\3")
        buf.write(u"\2\2\2\u019f\u01a1\7,\2\2\u01a0\u019f\3\2\2\2\u01a0\u01a1")
        buf.write(u"\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\u01a3\7U\2\2\u01a3")
        buf.write(u"\u01a4\5l\67\2\u01a4\u01a5\7\u0110\2\2\u01a5\61\3\2\2")
        buf.write(u"\2\u01a6\u01a7\5\60\31\2\u01a7\u01a8\5\20\t\2\u01a8\u01a9")
        buf.write(u"\7k\2\2\u01a9\63\3\2\2\2\u01aa\u01ab\7\66\2\2\u01ab\u01ac")
        buf.write(u"\5\u0080A\2\u01ac\u01ad\7\u0110\2\2\u01ad\u01ae\5\20")
        buf.write(u"\t\2\u01ae\u01af\7\u00bd\2\2\u01af\65\3\2\2\2\u01b0\u01b2")
        buf.write(u"\7\u00d6\2\2\u01b1\u01b3\5\u0088E\2\u01b2\u01b1\3\2\2")
        buf.write(u"\2\u01b2\u01b3\3\2\2\2\u01b3\u01b6\3\2\2\2\u01b4\u01b5")
        buf.write(u"\7S\2\2\u01b5\u01b7\5l\67\2\u01b6\u01b4\3\2\2\2\u01b6")
        buf.write(u"\u01b7\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8\u01b9\7\u0110")
        buf.write(u"\2\2\u01b9\u01ba\5\20\t\2\u01ba\u01bb\7\u00d7\2\2\u01bb")
        buf.write(u"\67\3\2\2\2\u01bc\u01bd\7\u00f0\2\2\u01bd\u01be\7\u0110")
        buf.write(u"\2\2\u01be\u01c6\5\20\t\2\u01bf\u01c2\7\u00f1\2\2\u01c0")
        buf.write(u"\u01c1\7+\2\2\u01c1\u01c3\5\u008aF\2\u01c2\u01c0\3\2")
        buf.write(u"\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01c5")
        buf.write(u"\7\u0110\2\2\u01c5\u01c7\5\20\t\2\u01c6\u01bf\3\2\2\2")
        buf.write(u"\u01c6\u01c7\3\2\2\2\u01c7\u01cb\3\2\2\2\u01c8\u01c9")
        buf.write(u"\7\u00f2\2\2\u01c9\u01ca\7\u0110\2\2\u01ca\u01cc\5\20")
        buf.write(u"\t\2\u01cb\u01c8\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\u01cd")
        buf.write(u"\3\2\2\2\u01cd\u01ce\7\u00f3\2\2\u01ce9\3\2\2\2\u01cf")
        buf.write(u"\u01d7\5\62\32\2\u01d0\u01d7\5\"\22\2\u01d1\u01d7\5.")
        buf.write(u"\30\2\u01d2\u01d7\5(\25\2\u01d3\u01d7\5\64\33\2\u01d4")
        buf.write(u"\u01d7\5\66\34\2\u01d5\u01d7\58\35\2\u01d6\u01cf\3\2")
        buf.write(u"\2\2\u01d6\u01d0\3\2\2\2\u01d6\u01d1\3\2\2\2\u01d6\u01d2")
        buf.write(u"\3\2\2\2\u01d6\u01d3\3\2\2\2\u01d6\u01d4\3\2\2\2\u01d6")
        buf.write(u"\u01d5\3\2\2\2\u01d7;\3\2\2\2\u01d8\u01e6\5f\64\2\u01d9")
        buf.write(u"\u01e6\5|?\2\u01da\u01e6\5Z.\2\u01db\u01e6\5H%\2\u01dc")
        buf.write(u"\u01e6\5J&\2\u01dd\u01e6\5L\'\2\u01de\u01e6\5N(\2\u01df")
        buf.write(u"\u01e6\5> \2\u01e0\u01e6\5P)\2\u01e1\u01e6\5@!\2\u01e2")
        buf.write(u"\u01e3\7\36\2\2\u01e3\u01e6\5l\67\2\u01e4\u01e6\5n8\2")
        buf.write(u"\u01e5\u01d8\3\2\2\2\u01e5\u01d9\3\2\2\2\u01e5\u01da")
        buf.write(u"\3\2\2\2\u01e5\u01db\3\2\2\2\u01e5\u01dc\3\2\2\2\u01e5")
        buf.write(u"\u01dd\3\2\2\2\u01e5\u01de\3\2\2\2\u01e5\u01df\3\2\2")
        buf.write(u"\2\u01e5\u01e0\3\2\2\2\u01e5\u01e1\3\2\2\2\u01e5\u01e2")
        buf.write(u"\3\2\2\2\u01e5\u01e4\3\2\2\2\u01e6=\3\2\2\2\u01e7\u01f2")
        buf.write(u"\7>\2\2\u01e8\u01f3\7t\2\2\u01e9\u01eb\t\7\2\2\u01ea")
        buf.write(u"\u01e9\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ec\3\2\2")
        buf.write(u"\2\u01ec\u01f3\5b\62\2\u01ed\u01ee\7\u00ad\2\2\u01ee")
        buf.write(u"\u01f0\5b\62\2\u01ef\u01f1\7\u00ae\2\2\u01f0\u01ef\3")
        buf.write(u"\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f3\3\2\2\2\u01f2")
        buf.write(u"\u01e8\3\2\2\2\u01f2\u01ea\3\2\2\2\u01f2\u01ed\3\2\2")
        buf.write(u"\2\u01f3?\3\2\2\2\u01f4\u01f5\7\63\2\2\u01f5\u01fc\7")
        buf.write(u"\u0098\2\2\u01f6\u01f7\7\u009a\2\2\u01f7\u01fa\5\u008a")
        buf.write(u"F\2\u01f8\u01f9\7\n\2\2\u01f9\u01fb\5\u008aF\2\u01fa")
        buf.write(u"\u01f8\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb\u01fd\3\2\2")
        buf.write(u"\2\u01fc\u01f6\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd\u01fe")
        buf.write(u"\3\2\2\2\u01fe\u0485\5<\37\2\u01ff\u0485\7\u010d\2\2")
        buf.write(u"\u0200\u0201\7\b\2\2\u0201\u0208\5b\62\2\u0202\u0203")
        buf.write(u"\7\u0109\2\2\u0203\u0207\5l\67\2\u0204\u0205\7\u00a9")
        buf.write(u"\2\2\u0205\u0207\5l\67\2\u0206\u0202\3\2\2\2\u0206\u0204")
        buf.write(u"\3\2\2\2\u0207\u020a\3\2\2\2\u0208\u0206\3\2\2\2\u0208")
        buf.write(u"\u0209\3\2\2\2\u0209\u0485\3\2\2\2\u020a\u0208\3\2\2")
        buf.write(u"\2\u020b\u020c\7\u00ba\2\2\u020c\u020e\7\u0098\2\2\u020d")
        buf.write(u"\u020f\7K\2\2\u020e\u020d\3\2\2\2\u020e\u020f\3\2\2\2")
        buf.write(u"\u020f\u0485\3\2\2\2\u0210\u0211\7\u00bb\2\2\u0211\u0213")
        buf.write(u"\7\u0098\2\2\u0212\u0214\7t\2\2\u0213\u0212\3\2\2\2\u0213")
        buf.write(u"\u0214\3\2\2\2\u0214\u0485\3\2\2\2\u0215\u0216\7\u0099")
        buf.write(u"\2\2\u0216\u0218\5l\67\2\u0217\u0219\7\u009b\2\2\u0218")
        buf.write(u"\u0217\3\2\2\2\u0218\u0219\3\2\2\2\u0219\u021b\3\2\2")
        buf.write(u"\2\u021a\u021c\7K\2\2\u021b\u021a\3\2\2\2\u021b\u021c")
        buf.write(u"\3\2\2\2\u021c\u0485\3\2\2\2\u021d\u021e\7N\2\2\u021e")
        buf.write(u"\u021f\7\u009c\2\2\u021f\u0220\5\u008aF\2\u0220\u0224")
        buf.write(u"\7Y\2\2\u0221\u0222\7\u009d\2\2\u0222\u0223\7\u009e\2")
        buf.write(u"\2\u0223\u0225\7\4\2\2\u0224\u0221\3\2\2\2\u0224\u0225")
        buf.write(u"\3\2\2\2\u0225\u022e\3\2\2\2\u0226\u022c\7-\2\2\u0227")
        buf.write(u"\u0229\7g\2\2\u0228\u0227\3\2\2\2\u0228\u0229\3\2\2\2")
        buf.write(u"\u0229\u022a\3\2\2\2\u022a\u022d\5\u008aF\2\u022b\u022d")
        buf.write(u"\7\u009f\2\2\u022c\u0228\3\2\2\2\u022c\u022b\3\2\2\2")
        buf.write(u"\u022d\u022f\3\2\2\2\u022e\u0226\3\2\2\2\u022e\u022f")
        buf.write(u"\3\2\2\2\u022f\u0231\3\2\2\2\u0230\u0232\7\u00a0\2\2")
        buf.write(u"\u0231\u0230\3\2\2\2\u0231\u0232\3\2\2\2\u0232\u0485")
        buf.write(u"\3\2\2\2\u0233\u0234\7N\2\2\u0234\u0235\7\u00a1\2\2\u0235")
        buf.write(u"\u0236\5\u008aF\2\u0236\u0237\7\u00a2\2\2\u0237\u0238")
        buf.write(u"\5l\67\2\u0238\u0239\7\u0086\2\2\u0239\u023e\5l\67\2")
        buf.write(u"\u023a\u023b\7\u009d\2\2\u023b\u023c\7\4\2\2\u023c\u023d")
        buf.write(u"\7 \2\2\u023d\u023f\7\4\2\2\u023e\u023a\3\2\2\2\u023e")
        buf.write(u"\u023f\3\2\2\2\u023f\u0244\3\2\2\2\u0240\u0241\7\u00a5")
        buf.write(u"\2\2\u0241\u0245\5\u008aF\2\u0242\u0243\7\u00a6\2\2\u0243")
        buf.write(u"\u0245\5\u008aF\2\u0244\u0240\3\2\2\2\u0244\u0242\3\2")
        buf.write(u"\2\2\u0244\u0245\3\2\2\2\u0245\u024c\3\2\2\2\u0246\u0247")
        buf.write(u"\7\u00a7\2\2\u0247\u024a\5\u008aF\2\u0248\u0249\7 \2")
        buf.write(u"\2\u0249\u024b\5\u008aF\2\u024a\u0248\3\2\2\2\u024a\u024b")
        buf.write(u"\3\2\2\2\u024b\u024d\3\2\2\2\u024c\u0246\3\2\2\2\u024c")
        buf.write(u"\u024d\3\2\2\2\u024d\u025c\3\2\2\2\u024e\u024f\7\u00a8")
        buf.write(u"\2\2\u024f\u025a\5\u008aF\2\u0250\u0251\7 \2\2\u0251")
        buf.write(u"\u0258\7\4\2\2\u0252\u0253\7 \2\2\u0253\u0256\5l\67\2")
        buf.write(u"\u0254\u0255\7 \2\2\u0255\u0257\5\u008aF\2\u0256\u0254")
        buf.write(u"\3\2\2\2\u0256\u0257\3\2\2\2\u0257\u0259\3\2\2\2\u0258")
        buf.write(u"\u0252\3\2\2\2\u0258\u0259\3\2\2\2\u0259\u025b\3\2\2")
        buf.write(u"\2\u025a\u0250\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u025d")
        buf.write(u"\3\2\2\2\u025c\u024e\3\2\2\2\u025c\u025d\3\2\2\2\u025d")
        buf.write(u"\u0260\3\2\2\2\u025e\u025f\7\u00a9\2\2\u025f\u0261\5")
        buf.write(u"\u008aF\2\u0260\u025e\3\2\2\2\u0260\u0261\3\2\2\2\u0261")
        buf.write(u"\u0264\3\2\2\2\u0262\u0263\7\u00ab\2\2\u0263\u0265\5")
        buf.write(u"l\67\2\u0264\u0262\3\2\2\2\u0264\u0265\3\2\2\2\u0265")
        buf.write(u"\u0270\3\2\2\2\u0266\u0267\7\u0098\2\2\u0267\u026a\5")
        buf.write(u"\u008aF\2\u0268\u0269\7\n\2\2\u0269\u026b\5\u008aF\2")
        buf.write(u"\u026a\u0268\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u026e")
        buf.write(u"\3\2\2\2\u026c\u026d\7 \2\2\u026d\u026f\5l\67\2\u026e")
        buf.write(u"\u026c\3\2\2\2\u026e\u026f\3\2\2\2\u026f\u0271\3\2\2")
        buf.write(u"\2\u0270\u0266\3\2\2\2\u0270\u0271\3\2\2\2\u0271\u0274")
        buf.write(u"\3\2\2\2\u0272\u0273\7\u00aa\2\2\u0273\u0275\5\u008a")
        buf.write(u"F\2\u0274\u0272\3\2\2\2\u0274\u0275\3\2\2\2\u0275\u027b")
        buf.write(u"\3\2\2\2\u0276\u0279\7\u0093\2\2\u0277\u0278\7S\2\2\u0278")
        buf.write(u"\u027a\5l\67\2\u0279\u0277\3\2\2\2\u0279\u027a\3\2\2")
        buf.write(u"\2\u027a\u027c\3\2\2\2\u027b\u0276\3\2\2\2\u027b\u027c")
        buf.write(u"\3\2\2\2\u027c\u0280\3\2\2\2\u027d\u027e\7\u00a3\2\2")
        buf.write(u"\u027e\u027f\7\u00a4\2\2\u027f\u0281\7\4\2\2\u0280\u027d")
        buf.write(u"\3\2\2\2\u0280\u0281\3\2\2\2\u0281\u0485\3\2\2\2\u0282")
        buf.write(u"\u0283\7N\2\2\u0283\u0284\7\u00ad\2\2\u0284\u0286\5\u008a")
        buf.write(u"F\2\u0285\u0287\7\u00af\2\2\u0286\u0285\3\2\2\2\u0286")
        buf.write(u"\u0287\3\2\2\2\u0287\u0289\3\2\2\2\u0288\u028a\7\u00b0")
        buf.write(u"\2\2\u0289\u0288\3\2\2\2\u0289\u028a\3\2\2\2\u028a\u028c")
        buf.write(u"\3\2\2\2\u028b\u028d\7\u00b1\2\2\u028c\u028b\3\2\2\2")
        buf.write(u"\u028c\u028d\3\2\2\2\u028d\u0291\3\2\2\2\u028e\u028f")
        buf.write(u"\7\u00a3\2\2\u028f\u0290\7\u00a4\2\2\u0290\u0292\7\4")
        buf.write(u"\2\2\u0291\u028e\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0485")
        buf.write(u"\3\2\2\2\u0293\u0294\7N\2\2\u0294\u0295\7Y\2\2\u0295")
        buf.write(u"\u0296\7\4\2\2\u0296\u0297\7\u00a2\2\2\u0297\u0298\5")
        buf.write(u"\u008aF\2\u0298\u0299\7\u0086\2\2\u0299\u029c\5l\67\2")
        buf.write(u"\u029a\u029b\7\u00ab\2\2\u029b\u029d\5l\67\2\u029c\u029a")
        buf.write(u"\3\2\2\2\u029c\u029d\3\2\2\2\u029d\u0485\3\2\2\2\u029e")
        buf.write(u"\u029f\7\63\2\2\u029f\u02a0\7\u00a1\2\2\u02a0\u02a1\5")
        buf.write(u"\u008aF\2\u02a1\u02a2\7\u00a2\2\2\u02a2\u02a6\5\u008a")
        buf.write(u"F\2\u02a3\u02a4\7\u00ac\2\2\u02a4\u02a5\t\b\2\2\u02a5")
        buf.write(u"\u02a7\5\u008aF\2\u02a6\u02a3\3\2\2\2\u02a6\u02a7\3\2")
        buf.write(u"\2\2\u02a7\u0485\3\2\2\2\u02a8\u02a9\7\63\2\2\u02a9\u02aa")
        buf.write(u"\7Y\2\2\u02aa\u02ab\7\4\2\2\u02ab\u02ac\7\u00a2\2\2\u02ac")
        buf.write(u"\u02b0\5\u008aF\2\u02ad\u02ae\7\u00ac\2\2\u02ae\u02af")
        buf.write(u"\t\b\2\2\u02af\u02b1\5\u008aF\2\u02b0\u02ad\3\2\2\2\u02b0")
        buf.write(u"\u02b1\3\2\2\2\u02b1\u0485\3\2\2\2\u02b2\u02b3\7\63\2")
        buf.write(u"\2\u02b3\u02b4\7\u00b2\2\2\u02b4\u02b5\7Y\2\2\u02b5\u02b6")
        buf.write(u"\7\4\2\2\u02b6\u02b7\7\u00a2\2\2\u02b7\u02b8\5\u008a")
        buf.write(u"F\2\u02b8\u02b9\5<\37\2\u02b9\u0485\3\2\2\2\u02ba\u02bb")
        buf.write(u"\7\u00ac\2\2\u02bb\u02be\7g\2\2\u02bc\u02bf\5\32\16\2")
        buf.write(u"\u02bd\u02bf\7t\2\2\u02be\u02bc\3\2\2\2\u02be\u02bd\3")
        buf.write(u"\2\2\2\u02bf\u02c8\3\2\2\2\u02c0\u02c6\7-\2\2\u02c1\u02c3")
        buf.write(u"\7g\2\2\u02c2\u02c1\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3")
        buf.write(u"\u02c4\3\2\2\2\u02c4\u02c7\5\u008aF\2\u02c5\u02c7\7\u009f")
        buf.write(u"\2\2\u02c6\u02c2\3\2\2\2\u02c6\u02c5\3\2\2\2\u02c7\u02c9")
        buf.write(u"\3\2\2\2\u02c8\u02c0\3\2\2\2\u02c8\u02c9\3\2\2\2\u02c9")
        buf.write(u"\u02cb\3\2\2\2\u02ca\u02cc\t\t\2\2\u02cb\u02ca\3\2\2")
        buf.write(u"\2\u02cb\u02cc\3\2\2\2\u02cc\u02ce\3\2\2\2\u02cd\u02cf")
        buf.write(u"\7\u00b5\2\2\u02ce\u02cd\3\2\2\2\u02ce\u02cf\3\2\2\2")
        buf.write(u"\u02cf\u0485\3\2\2\2\u02d0\u02d1\7\u00ac\2\2\u02d1\u02d2")
        buf.write(u"\7\u009c\2\2\u02d2\u02d4\5\u008aF\2\u02d3\u02d5\7h\2")
        buf.write(u"\2\u02d4\u02d3\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02d8")
        buf.write(u"\3\2\2\2\u02d6\u02d7\7\u00a1\2\2\u02d7\u02d9\5\u008a")
        buf.write(u"F\2\u02d8\u02d6\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\u0485")
        buf.write(u"\3\2\2\2\u02da\u02db\7\u00b3\2\2\u02db\u02de\t\b\2\2")
        buf.write(u"\u02dc\u02df\7t\2\2\u02dd\u02df\5\32\16\2\u02de\u02dc")
        buf.write(u"\3\2\2\2\u02de\u02dd\3\2\2\2\u02df\u0485\3\2\2\2\u02e0")
        buf.write(u"\u02e2\7\65\2\2\u02e1\u02e3\5l\67\2\u02e2\u02e1\3\2\2")
        buf.write(u"\2\u02e2\u02e3\3\2\2\2\u02e3\u0485\3\2\2\2\u02e4\u02e6")
        buf.write(u"\7\u00eb\2\2\u02e5\u02e7\5l\67\2\u02e6\u02e5\3\2\2\2")
        buf.write(u"\u02e6\u02e7\3\2\2\2\u02e7\u0485\3\2\2\2\u02e8\u02e9")
        buf.write(u"\7@\2\2\u02e9\u02ea\t\n\2\2\u02ea\u02ec\5x=\2\u02eb\u02ed")
        buf.write(u"\7E\2\2\u02ec\u02eb\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed")
        buf.write(u"\u02ee\3\2\2\2\u02ee\u02ef\7\22\2\2\u02ef\u02f0\5\u008a")
        buf.write(u"F\2\u02f0\u02f1\5\u008aF\2\u02f1\u02f9\5\u0084C\2\u02f2")
        buf.write(u"\u02f3\7 \2\2\u02f3\u02f4\5\u008aF\2\u02f4\u02f5\5\u008a")
        buf.write(u"F\2\u02f5\u02f6\5\u0084C\2\u02f6\u02f8\3\2\2\2\u02f7")
        buf.write(u"\u02f2\3\2\2\2\u02f8\u02fb\3\2\2\2\u02f9\u02f7\3\2\2")
        buf.write(u"\2\u02f9\u02fa\3\2\2\2\u02fa\u02fc\3\2\2\2\u02fb\u02f9")
        buf.write(u"\3\2\2\2\u02fc\u02fd\7\23\2\2\u02fd\u0485\3\2\2\2\u02fe")
        buf.write(u"\u02ff\7\u00ff\2\2\u02ff\u0300\7A\2\2\u0300\u030a\5x")
        buf.write(u"=\2\u0301\u0302\7a\2\2\u0302\u0303\7\u0100\2\2\u0303")
        buf.write(u"\u0304\5\u008aF\2\u0304\u0305\5\u008aF\2\u0305\u0306")
        buf.write(u"\5\u0084C\2\u0306\u030b\3\2\2\2\u0307\u0308\7\u0101\2")
        buf.write(u"\2\u0308\u0309\7\u0100\2\2\u0309\u030b\5\u008aF\2\u030a")
        buf.write(u"\u0301\3\2\2\2\u030a\u0307\3\2\2\2\u030b\u0485\3\2\2")
        buf.write(u"\2\u030c\u0327\7F\2\2\u030d\u0328\5x=\2\u030e\u0310\7")
        buf.write(u"\u008f\2\2\u030f\u030e\3\2\2\2\u030f\u0310\3\2\2\2\u0310")
        buf.write(u"\u0313\3\2\2\2\u0311\u0314\5d\63\2\u0312\u0314\7\t\2")
        buf.write(u"\2\u0313\u0311\3\2\2\2\u0313\u0312\3\2\2\2\u0314\u0317")
        buf.write(u"\3\2\2\2\u0315\u0316\7\u0081\2\2\u0316\u0318\5x=\2\u0317")
        buf.write(u"\u0315\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u031b\3\2\2")
        buf.write(u"\2\u0319\u031a\7\u00c2\2\2\u031a\u031c\5l\67\2\u031b")
        buf.write(u"\u0319\3\2\2\2\u031b\u031c\3\2\2\2\u031c\u0320\3\2\2")
        buf.write(u"\2\u031d\u031e\7\u0090\2\2\u031e\u031f\t\13\2\2\u031f")
        buf.write(u"\u0321\5x=\2\u0320\u031d\3\2\2\2\u0320\u0321\3\2\2\2")
        buf.write(u"\u0321\u0325\3\2\2\2\u0322\u0323\7\u00c0\2\2\u0323\u0324")
        buf.write(u"\7\u00c7\2\2\u0324\u0326\5\u008aF\2\u0325\u0322\3\2\2")
        buf.write(u"\2\u0325\u0326\3\2\2\2\u0326\u0328\3\2\2\2\u0327\u030d")
        buf.write(u"\3\2\2\2\u0327\u030f\3\2\2\2\u0328\u0485\3\2\2\2\u0329")
        buf.write(u"\u032b\7G\2\2\u032a\u032c\t\f\2\2\u032b\u032a\3\2\2\2")
        buf.write(u"\u032b\u032c\3\2\2\2\u032c\u0334\3\2\2\2\u032d\u032e")
        buf.write(u"\7-\2\2\u032e\u0335\5x=\2\u032f\u0330\5x=\2\u0330\u0331")
        buf.write(u"\7-\2\2\u0331\u0332\5x=\2\u0332\u0335\3\2\2\2\u0333\u0335")
        buf.write(u"\5x=\2\u0334\u032d\3\2\2\2\u0334\u032f\3\2\2\2\u0334")
        buf.write(u"\u0333\3\2\2\2\u0334\u0335\3\2\2\2\u0335\u0337\3\2\2")
        buf.write(u"\2\u0336\u0338\t\f\2\2\u0337\u0336\3\2\2\2\u0337\u0338")
        buf.write(u"\3\2\2\2\u0338\u033b\3\2\2\2\u0339\u033a\7\u00bf\2\2")
        buf.write(u"\u033a\u033c\5x=\2\u033b\u0339\3\2\2\2\u033b\u033c\3")
        buf.write(u"\2\2\2\u033c\u0485\3\2\2\2\u033d\u0341\7Q\2\2\u033e\u0340")
        buf.write(u"\5B\"\2\u033f\u033e\3\2\2\2\u0340\u0343\3\2\2\2\u0341")
        buf.write(u"\u033f\3\2\2\2\u0341\u0342\3\2\2\2\u0342\u0485\3\2\2")
        buf.write(u"\2\u0343\u0341\3\2\2\2\u0344\u0485\7R\2\2\u0345\u034d")
        buf.write(u"\7c\2\2\u0346\u034c\5B\"\2\u0347\u0348\5x=\2\u0348\u0349")
        buf.write(u"\7\66\2\2\u0349\u034a\5l\67\2\u034a\u034c\3\2\2\2\u034b")
        buf.write(u"\u0346\3\2\2\2\u034b\u0347\3\2\2\2\u034c\u034f\3\2\2")
        buf.write(u"\2\u034d\u034b\3\2\2\2\u034d\u034e\3\2\2\2\u034e\u0485")
        buf.write(u"\3\2\2\2\u034f\u034d\3\2\2\2\u0350\u0351\7\u00c9\2\2")
        buf.write(u"\u0351\u0352\7\63\2\2\u0352\u0353\5x=\2\u0353\u0354\t")
        buf.write(u"\r\2\2\u0354\u0356\5x=\2\u0355\u0357\7\u00cb\2\2\u0356")
        buf.write(u"\u0355\3\2\2\2\u0356\u0357\3\2\2\2\u0357\u0359\3\2\2")
        buf.write(u"\2\u0358\u035a\t\16\2\2\u0359\u0358\3\2\2\2\u0359\u035a")
        buf.write(u"\3\2\2\2\u035a\u035c\3\2\2\2\u035b\u035d\t\17\2\2\u035c")
        buf.write(u"\u035b\3\2\2\2\u035c\u035d\3\2\2\2\u035d\u035f\3\2\2")
        buf.write(u"\2\u035e\u0360\7\u00cf\2\2\u035f\u035e\3\2\2\2\u035f")
        buf.write(u"\u0360\3\2\2\2\u0360\u0485\3\2\2\2\u0361\u0367\7u\2\2")
        buf.write(u"\u0362\u0363\7+\2\2\u0363\u0366\5l\67\2\u0364\u0366\5")
        buf.write(u"B\"\2\u0365\u0362\3\2\2\2\u0365\u0364\3\2\2\2\u0366\u0369")
        buf.write(u"\3\2\2\2\u0367\u0365\3\2\2\2\u0367\u0368\3\2\2\2\u0368")
        buf.write(u"\u0485\3\2\2\2\u0369\u0367\3\2\2\2\u036a\u0371\7\u008e")
        buf.write(u"\2\2\u036b\u036c\7+\2\2\u036c\u0370\5l\67\2\u036d\u0370")
        buf.write(u"\5B\"\2\u036e\u0370\5l\67\2\u036f\u036b\3\2\2\2\u036f")
        buf.write(u"\u036d\3\2\2\2\u036f\u036e\3\2\2\2\u0370\u0373\3\2\2")
        buf.write(u"\2\u0371\u036f\3\2\2\2\u0371\u0372\3\2\2\2\u0372\u0485")
        buf.write(u"\3\2\2\2\u0373\u0371\3\2\2\2\u0374\u037a\t\20\2\2\u0375")
        buf.write(u"\u0379\5B\"\2\u0376\u0377\7-\2\2\u0377\u0379\5x=\2\u0378")
        buf.write(u"\u0375\3\2\2\2\u0378\u0376\3\2\2\2\u0379\u037c\3\2\2")
        buf.write(u"\2\u037a\u0378\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u0485")
        buf.write(u"\3\2\2\2\u037c\u037a\3\2\2\2\u037d\u037e\7{\2\2\u037e")
        buf.write(u"\u0386\7\u0081\2\2\u037f\u0380\79\2\2\u0380\u0387\5l")
        buf.write(u"\67\2\u0381\u0382\5x=\2\u0382\u0383\7S\2\2\u0383\u0384")
        buf.write(u"\5l\67\2\u0384\u0387\3\2\2\2\u0385\u0387\5x=\2\u0386")
        buf.write(u"\u037f\3\2\2\2\u0386\u0381\3\2\2\2\u0386\u0385\3\2\2")
        buf.write(u"\2\u0387\u038a\3\2\2\2\u0388\u0389\7\u00f8\2\2\u0389")
        buf.write(u"\u038b\5x=\2\u038a\u0388\3\2\2\2\u038a\u038b\3\2\2\2")
        buf.write(u"\u038b\u0485\3\2\2\2\u038c\u038e\7{\2\2\u038d\u038f\7")
        buf.write(u"|\2\2\u038e\u038d\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0396")
        buf.write(u"\3\2\2\2\u0390\u0391\7-\2\2\u0391\u0392\5x=\2\u0392\u0393")
        buf.write(u"\7}\2\2\u0393\u0397\3\2\2\2\u0394\u0395\7-\2\2\u0395")
        buf.write(u"\u0397\5x=\2\u0396\u0390\3\2\2\2\u0396\u0394\3\2\2\2")
        buf.write(u"\u0396\u0397\3\2\2\2\u0397\u0485\3\2\2\2\u0398\u0399")
        buf.write(u"\7\u00f5\2\2\u0399\u039a\7\u0090\2\2\u039a\u03ae\5x=")
        buf.write(u"\2\u039b\u03a1\7\u0081\2\2\u039c\u039d\79\2\2\u039d\u03a2")
        buf.write(u"\5l\67\2\u039e\u03a2\7\u00f7\2\2\u039f\u03a0\7D\2\2\u03a0")
        buf.write(u"\u03a2\5l\67\2\u03a1\u039c\3\2\2\2\u03a1\u039e\3\2\2")
        buf.write(u"\2\u03a1\u039f\3\2\2\2\u03a2\u03af\3\2\2\2\u03a3\u03a4")
        buf.write(u"\7\22\2\2\u03a4\u03a5\5d\63\2\u03a5\u03a6\7\23\2\2\u03a6")
        buf.write(u"\u03a8\3\2\2\2\u03a7\u03a3\3\2\2\2\u03a7\u03a8\3\2\2")
        buf.write(u"\2\u03a8\u03a9\3\2\2\2\u03a9\u03aa\7\u00f6\2\2\u03aa")
        buf.write(u"\u03ab\7\22\2\2\u03ab\u03ac\5b\62\2\u03ac\u03ad\7\23")
        buf.write(u"\2\2\u03ad\u03af\3\2\2\2\u03ae\u039b\3\2\2\2\u03ae\u03a7")
        buf.write(u"\3\2\2\2\u03af\u0485\3\2\2\2\u03b0\u03b2\7\u0093\2\2")
        buf.write(u"\u03b1\u03b3\5l\67\2\u03b2\u03b1\3\2\2\2\u03b2\u03b3")
        buf.write(u"\3\2\2\2\u03b3\u03b6\3\2\2\2\u03b4\u03b5\7-\2\2\u03b5")
        buf.write(u"\u03b7\5x=\2\u03b6\u03b4\3\2\2\2\u03b6\u03b7\3\2\2\2")
        buf.write(u"\u03b7\u0485\3\2\2\2\u03b8\u03c6\7\u00e6\2\2\u03b9\u03c7")
        buf.write(u"\7\u00e3\2\2\u03ba\u03bc\t\21\2\2\u03bb\u03ba\3\2\2\2")
        buf.write(u"\u03bb\u03bc\3\2\2\2\u03bc\u03c4\3\2\2\2\u03bd\u03be")
        buf.write(u"\7-\2\2\u03be\u03c5\5x=\2\u03bf\u03c0\5x=\2\u03c0\u03c1")
        buf.write(u"\7-\2\2\u03c1\u03c2\5x=\2\u03c2\u03c5\3\2\2\2\u03c3\u03c5")
        buf.write(u"\5x=\2\u03c4\u03bd\3\2\2\2\u03c4\u03bf\3\2\2\2\u03c4")
        buf.write(u"\u03c3\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03c7\3\2\2")
        buf.write(u"\2\u03c6\u03b9\3\2\2\2\u03c6\u03bb\3\2\2\2\u03c7\u0485")
        buf.write(u"\3\2\2\2\u03c8\u03ca\7\u00e7\2\2\u03c9\u03cb\7\u00cb")
        buf.write(u"\2\2\u03ca\u03c9\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u0485")
        buf.write(u"\3\2\2\2\u03cc\u03cd\7\u00c1\2\2\u03cd\u03dc\5l\67\2")
        buf.write(u"\u03ce\u03cf\7\u00c0\2\2\u03cf\u03d8\5l\67\2\u03d0\u03d1")
        buf.write(u"\7\u00ca\2\2\u03d1\u03d4\5x=\2\u03d2\u03d3\7\u00a2\2")
        buf.write(u"\2\u03d3\u03d5\5x=\2\u03d4\u03d2\3\2\2\2\u03d4\u03d5")
        buf.write(u"\3\2\2\2\u03d5\u03d8\3\2\2\2\u03d6\u03d8\5x=\2\u03d7")
        buf.write(u"\u03ce\3\2\2\2\u03d7\u03d0\3\2\2\2\u03d7\u03d6\3\2\2")
        buf.write(u"\2\u03d8\u03da\3\2\2\2\u03d9\u03db\t\16\2\2\u03da\u03d9")
        buf.write(u"\3\2\2\2\u03da\u03db\3\2\2\2\u03db\u03dd\3\2\2\2\u03dc")
        buf.write(u"\u03d7\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd\u03e0\3\2\2")
        buf.write(u"\2\u03de\u03df\7-\2\2\u03df\u03e1\5x=\2\u03e0\u03de\3")
        buf.write(u"\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u0485\3\2\2\2\u03e2")
        buf.write(u"\u03e9\7v\2\2\u03e3\u03ea\7w\2\2\u03e4\u03ea\7x\2\2\u03e5")
        buf.write(u"\u03e7\7y\2\2\u03e6\u03e5\3\2\2\2\u03e6\u03e7\3\2\2\2")
        buf.write(u"\u03e7\u03e8\3\2\2\2\u03e8\u03ea\5l\67\2\u03e9\u03e3")
        buf.write(u"\3\2\2\2\u03e9\u03e4\3\2\2\2\u03e9\u03e6\3\2\2\2\u03ea")
        buf.write(u"\u03ed\3\2\2\2\u03eb\u03ec\7-\2\2\u03ec\u03ee\5x=\2\u03ed")
        buf.write(u"\u03eb\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee\u0485\3\2\2")
        buf.write(u"\2\u03ef\u03f1\7\u008b\2\2\u03f0\u03f2\7\u008c\2\2\u03f1")
        buf.write(u"\u03f0\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f3\3\2\2")
        buf.write(u"\2\u03f3\u03f4\7+\2\2\u03f4\u0485\5x=\2\u03f5\u03f8\7")
        buf.write(u"\u00de\2\2\u03f6\u03f7\7-\2\2\u03f7\u03f9\5x=\2\u03f8")
        buf.write(u"\u03f6\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9\u0485\3\2\2")
        buf.write(u"\2\u03fa\u03fe\7\u00f4\2\2\u03fb\u03fd\n\2\2\2\u03fc")
        buf.write(u"\u03fb\3\2\2\2\u03fd\u0400\3\2\2\2\u03fe\u03fc\3\2\2")
        buf.write(u"\2\u03fe\u03ff\3\2\2\2\u03ff\u0485\3\2\2\2\u0400\u03fe")
        buf.write(u"\3\2\2\2\u0401\u0407\7\u00fa\2\2\u0402\u0404\7\u00fe")
        buf.write(u"\2\2\u0403\u0405\t\22\2\2\u0404\u0403\3\2\2\2\u0404\u0405")
        buf.write(u"\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0408\5l\67\2\u0407")
        buf.write(u"\u0402\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u040a\3\2\2")
        buf.write(u"\2\u0409\u040b\7\u00e8\2\2\u040a\u0409\3\2\2\2\u040a")
        buf.write(u"\u040b\3\2\2\2\u040b\u040d\3\2\2\2\u040c\u040e\7|\2\2")
        buf.write(u"\u040d\u040c\3\2\2\2\u040d\u040e\3\2\2\2\u040e\u0417")
        buf.write(u"\3\2\2\2\u040f\u0418\7\u00f7\2\2\u0410\u0411\7D\2\2\u0411")
        buf.write(u"\u0413\5l\67\2\u0412\u0414\7\u00cf\2\2\u0413\u0412\3")
        buf.write(u"\2\2\2\u0413\u0414\3\2\2\2\u0414\u0418\3\2\2\2\u0415")
        buf.write(u"\u0416\7+\2\2\u0416\u0418\5l\67\2\u0417\u040f\3\2\2\2")
        buf.write(u"\u0417\u0410\3\2\2\2\u0417\u0415\3\2\2\2\u0418\u0485")
        buf.write(u"\3\2\2\2\u0419\u041f\7\u00fb\2\2\u041a\u041c\7\u00fe")
        buf.write(u"\2\2\u041b\u041d\t\22\2\2\u041c\u041b\3\2\2\2\u041c\u041d")
        buf.write(u"\3\2\2\2\u041d\u041e\3\2\2\2\u041e\u0420\5l\67\2\u041f")
        buf.write(u"\u041a\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u0422\3\2\2")
        buf.write(u"\2\u0421\u0423\7\u00e8\2\2\u0422\u0421\3\2\2\2\u0422")
        buf.write(u"\u0423\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u0429\7\u0081")
        buf.write(u"\2\2\u0425\u042a\7\u00f7\2\2\u0426\u0427\7D\2\2\u0427")
        buf.write(u"\u042a\5l\67\2\u0428\u042a\5l\67\2\u0429\u0425\3\2\2")
        buf.write(u"\2\u0429\u0426\3\2\2\2\u0429\u0428\3\2\2\2\u042a\u0485")
        buf.write(u"\3\2\2\2\u042b\u0431\7z\2\2\u042c\u042e\t\23\2\2\u042d")
        buf.write(u"\u042f\7t\2\2\u042e\u042d\3\2\2\2\u042e\u042f\3\2\2\2")
        buf.write(u"\u042f\u0432\3\2\2\2\u0430\u0432\7t\2\2\u0431\u042c\3")
        buf.write(u"\2\2\2\u0431\u0430\3\2\2\2\u0432\u0485\3\2\2\2\u0433")
        buf.write(u"\u0434\7H\2\2\u0434\u0485\7I\2\2\u0435\u0450\7K\2\2\u0436")
        buf.write(u"\u0451\7t\2\2\u0437\u0438\7O\2\2\u0438\u0451\5l\67\2")
        buf.write(u"\u0439\u043a\7\u00c6\2\2\u043a\u0451\5x=\2\u043b\u0451")
        buf.write(u"\7\u0102\2\2\u043c\u043d\7\u00db\2\2\u043d\u0451\5d\63")
        buf.write(u"\2\u043e\u0451\7I\2\2\u043f\u0451\7\65\2\2\u0440\u0451")
        buf.write(u"\7\u00fe\2\2\u0441\u0451\7\u0103\2\2\u0442\u0451\7\u00dc")
        buf.write(u"\2\2\u0443\u0451\7\u0105\2\2\u0444\u0451\7\u0106\2\2")
        buf.write(u"\u0445\u0451\7\u00ad\2\2\u0446\u0451\7\u00e9\2\2\u0447")
        buf.write(u"\u0451\7\u0086\2\2\u0448\u044a\7H\2\2\u0449\u044b\7t")
        buf.write(u"\2\2\u044a\u0449\3\2\2\2\u044a\u044b\3\2\2\2\u044b\u0451")
        buf.write(u"\3\2\2\2\u044c\u044d\7\u0107\2\2\u044d\u0451\5l\67\2")
        buf.write(u"\u044e\u0451\7\u00be\2\2\u044f\u0451\7g\2\2\u0450\u0436")
        buf.write(u"\3\2\2\2\u0450\u0437\3\2\2\2\u0450\u0439\3\2\2\2\u0450")
        buf.write(u"\u043b\3\2\2\2\u0450\u043c\3\2\2\2\u0450\u043e\3\2\2")
        buf.write(u"\2\u0450\u043f\3\2\2\2\u0450\u0440\3\2\2\2\u0450\u0441")
        buf.write(u"\3\2\2\2\u0450\u0442\3\2\2\2\u0450\u0443\3\2\2\2\u0450")
        buf.write(u"\u0444\3\2\2\2\u0450\u0445\3\2\2\2\u0450\u0446\3\2\2")
        buf.write(u"\2\u0450\u0447\3\2\2\2\u0450\u0448\3\2\2\2\u0450\u044c")
        buf.write(u"\3\2\2\2\u0450\u044e\3\2\2\2\u0450\u044f\3\2\2\2\u0450")
        buf.write(u"\u0451\3\2\2\2\u0451\u0485\3\2\2\2\u0452\u0453\7\u0082")
        buf.write(u"\2\2\u0453\u0456\7\u0083\2\2\u0454\u0457\7#\2\2\u0455")
        buf.write(u"\u0457\5x=\2\u0456\u0454\3\2\2\2\u0456\u0455\3\2\2\2")
        buf.write(u"\u0457\u0461\3\2\2\2\u0458\u0460\7\u0084\2\2\u0459\u045a")
        buf.write(u"\7+\2\2\u045a\u045c\7\u0085\2\2\u045b\u045d\7\u0086\2")
        buf.write(u"\2\u045c\u045b\3\2\2\2\u045c\u045d\3\2\2\2\u045d\u0460")
        buf.write(u"\3\2\2\2\u045e\u0460\7\u008a\2\2\u045f\u0458\3\2\2\2")
        buf.write(u"\u045f\u0459\3\2\2\2\u045f\u045e\3\2\2\2\u0460\u0463")
        buf.write(u"\3\2\2\2\u0461\u045f\3\2\2\2\u0461\u0462\3\2\2\2\u0462")
        buf.write(u"\u0485\3\2\2\2\u0463\u0461\3\2\2\2\u0464\u0466\7l\2\2")
        buf.write(u"\u0465\u0467\5\u0086D\2\u0466\u0465\3\2\2\2\u0466\u0467")
        buf.write(u"\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u0469\5\u008aF\2\u0469")
        buf.write(u"\u046a\7-\2\2\u046a\u046d\5x=\2\u046b\u046c\7.\2\2\u046c")
        buf.write(u"\u046e\5\u008aF\2\u046d\u046b\3\2\2\2\u046d\u046e\3\2")
        buf.write(u"\2\2\u046e\u0470\3\2\2\2\u046f\u0471\5D#\2\u0470\u046f")
        buf.write(u"\3\2\2\2\u0470\u0471\3\2\2\2\u0471\u0485\3\2\2\2\u0472")
        buf.write(u"\u0485\7\u00da\2\2\u0473\u0476\t\24\2\2\u0474\u0475\7")
        buf.write(u"\f\2\2\u0475\u0477\5\u008aF\2\u0476\u0474\3\2\2\2\u0476")
        buf.write(u"\u0477\3\2\2\2\u0477\u047b\3\2\2\2\u0478\u047a\n\2\2")
        buf.write(u"\2\u0479\u0478\3\2\2\2\u047a\u047d\3\2\2\2\u047b\u0479")
        buf.write(u"\3\2\2\2\u047b\u047c\3\2\2\2\u047c\u0485\3\2\2\2\u047d")
        buf.write(u"\u047b\3\2\2\2\u047e\u047f\7)\2\2\u047f\u0482\5l\67\2")
        buf.write(u"\u0480\u0481\7\u00ab\2\2\u0481\u0483\5l\67\2\u0482\u0480")
        buf.write(u"\3\2\2\2\u0482\u0483\3\2\2\2\u0483\u0485\3\2\2\2\u0484")
        buf.write(u"\u01f4\3\2\2\2\u0484\u01ff\3\2\2\2\u0484\u0200\3\2\2")
        buf.write(u"\2\u0484\u020b\3\2\2\2\u0484\u0210\3\2\2\2\u0484\u0215")
        buf.write(u"\3\2\2\2\u0484\u021d\3\2\2\2\u0484\u0233\3\2\2\2\u0484")
        buf.write(u"\u0282\3\2\2\2\u0484\u0293\3\2\2\2\u0484\u029e\3\2\2")
        buf.write(u"\2\u0484\u02a8\3\2\2\2\u0484\u02b2\3\2\2\2\u0484\u02ba")
        buf.write(u"\3\2\2\2\u0484\u02d0\3\2\2\2\u0484\u02da\3\2\2\2\u0484")
        buf.write(u"\u02e0\3\2\2\2\u0484\u02e4\3\2\2\2\u0484\u02e8\3\2\2")
        buf.write(u"\2\u0484\u02fe\3\2\2\2\u0484\u030c\3\2\2\2\u0484\u0329")
        buf.write(u"\3\2\2\2\u0484\u033d\3\2\2\2\u0484\u0344\3\2\2\2\u0484")
        buf.write(u"\u0345\3\2\2\2\u0484\u0350\3\2\2\2\u0484\u0361\3\2\2")
        buf.write(u"\2\u0484\u036a\3\2\2\2\u0484\u0374\3\2\2\2\u0484\u037d")
        buf.write(u"\3\2\2\2\u0484\u038c\3\2\2\2\u0484\u0398\3\2\2\2\u0484")
        buf.write(u"\u03b0\3\2\2\2\u0484\u03b8\3\2\2\2\u0484\u03c8\3\2\2")
        buf.write(u"\2\u0484\u03cc\3\2\2\2\u0484\u03e2\3\2\2\2\u0484\u03ef")
        buf.write(u"\3\2\2\2\u0484\u03f5\3\2\2\2\u0484\u03fa\3\2\2\2\u0484")
        buf.write(u"\u0401\3\2\2\2\u0484\u0419\3\2\2\2\u0484\u042b\3\2\2")
        buf.write(u"\2\u0484\u0433\3\2\2\2\u0484\u0435\3\2\2\2\u0484\u0452")
        buf.write(u"\3\2\2\2\u0484\u0464\3\2\2\2\u0484\u0472\3\2\2\2\u0484")
        buf.write(u"\u0473\3\2\2\2\u0484\u047e\3\2\2\2\u0485A\3\2\2\2\u0486")
        buf.write(u"\u048d\5\u0088E\2\u0487\u0488\7S\2\2\u0488\u048d\5l\67")
        buf.write(u"\2\u0489\u048a\7U\2\2\u048a\u048d\5l\67\2\u048b\u048d")
        buf.write(u"\7V\2\2\u048c\u0486\3\2\2\2\u048c\u0487\3\2\2\2\u048c")
        buf.write(u"\u0489\3\2\2\2\u048c\u048b\3\2\2\2\u048dC\3\2\2\2\u048e")
        buf.write(u"\u0493\5F$\2\u048f\u0490\7 \2\2\u0490\u0492\5F$\2\u0491")
        buf.write(u"\u048f\3\2\2\2\u0492\u0495\3\2\2\2\u0493\u0491\3\2\2")
        buf.write(u"\2\u0493\u0494\3\2\2\2\u0494E\3\2\2\2\u0495\u0493\3\2")
        buf.write(u"\2\2\u0496\u0498\5\u0086D\2\u0497\u0499\7\b\2\2\u0498")
        buf.write(u"\u0497\3\2\2\2\u0498\u0499\3\2\2\2\u0499\u049b\3\2\2")
        buf.write(u"\2\u049a\u049c\5\u008aF\2\u049b\u049a\3\2\2\2\u049b\u049c")
        buf.write(u"\3\2\2\2\u049cG\3\2\2\2\u049d\u049f\7#\2\2\u049e\u04a0")
        buf.write(u"\7#\2\2\u049f\u049e\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0")
        buf.write(u"\u04a3\3\2\2\2\u04a1\u04a3\7\u0104\2\2\u04a2\u049d\3")
        buf.write(u"\2\2\2\u04a2\u04a1\3\2\2\2\u04a3\u04a5\3\2\2\2\u04a4")
        buf.write(u"\u04a6\5b\62\2\u04a5\u04a4\3\2\2\2\u04a5\u04a6\3\2\2")
        buf.write(u"\2\u04a6I\3\2\2\2\u04a7\u04ba\7f\2\2\u04a8\u04a9\7+\2")
        buf.write(u"\2\u04a9\u04b9\5l\67\2\u04aa\u04b0\7g\2\2\u04ab\u04ac")
        buf.write(u"\7\u009d\2\2\u04ac\u04ad\5l\67\2\u04ad\u04ae\7 \2\2\u04ae")
        buf.write(u"\u04af\5l\67\2\u04af\u04b1\3\2\2\2\u04b0\u04ab\3\2\2")
        buf.write(u"\2\u04b0\u04b1\3\2\2\2\u04b1\u04b9\3\2\2\2\u04b2\u04b9")
        buf.write(u"\7h\2\2\u04b3\u04b9\7K\2\2\u04b4\u04b9\7i\2\2\u04b5\u04b6")
        buf.write(u"\7\u00bc\2\2\u04b6\u04b9\5l\67\2\u04b7\u04b9\5l\67\2")
        buf.write(u"\u04b8\u04a8\3\2\2\2\u04b8\u04aa\3\2\2\2\u04b8\u04b2")
        buf.write(u"\3\2\2\2\u04b8\u04b3\3\2\2\2\u04b8\u04b4\3\2\2\2\u04b8")
        buf.write(u"\u04b5\3\2\2\2\u04b8\u04b7\3\2\2\2\u04b9\u04bc\3\2\2")
        buf.write(u"\2\u04ba\u04b8\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bbK\3\2")
        buf.write(u"\2\2\u04bc\u04ba\3\2\2\2\u04bd\u04c1\7m\2\2\u04be\u04bf")
        buf.write(u"\7:\2\2\u04bf\u04c1\7<\2\2\u04c0\u04bd\3\2\2\2\u04c0")
        buf.write(u"\u04be\3\2\2\2\u04c1\u04c4\3\2\2\2\u04c2\u04c5\5x=\2")
        buf.write(u"\u04c3\u04c5\7#\2\2\u04c4\u04c2\3\2\2\2\u04c4\u04c3\3")
        buf.write(u"\2\2\2\u04c5\u04c7\3\2\2\2\u04c6\u04c8\7?\2\2\u04c7\u04c6")
        buf.write(u"\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04d5\3\2\2\2\u04c9")
        buf.write(u"\u04cd\7\u00c4\2\2\u04ca\u04cb\7\u008b\2\2\u04cb\u04cd")
        buf.write(u"\7<\2\2\u04cc\u04c9\3\2\2\2\u04cc\u04ca\3\2\2\2\u04cd")
        buf.write(u"\u04ce\3\2\2\2\u04ce\u04cf\5x=\2\u04cf\u04d0\7+\2\2\u04d0")
        buf.write(u"\u04d1\5x=\2\u04d1\u04d5\3\2\2\2\u04d2\u04d3\t\25\2\2")
        buf.write(u"\u04d3\u04d5\5x=\2\u04d4\u04c0\3\2\2\2\u04d4\u04cc\3")
        buf.write(u"\2\2\2\u04d4\u04d2\3\2\2\2\u04d5M\3\2\2\2\u04d6\u04d8")
        buf.write(u"\7p\2\2\u04d7\u04d9\5l\67\2\u04d8\u04d7\3\2\2\2\u04d8")
        buf.write(u"\u04d9\3\2\2\2\u04d9O\3\2\2\2\u04da\u04de\5R*\2\u04db")
        buf.write(u"\u04de\5V,\2\u04dc\u04de\5T+\2\u04dd\u04da\3\2\2\2\u04dd")
        buf.write(u"\u04db\3\2\2\2\u04dd\u04dc\3\2\2\2\u04deQ\3\2\2\2\u04df")
        buf.write(u"\u04e0\7\63\2\2\u04e0\u04e2\7\65\2\2\u04e1\u04e3\5<\37")
        buf.write(u"\2\u04e2\u04e1\3\2\2\2\u04e2\u04e3\3\2\2\2\u04e3S\3\2")
        buf.write(u"\2\2\u04e4\u04e5\7\63\2\2\u04e5\u04e7\7J\2\2\u04e6\u04e8")
        buf.write(u"\5<\37\2\u04e7\u04e6\3\2\2\2\u04e7\u04e8\3\2\2\2\u04e8")
        buf.write(u"U\3\2\2\2\u04e9\u04ea\7=\2\2\u04ea\u04eb\5X-\2\u04eb")
        buf.write(u"W\3\2\2\2\u04ec\u04f4\7r\2\2\u04ed\u04f5\7\63\2\2\u04ee")
        buf.write(u"\u04f5\7\64\2\2\u04ef\u04f0\7+\2\2\u04f0\u04f2\5x=\2")
        buf.write(u"\u04f1\u04f3\7\u00cf\2\2\u04f2\u04f1\3\2\2\2\u04f2\u04f3")
        buf.write(u"\3\2\2\2\u04f3\u04f5\3\2\2\2\u04f4\u04ed\3\2\2\2\u04f4")
        buf.write(u"\u04ee\3\2\2\2\u04f4\u04ef\3\2\2\2\u04f5\u05ca\3\2\2")
        buf.write(u"\2\u04f6\u04f7\7*\2\2\u04f7\u05ca\t\26\2\2\u04f8\u04fd")
        buf.write(u"\7]\2\2\u04f9\u04fe\7\63\2\2\u04fa\u04fe\7\64\2\2\u04fb")
        buf.write(u"\u04fc\7+\2\2\u04fc\u04fe\5x=\2\u04fd\u04f9\3\2\2\2\u04fd")
        buf.write(u"\u04fa\3\2\2\2\u04fd\u04fb\3\2\2\2\u04fe\u05ca\3\2\2")
        buf.write(u"\2\u04ff\u050a\7^\2\2\u0500\u050b\7\63\2\2\u0501\u050b")
        buf.write(u"\7\64\2\2\u0502\u0508\7+\2\2\u0503\u0506\5l\67\2\u0504")
        buf.write(u"\u0505\7\u00df\2\2\u0505\u0507\5l\67\2\u0506\u0504\3")
        buf.write(u"\2\2\2\u0506\u0507\3\2\2\2\u0507\u0509\3\2\2\2\u0508")
        buf.write(u"\u0503\3\2\2\2\u0508\u0509\3\2\2\2\u0509\u050b\3\2\2")
        buf.write(u"\2\u050a\u0500\3\2\2\2\u050a\u0501\3\2\2\2\u050a\u0502")
        buf.write(u"\3\2\2\2\u050b\u05ca\3\2\2\2\u050c\u050d\7\u00c6\2\2")
        buf.write(u"\u050d\u050e\7+\2\2\u050e\u0511\5x=\2\u050f\u0510\7-")
        buf.write(u"\2\2\u0510\u0512\5x=\2\u0511\u050f\3\2\2\2\u0511\u0512")
        buf.write(u"\3\2\2\2\u0512\u0515\3\2\2\2\u0513\u0514\7\u00bf\2\2")
        buf.write(u"\u0514\u0516\5x=\2\u0515\u0513\3\2\2\2\u0515\u0516\3")
        buf.write(u"\2\2\2\u0516\u0518\3\2\2\2\u0517\u0519\7\u00cf\2\2\u0518")
        buf.write(u"\u0517\3\2\2\2\u0518\u0519\3\2\2\2\u0519\u05ca\3\2\2")
        buf.write(u"\2\u051a\u0525\7o\2\2\u051b\u0526\7\63\2\2\u051c\u0526")
        buf.write(u"\7\64\2\2\u051d\u0526\7X\2\2\u051e\u0523\7+\2\2\u051f")
        buf.write(u"\u0520\5l\67\2\u0520\u0521\7 \2\2\u0521\u0522\5l\67\2")
        buf.write(u"\u0522\u0524\3\2\2\2\u0523\u051f\3\2\2\2\u0523\u0524")
        buf.write(u"\3\2\2\2\u0524\u0526\3\2\2\2\u0525\u051b\3\2\2\2\u0525")
        buf.write(u"\u051c\3\2\2\2\u0525\u051d\3\2\2\2\u0525\u051e\3\2\2")
        buf.write(u"\2\u0526\u05ca\3\2\2\2\u0527\u0528\7_\2\2\u0528\u052a")
        buf.write(u"\t\27\2\2\u0529\u052b\t\30\2\2\u052a\u0529\3\2\2\2\u052a")
        buf.write(u"\u052b\3\2\2\2\u052b\u05ca\3\2\2\2\u052c\u052d\7[\2\2")
        buf.write(u"\u052d\u05ca\t\26\2\2\u052e\u0530\7`\2\2\u052f\u0531")
        buf.write(u"\7+\2\2\u0530\u052f\3\2\2\2\u0530\u0531\3\2\2\2\u0531")
        buf.write(u"\u0532\3\2\2\2\u0532\u05ca\5\u008aF\2\u0533\u0534\7\u008d")
        buf.write(u"\2\2\u0534\u05ca\t\26\2\2\u0535\u0536\7s\2\2\u0536\u05ca")
        buf.write(u"\t\26\2\2\u0537\u0538\7\u0094\2\2\u0538\u05ca\t\26\2")
        buf.write(u"\2\u0539\u053a\7\u00c3\2\2\u053a\u0540\7+\2\2\u053b\u053e")
        buf.write(u"\5x=\2\u053c\u053d\7-\2\2\u053d\u053f\5x=\2\u053e\u053c")
        buf.write(u"\3\2\2\2\u053e\u053f\3\2\2\2\u053f\u0541\3\2\2\2\u0540")
        buf.write(u"\u053b\3\2\2\2\u0540\u0541\3\2\2\2\u0541\u05ca\3\2\2")
        buf.write(u"\2\u0542\u054e\7\u0108\2\2\u0543\u054f\7\63\2\2\u0544")
        buf.write(u"\u054f\7\64\2\2\u0545\u0547\7+\2\2\u0546\u0548\5x=\2")
        buf.write(u"\u0547\u0546\3\2\2\2\u0547\u0548\3\2\2\2\u0548\u054f")
        buf.write(u"\3\2\2\2\u0549\u054b\7\u010a\2\2\u054a\u054c\5x=\2\u054b")
        buf.write(u"\u054a\3\2\2\2\u054b\u054c\3\2\2\2\u054c\u054f\3\2\2")
        buf.write(u"\2\u054d\u054f\7\u010b\2\2\u054e\u0543\3\2\2\2\u054e")
        buf.write(u"\u0544\3\2\2\2\u054e\u0545\3\2\2\2\u054e\u0549\3\2\2")
        buf.write(u"\2\u054e\u054d\3\2\2\2\u054f\u05ca\3\2\2\2\u0550\u0551")
        buf.write(u"\7\u00c9\2\2\u0551\u0553\7+\2\2\u0552\u0554\5x=\2\u0553")
        buf.write(u"\u0552\3\2\2\2\u0553\u0554\3\2\2\2\u0554\u05ca\3\2\2")
        buf.write(u"\2\u0555\u0556\7d\2\2\u0556\u0557\7+\2\2\u0557\u0559")
        buf.write(u"\5x=\2\u0558\u055a\7\u00cf\2\2\u0559\u0558\3\2\2\2\u0559")
        buf.write(u"\u055a\3\2\2\2\u055a\u05ca\3\2\2\2\u055b\u055c\7Z\2\2")
        buf.write(u"\u055c\u055d\7+\2\2\u055d\u05ca\5l\67\2\u055e\u055f\7")
        buf.write(u"\u00ef\2\2\u055f\u05ca\t\26\2\2\u0560\u0561\7\u0095\2")
        buf.write(u"\2\u0561\u05ca\t\26\2\2\u0562\u0564\7j\2\2\u0563\u0565")
        buf.write(u"\7[\2\2\u0564\u0563\3\2\2\2\u0564\u0565\3\2\2\2\u0565")
        buf.write(u"\u0566\3\2\2\2\u0566\u05ca\t\26\2\2\u0567\u0568\7\u00c0")
        buf.write(u"\2\2\u0568\u0579\7+\2\2\u0569\u057a\5x=\2\u056a\u056c")
        buf.write(u"\7\u00ca\2\2\u056b\u056a\3\2\2\2\u056b\u056c\3\2\2\2")
        buf.write(u"\u056c\u056d\3\2\2\2\u056d\u0570\5x=\2\u056e\u056f\7")
        buf.write(u"\u00a2\2\2\u056f\u0571\5x=\2\u0570\u056e\3\2\2\2\u0570")
        buf.write(u"\u0571\3\2\2\2\u0571\u0574\3\2\2\2\u0572\u0573\7-\2\2")
        buf.write(u"\u0573\u0575\5x=\2\u0574\u0572\3\2\2\2\u0574\u0575\3")
        buf.write(u"\2\2\2\u0575\u0577\3\2\2\2\u0576\u0578\t\16\2\2\u0577")
        buf.write(u"\u0576\3\2\2\2\u0577\u0578\3\2\2\2\u0578\u057a\3\2\2")
        buf.write(u"\2\u0579\u0569\3\2\2\2\u0579\u056b\3\2\2\2\u0579\u057a")
        buf.write(u"\3\2\2\2\u057a\u05ca\3\2\2\2\u057b\u058b\7\u0085\2\2")
        buf.write(u"\u057c\u057e\7\63\2\2\u057d\u057f\7\u0086\2\2\u057e\u057d")
        buf.write(u"\3\2\2\2\u057e\u057f\3\2\2\2\u057f\u058c\3\2\2\2\u0580")
        buf.write(u"\u058c\7\64\2\2\u0581\u0589\7+\2\2\u0582\u058a\7\u00e0")
        buf.write(u"\2\2\u0583\u0584\7D\2\2\u0584\u058a\5x=\2\u0585\u0587")
        buf.write(u"\5x=\2\u0586\u0588\7\u00cf\2\2\u0587\u0586\3\2\2\2\u0587")
        buf.write(u"\u0588\3\2\2\2\u0588\u058a\3\2\2\2\u0589\u0582\3\2\2")
        buf.write(u"\2\u0589\u0583\3\2\2\2\u0589\u0585\3\2\2\2\u0589\u058a")
        buf.write(u"\3\2\2\2\u058a\u058c\3\2\2\2\u058b\u057c\3\2\2\2\u058b")
        buf.write(u"\u0580\3\2\2\2\u058b\u0581\3\2\2\2\u058c\u05ca\3\2\2")
        buf.write(u"\2\u058d\u058e\7L\2\2\u058e\u058f\7+\2\2\u058f\u0594")
        buf.write(u"\5x=\2\u0590\u0591\7 \2\2\u0591\u0593\5x=\2\u0592\u0590")
        buf.write(u"\3\2\2\2\u0593\u0596\3\2\2\2\u0594\u0592\3\2\2\2\u0594")
        buf.write(u"\u0595\3\2\2\2\u0595\u0598\3\2\2\2\u0596\u0594\3\2\2")
        buf.write(u"\2\u0597\u0599\7\u00cf\2\2\u0598\u0597\3\2\2\2\u0598")
        buf.write(u"\u0599\3\2\2\2\u0599\u05ca\3\2\2\2\u059a\u059b\7\\\2")
        buf.write(u"\2\u059b\u059c\7+\2\2\u059c\u059f\5l\67\2\u059d\u059e")
        buf.write(u"\7 \2\2\u059e\u05a0\5l\67\2\u059f\u059d\3\2\2\2\u059f")
        buf.write(u"\u05a0\3\2\2\2\u05a0\u05ca\3\2\2\2\u05a1\u05a2\7\u010e")
        buf.write(u"\2\2\u05a2\u05a3\7+\2\2\u05a3\u05a4\5l\67\2\u05a4\u05a5")
        buf.write(u"\7\u0090\2\2\u05a5\u05a8\5x=\2\u05a6\u05a7\7-\2\2\u05a7")
        buf.write(u"\u05a9\5x=\2\u05a8\u05a6\3\2\2\2\u05a8\u05a9\3\2\2\2")
        buf.write(u"\u05a9\u05ab\3\2\2\2\u05aa\u05ac\7\u00cf\2\2\u05ab\u05aa")
        buf.write(u"\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05ca\3\2\2\2\u05ad")
        buf.write(u"\u05ae\7W\2\2\u05ae\u05ca\t\26\2\2\u05af\u05b1\7X\2\2")
        buf.write(u"\u05b0\u05b2\7Y\2\2\u05b1\u05b0\3\2\2\2\u05b1\u05b2\3")
        buf.write(u"\2\2\2\u05b2\u05b3\3\2\2\2\u05b3\u05ca\t\26\2\2\u05b4")
        buf.write(u"\u05be\7n\2\2\u05b5\u05bf\7\63\2\2\u05b6\u05bf\7\64\2")
        buf.write(u"\2\u05b7\u05ba\7+\2\2\u05b8\u05bb\7\u00e0\2\2\u05b9\u05bb")
        buf.write(u"\5l\67\2\u05ba\u05b8\3\2\2\2\u05ba\u05b9\3\2\2\2\u05ba")
        buf.write(u"\u05bb\3\2\2\2\u05bb\u05bf\3\2\2\2\u05bc\u05bf\7\u00e1")
        buf.write(u"\2\2\u05bd\u05bf\7\u00e2\2\2\u05be\u05b5\3\2\2\2\u05be")
        buf.write(u"\u05b6\3\2\2\2\u05be\u05b7\3\2\2\2\u05be\u05bc\3\2\2")
        buf.write(u"\2\u05be\u05bd\3\2\2\2\u05bf\u05ca\3\2\2\2\u05c0\u05c1")
        buf.write(u"\7B\2\2\u05c1\u05ca\t\26\2\2\u05c2\u05c3\7\u010c\2\2")
        buf.write(u"\u05c3\u05ca\t\26\2\2\u05c4\u05c5\7\u00be\2\2\u05c5\u05c6")
        buf.write(u"\7+\2\2\u05c6\u05ca\5l\67\2\u05c7\u05c8\7\u00c8\2\2\u05c8")
        buf.write(u"\u05ca\t\26\2\2\u05c9\u04ec\3\2\2\2\u05c9\u04f6\3\2\2")
        buf.write(u"\2\u05c9\u04f8\3\2\2\2\u05c9\u04ff\3\2\2\2\u05c9\u050c")
        buf.write(u"\3\2\2\2\u05c9\u051a\3\2\2\2\u05c9\u0527\3\2\2\2\u05c9")
        buf.write(u"\u052c\3\2\2\2\u05c9\u052e\3\2\2\2\u05c9\u0533\3\2\2")
        buf.write(u"\2\u05c9\u0535\3\2\2\2\u05c9\u0537\3\2\2\2\u05c9\u0539")
        buf.write(u"\3\2\2\2\u05c9\u0542\3\2\2\2\u05c9\u0550\3\2\2\2\u05c9")
        buf.write(u"\u0555\3\2\2\2\u05c9\u055b\3\2\2\2\u05c9\u055e\3\2\2")
        buf.write(u"\2\u05c9\u0560\3\2\2\2\u05c9\u0562\3\2\2\2\u05c9\u0567")
        buf.write(u"\3\2\2\2\u05c9\u057b\3\2\2\2\u05c9\u058d\3\2\2\2\u05c9")
        buf.write(u"\u059a\3\2\2\2\u05c9\u05a1\3\2\2\2\u05c9\u05ad\3\2\2")
        buf.write(u"\2\u05c9\u05af\3\2\2\2\u05c9\u05b4\3\2\2\2\u05c9\u05c0")
        buf.write(u"\3\2\2\2\u05c9\u05c2\3\2\2\2\u05c9\u05c4\3\2\2\2\u05c9")
        buf.write(u"\u05c7\3\2\2\2\u05caY\3\2\2\2\u05cb\u05cd\t\31\2\2\u05cc")
        buf.write(u"\u05ce\t\32\2\2\u05cd\u05cc\3\2\2\2\u05cd\u05ce\3\2\2")
        buf.write(u"\2\u05ce\u05d3\3\2\2\2\u05cf\u05d3\7\u00d0\2\2\u05d0")
        buf.write(u"\u05d3\7l\2\2\u05d1\u05d3\7q\2\2\u05d2\u05cb\3\2\2\2")
        buf.write(u"\u05d2\u05cf\3\2\2\2\u05d2\u05d0\3\2\2\2\u05d2\u05d1")
        buf.write(u"\3\2\2\2\u05d3\u05d4\3\2\2\2\u05d4\u05d9\5\\/\2\u05d5")
        buf.write(u"\u05d6\7 \2\2\u05d6\u05d8\5\\/\2\u05d7\u05d5\3\2\2\2")
        buf.write(u"\u05d8\u05db\3\2\2\2\u05d9\u05d7\3\2\2\2\u05d9\u05da")
        buf.write(u"\3\2\2\2\u05da\u05e0\3\2\2\2\u05db\u05d9\3\2\2\2\u05dc")
        buf.write(u"\u05dd\78\2\2\u05dd\u05de\7L\2\2\u05de\u05e0\5x=\2\u05df")
        buf.write(u"\u05d2\3\2\2\2\u05df\u05dc\3\2\2\2\u05e0[\3\2\2\2\u05e1")
        buf.write(u"\u05e2\5~@\2\u05e2\u05e3\5\u0084C\2\u05e3\u05e9\3\2\2")
        buf.write(u"\2\u05e4\u05e6\5\u0080A\2\u05e5\u05e7\5`\61\2\u05e6\u05e5")
        buf.write(u"\3\2\2\2\u05e6\u05e7\3\2\2\2\u05e7\u05e9\3\2\2\2\u05e8")
        buf.write(u"\u05e1\3\2\2\2\u05e8\u05e4\3\2\2\2\u05e9]\3\2\2\2\u05ea")
        buf.write(u"\u05eb\7.\2\2\u05eb\u05ec\5\u0086D\2\u05ec_\3\2\2\2\u05ed")
        buf.write(u"\u05f0\5^\60\2\u05ee\u05ef\7\u00a2\2\2\u05ef\u05f1\5")
        buf.write(u"x=\2\u05f0\u05ee\3\2\2\2\u05f0\u05f1\3\2\2\2\u05f1a\3")
        buf.write(u"\2\2\2\u05f2\u05f7\5l\67\2\u05f3\u05f4\7 \2\2\u05f4\u05f6")
        buf.write(u"\5l\67\2\u05f5\u05f3\3\2\2\2\u05f6\u05f9\3\2\2\2\u05f7")
        buf.write(u"\u05f5\3\2\2\2\u05f7\u05f8\3\2\2\2\u05f8\u05fb\3\2\2")
        buf.write(u"\2\u05f9\u05f7\3\2\2\2\u05fa\u05fc\7 \2\2\u05fb\u05fa")
        buf.write(u"\3\2\2\2\u05fb\u05fc\3\2\2\2\u05fcc\3\2\2\2\u05fd\u0602")
        buf.write(u"\5x=\2\u05fe\u05ff\7 \2\2\u05ff\u0601\5x=\2\u0600\u05fe")
        buf.write(u"\3\2\2\2\u0601\u0604\3\2\2\2\u0602\u0600\3\2\2\2\u0602")
        buf.write(u"\u0603\3\2\2\2\u0603e\3\2\2\2\u0604\u0602\3\2\2\2\u0605")
        buf.write(u"\u0606\7,\2\2\u0606\u0607\7\u0083\2\2\u0607\u0613\5x")
        buf.write(u"=\2\u0608\u0609\7,\2\2\u0609\u060c\5x=\2\u060a\u060b")
        buf.write(u"\7-\2\2\u060b\u060d\5x=\2\u060c\u060a\3\2\2\2\u060c\u060d")
        buf.write(u"\3\2\2\2\u060d\u0610\3\2\2\2\u060e\u060f\7\66\2\2\u060f")
        buf.write(u"\u0611\5b\62\2\u0610\u060e\3\2\2\2\u0610\u0611\3\2\2")
        buf.write(u"\2\u0611\u0613\3\2\2\2\u0612\u0605\3\2\2\2\u0612\u0608")
        buf.write(u"\3\2\2\2\u0613g\3\2\2\2\u0614\u0615\7\b\2\2\u0615\u0616")
        buf.write(u"\5\u0080A\2\u0616i\3\2\2\2\u0617\u0618\7\7\2\2\u0618")
        buf.write(u"\u0619\5\u008aF\2\u0619k\3\2\2\2\u061a\u061b\b\67\1\2")
        buf.write(u"\u061b\u061c\7\22\2\2\u061c\u061d\5l\67\2\u061d\u061e")
        buf.write(u"\7\23\2\2\u061e\u0632\3\2\2\2\u061f\u0620\t\33\2\2\u0620")
        buf.write(u"\u0632\5l\67\r\u0621\u0622\t\34\2\2\u0622\u0632\5l\67")
        buf.write(u"\f\u0623\u0632\5z>\2\u0624\u0625\7\u00ed\2\2\u0625\u0626")
        buf.write(u"\7\22\2\2\u0626\u0627\5l\67\2\u0627\u0628\5^\60\2\u0628")
        buf.write(u"\u0629\7\23\2\2\u0629\u0632\3\2\2\2\u062a\u062c\7\r\2")
        buf.write(u"\2\u062b\u062a\3\2\2\2\u062b\u062c\3\2\2\2\u062c\u062d")
        buf.write(u"\3\2\2\2\u062d\u062f\5p9\2\u062e\u0630\5r:\2\u062f\u062e")
        buf.write(u"\3\2\2\2\u062f\u0630\3\2\2\2\u0630\u0632\3\2\2\2\u0631")
        buf.write(u"\u061a\3\2\2\2\u0631\u061f\3\2\2\2\u0631\u0621\3\2\2")
        buf.write(u"\2\u0631\u0623\3\2\2\2\u0631\u0624\3\2\2\2\u0631\u062b")
        buf.write(u"\3\2\2\2\u0632\u064b\3\2\2\2\u0633\u0637\f\13\2\2\u0634")
        buf.write(u"\u0635\7\t\2\2\u0635\u0638\7\t\2\2\u0636\u0638\7\37\2")
        buf.write(u"\2\u0637\u0634\3\2\2\2\u0637\u0636\3\2\2\2\u0638\u0639")
        buf.write(u"\3\2\2\2\u0639\u064a\5l\67\f\u063a\u063b\f\n\2\2\u063b")
        buf.write(u"\u063c\t\35\2\2\u063c\u064a\5l\67\13\u063d\u063e\f\t")
        buf.write(u"\2\2\u063e\u063f\7\35\2\2\u063f\u064a\5l\67\n\u0640\u0641")
        buf.write(u"\f\b\2\2\u0641\u0642\t\33\2\2\u0642\u064a\5l\67\t\u0643")
        buf.write(u"\u0644\f\7\2\2\u0644\u0645\t\36\2\2\u0645\u064a\5l\67")
        buf.write(u"\b\u0646\u0647\f\6\2\2\u0647\u0648\t\37\2\2\u0648\u064a")
        buf.write(u"\5l\67\7\u0649\u0633\3\2\2\2\u0649\u063a\3\2\2\2\u0649")
        buf.write(u"\u063d\3\2\2\2\u0649\u0640\3\2\2\2\u0649\u0643\3\2\2")
        buf.write(u"\2\u0649\u0646\3\2\2\2\u064a\u064d\3\2\2\2\u064b\u0649")
        buf.write(u"\3\2\2\2\u064b\u064c\3\2\2\2\u064cm\3\2\2\2\u064d\u064b")
        buf.write(u"\3\2\2\2\u064e\u0650\7\r\2\2\u064f\u064e\3\2\2\2\u064f")
        buf.write(u"\u0650\3\2\2\2\u0650\u0651\3\2\2\2\u0651\u0652\5p9\2")
        buf.write(u"\u0652\u0653\5r:\2\u0653\u065a\3\2\2\2\u0654\u0655\7")
        buf.write(u"\r\2\2\u0655\u0657\5p9\2\u0656\u0658\5r:\2\u0657\u0656")
        buf.write(u"\3\2\2\2\u0657\u0658\3\2\2\2\u0658\u065a\3\2\2\2\u0659")
        buf.write(u"\u064f\3\2\2\2\u0659\u0654\3\2\2\2\u065ao\3\2\2\2\u065b")
        buf.write(u"\u065f\5\u008aF\2\u065c\u065f\5h\65\2\u065d\u065f\5j")
        buf.write(u"\66\2\u065e\u065b\3\2\2\2\u065e\u065c\3\2\2\2\u065e\u065d")
        buf.write(u"\3\2\2\2\u065fq\3\2\2\2\u0660\u0662\7\22\2\2\u0661\u0663")
        buf.write(u"\5b\62\2\u0662\u0661\3\2\2\2\u0662\u0663\3\2\2\2\u0663")
        buf.write(u"\u0664\3\2\2\2\u0664\u066b\7\23\2\2\u0665\u0667\7\16")
        buf.write(u"\2\2\u0666\u0668\5b\62\2\u0667\u0666\3\2\2\2\u0667\u0668")
        buf.write(u"\3\2\2\2\u0668\u0669\3\2\2\2\u0669\u066b\7\17\2\2\u066a")
        buf.write(u"\u0660\3\2\2\2\u066a\u0665\3\2\2\2\u066b\u066d\3\2\2")
        buf.write(u"\2\u066c\u066e\5r:\2\u066d\u066c\3\2\2\2\u066d\u066e")
        buf.write(u"\3\2\2\2\u066e\u0675\3\2\2\2\u066f\u0670\7\r\2\2\u0670")
        buf.write(u"\u0672\5\u008aF\2\u0671\u0673\5r:\2\u0672\u0671\3\2\2")
        buf.write(u"\2\u0672\u0673\3\2\2\2\u0673\u0675\3\2\2\2\u0674\u066a")
        buf.write(u"\3\2\2\2\u0674\u066f\3\2\2\2\u0675s\3\2\2\2\u0676\u0677")
        buf.write(u"\5\u008aF\2\u0677\u0678\7\"\2\2\u0678\u067a\3\2\2\2\u0679")
        buf.write(u"\u0676\3\2\2\2\u0679\u067a\3\2\2\2\u067a\u067c\3\2\2")
        buf.write(u"\2\u067b\u067d\5v<\2\u067c\u067b\3\2\2\2\u067d\u067e")
        buf.write(u"\3\2\2\2\u067e\u067f\3\2\2\2\u067e\u067c\3\2\2\2\u067f")
        buf.write(u"u\3\2\2\2\u0680\u069a\5\u008aF\2\u0681\u069a\7\4\2\2")
        buf.write(u"\u0682\u069a\7\24\2\2\u0683\u069a\7\6\2\2\u0684\u069a")
        buf.write(u"\7\7\2\2\u0685\u069a\7\b\2\2\u0686\u069a\7\n\2\2\u0687")
        buf.write(u"\u069a\7\13\2\2\u0688\u069a\7\r\2\2\u0689\u069a\7\16")
        buf.write(u"\2\2\u068a\u069a\7\17\2\2\u068b\u069a\7\20\2\2\u068c")
        buf.write(u"\u069a\7\21\2\2\u068d\u069a\7\22\2\2\u068e\u069a\7\23")
        buf.write(u"\2\2\u068f\u069a\7\27\2\2\u0690\u069a\7\30\2\2\u0691")
        buf.write(u"\u069a\7\31\2\2\u0692\u069a\7\32\2\2\u0693\u069a\7\35")
        buf.write(u"\2\2\u0694\u069a\7\36\2\2\u0695\u069a\7\37\2\2\u0696")
        buf.write(u"\u069a\7 \2\2\u0697\u069a\7!\2\2\u0698\u069a\7\3\2\2")
        buf.write(u"\u0699\u0680\3\2\2\2\u0699\u0681\3\2\2\2\u0699\u0682")
        buf.write(u"\3\2\2\2\u0699\u0683\3\2\2\2\u0699\u0684\3\2\2\2\u0699")
        buf.write(u"\u0685\3\2\2\2\u0699\u0686\3\2\2\2\u0699\u0687\3\2\2")
        buf.write(u"\2\u0699\u0688\3\2\2\2\u0699\u0689\3\2\2\2\u0699\u068a")
        buf.write(u"\3\2\2\2\u0699\u068b\3\2\2\2\u0699\u068c\3\2\2\2\u0699")
        buf.write(u"\u068d\3\2\2\2\u0699\u068e\3\2\2\2\u0699\u068f\3\2\2")
        buf.write(u"\2\u0699\u0690\3\2\2\2\u0699\u0691\3\2\2\2\u0699\u0692")
        buf.write(u"\3\2\2\2\u0699\u0693\3\2\2\2\u0699\u0694\3\2\2\2\u0699")
        buf.write(u"\u0695\3\2\2\2\u0699\u0696\3\2\2\2\u0699\u0697\3\2\2")
        buf.write(u"\2\u0699\u0698\3\2\2\2\u069aw\3\2\2\2\u069b\u069e\5l")
        buf.write(u"\67\2\u069c\u069e\5t;\2\u069d\u069b\3\2\2\2\u069d\u069c")
        buf.write(u"\3\2\2\2\u069ey\3\2\2\2\u069f\u06a1\7!\2\2\u06a0\u069f")
        buf.write(u"\3\2\2\2\u06a0\u06a1\3\2\2\2\u06a1\u06a2\3\2\2\2\u06a2")
        buf.write(u"\u06e8\7\4\2\2\u06a3\u06a4\7\r\2\2\u06a4\u06a5\t \2\2")
        buf.write(u"\u06a5\u06a8\7\r\2\2\u06a6\u06a8\7\u00d8\2\2\u06a7\u06a3")
        buf.write(u"\3\2\2\2\u06a7\u06a6\3\2\2\2\u06a8\u06e8\3\2\2\2\u06a9")
        buf.write(u"\u06c9\7\20\2\2\u06aa\u06ab\7\f\2\2\u06ab\u06ca\7\f\2")
        buf.write(u"\2\u06ac\u06ca\7\"\2\2\u06ad\u06b8\7\37\2\2\u06ae\u06af")
        buf.write(u"\7\4\2\2\u06af\u06b0\7\13\2\2\u06b0\u06b1\7\4\2\2\u06b1")
        buf.write(u"\u06b2\7\13\2\2\u06b2\u06b9\7\4\2\2\u06b3\u06b4\7\4\2")
        buf.write(u"\2\u06b4\u06b5\7\f\2\2\u06b5\u06b6\7\4\2\2\u06b6\u06b7")
        buf.write(u"\7\f\2\2\u06b7\u06b9\7\4\2\2\u06b8\u06ae\3\2\2\2\u06b8")
        buf.write(u"\u06b3\3\2\2\2\u06b9\u06c7\3\2\2\2\u06ba\u06bc\7 \2\2")
        buf.write(u"\u06bb\u06ba\3\2\2\2\u06bb\u06bc\3\2\2\2\u06bc\u06bd")
        buf.write(u"\3\2\2\2\u06bd\u06c4\7\4\2\2\u06be\u06bf\7\"\2\2\u06bf")
        buf.write(u"\u06c2\7\4\2\2\u06c0\u06c1\7\"\2\2\u06c1\u06c3\7\4\2")
        buf.write(u"\2\u06c2\u06c0\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3\u06c5")
        buf.write(u"\3\2\2\2\u06c4\u06be\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5")
        buf.write(u"\u06c6\3\2\2\2\u06c6\u06c8\5\u008aF\2\u06c7\u06bb\3\2")
        buf.write(u"\2\2\u06c7\u06c8\3\2\2\2\u06c8\u06ca\3\2\2\2\u06c9\u06aa")
        buf.write(u"\3\2\2\2\u06c9\u06ac\3\2\2\2\u06c9\u06ad\3\2\2\2\u06c9")
        buf.write(u"\u06ca\3\2\2\2\u06ca\u06cb\3\2\2\2\u06cb\u06e8\7\21\2")
        buf.write(u"\2\u06cc\u06d0\7%\2\2\u06cd\u06cf\n!\2\2\u06ce\u06cd")
        buf.write(u"\3\2\2\2\u06cf\u06d2\3\2\2\2\u06d0\u06ce\3\2\2\2\u06d0")
        buf.write(u"\u06d1\3\2\2\2\u06d1\u06d3\3\2\2\2\u06d2\u06d0\3\2\2")
        buf.write(u"\2\u06d3\u06e5\7%\2\2\u06d4\u06d8\7$\2\2\u06d5\u06d7")
        buf.write(u"\n\"\2\2\u06d6\u06d5\3\2\2\2\u06d7\u06da\3\2\2\2\u06d8")
        buf.write(u"\u06d6\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u06db\3\2\2")
        buf.write(u"\2\u06da\u06d8\3\2\2\2\u06db\u06e5\7$\2\2\u06dc\u06e0")
        buf.write(u"\7\16\2\2\u06dd\u06df\n#\2\2\u06de\u06dd\3\2\2\2\u06df")
        buf.write(u"\u06e2\3\2\2\2\u06e0\u06de\3\2\2\2\u06e0\u06e1\3\2\2")
        buf.write(u"\2\u06e1\u06e3\3\2\2\2\u06e2\u06e0\3\2\2\2\u06e3\u06e5")
        buf.write(u"\7\17\2\2\u06e4\u06cc\3\2\2\2\u06e4\u06d4\3\2\2\2\u06e4")
        buf.write(u"\u06dc\3\2\2\2\u06e5\u06e8\3\2\2\2\u06e6\u06e8\7\5\2")
        buf.write(u"\2\u06e7\u06a0\3\2\2\2\u06e7\u06a7\3\2\2\2\u06e7\u06a9")
        buf.write(u"\3\2\2\2\u06e7\u06e4\3\2\2\2\u06e7\u06e6\3\2\2\2\u06e8")
        buf.write(u"{\3\2\2\2\u06e9\u06ea\7\67\2\2\u06ea\u06eb\5l\67\2\u06eb")
        buf.write(u"\u06ec\7+\2\2\u06ec\u06f1\5\u0080A\2\u06ed\u06ee\7 \2")
        buf.write(u"\2\u06ee\u06f0\5\u0080A\2\u06ef\u06ed\3\2\2\2\u06f0\u06f3")
        buf.write(u"\3\2\2\2\u06f1\u06ef\3\2\2\2\u06f1\u06f2\3\2\2\2\u06f2")
        buf.write(u"\u06f9\3\2\2\2\u06f3\u06f1\3\2\2\2\u06f4\u06f5\5\u0080")
        buf.write(u"A\2\u06f5\u06f6\7\36\2\2\u06f6\u06f7\5l\67\2\u06f7\u06f9")
        buf.write(u"\3\2\2\2\u06f8\u06e9\3\2\2\2\u06f8\u06f4\3\2\2\2\u06f9")
        buf.write(u"}\3\2\2\2\u06fa\u06fc\7\r\2\2\u06fb\u06fa\3\2\2\2\u06fb")
        buf.write(u"\u06fc\3\2\2\2\u06fc\u06fd\3\2\2\2\u06fd\u0702\5\u008a")
        buf.write(u"F\2\u06fe\u06ff\7\r\2\2\u06ff\u0701\5\u008aF\2\u0700")
        buf.write(u"\u06fe\3\2\2\2\u0701\u0704\3\2\2\2\u0702\u0700\3\2\2")
        buf.write(u"\2\u0702\u0703\3\2\2\2\u0703\177\3\2\2\2\u0704\u0702")
        buf.write(u"\3\2\2\2\u0705\u0707\7\r\2\2\u0706\u0705\3\2\2\2\u0706")
        buf.write(u"\u0707\3\2\2\2\u0707\u0708\3\2\2\2\u0708\u070a\5\u008a")
        buf.write(u"F\2\u0709\u070b\5r:\2\u070a\u0709\3\2\2\2\u070a\u070b")
        buf.write(u"\3\2\2\2\u070b\u0081\3\2\2\2\u070c\u070d\5l\67\2\u070d")
        buf.write(u"\u070e\7 \2\2\u070e\u070f\5l\67\2\u070f\u0083\3\2\2\2")
        buf.write(u"\u0710\u0713\7\22\2\2\u0711\u0714\5l\67\2\u0712\u0714")
        buf.write(u"\5\u0082B\2\u0713\u0711\3\2\2\2\u0713\u0712\3\2\2\2\u0714")
        buf.write(u"\u0715\3\2\2\2\u0715\u0716\7\23\2\2\u0716\u071f\3\2\2")
        buf.write(u"\2\u0717\u071a\7\16\2\2\u0718\u071b\5l\67\2\u0719\u071b")
        buf.write(u"\5\u0082B\2\u071a\u0718\3\2\2\2\u071a\u0719\3\2\2\2\u071b")
        buf.write(u"\u071c\3\2\2\2\u071c\u071d\7\17\2\2\u071d\u071f\3\2\2")
        buf.write(u"\2\u071e\u0710\3\2\2\2\u071e\u0717\3\2\2\2\u071f\u0085")
        buf.write(u"\3\2\2\2\u0720\u0721\5\u0080A\2\u0721\u0087\3\2\2\2\u0722")
        buf.write(u"\u0729\7t\2\2\u0723\u0724\7\u0091\2\2\u0724\u0729\5l")
        buf.write(u"\67\2\u0725\u0726\7y\2\2\u0726\u0729\5l\67\2\u0727\u0729")
        buf.write(u"\7\u0092\2\2\u0728\u0722\3\2\2\2\u0728\u0723\3\2\2\2")
        buf.write(u"\u0728\u0725\3\2\2\2\u0728\u0727\3\2\2\2\u0729\u0089")
        buf.write(u"\3\2\2\2\u072a\u072b\t$\2\2\u072b\u008b\3\2\2\2\u0121")
        buf.write(u"\u0092\u009a\u00a2\u00ae\u00c2\u00cb\u00cf\u00d1\u00d5")
        buf.write(u"\u00d7\u00e0\u00e5\u00ea\u00ee\u00f5\u00fc\u0103\u0105")
        buf.write(u"\u010d\u011f\u0122\u012a\u012e\u0135\u0139\u013f\u0142")
        buf.write(u"\u014d\u0150\u0155\u015e\u016a\u0175\u017a\u017c\u0191")
        buf.write(u"\u0197\u019b\u01a0\u01b2\u01b6\u01c2\u01c6\u01cb\u01d6")
        buf.write(u"\u01e5\u01ea\u01f0\u01f2\u01fa\u01fc\u0206\u0208\u020e")
        buf.write(u"\u0213\u0218\u021b\u0224\u0228\u022c\u022e\u0231\u023e")
        buf.write(u"\u0244\u024a\u024c\u0256\u0258\u025a\u025c\u0260\u0264")
        buf.write(u"\u026a\u026e\u0270\u0274\u0279\u027b\u0280\u0286\u0289")
        buf.write(u"\u028c\u0291\u029c\u02a6\u02b0\u02be\u02c2\u02c6\u02c8")
        buf.write(u"\u02cb\u02ce\u02d4\u02d8\u02de\u02e2\u02e6\u02ec\u02f9")
        buf.write(u"\u030a\u030f\u0313\u0317\u031b\u0320\u0325\u0327\u032b")
        buf.write(u"\u0334\u0337\u033b\u0341\u034b\u034d\u0356\u0359\u035c")
        buf.write(u"\u035f\u0365\u0367\u036f\u0371\u0378\u037a\u0386\u038a")
        buf.write(u"\u038e\u0396\u03a1\u03a7\u03ae\u03b2\u03b6\u03bb\u03c4")
        buf.write(u"\u03c6\u03ca\u03d4\u03d7\u03da\u03dc\u03e0\u03e6\u03e9")
        buf.write(u"\u03ed\u03f1\u03f8\u03fe\u0404\u0407\u040a\u040d\u0413")
        buf.write(u"\u0417\u041c\u041f\u0422\u0429\u042e\u0431\u044a\u0450")
        buf.write(u"\u0456\u045c\u045f\u0461\u0466\u046d\u0470\u0476\u047b")
        buf.write(u"\u0482\u0484\u048c\u0493\u0498\u049b\u049f\u04a2\u04a5")
        buf.write(u"\u04b0\u04b8\u04ba\u04c0\u04c4\u04c7\u04cc\u04d4\u04d8")
        buf.write(u"\u04dd\u04e2\u04e7\u04f2\u04f4\u04fd\u0506\u0508\u050a")
        buf.write(u"\u0511\u0515\u0518\u0523\u0525\u052a\u0530\u053e\u0540")
        buf.write(u"\u0547\u054b\u054e\u0553\u0559\u0564\u056b\u0570\u0574")
        buf.write(u"\u0577\u0579\u057e\u0587\u0589\u058b\u0594\u0598\u059f")
        buf.write(u"\u05a8\u05ab\u05b1\u05ba\u05be\u05c9\u05cd\u05d2\u05d9")
        buf.write(u"\u05df\u05e6\u05e8\u05f0\u05f7\u05fb\u0602\u060c\u0610")
        buf.write(u"\u0612\u062b\u062f\u0631\u0637\u0649\u064b\u064f\u0657")
        buf.write(u"\u0659\u065e\u0662\u0667\u066a\u066d\u0672\u0674\u0679")
        buf.write(u"\u067e\u0699\u069d\u06a0\u06a7\u06b8\u06bb\u06c2\u06c4")
        buf.write(u"\u06c7\u06c9\u06d0\u06d8\u06e0\u06e4\u06e7\u06f1\u06f8")
        buf.write(u"\u06fb\u0702\u0706\u070a\u0713\u071a\u071e\u0728")
        return buf.getvalue()


class VisualFoxpro9Parser ( Parser ):

    grammarFileName = "VisualFoxpro9.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"'_'", u"<INVALID>", u"<INVALID>", u"';'", 
                     u"'&'", u"'@'", u"'*'", u"'+'", u"'-'", u"'/'", u"'.'", 
                     u"'['", u"']'", u"'{'", u"'}'", u"'('", u"')'", u"'\\'", 
                     u"'<'", u"'>'", u"'!'", u"'#'", u"'=='", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"'%'", u"'='", u"'^'", 
                     u"','", u"'$'", u"':'", u"'?'", u"'\"'", u"'''", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"'\n'" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"NUMBER_LITERAL", u"BLOB_LITERAL", 
                      u"SEMICOLON", u"AMPERSAND", u"COMMERCIALAT", u"ASTERISK", 
                      u"PLUS_SIGN", u"MINUS_SIGN", u"FORWARDSLASH", u"PERIOD", 
                      u"LEFTBRACKET", u"RIGHTBRACKET", u"LEFTBRACE", u"RIGHTBRACE", 
                      u"LEFTPAREN", u"RIGHTPAREN", u"BACKSLASH", u"LESSTHAN", 
                      u"GREATERTHAN", u"EXCLAMATION", u"HASH", u"DOUBLEEQUALS", 
                      u"NOTEQUALS", u"GTEQ", u"LTEQ", u"MODULO", u"EQUALS", 
                      u"CARAT", u"COMMA", u"DOLLAR", u"COLON", u"QUESTION", 
                      u"DOUBLEQUOTE", u"SINGLEQUOTE", u"COMMENT", u"LINECONT", 
                      u"NOTE", u"ASSERT", u"ASSERTS", u"TO", u"DO", u"IN", 
                      u"AS", u"IF", u"ELIF", u"ELSE", u"ENDIF", u"ON", u"OFF", 
                      u"ERROR", u"WITH", u"STORE", u"EXTERNAL", u"ARRAY", 
                      u"DELETE", u"RECALL", u"FILE", u"SET", u"RELEASE", 
                      u"RECYCLE", u"CREATE", u"TABLE", u"TABLEPROMPT", u"DBF", 
                      u"NAME", u"FREE", u"SELECT", u"USE", u"READ", u"EVENTS", 
                      u"SHUTDOWN", u"CLEAR", u"PROCEDURE", u"ENDPROC", u"DEFINE", 
                      u"CLASS", u"ENDDEFINE", u"LOCATE", u"CONTINUE", u"FOR", 
                      u"ENDFOR", u"WHILE", u"NOOPTIMIZE", u"SAFETY", u"STATUS", 
                      u"BAR", u"MEMOWIDTH", u"CURSOR", u"REFRESH", u"BELL", 
                      u"CENTURY", u"COMPATIBLE", u"DATE", u"ADD", u"OBJECT", 
                      u"REPLACE", u"LIBRARY", u"SHARED", u"WAIT", u"WINDOW", 
                      u"NOWAIT", u"NOCLEAR", u"NOTIFY", u"ENDDO", u"DECLARE", 
                      u"ERASE", u"SYSMENU", u"CLOCK", u"RETURN", u"PARAMETER", 
                      u"ALTERNATE", u"EXACT", u"ALL", u"COUNT", u"GOTO", 
                      u"TOP", u"BOTTOM", u"RECORD", u"CLOSE", u"APPEND", 
                      u"BLANK", u"NOMENU", u"CASE", u"ENDCASE", u"OTHERWISE", 
                      u"FROM", u"REPORT", u"FORM", u"NOEJECT", u"PRINTER", 
                      u"PROMPT", u"NOPROMPT", u"DB4", u"FOXPLUS", u"NOCONSOLE", 
                      u"COPY", u"STRUCTURE", u"DELETED", u"SUM", u"DISTINCT", 
                      u"INTO", u"NEXT", u"REST", u"SKIPKW", u"EXCLUSIVE", 
                      u"NEAR", u"MKDIR", u"RMDIR", u"KEY", u"KEYBOARD", 
                      u"LABEL", u"PLAIN", u"MENU", u"AT", u"LINE", u"SCREEN", 
                      u"NOMARGIN", u"PAD", u"OF", u"COLOR", u"SCHEME", u"BEFORE", 
                      u"AFTER", u"NEGOTIATE", u"FONT", u"STYLE", u"MARK", 
                      u"MESSAGE", u"ACTIVATE", u"POPUP", u"EXTENDED", u"SHADOW", 
                      u"MARGIN", u"RELATIVE", u"SELECTION", u"DEACTIVATE", 
                      u"SAME", u"NOSHOW", u"STEP", u"THEN", u"UNDEFINE", 
                      u"IFDEF", u"PUSH", u"POP", u"TIMEOUT", u"ENDWITH", 
                      u"TYPEAHEAD", u"ALIAS", u"ORDER", u"SEEK", u"WHERE", 
                      u"FILTER", u"RENAME", u"INCLUDE", u"CLASSLIB", u"BY", 
                      u"UNIQUE", u"INDEX", u"TAG", u"COMPACT", u"ASCENDING", 
                      u"DESCENDING", u"CANDIDATE", u"ADDITIVE", u"DIMENSION", 
                      u"NOT", u"AND", u"OTHERAND", u"OR", u"OTHEROR", u"SCAN", 
                      u"ENDSCAN", u"NULL", u"BOOLEANCHAR", u"NODEFAULT", 
                      u"DLLS", u"MACROS", u"NUMBER", u"ZAP", u"ROLLOVER", 
                      u"DEFAULT", u"SAVE", u"NOSAVE", u"DATABASE", u"TABLES", 
                      u"INDEXES", u"PACK", u"REINDEX", u"MEMO", u"PROGRAM", 
                      u"SCOPE", u"THROW", u"EACH", u"CAST", u"RUN", u"MULTILOCKS", 
                      u"TRY", u"CATCH", u"FINALLY", u"ENDTRY", u"BROWSE", 
                      u"INSERT", u"VALUES", u"MEMVAR", u"TYPE", u"CHDIR", 
                      u"SCATTER", u"GATHER", u"EXCEPT", u"LIKE", u"FIELDS", 
                      u"ALTER", u"COLUMN", u"DROP", u"DEBUG", u"GETS", u"DEBUGOUT", 
                      u"MEMORY", u"MENUS", u"RESOURCES", u"HELP", u"SAY", 
                      u"COLLECTION", u"SYSTEM", u"TALK", u"PROGRAMCONTROL", 
                      u"RELATION", u"ID", u"NL", u"WS", u"UNMATCHED" ]

    RULE_preprocessorCode = 0
    RULE_preprocessorLines = 1
    RULE_preprocessorLine = 2
    RULE_prg = 3
    RULE_lineComment = 4
    RULE_line = 5
    RULE_lineEnd = 6
    RULE_lines = 7
    RULE_classDefStart = 8
    RULE_classDef = 9
    RULE_classDefProperty = 10
    RULE_parameter = 11
    RULE_parameters = 12
    RULE_funcDefStart = 13
    RULE_funcDef = 14
    RULE_ifStart = 15
    RULE_ifStmt = 16
    RULE_forStart = 17
    RULE_forEnd = 18
    RULE_forStmt = 19
    RULE_singleCase = 20
    RULE_otherwise = 21
    RULE_caseStmt = 22
    RULE_whileStart = 23
    RULE_whileStmt = 24
    RULE_withStmt = 25
    RULE_scanStmt = 26
    RULE_tryStmt = 27
    RULE_controlStmt = 28
    RULE_cmd = 29
    RULE_release = 30
    RULE_otherCmds = 31
    RULE_queryCondition = 32
    RULE_dllArgs = 33
    RULE_dllArg = 34
    RULE_printStmt = 35
    RULE_waitCmd = 36
    RULE_filesystemCmd = 37
    RULE_returnStmt = 38
    RULE_setup = 39
    RULE_onError = 40
    RULE_onShutdown = 41
    RULE_setStmt = 42
    RULE_setCmd = 43
    RULE_declaration = 44
    RULE_declarationItem = 45
    RULE_asType = 46
    RULE_asTypeOf = 47
    RULE_args = 48
    RULE_specialArgs = 49
    RULE_funcDo = 50
    RULE_reference = 51
    RULE_argReplace = 52
    RULE_expr = 53
    RULE_complexId = 54
    RULE_atom = 55
    RULE_trailer = 56
    RULE_pathname = 57
    RULE_pathElement = 58
    RULE_specialExpr = 59
    RULE_constant = 60
    RULE_assign = 61
    RULE_idAttr2 = 62
    RULE_idAttr = 63
    RULE_twoExpr = 64
    RULE_arrayIndex = 65
    RULE_datatype = 66
    RULE_scopeClause = 67
    RULE_identifier = 68

    ruleNames =  [ u"preprocessorCode", u"preprocessorLines", u"preprocessorLine", 
                   u"prg", u"lineComment", u"line", u"lineEnd", u"lines", 
                   u"classDefStart", u"classDef", u"classDefProperty", u"parameter", 
                   u"parameters", u"funcDefStart", u"funcDef", u"ifStart", 
                   u"ifStmt", u"forStart", u"forEnd", u"forStmt", u"singleCase", 
                   u"otherwise", u"caseStmt", u"whileStart", u"whileStmt", 
                   u"withStmt", u"scanStmt", u"tryStmt", u"controlStmt", 
                   u"cmd", u"release", u"otherCmds", u"queryCondition", 
                   u"dllArgs", u"dllArg", u"printStmt", u"waitCmd", u"filesystemCmd", 
                   u"returnStmt", u"setup", u"onError", u"onShutdown", u"setStmt", 
                   u"setCmd", u"declaration", u"declarationItem", u"asType", 
                   u"asTypeOf", u"args", u"specialArgs", u"funcDo", u"reference", 
                   u"argReplace", u"expr", u"complexId", u"atom", u"trailer", 
                   u"pathname", u"pathElement", u"specialExpr", u"constant", 
                   u"assign", u"idAttr2", u"idAttr", u"twoExpr", u"arrayIndex", 
                   u"datatype", u"scopeClause", u"identifier" ]

    EOF = Token.EOF
    T__0=1
    NUMBER_LITERAL=2
    BLOB_LITERAL=3
    SEMICOLON=4
    AMPERSAND=5
    COMMERCIALAT=6
    ASTERISK=7
    PLUS_SIGN=8
    MINUS_SIGN=9
    FORWARDSLASH=10
    PERIOD=11
    LEFTBRACKET=12
    RIGHTBRACKET=13
    LEFTBRACE=14
    RIGHTBRACE=15
    LEFTPAREN=16
    RIGHTPAREN=17
    BACKSLASH=18
    LESSTHAN=19
    GREATERTHAN=20
    EXCLAMATION=21
    HASH=22
    DOUBLEEQUALS=23
    NOTEQUALS=24
    GTEQ=25
    LTEQ=26
    MODULO=27
    EQUALS=28
    CARAT=29
    COMMA=30
    DOLLAR=31
    COLON=32
    QUESTION=33
    DOUBLEQUOTE=34
    SINGLEQUOTE=35
    COMMENT=36
    LINECONT=37
    NOTE=38
    ASSERT=39
    ASSERTS=40
    TO=41
    DO=42
    IN=43
    AS=44
    IF=45
    ELIF=46
    ELSE=47
    ENDIF=48
    ON=49
    OFF=50
    ERROR=51
    WITH=52
    STORE=53
    EXTERNAL=54
    ARRAY=55
    DELETE=56
    RECALL=57
    FILE=58
    SET=59
    RELEASE=60
    RECYCLE=61
    CREATE=62
    TABLE=63
    TABLEPROMPT=64
    DBF=65
    NAME=66
    FREE=67
    SELECT=68
    USE=69
    READ=70
    EVENTS=71
    SHUTDOWN=72
    CLEAR=73
    PROCEDURE=74
    ENDPROC=75
    DEFINE=76
    CLASS=77
    ENDDEFINE=78
    LOCATE=79
    CONTINUE=80
    FOR=81
    ENDFOR=82
    WHILE=83
    NOOPTIMIZE=84
    SAFETY=85
    STATUS=86
    BAR=87
    MEMOWIDTH=88
    CURSOR=89
    REFRESH=90
    BELL=91
    CENTURY=92
    COMPATIBLE=93
    DATE=94
    ADD=95
    OBJECT=96
    REPLACE=97
    LIBRARY=98
    SHARED=99
    WAIT=100
    WINDOW=101
    NOWAIT=102
    NOCLEAR=103
    NOTIFY=104
    ENDDO=105
    DECLARE=106
    ERASE=107
    SYSMENU=108
    CLOCK=109
    RETURN=110
    PARAMETER=111
    ALTERNATE=112
    EXACT=113
    ALL=114
    COUNT=115
    GOTO=116
    TOP=117
    BOTTOM=118
    RECORD=119
    CLOSE=120
    APPEND=121
    BLANK=122
    NOMENU=123
    CASE=124
    ENDCASE=125
    OTHERWISE=126
    FROM=127
    REPORT=128
    FORM=129
    NOEJECT=130
    PRINTER=131
    PROMPT=132
    NOPROMPT=133
    DB4=134
    FOXPLUS=135
    NOCONSOLE=136
    COPY=137
    STRUCTURE=138
    DELETED=139
    SUM=140
    DISTINCT=141
    INTO=142
    NEXT=143
    REST=144
    SKIPKW=145
    EXCLUSIVE=146
    NEAR=147
    MKDIR=148
    RMDIR=149
    KEY=150
    KEYBOARD=151
    LABEL=152
    PLAIN=153
    MENU=154
    AT=155
    LINE=156
    SCREEN=157
    NOMARGIN=158
    PAD=159
    OF=160
    COLOR=161
    SCHEME=162
    BEFORE=163
    AFTER=164
    NEGOTIATE=165
    FONT=166
    STYLE=167
    MARK=168
    MESSAGE=169
    ACTIVATE=170
    POPUP=171
    EXTENDED=172
    SHADOW=173
    MARGIN=174
    RELATIVE=175
    SELECTION=176
    DEACTIVATE=177
    SAME=178
    NOSHOW=179
    STEP=180
    THEN=181
    UNDEFINE=182
    IFDEF=183
    PUSH=184
    POP=185
    TIMEOUT=186
    ENDWITH=187
    TYPEAHEAD=188
    ALIAS=189
    ORDER=190
    SEEK=191
    WHERE=192
    FILTER=193
    RENAME=194
    INCLUDE=195
    CLASSLIB=196
    BY=197
    UNIQUE=198
    INDEX=199
    TAG=200
    COMPACT=201
    ASCENDING=202
    DESCENDING=203
    CANDIDATE=204
    ADDITIVE=205
    DIMENSION=206
    NOT=207
    AND=208
    OTHERAND=209
    OR=210
    OTHEROR=211
    SCAN=212
    ENDSCAN=213
    NULL=214
    BOOLEANCHAR=215
    NODEFAULT=216
    DLLS=217
    MACROS=218
    NUMBER=219
    ZAP=220
    ROLLOVER=221
    DEFAULT=222
    SAVE=223
    NOSAVE=224
    DATABASE=225
    TABLES=226
    INDEXES=227
    PACK=228
    REINDEX=229
    MEMO=230
    PROGRAM=231
    SCOPE=232
    THROW=233
    EACH=234
    CAST=235
    RUN=236
    MULTILOCKS=237
    TRY=238
    CATCH=239
    FINALLY=240
    ENDTRY=241
    BROWSE=242
    INSERT=243
    VALUES=244
    MEMVAR=245
    TYPE=246
    CHDIR=247
    SCATTER=248
    GATHER=249
    EXCEPT=250
    LIKE=251
    FIELDS=252
    ALTER=253
    COLUMN=254
    DROP=255
    DEBUG=256
    GETS=257
    DEBUGOUT=258
    MEMORY=259
    MENUS=260
    RESOURCES=261
    HELP=262
    SAY=263
    COLLECTION=264
    SYSTEM=265
    TALK=266
    PROGRAMCONTROL=267
    RELATION=268
    ID=269
    NL=270
    WS=271
    UNMATCHED=272

    def __init__(self, input, output=sys.stdout):
        super(VisualFoxpro9Parser, self).__init__(input, output=output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class PreprocessorCodeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PreprocessorCodeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def preprocessorLines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.PreprocessorLinesContext,0)


        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_preprocessorCode

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorCode"):
                return visitor.visitPreprocessorCode(self)
            else:
                return visitor.visitChildren(self)




    def preprocessorCode(self):

        localctx = VisualFoxpro9Parser.PreprocessorCodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_preprocessorCode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 138
            self.preprocessorLines()
            self.state = 139
            self.match(VisualFoxpro9Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PreprocessorLinesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PreprocessorLinesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def preprocessorLine(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.PreprocessorLineContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.PreprocessorLineContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_preprocessorLines

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorLines"):
                return visitor.visitPreprocessorLines(self)
            else:
                return visitor.visitChildren(self)




    def preprocessorLines(self):

        localctx = VisualFoxpro9Parser.PreprocessorLinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_preprocessorLines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 144
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 141
                    self.preprocessorLine() 
                self.state = 146
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PreprocessorLineContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PreprocessorLineContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_preprocessorLine

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.PreprocessorLineContext, self).copyFrom(ctx)



    class NonpreprocessorLineContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.NonpreprocessorLineContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)
        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitNonpreprocessorLine"):
                return visitor.visitNonpreprocessorLine(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorUndefineContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorUndefineContext, self).__init__(parser)
            self.copyFrom(ctx)

        def UNDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.UNDEFINE, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorUndefine"):
                return visitor.visitPreprocessorUndefine(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorIfContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorIfContext, self).__init__(parser)
            self.ifBody = None # PreprocessorLinesContext
            self.elseBody = None # PreprocessorLinesContext
            self.copyFrom(ctx)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)
        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)
        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def preprocessorLines(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.PreprocessorLinesContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.PreprocessorLinesContext,i)

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def IFDEF(self):
            return self.getToken(VisualFoxpro9Parser.IFDEF, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorIf"):
                return visitor.visitPreprocessorIf(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorJunkContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorJunkContext, self).__init__(parser)
            self.copyFrom(ctx)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)
        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)
        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)
        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def INCLUDE(self):
            return self.getToken(VisualFoxpro9Parser.INCLUDE, 0)
        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorJunk"):
                return visitor.visitPreprocessorJunk(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorDefineContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorDefineContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorDefine"):
                return visitor.visitPreprocessorDefine(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorIncludeContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorIncludeContext, self).__init__(parser)
            self.copyFrom(ctx)

        def INCLUDE(self):
            return self.getToken(VisualFoxpro9Parser.INCLUDE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorInclude"):
                return visitor.visitPreprocessorInclude(self)
            else:
                return visitor.visitChildren(self)



    def preprocessorLine(self):

        localctx = VisualFoxpro9Parser.PreprocessorLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_preprocessorLine)
        self._la = 0 # Token type
        try:
            self.state = 207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.PreprocessorIfContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 147
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 152
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.IF]:
                    self.state = 148
                    self.match(VisualFoxpro9Parser.IF)
                    self.state = 149
                    self.expr(0)
                    pass
                elif token in [VisualFoxpro9Parser.IFDEF]:
                    self.state = 150
                    self.match(VisualFoxpro9Parser.IFDEF)
                    self.state = 151
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 154
                self.match(VisualFoxpro9Parser.NL)
                self.state = 155
                localctx.ifBody = self.preprocessorLines()
                self.state = 160
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 156
                    self.match(VisualFoxpro9Parser.HASH)
                    self.state = 157
                    self.match(VisualFoxpro9Parser.ELSE)
                    self.state = 158
                    self.match(VisualFoxpro9Parser.NL)
                    self.state = 159
                    localctx.elseBody = self.preprocessorLines()


                self.state = 162
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 163
                self.match(VisualFoxpro9Parser.ENDIF)
                self.state = 164
                self.lineEnd()
                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.PreprocessorDefineContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 166
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 167
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 168
                self.identifier()
                self.state = 172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)) | (1 << (VisualFoxpro9Parser.ORDER - 128)) | (1 << (VisualFoxpro9Parser.SEEK - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)) | (1 << (VisualFoxpro9Parser.DROP - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 169
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 174
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 175
                self.lineEnd()
                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.PreprocessorUndefineContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 177
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 178
                self.match(VisualFoxpro9Parser.UNDEFINE)
                self.state = 179
                self.identifier()
                self.state = 180
                self.lineEnd()
                pass

            elif la_ == 4:
                localctx = VisualFoxpro9Parser.PreprocessorIncludeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 182
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 183
                self.match(VisualFoxpro9Parser.INCLUDE)
                self.state = 184
                self.specialExpr()
                self.state = 185
                self.lineEnd()
                pass

            elif la_ == 5:
                localctx = VisualFoxpro9Parser.PreprocessorJunkContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 187
                self.match(VisualFoxpro9Parser.HASH)

                self.state = 188
                _la = self._input.LA(1)
                if _la <= 0 or ((((_la - 45)) & ~0x3f) == 0 and ((1 << (_la - 45)) & ((1 << (VisualFoxpro9Parser.IF - 45)) | (1 << (VisualFoxpro9Parser.ELSE - 45)) | (1 << (VisualFoxpro9Parser.ENDIF - 45)) | (1 << (VisualFoxpro9Parser.DEFINE - 45)))) != 0) or _la==VisualFoxpro9Parser.INCLUDE or _la==VisualFoxpro9Parser.NL:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)) | (1 << (VisualFoxpro9Parser.ORDER - 128)) | (1 << (VisualFoxpro9Parser.SEEK - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)) | (1 << (VisualFoxpro9Parser.DROP - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 189
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 194
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 195
                self.lineEnd()
                pass

            elif la_ == 6:
                localctx = VisualFoxpro9Parser.NonpreprocessorLineContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 205
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.NL]:
                    self.state = 196
                    self.match(VisualFoxpro9Parser.NL)
                    pass
                elif token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.ASTERISK, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.FORWARDSLASH, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.LESSTHAN, VisualFoxpro9Parser.GREATERTHAN, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.GTEQ, VisualFoxpro9Parser.LTEQ, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.COLON, VisualFoxpro9Parser.QUESTION, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.COMMENT, VisualFoxpro9Parser.LINECONT, VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.ASSERTS, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.TABLEPROMPT, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.SAFETY, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OTHERAND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.OTHEROR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.NODEFAULT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.MEMO, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.MULTILOCKS, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.CHDIR, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.DEBUG, VisualFoxpro9Parser.GETS, VisualFoxpro9Parser.DEBUGOUT, VisualFoxpro9Parser.MEMORY, VisualFoxpro9Parser.MENUS, VisualFoxpro9Parser.RESOURCES, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.ID, VisualFoxpro9Parser.WS, VisualFoxpro9Parser.UNMATCHED]:
                    self.state = 197
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.EOF or _la==VisualFoxpro9Parser.HASH or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 201
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)) | (1 << (VisualFoxpro9Parser.ORDER - 128)) | (1 << (VisualFoxpro9Parser.SEEK - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)) | (1 << (VisualFoxpro9Parser.DROP - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                        self.state = 198
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 203
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 204
                    self.lineEnd()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrgContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PrgContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def classDef(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ClassDefContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ClassDefContext,i)


        def funcDef(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.FuncDefContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDefContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_prg

        def accept(self, visitor):
            if hasattr(visitor, "visitPrg"):
                return visitor.visitPrg(self)
            else:
                return visitor.visitChildren(self)




    def prg(self):

        localctx = VisualFoxpro9Parser.PrgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_prg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.PROCEDURE or _la==VisualFoxpro9Parser.DEFINE or _la==VisualFoxpro9Parser.SCOPE:
                self.state = 211
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.DEFINE]:
                    self.state = 209
                    self.classDef()
                    pass
                elif token in [VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.SCOPE]:
                    self.state = 210
                    self.funcDef()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 216
            self.match(VisualFoxpro9Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LineCommentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.LineCommentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def NOTE(self):
            return self.getToken(VisualFoxpro9Parser.NOTE, 0)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_lineComment

        def accept(self, visitor):
            if hasattr(visitor, "visitLineComment"):
                return visitor.visitLineComment(self)
            else:
                return visitor.visitChildren(self)




    def lineComment(self):

        localctx = VisualFoxpro9Parser.LineCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_lineComment)
        self._la = 0 # Token type
        try:
            self.state = 227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ASTERISK, VisualFoxpro9Parser.NOTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 218
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ASTERISK or _la==VisualFoxpro9Parser.NOTE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)) | (1 << (VisualFoxpro9Parser.ORDER - 128)) | (1 << (VisualFoxpro9Parser.SEEK - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)) | (1 << (VisualFoxpro9Parser.DROP - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 219
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 224
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 225
                self.lineEnd()
                pass
            elif token in [VisualFoxpro9Parser.NL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 226
                self.match(VisualFoxpro9Parser.NL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LineContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.LineContext, self).__init__(parent, invokingState)
            self.parser = parser

        def lineComment(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,0)


        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def controlStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ControlStmtContext,0)


        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_line

        def accept(self, visitor):
            if hasattr(visitor, "visitLine"):
                return visitor.visitLine(self)
            else:
                return visitor.visitChildren(self)




    def line(self):

        localctx = VisualFoxpro9Parser.LineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_line)
        try:
            self.state = 236
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ASTERISK, VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.NL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 229
                self.lineComment()
                pass
            elif token in [VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.QUESTION, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.NODEFAULT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.CHDIR, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.DEBUGOUT, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 232
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 230
                    self.controlStmt()
                    pass

                elif la_ == 2:
                    self.state = 231
                    self.cmd()
                    pass


                self.state = 234
                self.lineEnd()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LineEndContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.LineEndContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_lineEnd

        def accept(self, visitor):
            if hasattr(visitor, "visitLineEnd"):
                return visitor.visitLineEnd(self)
            else:
                return visitor.visitChildren(self)




    def lineEnd(self):

        localctx = VisualFoxpro9Parser.LineEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_lineEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            _la = self._input.LA(1)
            if not(_la==VisualFoxpro9Parser.EOF or _la==VisualFoxpro9Parser.NL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.LinesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def line(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_lines

        def accept(self, visitor):
            if hasattr(visitor, "visitLines"):
                return visitor.visitLines(self)
            else:
                return visitor.visitChildren(self)




    def lines(self):

        localctx = VisualFoxpro9Parser.LinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_lines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 240
                    self.line() 
                self.state = 245
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDefStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ClassDefStartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)

        def CLASS(self):
            return self.getToken(VisualFoxpro9Parser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def asTypeOf(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeOfContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_classDefStart

        def accept(self, visitor):
            if hasattr(visitor, "visitClassDefStart"):
                return visitor.visitClassDefStart(self)
            else:
                return visitor.visitChildren(self)




    def classDefStart(self):

        localctx = VisualFoxpro9Parser.ClassDefStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_classDefStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.match(VisualFoxpro9Parser.DEFINE)
            self.state = 247
            self.match(VisualFoxpro9Parser.CLASS)
            self.state = 248
            self.identifier()
            self.state = 250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.AS:
                self.state = 249
                self.asTypeOf()


            self.state = 252
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDefContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ClassDefContext, self).__init__(parent, invokingState)
            self.parser = parser

        def classDefStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ClassDefStartContext,0)


        def ENDDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.ENDDEFINE, 0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def classDefProperty(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ClassDefPropertyContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ClassDefPropertyContext,i)


        def funcDef(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.FuncDefContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDefContext,i)


        def lineComment(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineCommentContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_classDef

        def accept(self, visitor):
            if hasattr(visitor, "visitClassDef"):
                return visitor.visitClassDef(self)
            else:
                return visitor.visitChildren(self)




    def classDef(self):

        localctx = VisualFoxpro9Parser.ClassDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_classDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            self.classDefStart()
            self.state = 259
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 257
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                    if la_ == 1:
                        self.state = 255
                        self.classDefProperty()
                        pass

                    elif la_ == 2:
                        self.state = 256
                        self.funcDef()
                        pass

             
                self.state = 261
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 262
            self.match(VisualFoxpro9Parser.ENDDEFINE)
            self.state = 263
            self.lineEnd()
            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.ASTERISK or _la==VisualFoxpro9Parser.NOTE or _la==VisualFoxpro9Parser.NL:
                self.state = 264
                self.lineComment()
                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDefPropertyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ClassDefPropertyContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_classDefProperty

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.ClassDefPropertyContext, self).copyFrom(ctx)



    class ClassDefAddObjectContext(ClassDefPropertyContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ClassDefPropertyContext)
            super(VisualFoxpro9Parser.ClassDefAddObjectContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(VisualFoxpro9Parser.ADD, 0)
        def OBJECT(self):
            return self.getToken(VisualFoxpro9Parser.OBJECT, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)
        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)
        def idAttr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdAttrContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitClassDefAddObject"):
                return visitor.visitClassDefAddObject(self)
            else:
                return visitor.visitChildren(self)


    class ClassDefAssignContext(ClassDefPropertyContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ClassDefPropertyContext)
            super(VisualFoxpro9Parser.ClassDefAssignContext, self).__init__(parser)
            self.copyFrom(ctx)

        def assign(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AssignContext,0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitClassDefAssign"):
                return visitor.visitClassDefAssign(self)
            else:
                return visitor.visitChildren(self)


    class ClassDefLineCommentContext(ClassDefPropertyContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ClassDefPropertyContext)
            super(VisualFoxpro9Parser.ClassDefLineCommentContext, self).__init__(parser)
            self.copyFrom(ctx)

        def lineComment(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitClassDefLineComment"):
                return visitor.visitClassDefLineComment(self)
            else:
                return visitor.visitChildren(self)



    def classDefProperty(self):

        localctx = VisualFoxpro9Parser.ClassDefPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_classDefProperty)
        self._la = 0 # Token type
        try:
            self.state = 296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.ClassDefAddObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 270
                self.match(VisualFoxpro9Parser.ADD)
                self.state = 271
                self.match(VisualFoxpro9Parser.OBJECT)
                self.state = 272
                self.identifier()
                self.state = 273
                self.asType()
                self.state = 288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.WITH:
                    self.state = 274
                    self.match(VisualFoxpro9Parser.WITH)
                    self.state = 275
                    self.idAttr()
                    self.state = 276
                    self.match(VisualFoxpro9Parser.EQUALS)
                    self.state = 277
                    self.expr(0)
                    self.state = 285
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==VisualFoxpro9Parser.COMMA:
                        self.state = 278
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 279
                        self.idAttr()
                        self.state = 280
                        self.match(VisualFoxpro9Parser.EQUALS)
                        self.state = 281
                        self.expr(0)
                        self.state = 287
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 290
                self.match(VisualFoxpro9Parser.NL)
                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.ClassDefAssignContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 292
                self.assign()
                self.state = 293
                self.match(VisualFoxpro9Parser.NL)
                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.ClassDefLineCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 295
                self.lineComment()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ParameterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_parameter

        def accept(self, visitor):
            if hasattr(visitor, "visitParameter"):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = VisualFoxpro9Parser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.idAttr()
            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.AS:
                self.state = 299
                self.asType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ParametersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ParameterContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ParameterContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_parameters

        def accept(self, visitor):
            if hasattr(visitor, "visitParameters"):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = VisualFoxpro9Parser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self.parameter()
            self.state = 307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.COMMA:
                self.state = 303
                self.match(VisualFoxpro9Parser.COMMA)
                self.state = 304
                self.parameter()
                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncDefStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.FuncDefStartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def idAttr2(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttr2Context,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def SCOPE(self):
            return self.getToken(VisualFoxpro9Parser.SCOPE, 0)

        def parameters(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParametersContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_funcDefStart

        def accept(self, visitor):
            if hasattr(visitor, "visitFuncDefStart"):
                return visitor.visitFuncDefStart(self)
            else:
                return visitor.visitChildren(self)




    def funcDefStart(self):

        localctx = VisualFoxpro9Parser.FuncDefStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_funcDefStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.SCOPE:
                self.state = 310
                self.match(VisualFoxpro9Parser.SCOPE)


            self.state = 313
            self.match(VisualFoxpro9Parser.PROCEDURE)
            self.state = 314
            self.idAttr2()
            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.LEFTPAREN:
                self.state = 315
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 316
                    self.parameters()


                self.state = 319
                self.match(VisualFoxpro9Parser.RIGHTPAREN)


            self.state = 322
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncDefContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.FuncDefContext, self).__init__(parent, invokingState)
            self.parser = parser

        def funcDefStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDefStartContext,0)


        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDPROC(self):
            return self.getToken(VisualFoxpro9Parser.ENDPROC, 0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def lineComment(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineCommentContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_funcDef

        def accept(self, visitor):
            if hasattr(visitor, "visitFuncDef"):
                return visitor.visitFuncDef(self)
            else:
                return visitor.visitChildren(self)




    def funcDef(self):

        localctx = VisualFoxpro9Parser.FuncDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_funcDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.funcDefStart()
            self.state = 325
            self.lines()
            self.state = 334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 326
                self.match(VisualFoxpro9Parser.ENDPROC)
                self.state = 327
                self.lineEnd()
                self.state = 331
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 328
                        self.lineComment() 
                    self.state = 333
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IfStartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def THEN(self):
            return self.getToken(VisualFoxpro9Parser.THEN, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_ifStart

        def accept(self, visitor):
            if hasattr(visitor, "visitIfStart"):
                return visitor.visitIfStart(self)
            else:
                return visitor.visitChildren(self)




    def ifStart(self):

        localctx = VisualFoxpro9Parser.IfStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_ifStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(VisualFoxpro9Parser.IF)
            self.state = 337
            self.expr(0)
            self.state = 339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.THEN:
                self.state = 338
                self.match(VisualFoxpro9Parser.THEN)


            self.state = 341
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IfStmtContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.ifBody = None # LinesContext
            self.elseBody = None # LinesContext

        def ifStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IfStartContext,0)


        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)

        def lines(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LinesContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,i)


        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_ifStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitIfStmt"):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = VisualFoxpro9Parser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.ifStart()
            self.state = 344
            localctx.ifBody = self.lines()
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.ELSE:
                self.state = 345
                self.match(VisualFoxpro9Parser.ELSE)
                self.state = 346
                self.match(VisualFoxpro9Parser.NL)
                self.state = 347
                localctx.elseBody = self.lines()


            self.state = 350
            self.match(VisualFoxpro9Parser.ENDIF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ForStartContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.loopStart = None # ExprContext
            self.loopStop = None # ExprContext
            self.loopStep = None # ExprContext

        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def STEP(self):
            return self.getToken(VisualFoxpro9Parser.STEP, 0)

        def EACH(self):
            return self.getToken(VisualFoxpro9Parser.EACH, 0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_forStart

        def accept(self, visitor):
            if hasattr(visitor, "visitForStart"):
                return visitor.visitForStart(self)
            else:
                return visitor.visitChildren(self)




    def forStart(self):

        localctx = VisualFoxpro9Parser.ForStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_forStart)
        self._la = 0 # Token type
        try:
            self.state = 371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 352
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 353
                self.idAttr()
                self.state = 354
                self.match(VisualFoxpro9Parser.EQUALS)
                self.state = 355
                localctx.loopStart = self.expr(0)
                self.state = 356
                self.match(VisualFoxpro9Parser.TO)
                self.state = 357
                localctx.loopStop = self.expr(0)
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.STEP:
                    self.state = 358
                    self.match(VisualFoxpro9Parser.STEP)
                    self.state = 359
                    localctx.loopStep = self.expr(0)


                self.state = 362
                self.match(VisualFoxpro9Parser.NL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 364
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 365
                self.match(VisualFoxpro9Parser.EACH)
                self.state = 366
                self.idAttr()
                self.state = 367
                self.match(VisualFoxpro9Parser.IN)
                self.state = 368
                self.expr(0)
                self.state = 369
                self.match(VisualFoxpro9Parser.NL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForEndContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ForEndContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ENDFOR(self):
            return self.getToken(VisualFoxpro9Parser.ENDFOR, 0)

        def NEXT(self):
            return self.getToken(VisualFoxpro9Parser.NEXT, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_forEnd

        def accept(self, visitor):
            if hasattr(visitor, "visitForEnd"):
                return visitor.visitForEnd(self)
            else:
                return visitor.visitChildren(self)




    def forEnd(self):

        localctx = VisualFoxpro9Parser.ForEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_forEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ENDFOR]:
                self.state = 373
                self.match(VisualFoxpro9Parser.ENDFOR)
                pass
            elif token in [VisualFoxpro9Parser.NEXT]:
                self.state = 374
                self.match(VisualFoxpro9Parser.NEXT)
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 375
                    self.idAttr()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ForStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def forStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ForStartContext,0)


        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def forEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ForEndContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_forStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitForStmt"):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = VisualFoxpro9Parser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.forStart()
            self.state = 381
            self.lines()
            self.state = 382
            self.forEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleCaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SingleCaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(VisualFoxpro9Parser.CASE, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_singleCase

        def accept(self, visitor):
            if hasattr(visitor, "visitSingleCase"):
                return visitor.visitSingleCase(self)
            else:
                return visitor.visitChildren(self)




    def singleCase(self):

        localctx = VisualFoxpro9Parser.SingleCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_singleCase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.match(VisualFoxpro9Parser.CASE)
            self.state = 385
            self.expr(0)
            self.state = 386
            self.match(VisualFoxpro9Parser.NL)
            self.state = 387
            self.lines()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OtherwiseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.OtherwiseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OTHERWISE(self):
            return self.getToken(VisualFoxpro9Parser.OTHERWISE, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_otherwise

        def accept(self, visitor):
            if hasattr(visitor, "visitOtherwise"):
                return visitor.visitOtherwise(self)
            else:
                return visitor.visitChildren(self)




    def otherwise(self):

        localctx = VisualFoxpro9Parser.OtherwiseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_otherwise)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.match(VisualFoxpro9Parser.OTHERWISE)
            self.state = 390
            self.match(VisualFoxpro9Parser.NL)
            self.state = 391
            self.lines()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.CaseStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)

        def CASE(self):
            return self.getToken(VisualFoxpro9Parser.CASE, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def ENDCASE(self):
            return self.getToken(VisualFoxpro9Parser.ENDCASE, 0)

        def lineComment(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineCommentContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,i)


        def singleCase(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SingleCaseContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SingleCaseContext,i)


        def otherwise(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.OtherwiseContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_caseStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitCaseStmt"):
                return visitor.visitCaseStmt(self)
            else:
                return visitor.visitChildren(self)




    def caseStmt(self):

        localctx = VisualFoxpro9Parser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_caseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.match(VisualFoxpro9Parser.DO)
            self.state = 394
            self.match(VisualFoxpro9Parser.CASE)
            self.state = 395
            self.match(VisualFoxpro9Parser.NL)
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.ASTERISK or _la==VisualFoxpro9Parser.NOTE or _la==VisualFoxpro9Parser.NL:
                self.state = 396
                self.lineComment()
                self.state = 401
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.CASE:
                self.state = 402
                self.singleCase()
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.OTHERWISE:
                self.state = 408
                self.otherwise()


            self.state = 411
            self.match(VisualFoxpro9Parser.ENDCASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.WhileStartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(VisualFoxpro9Parser.WHILE, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_whileStart

        def accept(self, visitor):
            if hasattr(visitor, "visitWhileStart"):
                return visitor.visitWhileStart(self)
            else:
                return visitor.visitChildren(self)




    def whileStart(self):

        localctx = VisualFoxpro9Parser.WhileStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_whileStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.DO:
                self.state = 413
                self.match(VisualFoxpro9Parser.DO)


            self.state = 416
            self.match(VisualFoxpro9Parser.WHILE)
            self.state = 417
            self.expr(0)
            self.state = 418
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.WhileStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def whileStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.WhileStartContext,0)


        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDDO(self):
            return self.getToken(VisualFoxpro9Parser.ENDDO, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_whileStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitWhileStmt"):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = VisualFoxpro9Parser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self.whileStart()
            self.state = 421
            self.lines()
            self.state = 422
            self.match(VisualFoxpro9Parser.ENDDO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WithStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.WithStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDWITH(self):
            return self.getToken(VisualFoxpro9Parser.ENDWITH, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_withStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitWithStmt"):
                return visitor.visitWithStmt(self)
            else:
                return visitor.visitChildren(self)




    def withStmt(self):

        localctx = VisualFoxpro9Parser.WithStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_withStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.match(VisualFoxpro9Parser.WITH)
            self.state = 425
            self.idAttr()
            self.state = 426
            self.match(VisualFoxpro9Parser.NL)
            self.state = 427
            self.lines()
            self.state = 428
            self.match(VisualFoxpro9Parser.ENDWITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScanStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ScanStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SCAN(self):
            return self.getToken(VisualFoxpro9Parser.SCAN, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDSCAN(self):
            return self.getToken(VisualFoxpro9Parser.ENDSCAN, 0)

        def scopeClause(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScopeClauseContext,0)


        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_scanStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitScanStmt"):
                return visitor.visitScanStmt(self)
            else:
                return visitor.visitChildren(self)




    def scanStmt(self):

        localctx = VisualFoxpro9Parser.ScanStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_scanStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.match(VisualFoxpro9Parser.SCAN)
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 114)) & ~0x3f) == 0 and ((1 << (_la - 114)) & ((1 << (VisualFoxpro9Parser.ALL - 114)) | (1 << (VisualFoxpro9Parser.RECORD - 114)) | (1 << (VisualFoxpro9Parser.NEXT - 114)) | (1 << (VisualFoxpro9Parser.REST - 114)))) != 0):
                self.state = 431
                self.scopeClause()


            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.FOR:
                self.state = 434
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 435
                self.expr(0)


            self.state = 438
            self.match(VisualFoxpro9Parser.NL)
            self.state = 439
            self.lines()
            self.state = 440
            self.match(VisualFoxpro9Parser.ENDSCAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.TryStmtContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.tryLines = None # LinesContext
            self.catchLines = None # LinesContext
            self.finallyLines = None # LinesContext

        def TRY(self):
            return self.getToken(VisualFoxpro9Parser.TRY, 0)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def ENDTRY(self):
            return self.getToken(VisualFoxpro9Parser.ENDTRY, 0)

        def lines(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LinesContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,i)


        def CATCH(self):
            return self.getToken(VisualFoxpro9Parser.CATCH, 0)

        def FINALLY(self):
            return self.getToken(VisualFoxpro9Parser.FINALLY, 0)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_tryStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitTryStmt"):
                return visitor.visitTryStmt(self)
            else:
                return visitor.visitChildren(self)




    def tryStmt(self):

        localctx = VisualFoxpro9Parser.TryStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_tryStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.match(VisualFoxpro9Parser.TRY)
            self.state = 443
            self.match(VisualFoxpro9Parser.NL)
            self.state = 444
            localctx.tryLines = self.lines()
            self.state = 452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.CATCH:
                self.state = 445
                self.match(VisualFoxpro9Parser.CATCH)
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.TO:
                    self.state = 446
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 447
                    self.identifier()


                self.state = 450
                self.match(VisualFoxpro9Parser.NL)
                self.state = 451
                localctx.catchLines = self.lines()


            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.FINALLY:
                self.state = 454
                self.match(VisualFoxpro9Parser.FINALLY)
                self.state = 455
                self.match(VisualFoxpro9Parser.NL)
                self.state = 456
                localctx.finallyLines = self.lines()


            self.state = 459
            self.match(VisualFoxpro9Parser.ENDTRY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ControlStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ControlStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def whileStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.WhileStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IfStmtContext,0)


        def caseStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CaseStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ForStmtContext,0)


        def withStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.WithStmtContext,0)


        def scanStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScanStmtContext,0)


        def tryStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TryStmtContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_controlStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitControlStmt"):
                return visitor.visitControlStmt(self)
            else:
                return visitor.visitChildren(self)




    def controlStmt(self):

        localctx = VisualFoxpro9Parser.ControlStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_controlStmt)
        try:
            self.state = 468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 461
                self.whileStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 462
                self.ifStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 463
                self.caseStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 464
                self.forStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 465
                self.withStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 466
                self.scanStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 467
                self.tryStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CmdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.CmdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def funcDo(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDoContext,0)


        def assign(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AssignContext,0)


        def declaration(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DeclarationContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.PrintStmtContext,0)


        def waitCmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.WaitCmdContext,0)


        def filesystemCmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.FilesystemCmdContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ReturnStmtContext,0)


        def release(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ReleaseContext,0)


        def setup(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SetupContext,0)


        def otherCmds(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.OtherCmdsContext,0)


        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def complexId(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ComplexIdContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_cmd

        def accept(self, visitor):
            if hasattr(visitor, "visitCmd"):
                return visitor.visitCmd(self)
            else:
                return visitor.visitChildren(self)




    def cmd(self):

        localctx = VisualFoxpro9Parser.CmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_cmd)
        try:
            self.state = 483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 470
                self.funcDo()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 471
                self.assign()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 472
                self.declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 473
                self.printStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 474
                self.waitCmd()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 475
                self.filesystemCmd()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 476
                self.returnStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 477
                self.release()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 478
                self.setup()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 479
                self.otherCmds()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 480
                self.match(VisualFoxpro9Parser.EQUALS)
                self.state = 481
                self.expr(0)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 482
                self.complexId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReleaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ReleaseContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.vartype = None # Token

        def RELEASE(self):
            return self.getToken(VisualFoxpro9Parser.RELEASE, 0)

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)

        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)


        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)

        def EXTENDED(self):
            return self.getToken(VisualFoxpro9Parser.EXTENDED, 0)

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_release

        def accept(self, visitor):
            if hasattr(visitor, "visitRelease"):
                return visitor.visitRelease(self)
            else:
                return visitor.visitChildren(self)




    def release(self):

        localctx = VisualFoxpro9Parser.ReleaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_release)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(VisualFoxpro9Parser.RELEASE)
            self.state = 496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 486
                self.match(VisualFoxpro9Parser.ALL)
                pass

            elif la_ == 2:
                self.state = 488
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 487
                    localctx.vartype = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.PROCEDURE or _la==VisualFoxpro9Parser.CLASSLIB):
                        localctx.vartype = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 490
                self.args()
                pass

            elif la_ == 3:
                self.state = 491
                self.match(VisualFoxpro9Parser.POPUP)
                self.state = 492
                self.args()
                self.state = 494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.EXTENDED:
                    self.state = 493
                    self.match(VisualFoxpro9Parser.EXTENDED)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OtherCmdsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.OtherCmdsContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_otherCmds

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.OtherCmdsContext, self).copyFrom(ctx)



    class PushKeyContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.PushKeyContext, self).__init__(parser)
            self.copyFrom(ctx)

        def PUSH(self):
            return self.getToken(VisualFoxpro9Parser.PUSH, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitPushKey"):
                return visitor.visitPushKey(self)
            else:
                return visitor.visitChildren(self)


    class ThrowErrorContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ThrowErrorContext, self).__init__(parser)
            self.copyFrom(ctx)

        def THROW(self):
            return self.getToken(VisualFoxpro9Parser.THROW, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitThrowError"):
                return visitor.visitThrowError(self)
            else:
                return visitor.visitChildren(self)


    class SelectContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.SelectContext, self).__init__(parser)
            self.tablename = None # SpecialExprContext
            self.fromExpr = None # SpecialExprContext
            self.whereExpr = None # ExprContext
            self.intoExpr = None # SpecialExprContext
            self.orderbyid = None # IdentifierContext
            self.copyFrom(ctx)

        def SELECT(self):
            return self.getToken(VisualFoxpro9Parser.SELECT, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def specialArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,0)

        def DISTINCT(self):
            return self.getToken(VisualFoxpro9Parser.DISTINCT, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def WHERE(self):
            return self.getToken(VisualFoxpro9Parser.WHERE, 0)
        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)
        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)
        def BY(self):
            return self.getToken(VisualFoxpro9Parser.BY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)
        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitSelect"):
                return visitor.visitSelect(self)
            else:
                return visitor.visitChildren(self)


    class DefineMenuContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.DefineMenuContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def NOMARGIN(self):
            return self.getToken(VisualFoxpro9Parser.NOMARGIN, 0)
        def AT(self):
            return self.getToken(VisualFoxpro9Parser.AT, 0)
        def LINE(self):
            return self.getToken(VisualFoxpro9Parser.LINE, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)
        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefineMenu"):
                return visitor.visitDefineMenu(self)
            else:
                return visitor.visitChildren(self)


    class IndexOnContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.IndexOnContext, self).__init__(parser)
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(VisualFoxpro9Parser.INDEX, 0)
        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def COMPACT(self):
            return self.getToken(VisualFoxpro9Parser.COMPACT, 0)
        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)
        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)
        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)
        def UNIQUE(self):
            return self.getToken(VisualFoxpro9Parser.UNIQUE, 0)
        def CANDIDATE(self):
            return self.getToken(VisualFoxpro9Parser.CANDIDATE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitIndexOn"):
                return visitor.visitIndexOn(self)
            else:
                return visitor.visitChildren(self)


    class UseContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.UseContext, self).__init__(parser)
            self.workArea = None # SpecialExprContext
            self.name = None # SpecialExprContext
            self.aliasExpr = None # SpecialExprContext
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(VisualFoxpro9Parser.USE, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def ALIAS(self):
            return self.getToken(VisualFoxpro9Parser.ALIAS, 0)
        def SHARED(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SHARED)
            else:
                return self.getToken(VisualFoxpro9Parser.SHARED, i)
        def EXCLUSIVE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.EXCLUSIVE)
            else:
                return self.getToken(VisualFoxpro9Parser.EXCLUSIVE, i)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitUse"):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)


    class ReplaceContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ReplaceContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REPLACE(self):
            return self.getToken(VisualFoxpro9Parser.REPLACE, 0)
        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def WITH(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WITH)
            else:
                return self.getToken(VisualFoxpro9Parser.WITH, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitReplace"):
                return visitor.visitReplace(self)
            else:
                return visitor.visitChildren(self)


    class ClearStmtContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ClearStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def CLASS(self):
            return self.getToken(VisualFoxpro9Parser.CLASS, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def DEBUG(self):
            return self.getToken(VisualFoxpro9Parser.DEBUG, 0)
        def DLLS(self):
            return self.getToken(VisualFoxpro9Parser.DLLS, 0)
        def specialArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,0)

        def EVENTS(self):
            return self.getToken(VisualFoxpro9Parser.EVENTS, 0)
        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)
        def FIELDS(self):
            return self.getToken(VisualFoxpro9Parser.FIELDS, 0)
        def GETS(self):
            return self.getToken(VisualFoxpro9Parser.GETS, 0)
        def MACROS(self):
            return self.getToken(VisualFoxpro9Parser.MACROS, 0)
        def MEMORY(self):
            return self.getToken(VisualFoxpro9Parser.MEMORY, 0)
        def MENUS(self):
            return self.getToken(VisualFoxpro9Parser.MENUS, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def PROGRAM(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAM, 0)
        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)
        def READ(self):
            return self.getToken(VisualFoxpro9Parser.READ, 0)
        def RESOURCES(self):
            return self.getToken(VisualFoxpro9Parser.RESOURCES, 0)
        def TYPEAHEAD(self):
            return self.getToken(VisualFoxpro9Parser.TYPEAHEAD, 0)
        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitClearStmt"):
                return visitor.visitClearStmt(self)
            else:
                return visitor.visitChildren(self)


    class DeactivateContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.DeactivateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.DEACTIVATE, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def parameters(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParametersContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitDeactivate"):
                return visitor.visitDeactivate(self)
            else:
                return visitor.visitChildren(self)


    class CopyToContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.CopyToContext, self).__init__(parser)
            self.copyFrom(ctx)

        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def STRUCTURE(self):
            return self.getToken(VisualFoxpro9Parser.STRUCTURE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCopyTo"):
                return visitor.visitCopyTo(self)
            else:
                return visitor.visitChildren(self)


    class ReadEventContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ReadEventContext, self).__init__(parser)
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(VisualFoxpro9Parser.READ, 0)
        def EVENTS(self):
            return self.getToken(VisualFoxpro9Parser.EVENTS, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitReadEvent"):
                return visitor.visitReadEvent(self)
            else:
                return visitor.visitChildren(self)


    class AppendFromContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.AppendFromContext, self).__init__(parser)
            self.typeExpr = None # SpecialExprContext
            self.copyFrom(ctx)

        def APPEND(self):
            return self.getToken(VisualFoxpro9Parser.APPEND, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)
        def TYPE(self):
            return self.getToken(VisualFoxpro9Parser.TYPE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitAppendFrom"):
                return visitor.visitAppendFrom(self)
            else:
                return visitor.visitChildren(self)


    class ContinueLocateContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ContinueLocateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(VisualFoxpro9Parser.CONTINUE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitContinueLocate"):
                return visitor.visitContinueLocate(self)
            else:
                return visitor.visitChildren(self)


    class ShellRunContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ShellRunContext, self).__init__(parser)
            self.copyFrom(ctx)

        def RUN(self):
            return self.getToken(VisualFoxpro9Parser.RUN, 0)
        def EXCLAMATION(self):
            return self.getToken(VisualFoxpro9Parser.EXCLAMATION, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitShellRun"):
                return visitor.visitShellRun(self)
            else:
                return visitor.visitChildren(self)


    class PopKeyContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.PopKeyContext, self).__init__(parser)
            self.copyFrom(ctx)

        def POP(self):
            return self.getToken(VisualFoxpro9Parser.POP, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitPopKey"):
                return visitor.visitPopKey(self)
            else:
                return visitor.visitChildren(self)


    class ReindexContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ReindexContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REINDEX(self):
            return self.getToken(VisualFoxpro9Parser.REINDEX, 0)
        def COMPACT(self):
            return self.getToken(VisualFoxpro9Parser.COMPACT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitReindex"):
                return visitor.visitReindex(self)
            else:
                return visitor.visitChildren(self)


    class CountContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.CountContext, self).__init__(parser)
            self.toExpr = None # ExprContext
            self.copyFrom(ctx)

        def COUNT(self):
            return self.getToken(VisualFoxpro9Parser.COUNT, 0)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitCount"):
                return visitor.visitCount(self)
            else:
                return visitor.visitChildren(self)


    class PackContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.PackContext, self).__init__(parser)
            self.workArea = None # SpecialExprContext
            self.tableName = None # SpecialExprContext
            self.copyFrom(ctx)

        def PACK(self):
            return self.getToken(VisualFoxpro9Parser.PACK, 0)
        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def MEMO(self):
            return self.getToken(VisualFoxpro9Parser.MEMO, 0)
        def DBF(self):
            return self.getToken(VisualFoxpro9Parser.DBF, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitPack"):
                return visitor.visitPack(self)
            else:
                return visitor.visitChildren(self)


    class AtSayContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.AtSayContext, self).__init__(parser)
            self.sayExpr = None # ExprContext
            self.styleExpr = None # ExprContext
            self.copyFrom(ctx)

        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)

        def SAY(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SAY)
            else:
                return self.getToken(VisualFoxpro9Parser.SAY, i)
        def STYLE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.STYLE)
            else:
                return self.getToken(VisualFoxpro9Parser.STYLE, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitAtSay"):
                return visitor.visitAtSay(self)
            else:
                return visitor.visitChildren(self)


    class ActivateMenuContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ActivateMenuContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def NOWAIT(self):
            return self.getToken(VisualFoxpro9Parser.NOWAIT, 0)
        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitActivateMenu"):
                return visitor.visitActivateMenu(self)
            else:
                return visitor.visitChildren(self)


    class RaiseErrorContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.RaiseErrorContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitRaiseError"):
                return visitor.visitRaiseError(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.AlterTableContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(VisualFoxpro9Parser.ALTER, 0)
        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def ADD(self):
            return self.getToken(VisualFoxpro9Parser.ADD, 0)
        def COLUMN(self):
            return self.getToken(VisualFoxpro9Parser.COLUMN, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def arrayIndex(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArrayIndexContext,0)

        def DROP(self):
            return self.getToken(VisualFoxpro9Parser.DROP, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitAlterTable"):
                return visitor.visitAlterTable(self)
            else:
                return visitor.visitChildren(self)


    class BrowseContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.BrowseContext, self).__init__(parser)
            self.copyFrom(ctx)

        def BROWSE(self):
            return self.getToken(VisualFoxpro9Parser.BROWSE, 0)
        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitBrowse"):
                return visitor.visitBrowse(self)
            else:
                return visitor.visitChildren(self)


    class GoRecordContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.GoRecordContext, self).__init__(parser)
            self.copyFrom(ctx)

        def GOTO(self):
            return self.getToken(VisualFoxpro9Parser.GOTO, 0)
        def TOP(self):
            return self.getToken(VisualFoxpro9Parser.TOP, 0)
        def BOTTOM(self):
            return self.getToken(VisualFoxpro9Parser.BOTTOM, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def RECORD(self):
            return self.getToken(VisualFoxpro9Parser.RECORD, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitGoRecord"):
                return visitor.visitGoRecord(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.CreateTableContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(VisualFoxpro9Parser.CREATE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def arrayIndex(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArrayIndexContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArrayIndexContext,i)

        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)
        def DBF(self):
            return self.getToken(VisualFoxpro9Parser.DBF, 0)
        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)
        def FREE(self):
            return self.getToken(VisualFoxpro9Parser.FREE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCreateTable"):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class LocateContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.LocateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def LOCATE(self):
            return self.getToken(VisualFoxpro9Parser.LOCATE, 0)
        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitLocate"):
                return visitor.visitLocate(self)
            else:
                return visitor.visitChildren(self)


    class InsertContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.InsertContext, self).__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(VisualFoxpro9Parser.INSERT, 0)
        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def VALUES(self):
            return self.getToken(VisualFoxpro9Parser.VALUES, 0)
        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)

        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def MEMVAR(self):
            return self.getToken(VisualFoxpro9Parser.MEMVAR, 0)
        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)
        def specialArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitInsert"):
                return visitor.visitInsert(self)
            else:
                return visitor.visitChildren(self)


    class SumContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.SumContext, self).__init__(parser)
            self.toExpr = None # ExprContext
            self.sumExpr = None # ExprContext
            self.copyFrom(ctx)

        def SUM(self):
            return self.getToken(VisualFoxpro9Parser.SUM, 0)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitSum"):
                return visitor.visitSum(self)
            else:
                return visitor.visitChildren(self)


    class OnKeyContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.OnKeyContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)

        def LABEL(self):
            return self.getToken(VisualFoxpro9Parser.LABEL, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitOnKey"):
                return visitor.visitOnKey(self)
            else:
                return visitor.visitChildren(self)


    class OnSelectionBarContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.OnSelectionBarContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def SELECTION(self):
            return self.getToken(VisualFoxpro9Parser.SELECTION, 0)
        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitOnSelectionBar"):
                return visitor.visitOnSelectionBar(self)
            else:
                return visitor.visitChildren(self)


    class ZapTableContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ZapTableContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ZAP(self):
            return self.getToken(VisualFoxpro9Parser.ZAP, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitZapTable"):
                return visitor.visitZapTable(self)
            else:
                return visitor.visitChildren(self)


    class DllDeclareContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.DllDeclareContext, self).__init__(parser)
            self.returnType = None # DatatypeContext
            self.alias = None # IdentifierContext
            self.copyFrom(ctx)

        def DECLARE(self):
            return self.getToken(VisualFoxpro9Parser.DECLARE, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)
        def dllArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DllArgsContext,0)

        def datatype(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DatatypeContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitDllDeclare"):
                return visitor.visitDllDeclare(self)
            else:
                return visitor.visitChildren(self)


    class SeekRecordContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.SeekRecordContext, self).__init__(parser)
            self.seekExpr = None # ExprContext
            self.orderExpr = None # ExprContext
            self.tagName = None # SpecialExprContext
            self.cdxFileExpr = None # SpecialExprContext
            self.idxFileExpr = None # SpecialExprContext
            self.tablenameExpr = None # SpecialExprContext
            self.copyFrom(ctx)

        def SEEK(self):
            return self.getToken(VisualFoxpro9Parser.SEEK, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)
        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)
        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)
        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitSeekRecord"):
                return visitor.visitSeekRecord(self)
            else:
                return visitor.visitChildren(self)


    class ActivateWindowContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ActivateWindowContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def WINDOW(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WINDOW)
            else:
                return self.getToken(VisualFoxpro9Parser.WINDOW, i)
        def parameters(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParametersContext,0)

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def NOSHOW(self):
            return self.getToken(VisualFoxpro9Parser.NOSHOW, 0)
        def BOTTOM(self):
            return self.getToken(VisualFoxpro9Parser.BOTTOM, 0)
        def TOP(self):
            return self.getToken(VisualFoxpro9Parser.TOP, 0)
        def SAME(self):
            return self.getToken(VisualFoxpro9Parser.SAME, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitActivateWindow"):
                return visitor.visitActivateWindow(self)
            else:
                return visitor.visitChildren(self)


    class AssertContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.AssertContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ASSERT(self):
            return self.getToken(VisualFoxpro9Parser.ASSERT, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitAssert"):
                return visitor.visitAssert(self)
            else:
                return visitor.visitChildren(self)


    class GatherExprContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.GatherExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def GATHER(self):
            return self.getToken(VisualFoxpro9Parser.GATHER, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def MEMVAR(self):
            return self.getToken(VisualFoxpro9Parser.MEMVAR, 0)
        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def FIELDS(self):
            return self.getToken(VisualFoxpro9Parser.FIELDS, 0)
        def MEMO(self):
            return self.getToken(VisualFoxpro9Parser.MEMO, 0)
        def LIKE(self):
            return self.getToken(VisualFoxpro9Parser.LIKE, 0)
        def EXCEPT(self):
            return self.getToken(VisualFoxpro9Parser.EXCEPT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitGatherExpr"):
                return visitor.visitGatherExpr(self)
            else:
                return visitor.visitChildren(self)


    class CloseStmtContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.CloseStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CLOSE(self):
            return self.getToken(VisualFoxpro9Parser.CLOSE, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)
        def INDEXES(self):
            return self.getToken(VisualFoxpro9Parser.INDEXES, 0)
        def TABLES(self):
            return self.getToken(VisualFoxpro9Parser.TABLES, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCloseStmt"):
                return visitor.visitCloseStmt(self)
            else:
                return visitor.visitChildren(self)


    class DefinePopupContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.DefinePopupContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def SHADOW(self):
            return self.getToken(VisualFoxpro9Parser.SHADOW, 0)
        def MARGIN(self):
            return self.getToken(VisualFoxpro9Parser.MARGIN, 0)
        def RELATIVE(self):
            return self.getToken(VisualFoxpro9Parser.RELATIVE, 0)
        def COLOR(self):
            return self.getToken(VisualFoxpro9Parser.COLOR, 0)
        def SCHEME(self):
            return self.getToken(VisualFoxpro9Parser.SCHEME, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefinePopup"):
                return visitor.visitDefinePopup(self)
            else:
                return visitor.visitChildren(self)


    class KeyboardContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.KeyboardContext, self).__init__(parser)
            self.copyFrom(ctx)

        def KEYBOARD(self):
            return self.getToken(VisualFoxpro9Parser.KEYBOARD, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def PLAIN(self):
            return self.getToken(VisualFoxpro9Parser.PLAIN, 0)
        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitKeyboard"):
                return visitor.visitKeyboard(self)
            else:
                return visitor.visitChildren(self)


    class ProgramControlContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ProgramControlContext, self).__init__(parser)
            self.copyFrom(ctx)

        def PROGRAMCONTROL(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAMCONTROL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitProgramControl"):
                return visitor.visitProgramControl(self)
            else:
                return visitor.visitChildren(self)


    class SkipRecordContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.SkipRecordContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SKIPKW(self):
            return self.getToken(VisualFoxpro9Parser.SKIPKW, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitSkipRecord"):
                return visitor.visitSkipRecord(self)
            else:
                return visitor.visitChildren(self)


    class DefinePadContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.DefinePadContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)
        def AT(self):
            return self.getToken(VisualFoxpro9Parser.AT, 0)
        def NUMBER_LITERAL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NUMBER_LITERAL)
            else:
                return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, i)
        def BEFORE(self):
            return self.getToken(VisualFoxpro9Parser.BEFORE, 0)
        def AFTER(self):
            return self.getToken(VisualFoxpro9Parser.AFTER, 0)
        def NEGOTIATE(self):
            return self.getToken(VisualFoxpro9Parser.NEGOTIATE, 0)
        def FONT(self):
            return self.getToken(VisualFoxpro9Parser.FONT, 0)
        def STYLE(self):
            return self.getToken(VisualFoxpro9Parser.STYLE, 0)
        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def MARK(self):
            return self.getToken(VisualFoxpro9Parser.MARK, 0)
        def SKIPKW(self):
            return self.getToken(VisualFoxpro9Parser.SKIPKW, 0)
        def COLOR(self):
            return self.getToken(VisualFoxpro9Parser.COLOR, 0)
        def SCHEME(self):
            return self.getToken(VisualFoxpro9Parser.SCHEME, 0)
        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefinePad"):
                return visitor.visitDefinePad(self)
            else:
                return visitor.visitChildren(self)


    class DefineBarContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.DefineBarContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefineBar"):
                return visitor.visitDefineBar(self)
            else:
                return visitor.visitChildren(self)


    class ReportContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ReportContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REPORT(self):
            return self.getToken(VisualFoxpro9Parser.REPORT, 0)
        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def NOEJECT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOEJECT)
            else:
                return self.getToken(VisualFoxpro9Parser.NOEJECT, i)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def PRINTER(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.PRINTER)
            else:
                return self.getToken(VisualFoxpro9Parser.PRINTER, i)
        def NOCONSOLE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOCONSOLE)
            else:
                return self.getToken(VisualFoxpro9Parser.NOCONSOLE, i)
        def PROMPT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.PROMPT)
            else:
                return self.getToken(VisualFoxpro9Parser.PROMPT, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitReport"):
                return visitor.visitReport(self)
            else:
                return visitor.visitChildren(self)


    class OnPadContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.OnPadContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitOnPad"):
                return visitor.visitOnPad(self)
            else:
                return visitor.visitChildren(self)


    class OnBarContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.OnBarContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitOnBar"):
                return visitor.visitOnBar(self)
            else:
                return visitor.visitChildren(self)


    class NodefaultContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.NodefaultContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NODEFAULT(self):
            return self.getToken(VisualFoxpro9Parser.NODEFAULT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitNodefault"):
                return visitor.visitNodefault(self)
            else:
                return visitor.visitChildren(self)


    class AppendContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.AppendContext, self).__init__(parser)
            self.copyFrom(ctx)

        def APPEND(self):
            return self.getToken(VisualFoxpro9Parser.APPEND, 0)
        def BLANK(self):
            return self.getToken(VisualFoxpro9Parser.BLANK, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def NOMENU(self):
            return self.getToken(VisualFoxpro9Parser.NOMENU, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitAppend"):
                return visitor.visitAppend(self)
            else:
                return visitor.visitChildren(self)


    class ScatterExprContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.ScatterExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SCATTER(self):
            return self.getToken(VisualFoxpro9Parser.SCATTER, 0)
        def MEMVAR(self):
            return self.getToken(VisualFoxpro9Parser.MEMVAR, 0)
        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def FIELDS(self):
            return self.getToken(VisualFoxpro9Parser.FIELDS, 0)
        def MEMO(self):
            return self.getToken(VisualFoxpro9Parser.MEMO, 0)
        def BLANK(self):
            return self.getToken(VisualFoxpro9Parser.BLANK, 0)
        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)
        def LIKE(self):
            return self.getToken(VisualFoxpro9Parser.LIKE, 0)
        def EXCEPT(self):
            return self.getToken(VisualFoxpro9Parser.EXCEPT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitScatterExpr"):
                return visitor.visitScatterExpr(self)
            else:
                return visitor.visitChildren(self)


    class DeleteRecordContext(OtherCmdsContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.OtherCmdsContext)
            super(VisualFoxpro9Parser.DeleteRecordContext, self).__init__(parser)
            self.inExpr = None # SpecialExprContext
            self.copyFrom(ctx)

        def RECALL(self):
            return self.getToken(VisualFoxpro9Parser.RECALL, 0)
        def DELETE(self):
            return self.getToken(VisualFoxpro9Parser.DELETE, 0)
        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def IN(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.IN)
            else:
                return self.getToken(VisualFoxpro9Parser.IN, i)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitDeleteRecord"):
                return visitor.visitDeleteRecord(self)
            else:
                return visitor.visitChildren(self)



    def otherCmds(self):

        localctx = VisualFoxpro9Parser.OtherCmdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_otherCmds)
        self._la = 0 # Token type
        try:
            self.state = 1154
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.OnKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 498
                self.match(VisualFoxpro9Parser.ON)
                self.state = 499
                self.match(VisualFoxpro9Parser.KEY)
                self.state = 506
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 500
                    self.match(VisualFoxpro9Parser.LABEL)
                    self.state = 501
                    self.identifier()
                    self.state = 504
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.PLUS_SIGN:
                        self.state = 502
                        self.match(VisualFoxpro9Parser.PLUS_SIGN)
                        self.state = 503
                        self.identifier()




                self.state = 508
                self.cmd()
                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.ProgramControlContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 509
                self.match(VisualFoxpro9Parser.PROGRAMCONTROL)
                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.AtSayContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 510
                self.match(VisualFoxpro9Parser.COMMERCIALAT)
                self.state = 511
                self.args()
                self.state = 518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.STYLE or _la==VisualFoxpro9Parser.SAY:
                    self.state = 516
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.SAY]:
                        self.state = 512
                        self.match(VisualFoxpro9Parser.SAY)
                        self.state = 513
                        localctx.sayExpr = self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.STYLE]:
                        self.state = 514
                        self.match(VisualFoxpro9Parser.STYLE)
                        self.state = 515
                        localctx.styleExpr = self.expr(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 520
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                localctx = VisualFoxpro9Parser.PushKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 521
                self.match(VisualFoxpro9Parser.PUSH)
                self.state = 522
                self.match(VisualFoxpro9Parser.KEY)
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.CLEAR:
                    self.state = 523
                    self.match(VisualFoxpro9Parser.CLEAR)


                pass

            elif la_ == 5:
                localctx = VisualFoxpro9Parser.PopKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 526
                self.match(VisualFoxpro9Parser.POP)
                self.state = 527
                self.match(VisualFoxpro9Parser.KEY)
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ALL:
                    self.state = 528
                    self.match(VisualFoxpro9Parser.ALL)


                pass

            elif la_ == 6:
                localctx = VisualFoxpro9Parser.KeyboardContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 531
                self.match(VisualFoxpro9Parser.KEYBOARD)
                self.state = 532
                self.expr(0)
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.PLAIN:
                    self.state = 533
                    self.match(VisualFoxpro9Parser.PLAIN)


                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.CLEAR:
                    self.state = 536
                    self.match(VisualFoxpro9Parser.CLEAR)


                pass

            elif la_ == 7:
                localctx = VisualFoxpro9Parser.DefineMenuContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 539
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 540
                self.match(VisualFoxpro9Parser.MENU)
                self.state = 541
                self.identifier()

                self.state = 542
                self.match(VisualFoxpro9Parser.BAR)
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.AT:
                    self.state = 543
                    self.match(VisualFoxpro9Parser.AT)
                    self.state = 544
                    self.match(VisualFoxpro9Parser.LINE)
                    self.state = 545
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 548
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 554
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                    if la_ == 1:
                        self.state = 550
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                        if la_ == 1:
                            self.state = 549
                            self.match(VisualFoxpro9Parser.WINDOW)


                        self.state = 552
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 553
                        self.match(VisualFoxpro9Parser.SCREEN)
                        pass




                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NOMARGIN:
                    self.state = 558
                    self.match(VisualFoxpro9Parser.NOMARGIN)


                pass

            elif la_ == 8:
                localctx = VisualFoxpro9Parser.DefinePadContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 561
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 562
                self.match(VisualFoxpro9Parser.PAD)
                self.state = 563
                self.identifier()
                self.state = 564
                self.match(VisualFoxpro9Parser.OF)
                self.state = 565
                self.expr(0)
                self.state = 566
                self.match(VisualFoxpro9Parser.PROMPT)
                self.state = 567
                self.expr(0)
                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.AT:
                    self.state = 568
                    self.match(VisualFoxpro9Parser.AT)
                    self.state = 569
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                    self.state = 570
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 571
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                self.state = 578
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.BEFORE]:
                    self.state = 574
                    self.match(VisualFoxpro9Parser.BEFORE)
                    self.state = 575
                    self.identifier()
                    pass
                elif token in [VisualFoxpro9Parser.AFTER]:
                    self.state = 576
                    self.match(VisualFoxpro9Parser.AFTER)
                    self.state = 577
                    self.identifier()
                    pass
                elif token in [VisualFoxpro9Parser.EOF, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.NL]:
                    pass
                else:
                    pass
                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NEGOTIATE:
                    self.state = 580
                    self.match(VisualFoxpro9Parser.NEGOTIATE)
                    self.state = 581
                    self.identifier()
                    self.state = 584
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.COMMA:
                        self.state = 582
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 583
                        self.identifier()




                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.FONT:
                    self.state = 588
                    self.match(VisualFoxpro9Parser.FONT)
                    self.state = 589
                    self.identifier()
                    self.state = 600
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.COMMA:
                        self.state = 590
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 591
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 598
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.COMMA:
                            self.state = 592
                            self.match(VisualFoxpro9Parser.COMMA)
                            self.state = 593
                            self.expr(0)
                            self.state = 596
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==VisualFoxpro9Parser.COMMA:
                                self.state = 594
                                self.match(VisualFoxpro9Parser.COMMA)
                                self.state = 595
                                self.identifier()








                self.state = 606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.STYLE:
                    self.state = 604
                    self.match(VisualFoxpro9Parser.STYLE)
                    self.state = 605
                    self.identifier()


                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MESSAGE:
                    self.state = 608
                    self.match(VisualFoxpro9Parser.MESSAGE)
                    self.state = 609
                    self.expr(0)


                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.KEY:
                    self.state = 612
                    self.match(VisualFoxpro9Parser.KEY)
                    self.state = 613
                    self.identifier()
                    self.state = 616
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.PLUS_SIGN:
                        self.state = 614
                        self.match(VisualFoxpro9Parser.PLUS_SIGN)
                        self.state = 615
                        self.identifier()


                    self.state = 620
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.COMMA:
                        self.state = 618
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 619
                        self.expr(0)




                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MARK:
                    self.state = 624
                    self.match(VisualFoxpro9Parser.MARK)
                    self.state = 625
                    self.identifier()


                self.state = 633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.SKIPKW:
                    self.state = 628
                    self.match(VisualFoxpro9Parser.SKIPKW)
                    self.state = 631
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.FOR:
                        self.state = 629
                        self.match(VisualFoxpro9Parser.FOR)
                        self.state = 630
                        self.expr(0)




                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COLOR:
                    self.state = 635
                    self.match(VisualFoxpro9Parser.COLOR)
                    self.state = 636
                    self.match(VisualFoxpro9Parser.SCHEME)
                    self.state = 637
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                pass

            elif la_ == 9:
                localctx = VisualFoxpro9Parser.DefinePopupContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 640
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 641
                self.match(VisualFoxpro9Parser.POPUP)
                self.state = 642
                self.identifier()
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.SHADOW:
                    self.state = 643
                    self.match(VisualFoxpro9Parser.SHADOW)


                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MARGIN:
                    self.state = 646
                    self.match(VisualFoxpro9Parser.MARGIN)


                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.RELATIVE:
                    self.state = 649
                    self.match(VisualFoxpro9Parser.RELATIVE)


                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COLOR:
                    self.state = 652
                    self.match(VisualFoxpro9Parser.COLOR)
                    self.state = 653
                    self.match(VisualFoxpro9Parser.SCHEME)
                    self.state = 654
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                pass

            elif la_ == 10:
                localctx = VisualFoxpro9Parser.DefineBarContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 657
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 658
                self.match(VisualFoxpro9Parser.BAR)
                self.state = 659
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                self.state = 660
                self.match(VisualFoxpro9Parser.OF)
                self.state = 661
                self.identifier()
                self.state = 662
                self.match(VisualFoxpro9Parser.PROMPT)
                self.state = 663
                self.expr(0)
                self.state = 666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MESSAGE:
                    self.state = 664
                    self.match(VisualFoxpro9Parser.MESSAGE)
                    self.state = 665
                    self.expr(0)


                pass

            elif la_ == 11:
                localctx = VisualFoxpro9Parser.OnPadContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 668
                self.match(VisualFoxpro9Parser.ON)
                self.state = 669
                self.match(VisualFoxpro9Parser.PAD)
                self.state = 670
                self.identifier()
                self.state = 671
                self.match(VisualFoxpro9Parser.OF)
                self.state = 672
                self.identifier()
                self.state = 676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ACTIVATE:
                    self.state = 673
                    self.match(VisualFoxpro9Parser.ACTIVATE)
                    self.state = 674
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.MENU or _la==VisualFoxpro9Parser.POPUP):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 675
                    self.identifier()


                pass

            elif la_ == 12:
                localctx = VisualFoxpro9Parser.OnBarContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 678
                self.match(VisualFoxpro9Parser.ON)
                self.state = 679
                self.match(VisualFoxpro9Parser.BAR)
                self.state = 680
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                self.state = 681
                self.match(VisualFoxpro9Parser.OF)
                self.state = 682
                self.identifier()
                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ACTIVATE:
                    self.state = 683
                    self.match(VisualFoxpro9Parser.ACTIVATE)
                    self.state = 684
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.MENU or _la==VisualFoxpro9Parser.POPUP):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 685
                    self.identifier()


                pass

            elif la_ == 13:
                localctx = VisualFoxpro9Parser.OnSelectionBarContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 688
                self.match(VisualFoxpro9Parser.ON)
                self.state = 689
                self.match(VisualFoxpro9Parser.SELECTION)
                self.state = 690
                self.match(VisualFoxpro9Parser.BAR)
                self.state = 691
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                self.state = 692
                self.match(VisualFoxpro9Parser.OF)
                self.state = 693
                self.identifier()
                self.state = 694
                self.cmd()
                pass

            elif la_ == 14:
                localctx = VisualFoxpro9Parser.ActivateWindowContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 696
                self.match(VisualFoxpro9Parser.ACTIVATE)
                self.state = 697
                self.match(VisualFoxpro9Parser.WINDOW)
                self.state = 700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 698
                    self.parameters()
                    pass

                elif la_ == 2:
                    self.state = 699
                    self.match(VisualFoxpro9Parser.ALL)
                    pass


                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 702
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 708
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                    if la_ == 1:
                        self.state = 704
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                        if la_ == 1:
                            self.state = 703
                            self.match(VisualFoxpro9Parser.WINDOW)


                        self.state = 706
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 707
                        self.match(VisualFoxpro9Parser.SCREEN)
                        pass




                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (VisualFoxpro9Parser.TOP - 117)) | (1 << (VisualFoxpro9Parser.BOTTOM - 117)) | (1 << (VisualFoxpro9Parser.SAME - 117)))) != 0):
                    self.state = 712
                    _la = self._input.LA(1)
                    if not(((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (VisualFoxpro9Parser.TOP - 117)) | (1 << (VisualFoxpro9Parser.BOTTOM - 117)) | (1 << (VisualFoxpro9Parser.SAME - 117)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NOSHOW:
                    self.state = 715
                    self.match(VisualFoxpro9Parser.NOSHOW)


                pass

            elif la_ == 15:
                localctx = VisualFoxpro9Parser.ActivateMenuContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 718
                self.match(VisualFoxpro9Parser.ACTIVATE)
                self.state = 719
                self.match(VisualFoxpro9Parser.MENU)
                self.state = 720
                self.identifier()
                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NOWAIT:
                    self.state = 721
                    self.match(VisualFoxpro9Parser.NOWAIT)


                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.PAD:
                    self.state = 724
                    self.match(VisualFoxpro9Parser.PAD)
                    self.state = 725
                    self.identifier()


                pass

            elif la_ == 16:
                localctx = VisualFoxpro9Parser.DeactivateContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 728
                self.match(VisualFoxpro9Parser.DEACTIVATE)
                self.state = 729
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.MENU or _la==VisualFoxpro9Parser.POPUP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 732
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 730
                    self.match(VisualFoxpro9Parser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 731
                    self.parameters()
                    pass


                pass

            elif la_ == 17:
                localctx = VisualFoxpro9Parser.RaiseErrorContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 734
                self.match(VisualFoxpro9Parser.ERROR)
                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 735
                    self.expr(0)


                pass

            elif la_ == 18:
                localctx = VisualFoxpro9Parser.ThrowErrorContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 738
                self.match(VisualFoxpro9Parser.THROW)
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 739
                    self.expr(0)


                pass

            elif la_ == 19:
                localctx = VisualFoxpro9Parser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 742
                self.match(VisualFoxpro9Parser.CREATE)
                self.state = 743
                _la = self._input.LA(1)
                if not(((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & ((1 << (VisualFoxpro9Parser.TABLE - 63)) | (1 << (VisualFoxpro9Parser.DBF - 63)) | (1 << (VisualFoxpro9Parser.CURSOR - 63)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 744
                self.specialExpr()
                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.FREE:
                    self.state = 745
                    self.match(VisualFoxpro9Parser.FREE)


                self.state = 748
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 749
                self.identifier()
                self.state = 750
                self.identifier()
                self.state = 751
                self.arrayIndex()
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.COMMA:
                    self.state = 752
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 753
                    self.identifier()
                    self.state = 754
                    self.identifier()
                    self.state = 755
                    self.arrayIndex()
                    self.state = 761
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 762
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass

            elif la_ == 20:
                localctx = VisualFoxpro9Parser.AlterTableContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 764
                self.match(VisualFoxpro9Parser.ALTER)
                self.state = 765
                self.match(VisualFoxpro9Parser.TABLE)
                self.state = 766
                self.specialExpr()
                self.state = 776
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ADD]:
                    self.state = 767
                    self.match(VisualFoxpro9Parser.ADD)
                    self.state = 768
                    self.match(VisualFoxpro9Parser.COLUMN)
                    self.state = 769
                    self.identifier()
                    self.state = 770
                    self.identifier()
                    self.state = 771
                    self.arrayIndex()
                    pass
                elif token in [VisualFoxpro9Parser.DROP]:
                    self.state = 773
                    self.match(VisualFoxpro9Parser.DROP)
                    self.state = 774
                    self.match(VisualFoxpro9Parser.COLUMN)
                    self.state = 775
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                localctx = VisualFoxpro9Parser.SelectContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 778
                self.match(VisualFoxpro9Parser.SELECT)
                self.state = 805
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 779
                    localctx.tablename = self.specialExpr()
                    pass

                elif la_ == 2:
                    self.state = 781
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                    if la_ == 1:
                        self.state = 780
                        self.match(VisualFoxpro9Parser.DISTINCT)


                    self.state = 785
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.HASH, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.NODEFAULT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.ID]:
                        self.state = 783
                        self.specialArgs()
                        pass
                    elif token in [VisualFoxpro9Parser.ASTERISK]:
                        self.state = 784
                        self.match(VisualFoxpro9Parser.ASTERISK)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 789
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.FROM:
                        self.state = 787
                        self.match(VisualFoxpro9Parser.FROM)
                        self.state = 788
                        localctx.fromExpr = self.specialExpr()


                    self.state = 793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.WHERE:
                        self.state = 791
                        self.match(VisualFoxpro9Parser.WHERE)
                        self.state = 792
                        localctx.whereExpr = self.expr(0)


                    self.state = 798
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.INTO:
                        self.state = 795
                        self.match(VisualFoxpro9Parser.INTO)
                        self.state = 796
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.TABLE or _la==VisualFoxpro9Parser.CURSOR):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 797
                        localctx.intoExpr = self.specialExpr()


                    self.state = 803
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ORDER:
                        self.state = 800
                        self.match(VisualFoxpro9Parser.ORDER)
                        self.state = 801
                        self.match(VisualFoxpro9Parser.BY)
                        self.state = 802
                        localctx.orderbyid = self.identifier()


                    pass


                pass

            elif la_ == 22:
                localctx = VisualFoxpro9Parser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 807
                self.match(VisualFoxpro9Parser.USE)
                self.state = 809
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 808
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.SHARED or _la==VisualFoxpro9Parser.EXCLUSIVE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 818
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 811
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 812
                    localctx.workArea = self.specialExpr()

                elif la_ == 2:
                    self.state = 813
                    localctx.name = self.specialExpr()
                    self.state = 814
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 815
                    localctx.workArea = self.specialExpr()

                elif la_ == 3:
                    self.state = 817
                    localctx.name = self.specialExpr()


                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.SHARED or _la==VisualFoxpro9Parser.EXCLUSIVE:
                    self.state = 820
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.SHARED or _la==VisualFoxpro9Parser.EXCLUSIVE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ALIAS:
                    self.state = 823
                    self.match(VisualFoxpro9Parser.ALIAS)
                    self.state = 824
                    localctx.aliasExpr = self.specialExpr()


                pass

            elif la_ == 23:
                localctx = VisualFoxpro9Parser.LocateContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 827
                self.match(VisualFoxpro9Parser.LOCATE)
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (VisualFoxpro9Parser.FOR - 81)) | (1 << (VisualFoxpro9Parser.WHILE - 81)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 81)) | (1 << (VisualFoxpro9Parser.ALL - 81)) | (1 << (VisualFoxpro9Parser.RECORD - 81)) | (1 << (VisualFoxpro9Parser.NEXT - 81)) | (1 << (VisualFoxpro9Parser.REST - 81)))) != 0):
                    self.state = 828
                    self.queryCondition()
                    self.state = 833
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 24:
                localctx = VisualFoxpro9Parser.ContinueLocateContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 834
                self.match(VisualFoxpro9Parser.CONTINUE)
                pass

            elif la_ == 25:
                localctx = VisualFoxpro9Parser.ReplaceContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 835
                self.match(VisualFoxpro9Parser.REPLACE)
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 841
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                    if la_ == 1:
                        self.state = 836
                        self.queryCondition()
                        pass

                    elif la_ == 2:
                        self.state = 837
                        self.specialExpr()
                        self.state = 838
                        self.match(VisualFoxpro9Parser.WITH)
                        self.state = 839
                        self.expr(0)
                        pass


                    self.state = 845
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 26:
                localctx = VisualFoxpro9Parser.IndexOnContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 846
                self.match(VisualFoxpro9Parser.INDEX)
                self.state = 847
                self.match(VisualFoxpro9Parser.ON)
                self.state = 848
                self.specialExpr()
                self.state = 849
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.TO or _la==VisualFoxpro9Parser.TAG):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 850
                self.specialExpr()
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COMPACT:
                    self.state = 851
                    self.match(VisualFoxpro9Parser.COMPACT)


                self.state = 855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING:
                    self.state = 854
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.UNIQUE or _la==VisualFoxpro9Parser.CANDIDATE:
                    self.state = 857
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.UNIQUE or _la==VisualFoxpro9Parser.CANDIDATE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 860
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass

            elif la_ == 27:
                localctx = VisualFoxpro9Parser.CountContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 863
                self.match(VisualFoxpro9Parser.COUNT)
                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.TO or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (VisualFoxpro9Parser.FOR - 81)) | (1 << (VisualFoxpro9Parser.WHILE - 81)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 81)) | (1 << (VisualFoxpro9Parser.ALL - 81)) | (1 << (VisualFoxpro9Parser.RECORD - 81)) | (1 << (VisualFoxpro9Parser.NEXT - 81)) | (1 << (VisualFoxpro9Parser.REST - 81)))) != 0):
                    self.state = 867
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.TO]:
                        self.state = 864
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 865
                        localctx.toExpr = self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST]:
                        self.state = 866
                        self.queryCondition()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 871
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 28:
                localctx = VisualFoxpro9Parser.SumContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 872
                self.match(VisualFoxpro9Parser.SUM)
                self.state = 879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 877
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                    if la_ == 1:
                        self.state = 873
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 874
                        localctx.toExpr = self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 875
                        self.queryCondition()
                        pass

                    elif la_ == 3:
                        self.state = 876
                        localctx.sumExpr = self.expr(0)
                        pass


                    self.state = 881
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 29:
                localctx = VisualFoxpro9Parser.DeleteRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 882
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.DELETE or _la==VisualFoxpro9Parser.RECALL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.IN or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (VisualFoxpro9Parser.FOR - 81)) | (1 << (VisualFoxpro9Parser.WHILE - 81)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 81)) | (1 << (VisualFoxpro9Parser.ALL - 81)) | (1 << (VisualFoxpro9Parser.RECORD - 81)) | (1 << (VisualFoxpro9Parser.NEXT - 81)) | (1 << (VisualFoxpro9Parser.REST - 81)))) != 0):
                    self.state = 886
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST]:
                        self.state = 883
                        self.queryCondition()
                        pass
                    elif token in [VisualFoxpro9Parser.IN]:
                        self.state = 884
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 885
                        localctx.inExpr = self.specialExpr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 890
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 30:
                localctx = VisualFoxpro9Parser.AppendFromContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 891
                self.match(VisualFoxpro9Parser.APPEND)
                self.state = 892
                self.match(VisualFoxpro9Parser.FROM)
                self.state = 900
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                if la_ == 1:
                    self.state = 893
                    self.match(VisualFoxpro9Parser.ARRAY)
                    self.state = 894
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 895
                    self.specialExpr()
                    self.state = 896
                    self.match(VisualFoxpro9Parser.FOR)
                    self.state = 897
                    self.expr(0)
                    pass

                elif la_ == 3:
                    self.state = 899
                    self.specialExpr()
                    pass


                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.TYPE:
                    self.state = 902
                    self.match(VisualFoxpro9Parser.TYPE)
                    self.state = 903
                    localctx.typeExpr = self.specialExpr()


                pass

            elif la_ == 31:
                localctx = VisualFoxpro9Parser.AppendContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 906
                self.match(VisualFoxpro9Parser.APPEND)
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.BLANK:
                    self.state = 907
                    self.match(VisualFoxpro9Parser.BLANK)


                self.state = 916
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                if la_ == 1:
                    self.state = 910
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 911
                    self.specialExpr()
                    self.state = 912
                    self.match(VisualFoxpro9Parser.NOMENU)

                elif la_ == 2:
                    self.state = 914
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 915
                    self.specialExpr()


                pass

            elif la_ == 32:
                localctx = VisualFoxpro9Parser.InsertContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 918
                self.match(VisualFoxpro9Parser.INSERT)
                self.state = 919
                self.match(VisualFoxpro9Parser.INTO)
                self.state = 920
                self.specialExpr()
                self.state = 940
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.FROM]:
                    self.state = 921
                    self.match(VisualFoxpro9Parser.FROM)
                    self.state = 927
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.ARRAY]:
                        self.state = 922
                        self.match(VisualFoxpro9Parser.ARRAY)
                        self.state = 923
                        self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.MEMVAR]:
                        self.state = 924
                        self.match(VisualFoxpro9Parser.MEMVAR)
                        pass
                    elif token in [VisualFoxpro9Parser.NAME]:
                        self.state = 925
                        self.match(VisualFoxpro9Parser.NAME)
                        self.state = 926
                        self.expr(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.VALUES]:
                    self.state = 933
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.LEFTPAREN:
                        self.state = 929
                        self.match(VisualFoxpro9Parser.LEFTPAREN)
                        self.state = 930
                        self.specialArgs()
                        self.state = 931
                        self.match(VisualFoxpro9Parser.RIGHTPAREN)


                    self.state = 935
                    self.match(VisualFoxpro9Parser.VALUES)
                    self.state = 936
                    self.match(VisualFoxpro9Parser.LEFTPAREN)
                    self.state = 937
                    self.args()
                    self.state = 938
                    self.match(VisualFoxpro9Parser.RIGHTPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 33:
                localctx = VisualFoxpro9Parser.SkipRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 942
                self.match(VisualFoxpro9Parser.SKIPKW)
                self.state = 944
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 943
                    self.expr(0)


                self.state = 948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 946
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 947
                    self.specialExpr()


                pass

            elif la_ == 34:
                localctx = VisualFoxpro9Parser.PackContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 950
                self.match(VisualFoxpro9Parser.PACK)
                self.state = 964
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                if la_ == 1:
                    self.state = 951
                    self.match(VisualFoxpro9Parser.DATABASE)
                    pass

                elif la_ == 2:
                    self.state = 953
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                    if la_ == 1:
                        self.state = 952
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.DBF or _la==VisualFoxpro9Parser.MEMO):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 962
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                    if la_ == 1:
                        self.state = 955
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 956
                        localctx.workArea = self.specialExpr()

                    elif la_ == 2:
                        self.state = 957
                        localctx.tableName = self.specialExpr()
                        self.state = 958
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 959
                        localctx.workArea = self.specialExpr()

                    elif la_ == 3:
                        self.state = 961
                        localctx.tableName = self.specialExpr()


                    pass


                pass

            elif la_ == 35:
                localctx = VisualFoxpro9Parser.ReindexContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 966
                self.match(VisualFoxpro9Parser.REINDEX)
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COMPACT:
                    self.state = 967
                    self.match(VisualFoxpro9Parser.COMPACT)


                pass

            elif la_ == 36:
                localctx = VisualFoxpro9Parser.SeekRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 970
                self.match(VisualFoxpro9Parser.SEEK)
                self.state = 971
                localctx.seekExpr = self.expr(0)
                self.state = 986
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 981
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                    if la_ == 1:
                        self.state = 972
                        self.match(VisualFoxpro9Parser.ORDER)
                        self.state = 973
                        localctx.orderExpr = self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 974
                        self.match(VisualFoxpro9Parser.TAG)
                        self.state = 975
                        localctx.tagName = self.specialExpr()
                        self.state = 978
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.OF:
                            self.state = 976
                            self.match(VisualFoxpro9Parser.OF)
                            self.state = 977
                            localctx.cdxFileExpr = self.specialExpr()


                        pass

                    elif la_ == 3:
                        self.state = 980
                        localctx.idxFileExpr = self.specialExpr()
                        pass


                    self.state = 984
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING:
                        self.state = 983
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 988
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 989
                    localctx.tablenameExpr = self.specialExpr()


                pass

            elif la_ == 37:
                localctx = VisualFoxpro9Parser.GoRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 992
                self.match(VisualFoxpro9Parser.GOTO)
                self.state = 999
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                if la_ == 1:
                    self.state = 993
                    self.match(VisualFoxpro9Parser.TOP)
                    pass

                elif la_ == 2:
                    self.state = 994
                    self.match(VisualFoxpro9Parser.BOTTOM)
                    pass

                elif la_ == 3:
                    self.state = 996
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                    if la_ == 1:
                        self.state = 995
                        self.match(VisualFoxpro9Parser.RECORD)


                    self.state = 998
                    self.expr(0)
                    pass


                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1001
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1002
                    self.specialExpr()


                pass

            elif la_ == 38:
                localctx = VisualFoxpro9Parser.CopyToContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 1005
                self.match(VisualFoxpro9Parser.COPY)
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.STRUCTURE:
                    self.state = 1006
                    self.match(VisualFoxpro9Parser.STRUCTURE)


                self.state = 1009
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1010
                self.specialExpr()
                pass

            elif la_ == 39:
                localctx = VisualFoxpro9Parser.ZapTableContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 1011
                self.match(VisualFoxpro9Parser.ZAP)
                self.state = 1014
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1012
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1013
                    self.specialExpr()


                pass

            elif la_ == 40:
                localctx = VisualFoxpro9Parser.BrowseContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 1016
                self.match(VisualFoxpro9Parser.BROWSE)
                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)) | (1 << (VisualFoxpro9Parser.ORDER - 128)) | (1 << (VisualFoxpro9Parser.SEEK - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)) | (1 << (VisualFoxpro9Parser.DROP - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 1017
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1022
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 41:
                localctx = VisualFoxpro9Parser.ScatterExprContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 1023
                self.match(VisualFoxpro9Parser.SCATTER)
                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.FIELDS:
                    self.state = 1024
                    self.match(VisualFoxpro9Parser.FIELDS)
                    self.state = 1026
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                    if la_ == 1:
                        self.state = 1025
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.EXCEPT or _la==VisualFoxpro9Parser.LIKE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1028
                    self.expr(0)


                self.state = 1032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MEMO:
                    self.state = 1031
                    self.match(VisualFoxpro9Parser.MEMO)


                self.state = 1035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.BLANK:
                    self.state = 1034
                    self.match(VisualFoxpro9Parser.BLANK)


                self.state = 1045
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.MEMVAR]:
                    self.state = 1037
                    self.match(VisualFoxpro9Parser.MEMVAR)
                    pass
                elif token in [VisualFoxpro9Parser.NAME]:
                    self.state = 1038
                    self.match(VisualFoxpro9Parser.NAME)
                    self.state = 1039
                    self.expr(0)
                    self.state = 1041
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ADDITIVE:
                        self.state = 1040
                        self.match(VisualFoxpro9Parser.ADDITIVE)


                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1043
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1044
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 42:
                localctx = VisualFoxpro9Parser.GatherExprContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 1047
                self.match(VisualFoxpro9Parser.GATHER)
                self.state = 1053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.FIELDS:
                    self.state = 1048
                    self.match(VisualFoxpro9Parser.FIELDS)
                    self.state = 1050
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                    if la_ == 1:
                        self.state = 1049
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.EXCEPT or _la==VisualFoxpro9Parser.LIKE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1052
                    self.expr(0)


                self.state = 1056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MEMO:
                    self.state = 1055
                    self.match(VisualFoxpro9Parser.MEMO)


                self.state = 1058
                self.match(VisualFoxpro9Parser.FROM)
                self.state = 1063
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                if la_ == 1:
                    self.state = 1059
                    self.match(VisualFoxpro9Parser.MEMVAR)
                    pass

                elif la_ == 2:
                    self.state = 1060
                    self.match(VisualFoxpro9Parser.NAME)
                    self.state = 1061
                    self.expr(0)
                    pass

                elif la_ == 3:
                    self.state = 1062
                    self.expr(0)
                    pass


                pass

            elif la_ == 43:
                localctx = VisualFoxpro9Parser.CloseStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 1065
                self.match(VisualFoxpro9Parser.CLOSE)
                self.state = 1071
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES]:
                    self.state = 1066
                    _la = self._input.LA(1)
                    if not(((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (VisualFoxpro9Parser.DATABASE - 225)) | (1 << (VisualFoxpro9Parser.TABLES - 225)) | (1 << (VisualFoxpro9Parser.INDEXES - 225)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1068
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ALL:
                        self.state = 1067
                        self.match(VisualFoxpro9Parser.ALL)


                    pass
                elif token in [VisualFoxpro9Parser.ALL]:
                    self.state = 1070
                    self.match(VisualFoxpro9Parser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 44:
                localctx = VisualFoxpro9Parser.ReadEventContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 1073
                self.match(VisualFoxpro9Parser.READ)
                self.state = 1074
                self.match(VisualFoxpro9Parser.EVENTS)
                pass

            elif la_ == 45:
                localctx = VisualFoxpro9Parser.ClearStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 1075
                self.match(VisualFoxpro9Parser.CLEAR)
                self.state = 1102
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ALL]:
                    self.state = 1076
                    self.match(VisualFoxpro9Parser.ALL)
                    pass
                elif token in [VisualFoxpro9Parser.CLASS]:
                    self.state = 1077
                    self.match(VisualFoxpro9Parser.CLASS)
                    self.state = 1078
                    self.expr(0)
                    pass
                elif token in [VisualFoxpro9Parser.CLASSLIB]:
                    self.state = 1079
                    self.match(VisualFoxpro9Parser.CLASSLIB)
                    self.state = 1080
                    self.specialExpr()
                    pass
                elif token in [VisualFoxpro9Parser.DEBUG]:
                    self.state = 1081
                    self.match(VisualFoxpro9Parser.DEBUG)
                    pass
                elif token in [VisualFoxpro9Parser.DLLS]:
                    self.state = 1082
                    self.match(VisualFoxpro9Parser.DLLS)
                    self.state = 1083
                    self.specialArgs()
                    pass
                elif token in [VisualFoxpro9Parser.EVENTS]:
                    self.state = 1084
                    self.match(VisualFoxpro9Parser.EVENTS)
                    pass
                elif token in [VisualFoxpro9Parser.ERROR]:
                    self.state = 1085
                    self.match(VisualFoxpro9Parser.ERROR)
                    pass
                elif token in [VisualFoxpro9Parser.FIELDS]:
                    self.state = 1086
                    self.match(VisualFoxpro9Parser.FIELDS)
                    pass
                elif token in [VisualFoxpro9Parser.GETS]:
                    self.state = 1087
                    self.match(VisualFoxpro9Parser.GETS)
                    pass
                elif token in [VisualFoxpro9Parser.MACROS]:
                    self.state = 1088
                    self.match(VisualFoxpro9Parser.MACROS)
                    pass
                elif token in [VisualFoxpro9Parser.MEMORY]:
                    self.state = 1089
                    self.match(VisualFoxpro9Parser.MEMORY)
                    pass
                elif token in [VisualFoxpro9Parser.MENUS]:
                    self.state = 1090
                    self.match(VisualFoxpro9Parser.MENUS)
                    pass
                elif token in [VisualFoxpro9Parser.POPUP]:
                    self.state = 1091
                    self.match(VisualFoxpro9Parser.POPUP)
                    pass
                elif token in [VisualFoxpro9Parser.PROGRAM]:
                    self.state = 1092
                    self.match(VisualFoxpro9Parser.PROGRAM)
                    pass
                elif token in [VisualFoxpro9Parser.PROMPT]:
                    self.state = 1093
                    self.match(VisualFoxpro9Parser.PROMPT)
                    pass
                elif token in [VisualFoxpro9Parser.READ]:
                    self.state = 1094
                    self.match(VisualFoxpro9Parser.READ)
                    self.state = 1096
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ALL:
                        self.state = 1095
                        self.match(VisualFoxpro9Parser.ALL)


                    pass
                elif token in [VisualFoxpro9Parser.RESOURCES]:
                    self.state = 1098
                    self.match(VisualFoxpro9Parser.RESOURCES)
                    self.state = 1099
                    self.expr(0)
                    pass
                elif token in [VisualFoxpro9Parser.TYPEAHEAD]:
                    self.state = 1100
                    self.match(VisualFoxpro9Parser.TYPEAHEAD)
                    pass
                elif token in [VisualFoxpro9Parser.WINDOW]:
                    self.state = 1101
                    self.match(VisualFoxpro9Parser.WINDOW)
                    pass
                elif token in [VisualFoxpro9Parser.EOF, VisualFoxpro9Parser.NL]:
                    pass
                else:
                    pass
                pass

            elif la_ == 46:
                localctx = VisualFoxpro9Parser.ReportContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 1104
                self.match(VisualFoxpro9Parser.REPORT)
                self.state = 1105
                self.match(VisualFoxpro9Parser.FORM)
                self.state = 1108
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.QUESTION]:
                    self.state = 1106
                    self.match(VisualFoxpro9Parser.QUESTION)
                    pass
                elif token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.HASH, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.NODEFAULT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.ID]:
                    self.state = 1107
                    self.specialExpr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.TO or _la==VisualFoxpro9Parser.NOEJECT or _la==VisualFoxpro9Parser.NOCONSOLE:
                    self.state = 1117
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.NOEJECT]:
                        self.state = 1110
                        self.match(VisualFoxpro9Parser.NOEJECT)
                        pass
                    elif token in [VisualFoxpro9Parser.TO]:
                        self.state = 1111
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1112
                        self.match(VisualFoxpro9Parser.PRINTER)
                        self.state = 1114
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.PROMPT:
                            self.state = 1113
                            self.match(VisualFoxpro9Parser.PROMPT)


                        pass
                    elif token in [VisualFoxpro9Parser.NOCONSOLE]:
                        self.state = 1116
                        self.match(VisualFoxpro9Parser.NOCONSOLE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1121
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 47:
                localctx = VisualFoxpro9Parser.DllDeclareContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 1122
                self.match(VisualFoxpro9Parser.DECLARE)
                self.state = 1124
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                if la_ == 1:
                    self.state = 1123
                    localctx.returnType = self.datatype()


                self.state = 1126
                self.identifier()
                self.state = 1127
                self.match(VisualFoxpro9Parser.IN)
                self.state = 1128
                self.specialExpr()
                self.state = 1131
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1129
                    self.match(VisualFoxpro9Parser.AS)
                    self.state = 1130
                    localctx.alias = self.identifier()


                self.state = 1134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 1133
                    self.dllArgs()


                pass

            elif la_ == 48:
                localctx = VisualFoxpro9Parser.NodefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 1136
                self.match(VisualFoxpro9Parser.NODEFAULT)
                pass

            elif la_ == 49:
                localctx = VisualFoxpro9Parser.ShellRunContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 1137
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.EXCLAMATION or _la==VisualFoxpro9Parser.RUN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1140
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                if la_ == 1:
                    self.state = 1138
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    self.state = 1139
                    self.identifier()


                self.state = 1145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)) | (1 << (VisualFoxpro9Parser.ORDER - 128)) | (1 << (VisualFoxpro9Parser.SEEK - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)) | (1 << (VisualFoxpro9Parser.DROP - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 1142
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1147
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 50:
                localctx = VisualFoxpro9Parser.AssertContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 1148
                self.match(VisualFoxpro9Parser.ASSERT)
                self.state = 1149
                self.expr(0)
                self.state = 1152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MESSAGE:
                    self.state = 1150
                    self.match(VisualFoxpro9Parser.MESSAGE)
                    self.state = 1151
                    self.expr(0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryConditionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.QueryConditionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def scopeClause(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScopeClauseContext,0)


        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def WHILE(self):
            return self.getToken(VisualFoxpro9Parser.WHILE, 0)

        def NOOPTIMIZE(self):
            return self.getToken(VisualFoxpro9Parser.NOOPTIMIZE, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_queryCondition

        def accept(self, visitor):
            if hasattr(visitor, "visitQueryCondition"):
                return visitor.visitQueryCondition(self)
            else:
                return visitor.visitChildren(self)




    def queryCondition(self):

        localctx = VisualFoxpro9Parser.QueryConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_queryCondition)
        try:
            self.state = 1162
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1156
                self.scopeClause()
                pass
            elif token in [VisualFoxpro9Parser.FOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1157
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 1158
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.WHILE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1159
                self.match(VisualFoxpro9Parser.WHILE)
                self.state = 1160
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.NOOPTIMIZE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1161
                self.match(VisualFoxpro9Parser.NOOPTIMIZE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DllArgsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DllArgsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def dllArg(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.DllArgContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.DllArgContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_dllArgs

        def accept(self, visitor):
            if hasattr(visitor, "visitDllArgs"):
                return visitor.visitDllArgs(self)
            else:
                return visitor.visitChildren(self)




    def dllArgs(self):

        localctx = VisualFoxpro9Parser.DllArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dllArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            self.dllArg()
            self.state = 1169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.COMMA:
                self.state = 1165
                self.match(VisualFoxpro9Parser.COMMA)
                self.state = 1166
                self.dllArg()
                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DllArgContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DllArgContext, self).__init__(parent, invokingState)
            self.parser = parser

        def datatype(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DatatypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_dllArg

        def accept(self, visitor):
            if hasattr(visitor, "visitDllArg"):
                return visitor.visitDllArg(self)
            else:
                return visitor.visitChildren(self)




    def dllArg(self):

        localctx = VisualFoxpro9Parser.DllArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dllArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self.datatype()
            self.state = 1174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.COMMERCIALAT:
                self.state = 1173
                self.match(VisualFoxpro9Parser.COMMERCIALAT)


            self.state = 1177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (VisualFoxpro9Parser.ASSERT - 39)) | (1 << (VisualFoxpro9Parser.TO - 39)) | (1 << (VisualFoxpro9Parser.DO - 39)) | (1 << (VisualFoxpro9Parser.IN - 39)) | (1 << (VisualFoxpro9Parser.AS - 39)) | (1 << (VisualFoxpro9Parser.IF - 39)) | (1 << (VisualFoxpro9Parser.ELIF - 39)) | (1 << (VisualFoxpro9Parser.ELSE - 39)) | (1 << (VisualFoxpro9Parser.ENDIF - 39)) | (1 << (VisualFoxpro9Parser.ON - 39)) | (1 << (VisualFoxpro9Parser.OFF - 39)) | (1 << (VisualFoxpro9Parser.ERROR - 39)) | (1 << (VisualFoxpro9Parser.WITH - 39)) | (1 << (VisualFoxpro9Parser.STORE - 39)) | (1 << (VisualFoxpro9Parser.EXTERNAL - 39)) | (1 << (VisualFoxpro9Parser.ARRAY - 39)) | (1 << (VisualFoxpro9Parser.DELETE - 39)) | (1 << (VisualFoxpro9Parser.RECALL - 39)) | (1 << (VisualFoxpro9Parser.FILE - 39)) | (1 << (VisualFoxpro9Parser.SET - 39)) | (1 << (VisualFoxpro9Parser.RELEASE - 39)) | (1 << (VisualFoxpro9Parser.RECYCLE - 39)) | (1 << (VisualFoxpro9Parser.CREATE - 39)) | (1 << (VisualFoxpro9Parser.TABLE - 39)) | (1 << (VisualFoxpro9Parser.DBF - 39)) | (1 << (VisualFoxpro9Parser.NAME - 39)) | (1 << (VisualFoxpro9Parser.FREE - 39)) | (1 << (VisualFoxpro9Parser.SELECT - 39)) | (1 << (VisualFoxpro9Parser.USE - 39)) | (1 << (VisualFoxpro9Parser.READ - 39)) | (1 << (VisualFoxpro9Parser.EVENTS - 39)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 39)) | (1 << (VisualFoxpro9Parser.CLEAR - 39)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 39)) | (1 << (VisualFoxpro9Parser.ENDPROC - 39)) | (1 << (VisualFoxpro9Parser.DEFINE - 39)) | (1 << (VisualFoxpro9Parser.CLASS - 39)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 39)) | (1 << (VisualFoxpro9Parser.LOCATE - 39)) | (1 << (VisualFoxpro9Parser.CONTINUE - 39)) | (1 << (VisualFoxpro9Parser.FOR - 39)) | (1 << (VisualFoxpro9Parser.ENDFOR - 39)) | (1 << (VisualFoxpro9Parser.WHILE - 39)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 39)) | (1 << (VisualFoxpro9Parser.STATUS - 39)) | (1 << (VisualFoxpro9Parser.BAR - 39)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 39)) | (1 << (VisualFoxpro9Parser.CURSOR - 39)) | (1 << (VisualFoxpro9Parser.REFRESH - 39)) | (1 << (VisualFoxpro9Parser.BELL - 39)) | (1 << (VisualFoxpro9Parser.CENTURY - 39)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 39)) | (1 << (VisualFoxpro9Parser.DATE - 39)) | (1 << (VisualFoxpro9Parser.ADD - 39)) | (1 << (VisualFoxpro9Parser.OBJECT - 39)) | (1 << (VisualFoxpro9Parser.REPLACE - 39)) | (1 << (VisualFoxpro9Parser.LIBRARY - 39)) | (1 << (VisualFoxpro9Parser.SHARED - 39)) | (1 << (VisualFoxpro9Parser.WAIT - 39)) | (1 << (VisualFoxpro9Parser.WINDOW - 39)) | (1 << (VisualFoxpro9Parser.NOWAIT - 39)))) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (VisualFoxpro9Parser.NOCLEAR - 103)) | (1 << (VisualFoxpro9Parser.NOTIFY - 103)) | (1 << (VisualFoxpro9Parser.ENDDO - 103)) | (1 << (VisualFoxpro9Parser.DECLARE - 103)) | (1 << (VisualFoxpro9Parser.ERASE - 103)) | (1 << (VisualFoxpro9Parser.SYSMENU - 103)) | (1 << (VisualFoxpro9Parser.CLOCK - 103)) | (1 << (VisualFoxpro9Parser.RETURN - 103)) | (1 << (VisualFoxpro9Parser.PARAMETER - 103)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 103)) | (1 << (VisualFoxpro9Parser.EXACT - 103)) | (1 << (VisualFoxpro9Parser.ALL - 103)) | (1 << (VisualFoxpro9Parser.COUNT - 103)) | (1 << (VisualFoxpro9Parser.GOTO - 103)) | (1 << (VisualFoxpro9Parser.TOP - 103)) | (1 << (VisualFoxpro9Parser.BOTTOM - 103)) | (1 << (VisualFoxpro9Parser.RECORD - 103)) | (1 << (VisualFoxpro9Parser.CLOSE - 103)) | (1 << (VisualFoxpro9Parser.APPEND - 103)) | (1 << (VisualFoxpro9Parser.BLANK - 103)) | (1 << (VisualFoxpro9Parser.NOMENU - 103)) | (1 << (VisualFoxpro9Parser.CASE - 103)) | (1 << (VisualFoxpro9Parser.ENDCASE - 103)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 103)) | (1 << (VisualFoxpro9Parser.FROM - 103)) | (1 << (VisualFoxpro9Parser.REPORT - 103)) | (1 << (VisualFoxpro9Parser.FORM - 103)) | (1 << (VisualFoxpro9Parser.NOEJECT - 103)) | (1 << (VisualFoxpro9Parser.PRINTER - 103)) | (1 << (VisualFoxpro9Parser.PROMPT - 103)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 103)) | (1 << (VisualFoxpro9Parser.DB4 - 103)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 103)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 103)) | (1 << (VisualFoxpro9Parser.COPY - 103)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 103)) | (1 << (VisualFoxpro9Parser.DELETED - 103)) | (1 << (VisualFoxpro9Parser.SUM - 103)) | (1 << (VisualFoxpro9Parser.DISTINCT - 103)) | (1 << (VisualFoxpro9Parser.INTO - 103)) | (1 << (VisualFoxpro9Parser.NEXT - 103)) | (1 << (VisualFoxpro9Parser.REST - 103)) | (1 << (VisualFoxpro9Parser.SKIPKW - 103)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 103)) | (1 << (VisualFoxpro9Parser.NEAR - 103)) | (1 << (VisualFoxpro9Parser.MKDIR - 103)) | (1 << (VisualFoxpro9Parser.RMDIR - 103)) | (1 << (VisualFoxpro9Parser.KEY - 103)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 103)) | (1 << (VisualFoxpro9Parser.LABEL - 103)) | (1 << (VisualFoxpro9Parser.PLAIN - 103)) | (1 << (VisualFoxpro9Parser.MENU - 103)) | (1 << (VisualFoxpro9Parser.AT - 103)) | (1 << (VisualFoxpro9Parser.LINE - 103)) | (1 << (VisualFoxpro9Parser.SCREEN - 103)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 103)) | (1 << (VisualFoxpro9Parser.PAD - 103)) | (1 << (VisualFoxpro9Parser.OF - 103)) | (1 << (VisualFoxpro9Parser.COLOR - 103)) | (1 << (VisualFoxpro9Parser.SCHEME - 103)) | (1 << (VisualFoxpro9Parser.BEFORE - 103)) | (1 << (VisualFoxpro9Parser.AFTER - 103)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 103)) | (1 << (VisualFoxpro9Parser.FONT - 103)))) != 0) or ((((_la - 167)) & ~0x3f) == 0 and ((1 << (_la - 167)) & ((1 << (VisualFoxpro9Parser.STYLE - 167)) | (1 << (VisualFoxpro9Parser.MARK - 167)) | (1 << (VisualFoxpro9Parser.MESSAGE - 167)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 167)) | (1 << (VisualFoxpro9Parser.POPUP - 167)) | (1 << (VisualFoxpro9Parser.EXTENDED - 167)) | (1 << (VisualFoxpro9Parser.SHADOW - 167)) | (1 << (VisualFoxpro9Parser.MARGIN - 167)) | (1 << (VisualFoxpro9Parser.RELATIVE - 167)) | (1 << (VisualFoxpro9Parser.SELECTION - 167)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 167)) | (1 << (VisualFoxpro9Parser.SAME - 167)) | (1 << (VisualFoxpro9Parser.NOSHOW - 167)) | (1 << (VisualFoxpro9Parser.STEP - 167)) | (1 << (VisualFoxpro9Parser.THEN - 167)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 167)) | (1 << (VisualFoxpro9Parser.IFDEF - 167)) | (1 << (VisualFoxpro9Parser.PUSH - 167)) | (1 << (VisualFoxpro9Parser.POP - 167)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 167)) | (1 << (VisualFoxpro9Parser.ENDWITH - 167)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 167)) | (1 << (VisualFoxpro9Parser.ALIAS - 167)) | (1 << (VisualFoxpro9Parser.ORDER - 167)) | (1 << (VisualFoxpro9Parser.SEEK - 167)) | (1 << (VisualFoxpro9Parser.WHERE - 167)) | (1 << (VisualFoxpro9Parser.FILTER - 167)) | (1 << (VisualFoxpro9Parser.RENAME - 167)) | (1 << (VisualFoxpro9Parser.INCLUDE - 167)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 167)) | (1 << (VisualFoxpro9Parser.BY - 167)) | (1 << (VisualFoxpro9Parser.UNIQUE - 167)) | (1 << (VisualFoxpro9Parser.INDEX - 167)) | (1 << (VisualFoxpro9Parser.TAG - 167)) | (1 << (VisualFoxpro9Parser.COMPACT - 167)) | (1 << (VisualFoxpro9Parser.ASCENDING - 167)) | (1 << (VisualFoxpro9Parser.DESCENDING - 167)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 167)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 167)) | (1 << (VisualFoxpro9Parser.DIMENSION - 167)) | (1 << (VisualFoxpro9Parser.NOT - 167)) | (1 << (VisualFoxpro9Parser.AND - 167)) | (1 << (VisualFoxpro9Parser.OR - 167)) | (1 << (VisualFoxpro9Parser.SCAN - 167)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 167)) | (1 << (VisualFoxpro9Parser.NULL - 167)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 167)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 167)) | (1 << (VisualFoxpro9Parser.DLLS - 167)) | (1 << (VisualFoxpro9Parser.MACROS - 167)) | (1 << (VisualFoxpro9Parser.NUMBER - 167)) | (1 << (VisualFoxpro9Parser.ZAP - 167)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 167)) | (1 << (VisualFoxpro9Parser.DEFAULT - 167)) | (1 << (VisualFoxpro9Parser.SAVE - 167)) | (1 << (VisualFoxpro9Parser.NOSAVE - 167)) | (1 << (VisualFoxpro9Parser.DATABASE - 167)) | (1 << (VisualFoxpro9Parser.TABLES - 167)) | (1 << (VisualFoxpro9Parser.INDEXES - 167)) | (1 << (VisualFoxpro9Parser.PACK - 167)) | (1 << (VisualFoxpro9Parser.REINDEX - 167)))) != 0) or ((((_la - 231)) & ~0x3f) == 0 and ((1 << (_la - 231)) & ((1 << (VisualFoxpro9Parser.PROGRAM - 231)) | (1 << (VisualFoxpro9Parser.SCOPE - 231)) | (1 << (VisualFoxpro9Parser.THROW - 231)) | (1 << (VisualFoxpro9Parser.EACH - 231)) | (1 << (VisualFoxpro9Parser.CAST - 231)) | (1 << (VisualFoxpro9Parser.RUN - 231)) | (1 << (VisualFoxpro9Parser.TRY - 231)) | (1 << (VisualFoxpro9Parser.CATCH - 231)) | (1 << (VisualFoxpro9Parser.FINALLY - 231)) | (1 << (VisualFoxpro9Parser.ENDTRY - 231)) | (1 << (VisualFoxpro9Parser.BROWSE - 231)) | (1 << (VisualFoxpro9Parser.INSERT - 231)) | (1 << (VisualFoxpro9Parser.VALUES - 231)) | (1 << (VisualFoxpro9Parser.MEMVAR - 231)) | (1 << (VisualFoxpro9Parser.TYPE - 231)) | (1 << (VisualFoxpro9Parser.SCATTER - 231)) | (1 << (VisualFoxpro9Parser.GATHER - 231)) | (1 << (VisualFoxpro9Parser.EXCEPT - 231)) | (1 << (VisualFoxpro9Parser.LIKE - 231)) | (1 << (VisualFoxpro9Parser.FIELDS - 231)) | (1 << (VisualFoxpro9Parser.ALTER - 231)) | (1 << (VisualFoxpro9Parser.COLUMN - 231)) | (1 << (VisualFoxpro9Parser.DROP - 231)) | (1 << (VisualFoxpro9Parser.HELP - 231)) | (1 << (VisualFoxpro9Parser.SAY - 231)) | (1 << (VisualFoxpro9Parser.COLLECTION - 231)) | (1 << (VisualFoxpro9Parser.SYSTEM - 231)) | (1 << (VisualFoxpro9Parser.TALK - 231)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 231)) | (1 << (VisualFoxpro9Parser.RELATION - 231)) | (1 << (VisualFoxpro9Parser.ID - 231)))) != 0):
                self.state = 1176
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrintStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PrintStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEBUGOUT(self):
            return self.getToken(VisualFoxpro9Parser.DEBUGOUT, 0)

        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_printStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitPrintStmt"):
                return visitor.visitPrintStmt(self)
            else:
                return visitor.visitChildren(self)




    def printStmt(self):

        localctx = VisualFoxpro9Parser.PrintStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_printStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.QUESTION]:
                self.state = 1179
                self.match(VisualFoxpro9Parser.QUESTION)
                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.QUESTION:
                    self.state = 1180
                    self.match(VisualFoxpro9Parser.QUESTION)


                pass
            elif token in [VisualFoxpro9Parser.DEBUGOUT]:
                self.state = 1183
                self.match(VisualFoxpro9Parser.DEBUGOUT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                self.state = 1186
                self.args()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WaitCmdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.WaitCmdContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.toExpr = None # ExprContext
            self.atExpr1 = None # ExprContext
            self.atExpr2 = None # ExprContext
            self.timeout = None # ExprContext
            self.message = None # ExprContext

        def WAIT(self):
            return self.getToken(VisualFoxpro9Parser.WAIT, 0)

        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)

        def WINDOW(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WINDOW)
            else:
                return self.getToken(VisualFoxpro9Parser.WINDOW, i)

        def NOWAIT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOWAIT)
            else:
                return self.getToken(VisualFoxpro9Parser.NOWAIT, i)

        def CLEAR(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.CLEAR)
            else:
                return self.getToken(VisualFoxpro9Parser.CLEAR, i)

        def NOCLEAR(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOCLEAR)
            else:
                return self.getToken(VisualFoxpro9Parser.NOCLEAR, i)

        def TIMEOUT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TIMEOUT)
            else:
                return self.getToken(VisualFoxpro9Parser.TIMEOUT, i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def AT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.AT)
            else:
                return self.getToken(VisualFoxpro9Parser.AT, i)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_waitCmd

        def accept(self, visitor):
            if hasattr(visitor, "visitWaitCmd"):
                return visitor.visitWaitCmd(self)
            else:
                return visitor.visitChildren(self)




    def waitCmd(self):

        localctx = VisualFoxpro9Parser.WaitCmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_waitCmd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.match(VisualFoxpro9Parser.WAIT)
            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                self.state = 1206
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1190
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1191
                    localctx.toExpr = self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 1192
                    self.match(VisualFoxpro9Parser.WINDOW)
                    self.state = 1198
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                    if la_ == 1:
                        self.state = 1193
                        self.match(VisualFoxpro9Parser.AT)
                        self.state = 1194
                        localctx.atExpr1 = self.expr(0)
                        self.state = 1195
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 1196
                        localctx.atExpr2 = self.expr(0)


                    pass

                elif la_ == 3:
                    self.state = 1200
                    self.match(VisualFoxpro9Parser.NOWAIT)
                    pass

                elif la_ == 4:
                    self.state = 1201
                    self.match(VisualFoxpro9Parser.CLEAR)
                    pass

                elif la_ == 5:
                    self.state = 1202
                    self.match(VisualFoxpro9Parser.NOCLEAR)
                    pass

                elif la_ == 6:
                    self.state = 1203
                    self.match(VisualFoxpro9Parser.TIMEOUT)
                    self.state = 1204
                    localctx.timeout = self.expr(0)
                    pass

                elif la_ == 7:
                    self.state = 1205
                    localctx.message = self.expr(0)
                    pass


                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FilesystemCmdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.FilesystemCmdContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_filesystemCmd

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.FilesystemCmdContext, self).copyFrom(ctx)



    class DeleteFileContext(FilesystemCmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.FilesystemCmdContext)
            super(VisualFoxpro9Parser.DeleteFileContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ERASE(self):
            return self.getToken(VisualFoxpro9Parser.ERASE, 0)
        def DELETE(self):
            return self.getToken(VisualFoxpro9Parser.DELETE, 0)
        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def RECYCLE(self):
            return self.getToken(VisualFoxpro9Parser.RECYCLE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDeleteFile"):
                return visitor.visitDeleteFile(self)
            else:
                return visitor.visitChildren(self)


    class ChMkRmDirContext(FilesystemCmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.FilesystemCmdContext)
            super(VisualFoxpro9Parser.ChMkRmDirContext, self).__init__(parser)
            self.copyFrom(ctx)

        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def CHDIR(self):
            return self.getToken(VisualFoxpro9Parser.CHDIR, 0)
        def MKDIR(self):
            return self.getToken(VisualFoxpro9Parser.MKDIR, 0)
        def RMDIR(self):
            return self.getToken(VisualFoxpro9Parser.RMDIR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitChMkRmDir"):
                return visitor.visitChMkRmDir(self)
            else:
                return visitor.visitChildren(self)


    class CopyMoveFileContext(FilesystemCmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.FilesystemCmdContext)
            super(VisualFoxpro9Parser.CopyMoveFileContext, self).__init__(parser)
            self.copyFrom(ctx)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def RENAME(self):
            return self.getToken(VisualFoxpro9Parser.RENAME, 0)
        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)
        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCopyMoveFile"):
                return visitor.visitCopyMoveFile(self)
            else:
                return visitor.visitChildren(self)



    def filesystemCmd(self):

        localctx = VisualFoxpro9Parser.FilesystemCmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_filesystemCmd)
        self._la = 0 # Token type
        try:
            self.state = 1234
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.ERASE]:
                localctx = VisualFoxpro9Parser.DeleteFileContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1214
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ERASE]:
                    self.state = 1211
                    self.match(VisualFoxpro9Parser.ERASE)
                    pass
                elif token in [VisualFoxpro9Parser.DELETE]:
                    self.state = 1212
                    self.match(VisualFoxpro9Parser.DELETE)
                    self.state = 1213
                    self.match(VisualFoxpro9Parser.FILE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1218
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.HASH, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.NODEFAULT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.ID]:
                    self.state = 1216
                    self.specialExpr()
                    pass
                elif token in [VisualFoxpro9Parser.QUESTION]:
                    self.state = 1217
                    self.match(VisualFoxpro9Parser.QUESTION)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.RECYCLE:
                    self.state = 1220
                    self.match(VisualFoxpro9Parser.RECYCLE)


                pass
            elif token in [VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.RENAME]:
                localctx = VisualFoxpro9Parser.CopyMoveFileContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1226
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.RENAME]:
                    self.state = 1223
                    self.match(VisualFoxpro9Parser.RENAME)
                    pass
                elif token in [VisualFoxpro9Parser.COPY]:
                    self.state = 1224
                    self.match(VisualFoxpro9Parser.COPY)
                    self.state = 1225
                    self.match(VisualFoxpro9Parser.FILE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1228
                self.specialExpr()
                self.state = 1229
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1230
                self.specialExpr()
                pass
            elif token in [VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.CHDIR]:
                localctx = VisualFoxpro9Parser.ChMkRmDirContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1232
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.MKDIR or _la==VisualFoxpro9Parser.RMDIR or _la==VisualFoxpro9Parser.CHDIR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1233
                self.specialExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ReturnStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(VisualFoxpro9Parser.RETURN, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_returnStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitReturnStmt"):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = VisualFoxpro9Parser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self.match(VisualFoxpro9Parser.RETURN)
            self.state = 1238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                self.state = 1237
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetupContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SetupContext, self).__init__(parent, invokingState)
            self.parser = parser

        def onError(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.OnErrorContext,0)


        def setStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SetStmtContext,0)


        def onShutdown(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.OnShutdownContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_setup

        def accept(self, visitor):
            if hasattr(visitor, "visitSetup"):
                return visitor.visitSetup(self)
            else:
                return visitor.visitChildren(self)




    def setup(self):

        localctx = VisualFoxpro9Parser.SetupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_setup)
        try:
            self.state = 1243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1240
                self.onError()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1241
                self.setStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1242
                self.onShutdown()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OnErrorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.OnErrorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)

        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)

        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_onError

        def accept(self, visitor):
            if hasattr(visitor, "visitOnError"):
                return visitor.visitOnError(self)
            else:
                return visitor.visitChildren(self)




    def onError(self):

        localctx = VisualFoxpro9Parser.OnErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_onError)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            self.match(VisualFoxpro9Parser.ON)
            self.state = 1246
            self.match(VisualFoxpro9Parser.ERROR)
            self.state = 1248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.CHDIR - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (VisualFoxpro9Parser.DEBUGOUT - 258)) | (1 << (VisualFoxpro9Parser.HELP - 258)) | (1 << (VisualFoxpro9Parser.SAY - 258)) | (1 << (VisualFoxpro9Parser.COLLECTION - 258)) | (1 << (VisualFoxpro9Parser.SYSTEM - 258)) | (1 << (VisualFoxpro9Parser.TALK - 258)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 258)) | (1 << (VisualFoxpro9Parser.RELATION - 258)) | (1 << (VisualFoxpro9Parser.ID - 258)))) != 0):
                self.state = 1247
                self.cmd()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OnShutdownContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.OnShutdownContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)

        def SHUTDOWN(self):
            return self.getToken(VisualFoxpro9Parser.SHUTDOWN, 0)

        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_onShutdown

        def accept(self, visitor):
            if hasattr(visitor, "visitOnShutdown"):
                return visitor.visitOnShutdown(self)
            else:
                return visitor.visitChildren(self)




    def onShutdown(self):

        localctx = VisualFoxpro9Parser.OnShutdownContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_onShutdown)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1250
            self.match(VisualFoxpro9Parser.ON)
            self.state = 1251
            self.match(VisualFoxpro9Parser.SHUTDOWN)
            self.state = 1253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.CHDIR - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (VisualFoxpro9Parser.DEBUGOUT - 258)) | (1 << (VisualFoxpro9Parser.HELP - 258)) | (1 << (VisualFoxpro9Parser.SAY - 258)) | (1 << (VisualFoxpro9Parser.COLLECTION - 258)) | (1 << (VisualFoxpro9Parser.SYSTEM - 258)) | (1 << (VisualFoxpro9Parser.TALK - 258)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 258)) | (1 << (VisualFoxpro9Parser.RELATION - 258)) | (1 << (VisualFoxpro9Parser.ID - 258)))) != 0):
                self.state = 1252
                self.cmd()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SetStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(VisualFoxpro9Parser.SET, 0)

        def setCmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SetCmdContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_setStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitSetStmt"):
                return visitor.visitSetStmt(self)
            else:
                return visitor.visitChildren(self)




    def setStmt(self):

        localctx = VisualFoxpro9Parser.SetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_setStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            self.match(VisualFoxpro9Parser.SET)
            self.state = 1256
            self.setCmd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetCmdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SetCmdContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.setword = None # Token
            self.ofExpr = None # SpecialExprContext
            self.inExpr = None # SpecialExprContext

        def ALTERNATE(self):
            return self.getToken(VisualFoxpro9Parser.ALTERNATE, 0)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)

        def OFF(self):
            return self.getToken(VisualFoxpro9Parser.OFF, 0)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)

        def ASSERTS(self):
            return self.getToken(VisualFoxpro9Parser.ASSERTS, 0)

        def BELL(self):
            return self.getToken(VisualFoxpro9Parser.BELL, 0)

        def CENTURY(self):
            return self.getToken(VisualFoxpro9Parser.CENTURY, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def ROLLOVER(self):
            return self.getToken(VisualFoxpro9Parser.ROLLOVER, 0)

        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)

        def ALIAS(self):
            return self.getToken(VisualFoxpro9Parser.ALIAS, 0)

        def CLOCK(self):
            return self.getToken(VisualFoxpro9Parser.CLOCK, 0)

        def STATUS(self):
            return self.getToken(VisualFoxpro9Parser.STATUS, 0)

        def COMPATIBLE(self):
            return self.getToken(VisualFoxpro9Parser.COMPATIBLE, 0)

        def DB4(self):
            return self.getToken(VisualFoxpro9Parser.DB4, 0)

        def FOXPLUS(self):
            return self.getToken(VisualFoxpro9Parser.FOXPLUS, 0)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)

        def NOPROMPT(self):
            return self.getToken(VisualFoxpro9Parser.NOPROMPT, 0)

        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def DATE(self):
            return self.getToken(VisualFoxpro9Parser.DATE, 0)

        def DELETED(self):
            return self.getToken(VisualFoxpro9Parser.DELETED, 0)

        def EXACT(self):
            return self.getToken(VisualFoxpro9Parser.EXACT, 0)

        def EXCLUSIVE(self):
            return self.getToken(VisualFoxpro9Parser.EXCLUSIVE, 0)

        def FILTER(self):
            return self.getToken(VisualFoxpro9Parser.FILTER, 0)

        def HELP(self):
            return self.getToken(VisualFoxpro9Parser.HELP, 0)

        def COLLECTION(self):
            return self.getToken(VisualFoxpro9Parser.COLLECTION, 0)

        def SYSTEM(self):
            return self.getToken(VisualFoxpro9Parser.SYSTEM, 0)

        def INDEX(self):
            return self.getToken(VisualFoxpro9Parser.INDEX, 0)

        def LIBRARY(self):
            return self.getToken(VisualFoxpro9Parser.LIBRARY, 0)

        def MEMOWIDTH(self):
            return self.getToken(VisualFoxpro9Parser.MEMOWIDTH, 0)

        def MULTILOCKS(self):
            return self.getToken(VisualFoxpro9Parser.MULTILOCKS, 0)

        def NEAR(self):
            return self.getToken(VisualFoxpro9Parser.NEAR, 0)

        def NOTIFY(self):
            return self.getToken(VisualFoxpro9Parser.NOTIFY, 0)

        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)

        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)

        def PRINTER(self):
            return self.getToken(VisualFoxpro9Parser.PRINTER, 0)

        def DEFAULT(self):
            return self.getToken(VisualFoxpro9Parser.DEFAULT, 0)

        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def REFRESH(self):
            return self.getToken(VisualFoxpro9Parser.REFRESH, 0)

        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)

        def RELATION(self):
            return self.getToken(VisualFoxpro9Parser.RELATION, 0)

        def SAFETY(self):
            return self.getToken(VisualFoxpro9Parser.SAFETY, 0)

        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)

        def SYSMENU(self):
            return self.getToken(VisualFoxpro9Parser.SYSMENU, 0)

        def SAVE(self):
            return self.getToken(VisualFoxpro9Parser.SAVE, 0)

        def NOSAVE(self):
            return self.getToken(VisualFoxpro9Parser.NOSAVE, 0)

        def TABLEPROMPT(self):
            return self.getToken(VisualFoxpro9Parser.TABLEPROMPT, 0)

        def TALK(self):
            return self.getToken(VisualFoxpro9Parser.TALK, 0)

        def TYPEAHEAD(self):
            return self.getToken(VisualFoxpro9Parser.TYPEAHEAD, 0)

        def UNIQUE(self):
            return self.getToken(VisualFoxpro9Parser.UNIQUE, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_setCmd

        def accept(self, visitor):
            if hasattr(visitor, "visitSetCmd"):
                return visitor.visitSetCmd(self)
            else:
                return visitor.visitChildren(self)




    def setCmd(self):

        localctx = VisualFoxpro9Parser.SetCmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_setCmd)
        self._la = 0 # Token type
        try:
            self.state = 1479
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ALTERNATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1258
                localctx.setword = self.match(VisualFoxpro9Parser.ALTERNATE)
                self.state = 1266
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1259
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1260
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1261
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1262
                    self.specialExpr()
                    self.state = 1264
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ADDITIVE:
                        self.state = 1263
                        self.match(VisualFoxpro9Parser.ADDITIVE)


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.ASSERTS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1268
                localctx.setword = self.match(VisualFoxpro9Parser.ASSERTS)
                self.state = 1269
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.BELL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1270
                localctx.setword = self.match(VisualFoxpro9Parser.BELL)
                self.state = 1275
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1271
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1272
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1273
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1274
                    self.specialExpr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.CENTURY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1277
                localctx.setword = self.match(VisualFoxpro9Parser.CENTURY)
                self.state = 1288
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1278
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1279
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1280
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1286
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                        self.state = 1281
                        self.expr(0)
                        self.state = 1284
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.ROLLOVER:
                            self.state = 1282
                            self.match(VisualFoxpro9Parser.ROLLOVER)
                            self.state = 1283
                            self.expr(0)




                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.CLASSLIB]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1290
                localctx.setword = self.match(VisualFoxpro9Parser.CLASSLIB)
                self.state = 1291
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1292
                self.specialExpr()
                self.state = 1295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1293
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1294
                    self.specialExpr()


                self.state = 1299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ALIAS:
                    self.state = 1297
                    self.match(VisualFoxpro9Parser.ALIAS)
                    self.state = 1298
                    self.specialExpr()


                self.state = 1302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1301
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [VisualFoxpro9Parser.CLOCK]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1304
                localctx.setword = self.match(VisualFoxpro9Parser.CLOCK)
                self.state = 1315
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1305
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1306
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.STATUS]:
                    self.state = 1307
                    self.match(VisualFoxpro9Parser.STATUS)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1308
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1313
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                        self.state = 1309
                        self.expr(0)
                        self.state = 1310
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 1311
                        self.expr(0)


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.COMPATIBLE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1317
                localctx.setword = self.match(VisualFoxpro9Parser.COMPATIBLE)
                self.state = 1318
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF or _la==VisualFoxpro9Parser.DB4 or _la==VisualFoxpro9Parser.FOXPLUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.PROMPT or _la==VisualFoxpro9Parser.NOPROMPT:
                    self.state = 1319
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.PROMPT or _la==VisualFoxpro9Parser.NOPROMPT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [VisualFoxpro9Parser.CURSOR]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1322
                localctx.setword = self.match(VisualFoxpro9Parser.CURSOR)
                self.state = 1323
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.DATE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1324
                localctx.setword = self.match(VisualFoxpro9Parser.DATE)
                self.state = 1326
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 1325
                    self.match(VisualFoxpro9Parser.TO)


                self.state = 1328
                self.identifier()
                pass
            elif token in [VisualFoxpro9Parser.DELETED]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1329
                localctx.setword = self.match(VisualFoxpro9Parser.DELETED)
                self.state = 1330
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.EXACT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1331
                localctx.setword = self.match(VisualFoxpro9Parser.EXACT)
                self.state = 1332
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.EXCLUSIVE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1333
                localctx.setword = self.match(VisualFoxpro9Parser.EXCLUSIVE)
                self.state = 1334
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.FILTER]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1335
                localctx.setword = self.match(VisualFoxpro9Parser.FILTER)
                self.state = 1336
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 1337
                    self.specialExpr()
                    self.state = 1340
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.IN:
                        self.state = 1338
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1339
                        self.specialExpr()




                pass
            elif token in [VisualFoxpro9Parser.HELP]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1344
                localctx.setword = self.match(VisualFoxpro9Parser.HELP)
                self.state = 1356
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1345
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1346
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1347
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1349
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                        self.state = 1348
                        self.specialExpr()


                    pass
                elif token in [VisualFoxpro9Parser.COLLECTION]:
                    self.state = 1351
                    self.match(VisualFoxpro9Parser.COLLECTION)
                    self.state = 1353
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                        self.state = 1352
                        self.specialExpr()


                    pass
                elif token in [VisualFoxpro9Parser.SYSTEM]:
                    self.state = 1355
                    self.match(VisualFoxpro9Parser.SYSTEM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.INDEX]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1358
                localctx.setword = self.match(VisualFoxpro9Parser.INDEX)
                self.state = 1359
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 1360
                    self.specialExpr()


                pass
            elif token in [VisualFoxpro9Parser.LIBRARY]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1363
                localctx.setword = self.match(VisualFoxpro9Parser.LIBRARY)
                self.state = 1364
                self.match(VisualFoxpro9Parser.TO)

                self.state = 1365
                self.specialExpr()
                self.state = 1367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1366
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [VisualFoxpro9Parser.MEMOWIDTH]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1369
                localctx.setword = self.match(VisualFoxpro9Parser.MEMOWIDTH)
                self.state = 1370
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1371
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.MULTILOCKS]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1372
                localctx.setword = self.match(VisualFoxpro9Parser.MULTILOCKS)
                self.state = 1373
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.NEAR]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1374
                localctx.setword = self.match(VisualFoxpro9Parser.NEAR)
                self.state = 1375
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.NOTIFY]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1376
                localctx.setword = self.match(VisualFoxpro9Parser.NOTIFY)
                self.state = 1378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.CURSOR:
                    self.state = 1377
                    self.match(VisualFoxpro9Parser.CURSOR)


                self.state = 1380
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.ORDER]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1381
                localctx.setword = self.match(VisualFoxpro9Parser.ORDER)
                self.state = 1382
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1399
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
                if la_ == 1:
                    self.state = 1383
                    self.specialExpr()

                elif la_ == 2:
                    self.state = 1385
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
                    if la_ == 1:
                        self.state = 1384
                        self.match(VisualFoxpro9Parser.TAG)


                    self.state = 1387
                    self.specialExpr()
                    self.state = 1390
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.OF:
                        self.state = 1388
                        self.match(VisualFoxpro9Parser.OF)
                        self.state = 1389
                        localctx.ofExpr = self.specialExpr()


                    self.state = 1394
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.IN:
                        self.state = 1392
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1393
                        localctx.inExpr = self.specialExpr()


                    self.state = 1397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING:
                        self.state = 1396
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                pass
            elif token in [VisualFoxpro9Parser.PRINTER]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1401
                localctx.setword = self.match(VisualFoxpro9Parser.PRINTER)
                self.state = 1417
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1402
                    self.match(VisualFoxpro9Parser.ON)
                    self.state = 1404
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.PROMPT:
                        self.state = 1403
                        self.match(VisualFoxpro9Parser.PROMPT)


                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1406
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1407
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1415
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                    if la_ == 1:
                        self.state = 1408
                        self.match(VisualFoxpro9Parser.DEFAULT)

                    elif la_ == 2:
                        self.state = 1409
                        self.match(VisualFoxpro9Parser.NAME)
                        self.state = 1410
                        self.specialExpr()

                    elif la_ == 3:
                        self.state = 1411
                        self.specialExpr()
                        self.state = 1413
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.ADDITIVE:
                            self.state = 1412
                            self.match(VisualFoxpro9Parser.ADDITIVE)




                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.PROCEDURE]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1419
                localctx.setword = self.match(VisualFoxpro9Parser.PROCEDURE)
                self.state = 1420
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1421
                self.specialExpr()
                self.state = 1426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.COMMA:
                    self.state = 1422
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1423
                    self.specialExpr()
                    self.state = 1428
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1429
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [VisualFoxpro9Parser.REFRESH]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1432
                localctx.setword = self.match(VisualFoxpro9Parser.REFRESH)
                self.state = 1433
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1434
                self.expr(0)
                self.state = 1437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COMMA:
                    self.state = 1435
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1436
                    self.expr(0)


                pass
            elif token in [VisualFoxpro9Parser.RELATION]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1439
                localctx.setword = self.match(VisualFoxpro9Parser.RELATION)
                self.state = 1440
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1441
                self.expr(0)
                self.state = 1442
                self.match(VisualFoxpro9Parser.INTO)
                self.state = 1443
                self.specialExpr()
                self.state = 1446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1444
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1445
                    self.specialExpr()


                self.state = 1449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1448
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [VisualFoxpro9Parser.SAFETY]:
                self.enterOuterAlt(localctx, 26)
                self.state = 1451
                localctx.setword = self.match(VisualFoxpro9Parser.SAFETY)
                self.state = 1452
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.STATUS]:
                self.enterOuterAlt(localctx, 27)
                self.state = 1453
                localctx.setword = self.match(VisualFoxpro9Parser.STATUS)
                self.state = 1455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.BAR:
                    self.state = 1454
                    self.match(VisualFoxpro9Parser.BAR)


                self.state = 1457
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.SYSMENU]:
                self.enterOuterAlt(localctx, 28)
                self.state = 1458
                localctx.setword = self.match(VisualFoxpro9Parser.SYSMENU)
                self.state = 1468
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1459
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1460
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1461
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1464
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
                    if la_ == 1:
                        self.state = 1462
                        self.match(VisualFoxpro9Parser.DEFAULT)

                    elif la_ == 2:
                        self.state = 1463
                        self.expr(0)


                    pass
                elif token in [VisualFoxpro9Parser.SAVE]:
                    self.state = 1466
                    self.match(VisualFoxpro9Parser.SAVE)
                    pass
                elif token in [VisualFoxpro9Parser.NOSAVE]:
                    self.state = 1467
                    self.match(VisualFoxpro9Parser.NOSAVE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.TABLEPROMPT]:
                self.enterOuterAlt(localctx, 29)
                self.state = 1470
                localctx.setword = self.match(VisualFoxpro9Parser.TABLEPROMPT)
                self.state = 1471
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.TALK]:
                self.enterOuterAlt(localctx, 30)
                self.state = 1472
                localctx.setword = self.match(VisualFoxpro9Parser.TALK)
                self.state = 1473
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.TYPEAHEAD]:
                self.enterOuterAlt(localctx, 31)
                self.state = 1474
                localctx.setword = self.match(VisualFoxpro9Parser.TYPEAHEAD)
                self.state = 1475
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1476
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.UNIQUE]:
                self.enterOuterAlt(localctx, 32)
                self.state = 1477
                localctx.setword = self.match(VisualFoxpro9Parser.UNIQUE)
                self.state = 1478
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def declarationItem(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.DeclarationItemContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.DeclarationItemContext,i)


        def DIMENSION(self):
            return self.getToken(VisualFoxpro9Parser.DIMENSION, 0)

        def DECLARE(self):
            return self.getToken(VisualFoxpro9Parser.DECLARE, 0)

        def PARAMETER(self):
            return self.getToken(VisualFoxpro9Parser.PARAMETER, 0)

        def SCOPE(self):
            return self.getToken(VisualFoxpro9Parser.SCOPE, 0)

        def EXTERNAL(self):
            return self.getToken(VisualFoxpro9Parser.EXTERNAL, 0)

        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_declaration

        def accept(self, visitor):
            if hasattr(visitor, "visitDeclaration"):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = VisualFoxpro9Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 1501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1488
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.SCOPE]:
                    self.state = 1481
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.EXTERNAL or _la==VisualFoxpro9Parser.SCOPE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1483
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                    if la_ == 1:
                        self.state = 1482
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.ARRAY or _la==VisualFoxpro9Parser.DECLARE or _la==VisualFoxpro9Parser.DIMENSION):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass
                elif token in [VisualFoxpro9Parser.DIMENSION]:
                    self.state = 1485
                    self.match(VisualFoxpro9Parser.DIMENSION)
                    pass
                elif token in [VisualFoxpro9Parser.DECLARE]:
                    self.state = 1486
                    self.match(VisualFoxpro9Parser.DECLARE)
                    pass
                elif token in [VisualFoxpro9Parser.PARAMETER]:
                    self.state = 1487
                    self.match(VisualFoxpro9Parser.PARAMETER)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1490
                self.declarationItem()
                self.state = 1495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.COMMA:
                    self.state = 1491
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1492
                    self.declarationItem()
                    self.state = 1497
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1498
                self.match(VisualFoxpro9Parser.EXTERNAL)
                self.state = 1499
                self.match(VisualFoxpro9Parser.PROCEDURE)
                self.state = 1500
                self.specialExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationItemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DeclarationItemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def idAttr2(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttr2Context,0)


        def arrayIndex(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArrayIndexContext,0)


        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def asTypeOf(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeOfContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_declarationItem

        def accept(self, visitor):
            if hasattr(visitor, "visitDeclarationItem"):
                return visitor.visitDeclarationItem(self)
            else:
                return visitor.visitChildren(self)




    def declarationItem(self):

        localctx = VisualFoxpro9Parser.DeclarationItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_declarationItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.state = 1503
                self.idAttr2()
                self.state = 1504
                self.arrayIndex()
                pass

            elif la_ == 2:
                self.state = 1506
                self.idAttr()
                self.state = 1508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.AS:
                    self.state = 1507
                    self.asTypeOf()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AsTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.AsTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)

        def datatype(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DatatypeContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_asType

        def accept(self, visitor):
            if hasattr(visitor, "visitAsType"):
                return visitor.visitAsType(self)
            else:
                return visitor.visitChildren(self)




    def asType(self):

        localctx = VisualFoxpro9Parser.AsTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_asType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1512
            self.match(VisualFoxpro9Parser.AS)
            self.state = 1513
            self.datatype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AsTypeOfContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.AsTypeOfContext, self).__init__(parent, invokingState)
            self.parser = parser

        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)


        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_asTypeOf

        def accept(self, visitor):
            if hasattr(visitor, "visitAsTypeOf"):
                return visitor.visitAsTypeOf(self)
            else:
                return visitor.visitChildren(self)




    def asTypeOf(self):

        localctx = VisualFoxpro9Parser.AsTypeOfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_asTypeOf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1515
            self.asType()
            self.state = 1518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.OF:
                self.state = 1516
                self.match(VisualFoxpro9Parser.OF)
                self.state = 1517
                self.specialExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ArgsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_args

        def accept(self, visitor):
            if hasattr(visitor, "visitArgs"):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = VisualFoxpro9Parser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_args)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1520
            self.expr(0)
            self.state = 1525
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,238,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1521
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1522
                    self.expr(0) 
                self.state = 1527
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

            self.state = 1529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.COMMA:
                self.state = 1528
                self.match(VisualFoxpro9Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecialArgsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SpecialArgsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_specialArgs

        def accept(self, visitor):
            if hasattr(visitor, "visitSpecialArgs"):
                return visitor.visitSpecialArgs(self)
            else:
                return visitor.visitChildren(self)




    def specialArgs(self):

        localctx = VisualFoxpro9Parser.SpecialArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_specialArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1531
            self.specialExpr()
            self.state = 1536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.COMMA:
                self.state = 1532
                self.match(VisualFoxpro9Parser.COMMA)
                self.state = 1533
                self.specialExpr()
                self.state = 1538
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncDoContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.FuncDoContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)

        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)

        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)

        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_funcDo

        def accept(self, visitor):
            if hasattr(visitor, "visitFuncDo"):
                return visitor.visitFuncDo(self)
            else:
                return visitor.visitChildren(self)




    def funcDo(self):

        localctx = VisualFoxpro9Parser.FuncDoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_funcDo)
        self._la = 0 # Token type
        try:
            self.state = 1552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1539
                self.match(VisualFoxpro9Parser.DO)
                self.state = 1540
                self.match(VisualFoxpro9Parser.FORM)
                self.state = 1541
                self.specialExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1542
                self.match(VisualFoxpro9Parser.DO)
                self.state = 1543
                self.specialExpr()
                self.state = 1546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1544
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1545
                    self.specialExpr()


                self.state = 1550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.WITH:
                    self.state = 1548
                    self.match(VisualFoxpro9Parser.WITH)
                    self.state = 1549
                    self.args()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ReferenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_reference

        def accept(self, visitor):
            if hasattr(visitor, "visitReference"):
                return visitor.visitReference(self)
            else:
                return visitor.visitChildren(self)




    def reference(self):

        localctx = VisualFoxpro9Parser.ReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1554
            self.match(VisualFoxpro9Parser.COMMERCIALAT)
            self.state = 1555
            self.idAttr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgReplaceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ArgReplaceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_argReplace

        def accept(self, visitor):
            if hasattr(visitor, "visitArgReplace"):
                return visitor.visitArgReplace(self)
            else:
                return visitor.visitChildren(self)




    def argReplace(self):

        localctx = VisualFoxpro9Parser.ArgReplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_argReplace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1557
            self.match(VisualFoxpro9Parser.AMPERSAND)
            self.state = 1558
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ExprContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_expr

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.ExprContext, self).copyFrom(ctx)


    class ComparisonContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.ComparisonContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def NOTEQUALS(self):
            return self.getToken(VisualFoxpro9Parser.NOTEQUALS, 0)
        def GTEQ(self):
            return self.getToken(VisualFoxpro9Parser.GTEQ, 0)
        def LTEQ(self):
            return self.getToken(VisualFoxpro9Parser.LTEQ, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitComparison"):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)


    class CastExprContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.CastExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(VisualFoxpro9Parser.CAST, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitCastExpr"):
                return visitor.visitCastExpr(self)
            else:
                return visitor.visitChildren(self)


    class UnaryNegationContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.UnaryNegationContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitUnaryNegation"):
                return visitor.visitUnaryNegation(self)
            else:
                return visitor.visitChildren(self)


    class AtomExprContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.AtomExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def atom(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AtomContext,0)

        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)
        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitAtomExpr"):
                return visitor.visitAtomExpr(self)
            else:
                return visitor.visitChildren(self)


    class PowerContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.PowerContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitPower"):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)


    class MultiplicationContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.MultiplicationContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitMultiplication"):
                return visitor.visitMultiplication(self)
            else:
                return visitor.visitChildren(self)


    class BooleanOperationContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.BooleanOperationContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def OR(self):
            return self.getToken(VisualFoxpro9Parser.OR, 0)
        def OTHEROR(self):
            return self.getToken(VisualFoxpro9Parser.OTHEROR, 0)
        def AND(self):
            return self.getToken(VisualFoxpro9Parser.AND, 0)
        def OTHERAND(self):
            return self.getToken(VisualFoxpro9Parser.OTHERAND, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitBooleanOperation"):
                return visitor.visitBooleanOperation(self)
            else:
                return visitor.visitChildren(self)


    class SubExprContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.SubExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitSubExpr"):
                return visitor.visitSubExpr(self)
            else:
                return visitor.visitChildren(self)


    class ModuloContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.ModuloContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitModulo"):
                return visitor.visitModulo(self)
            else:
                return visitor.visitChildren(self)


    class BooleanNegationContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.BooleanNegationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def NOT(self):
            return self.getToken(VisualFoxpro9Parser.NOT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitBooleanNegation"):
                return visitor.visitBooleanNegation(self)
            else:
                return visitor.visitChildren(self)


    class ConstantExprContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.ConstantExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ConstantContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitConstantExpr"):
                return visitor.visitConstantExpr(self)
            else:
                return visitor.visitChildren(self)


    class AdditionContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.AdditionContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitAddition"):
                return visitor.visitAddition(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VisualFoxpro9Parser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 106
        self.enterRecursionRule(localctx, 106, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.SubExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1561
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 1562
                self.expr(0)
                self.state = 1563
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.UnaryNegationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1565
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.PLUS_SIGN or _la==VisualFoxpro9Parser.MINUS_SIGN):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1566
                self.expr(11)
                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.BooleanNegationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1567
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.EXCLAMATION or _la==VisualFoxpro9Parser.NOT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1568
                self.expr(10)
                pass

            elif la_ == 4:
                localctx = VisualFoxpro9Parser.ConstantExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1569
                self.constant()
                pass

            elif la_ == 5:
                localctx = VisualFoxpro9Parser.CastExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1570
                self.match(VisualFoxpro9Parser.CAST)
                self.state = 1571
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 1572
                self.expr(0)
                self.state = 1573
                self.asType()
                self.state = 1574
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass

            elif la_ == 6:
                localctx = VisualFoxpro9Parser.AtomExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.PERIOD:
                    self.state = 1576
                    self.match(VisualFoxpro9Parser.PERIOD)


                self.state = 1579
                self.atom()
                self.state = 1581
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
                if la_ == 1:
                    self.state = 1580
                    self.trailer()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1609
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,249,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1607
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                    if la_ == 1:
                        localctx = VisualFoxpro9Parser.PowerContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1585
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1589
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [VisualFoxpro9Parser.ASTERISK]:
                            self.state = 1586
                            self.match(VisualFoxpro9Parser.ASTERISK)
                            self.state = 1587
                            self.match(VisualFoxpro9Parser.ASTERISK)
                            pass
                        elif token in [VisualFoxpro9Parser.CARAT]:
                            self.state = 1588
                            self.match(VisualFoxpro9Parser.CARAT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1591
                        self.expr(10)
                        pass

                    elif la_ == 2:
                        localctx = VisualFoxpro9Parser.MultiplicationContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1592
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1593
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.ASTERISK or _la==VisualFoxpro9Parser.FORWARDSLASH):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1594
                        self.expr(9)
                        pass

                    elif la_ == 3:
                        localctx = VisualFoxpro9Parser.ModuloContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1595
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1596
                        self.match(VisualFoxpro9Parser.MODULO)
                        self.state = 1597
                        self.expr(8)
                        pass

                    elif la_ == 4:
                        localctx = VisualFoxpro9Parser.AdditionContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1598
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1599
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.PLUS_SIGN or _la==VisualFoxpro9Parser.MINUS_SIGN):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1600
                        self.expr(7)
                        pass

                    elif la_ == 5:
                        localctx = VisualFoxpro9Parser.ComparisonContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1601
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1602
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.DOLLAR))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1603
                        self.expr(6)
                        pass

                    elif la_ == 6:
                        localctx = VisualFoxpro9Parser.BooleanOperationContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1604
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1605
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 208)) & ~0x3f) == 0 and ((1 << (_la - 208)) & ((1 << (VisualFoxpro9Parser.AND - 208)) | (1 << (VisualFoxpro9Parser.OTHERAND - 208)) | (1 << (VisualFoxpro9Parser.OR - 208)) | (1 << (VisualFoxpro9Parser.OTHEROR - 208)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1606
                        self.expr(5)
                        pass

             
                self.state = 1611
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,249,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ComplexIdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ComplexIdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AtomContext,0)


        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_complexId

        def accept(self, visitor):
            if hasattr(visitor, "visitComplexId"):
                return visitor.visitComplexId(self)
            else:
                return visitor.visitChildren(self)




    def complexId(self):

        localctx = VisualFoxpro9Parser.ComplexIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_complexId)
        self._la = 0 # Token type
        try:
            self.state = 1623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.PERIOD:
                    self.state = 1612
                    self.match(VisualFoxpro9Parser.PERIOD)


                self.state = 1615
                self.atom()
                self.state = 1616
                self.trailer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1618
                self.match(VisualFoxpro9Parser.PERIOD)
                self.state = 1619
                self.atom()
                self.state = 1621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTPAREN))) != 0):
                    self.state = 1620
                    self.trailer()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.AtomContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def reference(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ReferenceContext,0)


        def argReplace(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgReplaceContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_atom

        def accept(self, visitor):
            if hasattr(visitor, "visitAtom"):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = VisualFoxpro9Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_atom)
        try:
            self.state = 1628
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.NODEFAULT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1625
                self.identifier()
                pass
            elif token in [VisualFoxpro9Parser.COMMERCIALAT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1626
                self.reference()
                pass
            elif token in [VisualFoxpro9Parser.AMPERSAND]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1627
                self.argReplace()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.TrailerContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_trailer

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.TrailerContext, self).copyFrom(ctx)



    class FuncCallTrailerContext(TrailerContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.TrailerContext)
            super(VisualFoxpro9Parser.FuncCallTrailerContext, self).__init__(parser)
            self.copyFrom(ctx)

        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)

        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitFuncCallTrailer"):
                return visitor.visitFuncCallTrailer(self)
            else:
                return visitor.visitChildren(self)


    class IdentTrailerContext(TrailerContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.TrailerContext)
            super(VisualFoxpro9Parser.IdentTrailerContext, self).__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitIdentTrailer"):
                return visitor.visitIdentTrailer(self)
            else:
                return visitor.visitChildren(self)



    def trailer(self):

        localctx = VisualFoxpro9Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 1650
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.LEFTPAREN]:
                localctx = VisualFoxpro9Parser.FuncCallTrailerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1640
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.LEFTPAREN]:
                    self.state = 1630
                    self.match(VisualFoxpro9Parser.LEFTPAREN)
                    self.state = 1632
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                        self.state = 1631
                        self.args()


                    self.state = 1634
                    self.match(VisualFoxpro9Parser.RIGHTPAREN)
                    pass
                elif token in [VisualFoxpro9Parser.LEFTBRACKET]:
                    self.state = 1635
                    self.match(VisualFoxpro9Parser.LEFTBRACKET)
                    self.state = 1637
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                        self.state = 1636
                        self.args()


                    self.state = 1639
                    self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1643
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
                if la_ == 1:
                    self.state = 1642
                    self.trailer()


                pass
            elif token in [VisualFoxpro9Parser.PERIOD]:
                localctx = VisualFoxpro9Parser.IdentTrailerContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1645
                self.match(VisualFoxpro9Parser.PERIOD)
                self.state = 1646
                self.identifier()
                self.state = 1648
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
                if la_ == 1:
                    self.state = 1647
                    self.trailer()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathnameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PathnameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def pathElement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.PathElementContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.PathElementContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_pathname

        def accept(self, visitor):
            if hasattr(visitor, "visitPathname"):
                return visitor.visitPathname(self)
            else:
                return visitor.visitChildren(self)




    def pathname(self):

        localctx = VisualFoxpro9Parser.PathnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_pathname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                self.state = 1652
                self.identifier()
                self.state = 1653
                self.match(VisualFoxpro9Parser.COLON)


            self.state = 1658 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 1657
                    self.pathElement()

                else:
                    raise NoViableAltException(self)
                self.state = 1660 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,261,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PathElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)

        def BACKSLASH(self):
            return self.getToken(VisualFoxpro9Parser.BACKSLASH, 0)

        def NOTEQUALS(self):
            return self.getToken(VisualFoxpro9Parser.NOTEQUALS, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_pathElement

        def accept(self, visitor):
            if hasattr(visitor, "visitPathElement"):
                return visitor.visitPathElement(self)
            else:
                return visitor.visitChildren(self)




    def pathElement(self):

        localctx = VisualFoxpro9Parser.PathElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_pathElement)
        try:
            self.state = 1687
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.NODEFAULT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1662
                self.identifier()
                pass
            elif token in [VisualFoxpro9Parser.NUMBER_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1663
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                pass
            elif token in [VisualFoxpro9Parser.BACKSLASH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1664
                self.match(VisualFoxpro9Parser.BACKSLASH)
                pass
            elif token in [VisualFoxpro9Parser.SEMICOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1665
                self.match(VisualFoxpro9Parser.SEMICOLON)
                pass
            elif token in [VisualFoxpro9Parser.AMPERSAND]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1666
                self.match(VisualFoxpro9Parser.AMPERSAND)
                pass
            elif token in [VisualFoxpro9Parser.COMMERCIALAT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1667
                self.match(VisualFoxpro9Parser.COMMERCIALAT)
                pass
            elif token in [VisualFoxpro9Parser.PLUS_SIGN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1668
                self.match(VisualFoxpro9Parser.PLUS_SIGN)
                pass
            elif token in [VisualFoxpro9Parser.MINUS_SIGN]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1669
                self.match(VisualFoxpro9Parser.MINUS_SIGN)
                pass
            elif token in [VisualFoxpro9Parser.PERIOD]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1670
                self.match(VisualFoxpro9Parser.PERIOD)
                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACKET]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1671
                self.match(VisualFoxpro9Parser.LEFTBRACKET)
                pass
            elif token in [VisualFoxpro9Parser.RIGHTBRACKET]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1672
                self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1673
                self.match(VisualFoxpro9Parser.LEFTBRACE)
                pass
            elif token in [VisualFoxpro9Parser.RIGHTBRACE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1674
                self.match(VisualFoxpro9Parser.RIGHTBRACE)
                pass
            elif token in [VisualFoxpro9Parser.LEFTPAREN]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1675
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                pass
            elif token in [VisualFoxpro9Parser.RIGHTPAREN]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1676
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass
            elif token in [VisualFoxpro9Parser.EXCLAMATION]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1677
                self.match(VisualFoxpro9Parser.EXCLAMATION)
                pass
            elif token in [VisualFoxpro9Parser.HASH]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1678
                self.match(VisualFoxpro9Parser.HASH)
                pass
            elif token in [VisualFoxpro9Parser.DOUBLEEQUALS]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1679
                self.match(VisualFoxpro9Parser.DOUBLEEQUALS)
                pass
            elif token in [VisualFoxpro9Parser.NOTEQUALS]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1680
                self.match(VisualFoxpro9Parser.NOTEQUALS)
                pass
            elif token in [VisualFoxpro9Parser.MODULO]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1681
                self.match(VisualFoxpro9Parser.MODULO)
                pass
            elif token in [VisualFoxpro9Parser.EQUALS]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1682
                self.match(VisualFoxpro9Parser.EQUALS)
                pass
            elif token in [VisualFoxpro9Parser.CARAT]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1683
                self.match(VisualFoxpro9Parser.CARAT)
                pass
            elif token in [VisualFoxpro9Parser.COMMA]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1684
                self.match(VisualFoxpro9Parser.COMMA)
                pass
            elif token in [VisualFoxpro9Parser.DOLLAR]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1685
                self.match(VisualFoxpro9Parser.DOLLAR)
                pass
            elif token in [VisualFoxpro9Parser.T__0]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1686
                self.match(VisualFoxpro9Parser.T__0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecialExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SpecialExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def pathname(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.PathnameContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_specialExpr

        def accept(self, visitor):
            if hasattr(visitor, "visitSpecialExpr"):
                return visitor.visitSpecialExpr(self)
            else:
                return visitor.visitChildren(self)




    def specialExpr(self):

        localctx = VisualFoxpro9Parser.SpecialExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_specialExpr)
        try:
            self.state = 1691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1689
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1690
                self.pathname()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ConstantContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_constant

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.ConstantContext, self).copyFrom(ctx)



    class DateContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.DateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NUMBER_LITERAL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NUMBER_LITERAL)
            else:
                return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, i)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitDate"):
                return visitor.visitDate(self)
            else:
                return visitor.visitChildren(self)


    class BoolOrNullContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.BoolOrNullContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(VisualFoxpro9Parser.NULL, 0)
        def BOOLEANCHAR(self):
            return self.getToken(VisualFoxpro9Parser.BOOLEANCHAR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitBoolOrNull"):
                return visitor.visitBoolOrNull(self)
            else:
                return visitor.visitChildren(self)


    class BlobContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.BlobContext, self).__init__(parser)
            self.copyFrom(ctx)

        def BLOB_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.BLOB_LITERAL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitBlob"):
                return visitor.visitBlob(self)
            else:
                return visitor.visitChildren(self)


    class StringContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.StringContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitString"):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)


    class NumberOrCurrencyContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.NumberOrCurrencyContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitNumberOrCurrency"):
                return visitor.visitNumberOrCurrency(self)
            else:
                return visitor.visitChildren(self)



    def constant(self):

        localctx = VisualFoxpro9Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 1765
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.DOLLAR]:
                localctx = VisualFoxpro9Parser.NumberOrCurrencyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.DOLLAR:
                    self.state = 1693
                    self.match(VisualFoxpro9Parser.DOLLAR)


                self.state = 1696
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                pass
            elif token in [VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.NULL]:
                localctx = VisualFoxpro9Parser.BoolOrNullContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1701
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.PERIOD]:
                    self.state = 1697
                    self.match(VisualFoxpro9Parser.PERIOD)
                    self.state = 1698
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.NULL or _la==VisualFoxpro9Parser.BOOLEANCHAR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1699
                    self.match(VisualFoxpro9Parser.PERIOD)
                    pass
                elif token in [VisualFoxpro9Parser.NULL]:
                    self.state = 1700
                    self.match(VisualFoxpro9Parser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACE]:
                localctx = VisualFoxpro9Parser.DateContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1703
                self.match(VisualFoxpro9Parser.LEFTBRACE)
                self.state = 1735
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.FORWARDSLASH]:
                    self.state = 1704
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    self.state = 1705
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    pass
                elif token in [VisualFoxpro9Parser.COLON]:
                    self.state = 1706
                    self.match(VisualFoxpro9Parser.COLON)
                    pass
                elif token in [VisualFoxpro9Parser.CARAT]:
                    self.state = 1707
                    self.match(VisualFoxpro9Parser.CARAT)
                    self.state = 1718
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                    if la_ == 1:
                        self.state = 1708
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 1709
                        self.match(VisualFoxpro9Parser.MINUS_SIGN)
                        self.state = 1710
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 1711
                        self.match(VisualFoxpro9Parser.MINUS_SIGN)
                        self.state = 1712
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        pass

                    elif la_ == 2:
                        self.state = 1713
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 1714
                        self.match(VisualFoxpro9Parser.FORWARDSLASH)
                        self.state = 1715
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 1716
                        self.match(VisualFoxpro9Parser.FORWARDSLASH)
                        self.state = 1717
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        pass


                    self.state = 1733
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.NUMBER_LITERAL or _la==VisualFoxpro9Parser.COMMA:
                        self.state = 1721
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.COMMA:
                            self.state = 1720
                            self.match(VisualFoxpro9Parser.COMMA)


                        self.state = 1723
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 1730
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.COLON:
                            self.state = 1724
                            self.match(VisualFoxpro9Parser.COLON)
                            self.state = 1725
                            self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                            self.state = 1728
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==VisualFoxpro9Parser.COLON:
                                self.state = 1726
                                self.match(VisualFoxpro9Parser.COLON)
                                self.state = 1727
                                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)




                        self.state = 1732
                        self.identifier()


                    pass
                elif token in [VisualFoxpro9Parser.RIGHTBRACE]:
                    pass
                else:
                    pass
                self.state = 1737
                self.match(VisualFoxpro9Parser.RIGHTBRACE)
                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE]:
                localctx = VisualFoxpro9Parser.StringContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1762
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.SINGLEQUOTE]:
                    self.state = 1738
                    self.match(VisualFoxpro9Parser.SINGLEQUOTE)
                    self.state = 1742
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)) | (1 << (VisualFoxpro9Parser.ORDER - 128)) | (1 << (VisualFoxpro9Parser.SEEK - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)) | (1 << (VisualFoxpro9Parser.DROP - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                        self.state = 1739
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==VisualFoxpro9Parser.SINGLEQUOTE or _la==VisualFoxpro9Parser.NL:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1744
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1745
                    self.match(VisualFoxpro9Parser.SINGLEQUOTE)
                    pass
                elif token in [VisualFoxpro9Parser.DOUBLEQUOTE]:
                    self.state = 1746
                    self.match(VisualFoxpro9Parser.DOUBLEQUOTE)
                    self.state = 1750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)) | (1 << (VisualFoxpro9Parser.ORDER - 128)) | (1 << (VisualFoxpro9Parser.SEEK - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)) | (1 << (VisualFoxpro9Parser.DROP - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                        self.state = 1747
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==VisualFoxpro9Parser.DOUBLEQUOTE or _la==VisualFoxpro9Parser.NL:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1752
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1753
                    self.match(VisualFoxpro9Parser.DOUBLEQUOTE)
                    pass
                elif token in [VisualFoxpro9Parser.LEFTBRACKET]:
                    self.state = 1754
                    self.match(VisualFoxpro9Parser.LEFTBRACKET)
                    self.state = 1758
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)) | (1 << (VisualFoxpro9Parser.ORDER - 128)) | (1 << (VisualFoxpro9Parser.SEEK - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)) | (1 << (VisualFoxpro9Parser.DROP - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                        self.state = 1755
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==VisualFoxpro9Parser.RIGHTBRACKET or _la==VisualFoxpro9Parser.NL:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1760
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1761
                    self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.BLOB_LITERAL]:
                localctx = VisualFoxpro9Parser.BlobContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1764
                self.match(VisualFoxpro9Parser.BLOB_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.AssignContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STORE(self):
            return self.getToken(VisualFoxpro9Parser.STORE, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def idAttr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdAttrContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_assign

        def accept(self, visitor):
            if hasattr(visitor, "visitAssign"):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)




    def assign(self):

        localctx = VisualFoxpro9Parser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_assign)
        self._la = 0 # Token type
        try:
            self.state = 1782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1767
                self.match(VisualFoxpro9Parser.STORE)
                self.state = 1768
                self.expr(0)
                self.state = 1769
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1770
                self.idAttr()
                self.state = 1775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.COMMA:
                    self.state = 1771
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1772
                    self.idAttr()
                    self.state = 1777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1778
                self.idAttr()
                self.state = 1779
                self.match(VisualFoxpro9Parser.EQUALS)
                self.state = 1780
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdAttr2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IdAttr2Context, self).__init__(parent, invokingState)
            self.parser = parser
            self.startPeriod = None # Token

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_idAttr2

        def accept(self, visitor):
            if hasattr(visitor, "visitIdAttr2"):
                return visitor.visitIdAttr2(self)
            else:
                return visitor.visitChildren(self)




    def idAttr2(self):

        localctx = VisualFoxpro9Parser.IdAttr2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_idAttr2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.PERIOD:
                self.state = 1784
                localctx.startPeriod = self.match(VisualFoxpro9Parser.PERIOD)


            self.state = 1787
            self.identifier()
            self.state = 1792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.PERIOD:
                self.state = 1788
                self.match(VisualFoxpro9Parser.PERIOD)
                self.state = 1789
                self.identifier()
                self.state = 1794
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdAttrContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IdAttrContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)

        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_idAttr

        def accept(self, visitor):
            if hasattr(visitor, "visitIdAttr"):
                return visitor.visitIdAttr(self)
            else:
                return visitor.visitChildren(self)




    def idAttr(self):

        localctx = VisualFoxpro9Parser.IdAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_idAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.PERIOD:
                self.state = 1795
                self.match(VisualFoxpro9Parser.PERIOD)


            self.state = 1798
            self.identifier()
            self.state = 1800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.state = 1799
                self.trailer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TwoExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.TwoExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_twoExpr

        def accept(self, visitor):
            if hasattr(visitor, "visitTwoExpr"):
                return visitor.visitTwoExpr(self)
            else:
                return visitor.visitChildren(self)




    def twoExpr(self):

        localctx = VisualFoxpro9Parser.TwoExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_twoExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1802
            self.expr(0)
            self.state = 1803
            self.match(VisualFoxpro9Parser.COMMA)
            self.state = 1804
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayIndexContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ArrayIndexContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def twoExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TwoExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_arrayIndex

        def accept(self, visitor):
            if hasattr(visitor, "visitArrayIndex"):
                return visitor.visitArrayIndex(self)
            else:
                return visitor.visitChildren(self)




    def arrayIndex(self):

        localctx = VisualFoxpro9Parser.ArrayIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_arrayIndex)
        try:
            self.state = 1820
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.LEFTPAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1806
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 1809
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                if la_ == 1:
                    self.state = 1807
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 1808
                    self.twoExpr()
                    pass


                self.state = 1811
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1813
                self.match(VisualFoxpro9Parser.LEFTBRACKET)
                self.state = 1816
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
                if la_ == 1:
                    self.state = 1814
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 1815
                    self.twoExpr()
                    pass


                self.state = 1818
                self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatatypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DatatypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_datatype

        def accept(self, visitor):
            if hasattr(visitor, "visitDatatype"):
                return visitor.visitDatatype(self)
            else:
                return visitor.visitChildren(self)




    def datatype(self):

        localctx = VisualFoxpro9Parser.DatatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_datatype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1822
            self.idAttr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScopeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ScopeClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)

        def NEXT(self):
            return self.getToken(VisualFoxpro9Parser.NEXT, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def RECORD(self):
            return self.getToken(VisualFoxpro9Parser.RECORD, 0)

        def REST(self):
            return self.getToken(VisualFoxpro9Parser.REST, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_scopeClause

        def accept(self, visitor):
            if hasattr(visitor, "visitScopeClause"):
                return visitor.visitScopeClause(self)
            else:
                return visitor.visitChildren(self)




    def scopeClause(self):

        localctx = VisualFoxpro9Parser.ScopeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_scopeClause)
        try:
            self.state = 1830
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1824
                self.match(VisualFoxpro9Parser.ALL)
                pass
            elif token in [VisualFoxpro9Parser.NEXT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1825
                self.match(VisualFoxpro9Parser.NEXT)
                self.state = 1826
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.RECORD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1827
                self.match(VisualFoxpro9Parser.RECORD)
                self.state = 1828
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.REST]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1829
                self.match(VisualFoxpro9Parser.REST)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IdentifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)

        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)

        def ELIF(self):
            return self.getToken(VisualFoxpro9Parser.ELIF, 0)

        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)

        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)

        def OFF(self):
            return self.getToken(VisualFoxpro9Parser.OFF, 0)

        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)

        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)

        def STORE(self):
            return self.getToken(VisualFoxpro9Parser.STORE, 0)

        def EXTERNAL(self):
            return self.getToken(VisualFoxpro9Parser.EXTERNAL, 0)

        def SCOPE(self):
            return self.getToken(VisualFoxpro9Parser.SCOPE, 0)

        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)

        def RECALL(self):
            return self.getToken(VisualFoxpro9Parser.RECALL, 0)

        def DELETE(self):
            return self.getToken(VisualFoxpro9Parser.DELETE, 0)

        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)

        def SET(self):
            return self.getToken(VisualFoxpro9Parser.SET, 0)

        def RELEASE(self):
            return self.getToken(VisualFoxpro9Parser.RELEASE, 0)

        def RECYCLE(self):
            return self.getToken(VisualFoxpro9Parser.RECYCLE, 0)

        def CREATE(self):
            return self.getToken(VisualFoxpro9Parser.CREATE, 0)

        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)

        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)

        def DBF(self):
            return self.getToken(VisualFoxpro9Parser.DBF, 0)

        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)

        def FREE(self):
            return self.getToken(VisualFoxpro9Parser.FREE, 0)

        def SELECT(self):
            return self.getToken(VisualFoxpro9Parser.SELECT, 0)

        def USE(self):
            return self.getToken(VisualFoxpro9Parser.USE, 0)

        def READ(self):
            return self.getToken(VisualFoxpro9Parser.READ, 0)

        def EVENTS(self):
            return self.getToken(VisualFoxpro9Parser.EVENTS, 0)

        def SHUTDOWN(self):
            return self.getToken(VisualFoxpro9Parser.SHUTDOWN, 0)

        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)

        def CLASS(self):
            return self.getToken(VisualFoxpro9Parser.CLASS, 0)

        def ENDDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.ENDDEFINE, 0)

        def LOCATE(self):
            return self.getToken(VisualFoxpro9Parser.LOCATE, 0)

        def CONTINUE(self):
            return self.getToken(VisualFoxpro9Parser.CONTINUE, 0)

        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def ENDFOR(self):
            return self.getToken(VisualFoxpro9Parser.ENDFOR, 0)

        def WHILE(self):
            return self.getToken(VisualFoxpro9Parser.WHILE, 0)

        def NOOPTIMIZE(self):
            return self.getToken(VisualFoxpro9Parser.NOOPTIMIZE, 0)

        def STATUS(self):
            return self.getToken(VisualFoxpro9Parser.STATUS, 0)

        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)

        def MEMOWIDTH(self):
            return self.getToken(VisualFoxpro9Parser.MEMOWIDTH, 0)

        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)

        def REFRESH(self):
            return self.getToken(VisualFoxpro9Parser.REFRESH, 0)

        def BELL(self):
            return self.getToken(VisualFoxpro9Parser.BELL, 0)

        def CENTURY(self):
            return self.getToken(VisualFoxpro9Parser.CENTURY, 0)

        def DATE(self):
            return self.getToken(VisualFoxpro9Parser.DATE, 0)

        def ADD(self):
            return self.getToken(VisualFoxpro9Parser.ADD, 0)

        def OBJECT(self):
            return self.getToken(VisualFoxpro9Parser.OBJECT, 0)

        def REPLACE(self):
            return self.getToken(VisualFoxpro9Parser.REPLACE, 0)

        def LIBRARY(self):
            return self.getToken(VisualFoxpro9Parser.LIBRARY, 0)

        def SHARED(self):
            return self.getToken(VisualFoxpro9Parser.SHARED, 0)

        def WAIT(self):
            return self.getToken(VisualFoxpro9Parser.WAIT, 0)

        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)

        def NOWAIT(self):
            return self.getToken(VisualFoxpro9Parser.NOWAIT, 0)

        def NOCLEAR(self):
            return self.getToken(VisualFoxpro9Parser.NOCLEAR, 0)

        def NOTIFY(self):
            return self.getToken(VisualFoxpro9Parser.NOTIFY, 0)

        def ENDDO(self):
            return self.getToken(VisualFoxpro9Parser.ENDDO, 0)

        def DECLARE(self):
            return self.getToken(VisualFoxpro9Parser.DECLARE, 0)

        def ERASE(self):
            return self.getToken(VisualFoxpro9Parser.ERASE, 0)

        def SYSMENU(self):
            return self.getToken(VisualFoxpro9Parser.SYSMENU, 0)

        def CLOCK(self):
            return self.getToken(VisualFoxpro9Parser.CLOCK, 0)

        def RETURN(self):
            return self.getToken(VisualFoxpro9Parser.RETURN, 0)

        def PARAMETER(self):
            return self.getToken(VisualFoxpro9Parser.PARAMETER, 0)

        def ALTERNATE(self):
            return self.getToken(VisualFoxpro9Parser.ALTERNATE, 0)

        def EXACT(self):
            return self.getToken(VisualFoxpro9Parser.EXACT, 0)

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)

        def COUNT(self):
            return self.getToken(VisualFoxpro9Parser.COUNT, 0)

        def GOTO(self):
            return self.getToken(VisualFoxpro9Parser.GOTO, 0)

        def TOP(self):
            return self.getToken(VisualFoxpro9Parser.TOP, 0)

        def BOTTOM(self):
            return self.getToken(VisualFoxpro9Parser.BOTTOM, 0)

        def RECORD(self):
            return self.getToken(VisualFoxpro9Parser.RECORD, 0)

        def CLOSE(self):
            return self.getToken(VisualFoxpro9Parser.CLOSE, 0)

        def APPEND(self):
            return self.getToken(VisualFoxpro9Parser.APPEND, 0)

        def BLANK(self):
            return self.getToken(VisualFoxpro9Parser.BLANK, 0)

        def NOMENU(self):
            return self.getToken(VisualFoxpro9Parser.NOMENU, 0)

        def CASE(self):
            return self.getToken(VisualFoxpro9Parser.CASE, 0)

        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)

        def REPORT(self):
            return self.getToken(VisualFoxpro9Parser.REPORT, 0)

        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)

        def NOEJECT(self):
            return self.getToken(VisualFoxpro9Parser.NOEJECT, 0)

        def PRINTER(self):
            return self.getToken(VisualFoxpro9Parser.PRINTER, 0)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)

        def NOPROMPT(self):
            return self.getToken(VisualFoxpro9Parser.NOPROMPT, 0)

        def NOCONSOLE(self):
            return self.getToken(VisualFoxpro9Parser.NOCONSOLE, 0)

        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)

        def STRUCTURE(self):
            return self.getToken(VisualFoxpro9Parser.STRUCTURE, 0)

        def DELETED(self):
            return self.getToken(VisualFoxpro9Parser.DELETED, 0)

        def SUM(self):
            return self.getToken(VisualFoxpro9Parser.SUM, 0)

        def DISTINCT(self):
            return self.getToken(VisualFoxpro9Parser.DISTINCT, 0)

        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)

        def NEXT(self):
            return self.getToken(VisualFoxpro9Parser.NEXT, 0)

        def REST(self):
            return self.getToken(VisualFoxpro9Parser.REST, 0)

        def SKIPKW(self):
            return self.getToken(VisualFoxpro9Parser.SKIPKW, 0)

        def PACK(self):
            return self.getToken(VisualFoxpro9Parser.PACK, 0)

        def EXCLUSIVE(self):
            return self.getToken(VisualFoxpro9Parser.EXCLUSIVE, 0)

        def NEAR(self):
            return self.getToken(VisualFoxpro9Parser.NEAR, 0)

        def MKDIR(self):
            return self.getToken(VisualFoxpro9Parser.MKDIR, 0)

        def RMDIR(self):
            return self.getToken(VisualFoxpro9Parser.RMDIR, 0)

        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)

        def KEYBOARD(self):
            return self.getToken(VisualFoxpro9Parser.KEYBOARD, 0)

        def LABEL(self):
            return self.getToken(VisualFoxpro9Parser.LABEL, 0)

        def PLAIN(self):
            return self.getToken(VisualFoxpro9Parser.PLAIN, 0)

        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)

        def AT(self):
            return self.getToken(VisualFoxpro9Parser.AT, 0)

        def LINE(self):
            return self.getToken(VisualFoxpro9Parser.LINE, 0)

        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)

        def NOMARGIN(self):
            return self.getToken(VisualFoxpro9Parser.NOMARGIN, 0)

        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def COLOR(self):
            return self.getToken(VisualFoxpro9Parser.COLOR, 0)

        def SCHEME(self):
            return self.getToken(VisualFoxpro9Parser.SCHEME, 0)

        def BEFORE(self):
            return self.getToken(VisualFoxpro9Parser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(VisualFoxpro9Parser.AFTER, 0)

        def NEGOTIATE(self):
            return self.getToken(VisualFoxpro9Parser.NEGOTIATE, 0)

        def FONT(self):
            return self.getToken(VisualFoxpro9Parser.FONT, 0)

        def STYLE(self):
            return self.getToken(VisualFoxpro9Parser.STYLE, 0)

        def MARK(self):
            return self.getToken(VisualFoxpro9Parser.MARK, 0)

        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)

        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)

        def SHADOW(self):
            return self.getToken(VisualFoxpro9Parser.SHADOW, 0)

        def MARGIN(self):
            return self.getToken(VisualFoxpro9Parser.MARGIN, 0)

        def RELATIVE(self):
            return self.getToken(VisualFoxpro9Parser.RELATIVE, 0)

        def SELECTION(self):
            return self.getToken(VisualFoxpro9Parser.SELECTION, 0)

        def DEACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.DEACTIVATE, 0)

        def SAME(self):
            return self.getToken(VisualFoxpro9Parser.SAME, 0)

        def NOSHOW(self):
            return self.getToken(VisualFoxpro9Parser.NOSHOW, 0)

        def STEP(self):
            return self.getToken(VisualFoxpro9Parser.STEP, 0)

        def THEN(self):
            return self.getToken(VisualFoxpro9Parser.THEN, 0)

        def UNDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.UNDEFINE, 0)

        def IFDEF(self):
            return self.getToken(VisualFoxpro9Parser.IFDEF, 0)

        def PUSH(self):
            return self.getToken(VisualFoxpro9Parser.PUSH, 0)

        def POP(self):
            return self.getToken(VisualFoxpro9Parser.POP, 0)

        def TIMEOUT(self):
            return self.getToken(VisualFoxpro9Parser.TIMEOUT, 0)

        def ENDWITH(self):
            return self.getToken(VisualFoxpro9Parser.ENDWITH, 0)

        def TYPEAHEAD(self):
            return self.getToken(VisualFoxpro9Parser.TYPEAHEAD, 0)

        def ALIAS(self):
            return self.getToken(VisualFoxpro9Parser.ALIAS, 0)

        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)

        def SEEK(self):
            return self.getToken(VisualFoxpro9Parser.SEEK, 0)

        def WHERE(self):
            return self.getToken(VisualFoxpro9Parser.WHERE, 0)

        def FILTER(self):
            return self.getToken(VisualFoxpro9Parser.FILTER, 0)

        def RENAME(self):
            return self.getToken(VisualFoxpro9Parser.RENAME, 0)

        def INCLUDE(self):
            return self.getToken(VisualFoxpro9Parser.INCLUDE, 0)

        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)

        def BY(self):
            return self.getToken(VisualFoxpro9Parser.BY, 0)

        def UNIQUE(self):
            return self.getToken(VisualFoxpro9Parser.UNIQUE, 0)

        def INDEX(self):
            return self.getToken(VisualFoxpro9Parser.INDEX, 0)

        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)

        def COMPACT(self):
            return self.getToken(VisualFoxpro9Parser.COMPACT, 0)

        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)

        def CANDIDATE(self):
            return self.getToken(VisualFoxpro9Parser.CANDIDATE, 0)

        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)

        def DIMENSION(self):
            return self.getToken(VisualFoxpro9Parser.DIMENSION, 0)

        def NOT(self):
            return self.getToken(VisualFoxpro9Parser.NOT, 0)

        def AND(self):
            return self.getToken(VisualFoxpro9Parser.AND, 0)

        def OR(self):
            return self.getToken(VisualFoxpro9Parser.OR, 0)

        def SCAN(self):
            return self.getToken(VisualFoxpro9Parser.SCAN, 0)

        def ENDSCAN(self):
            return self.getToken(VisualFoxpro9Parser.ENDSCAN, 0)

        def NULL(self):
            return self.getToken(VisualFoxpro9Parser.NULL, 0)

        def BOOLEANCHAR(self):
            return self.getToken(VisualFoxpro9Parser.BOOLEANCHAR, 0)

        def NODEFAULT(self):
            return self.getToken(VisualFoxpro9Parser.NODEFAULT, 0)

        def DLLS(self):
            return self.getToken(VisualFoxpro9Parser.DLLS, 0)

        def MACROS(self):
            return self.getToken(VisualFoxpro9Parser.MACROS, 0)

        def NUMBER(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER, 0)

        def ZAP(self):
            return self.getToken(VisualFoxpro9Parser.ZAP, 0)

        def ROLLOVER(self):
            return self.getToken(VisualFoxpro9Parser.ROLLOVER, 0)

        def DEFAULT(self):
            return self.getToken(VisualFoxpro9Parser.DEFAULT, 0)

        def SAVE(self):
            return self.getToken(VisualFoxpro9Parser.SAVE, 0)

        def NOSAVE(self):
            return self.getToken(VisualFoxpro9Parser.NOSAVE, 0)

        def PROGRAM(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAM, 0)

        def THROW(self):
            return self.getToken(VisualFoxpro9Parser.THROW, 0)

        def TABLES(self):
            return self.getToken(VisualFoxpro9Parser.TABLES, 0)

        def EACH(self):
            return self.getToken(VisualFoxpro9Parser.EACH, 0)

        def CAST(self):
            return self.getToken(VisualFoxpro9Parser.CAST, 0)

        def ENDCASE(self):
            return self.getToken(VisualFoxpro9Parser.ENDCASE, 0)

        def ENDPROC(self):
            return self.getToken(VisualFoxpro9Parser.ENDPROC, 0)

        def REINDEX(self):
            return self.getToken(VisualFoxpro9Parser.REINDEX, 0)

        def INDEXES(self):
            return self.getToken(VisualFoxpro9Parser.INDEXES, 0)

        def OTHERWISE(self):
            return self.getToken(VisualFoxpro9Parser.OTHERWISE, 0)

        def RUN(self):
            return self.getToken(VisualFoxpro9Parser.RUN, 0)

        def EXTENDED(self):
            return self.getToken(VisualFoxpro9Parser.EXTENDED, 0)

        def ASSERT(self):
            return self.getToken(VisualFoxpro9Parser.ASSERT, 0)

        def TRY(self):
            return self.getToken(VisualFoxpro9Parser.TRY, 0)

        def CATCH(self):
            return self.getToken(VisualFoxpro9Parser.CATCH, 0)

        def FINALLY(self):
            return self.getToken(VisualFoxpro9Parser.FINALLY, 0)

        def ENDTRY(self):
            return self.getToken(VisualFoxpro9Parser.ENDTRY, 0)

        def BROWSE(self):
            return self.getToken(VisualFoxpro9Parser.BROWSE, 0)

        def INSERT(self):
            return self.getToken(VisualFoxpro9Parser.INSERT, 0)

        def VALUES(self):
            return self.getToken(VisualFoxpro9Parser.VALUES, 0)

        def MEMVAR(self):
            return self.getToken(VisualFoxpro9Parser.MEMVAR, 0)

        def COMPATIBLE(self):
            return self.getToken(VisualFoxpro9Parser.COMPATIBLE, 0)

        def DB4(self):
            return self.getToken(VisualFoxpro9Parser.DB4, 0)

        def FOXPLUS(self):
            return self.getToken(VisualFoxpro9Parser.FOXPLUS, 0)

        def TYPE(self):
            return self.getToken(VisualFoxpro9Parser.TYPE, 0)

        def SCATTER(self):
            return self.getToken(VisualFoxpro9Parser.SCATTER, 0)

        def GATHER(self):
            return self.getToken(VisualFoxpro9Parser.GATHER, 0)

        def EXCEPT(self):
            return self.getToken(VisualFoxpro9Parser.EXCEPT, 0)

        def LIKE(self):
            return self.getToken(VisualFoxpro9Parser.LIKE, 0)

        def FIELDS(self):
            return self.getToken(VisualFoxpro9Parser.FIELDS, 0)

        def ALTER(self):
            return self.getToken(VisualFoxpro9Parser.ALTER, 0)

        def COLUMN(self):
            return self.getToken(VisualFoxpro9Parser.COLUMN, 0)

        def DROP(self):
            return self.getToken(VisualFoxpro9Parser.DROP, 0)

        def ID(self):
            return self.getToken(VisualFoxpro9Parser.ID, 0)

        def HELP(self):
            return self.getToken(VisualFoxpro9Parser.HELP, 0)

        def SAY(self):
            return self.getToken(VisualFoxpro9Parser.SAY, 0)

        def COLLECTION(self):
            return self.getToken(VisualFoxpro9Parser.COLLECTION, 0)

        def SYSTEM(self):
            return self.getToken(VisualFoxpro9Parser.SYSTEM, 0)

        def TALK(self):
            return self.getToken(VisualFoxpro9Parser.TALK, 0)

        def PROGRAMCONTROL(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAMCONTROL, 0)

        def RELATION(self):
            return self.getToken(VisualFoxpro9Parser.RELATION, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_identifier

        def accept(self, visitor):
            if hasattr(visitor, "visitIdentifier"):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = VisualFoxpro9Parser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1832
            _la = self._input.LA(1)
            if not(((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (VisualFoxpro9Parser.ASSERT - 39)) | (1 << (VisualFoxpro9Parser.TO - 39)) | (1 << (VisualFoxpro9Parser.DO - 39)) | (1 << (VisualFoxpro9Parser.IN - 39)) | (1 << (VisualFoxpro9Parser.AS - 39)) | (1 << (VisualFoxpro9Parser.IF - 39)) | (1 << (VisualFoxpro9Parser.ELIF - 39)) | (1 << (VisualFoxpro9Parser.ELSE - 39)) | (1 << (VisualFoxpro9Parser.ENDIF - 39)) | (1 << (VisualFoxpro9Parser.ON - 39)) | (1 << (VisualFoxpro9Parser.OFF - 39)) | (1 << (VisualFoxpro9Parser.ERROR - 39)) | (1 << (VisualFoxpro9Parser.WITH - 39)) | (1 << (VisualFoxpro9Parser.STORE - 39)) | (1 << (VisualFoxpro9Parser.EXTERNAL - 39)) | (1 << (VisualFoxpro9Parser.ARRAY - 39)) | (1 << (VisualFoxpro9Parser.DELETE - 39)) | (1 << (VisualFoxpro9Parser.RECALL - 39)) | (1 << (VisualFoxpro9Parser.FILE - 39)) | (1 << (VisualFoxpro9Parser.SET - 39)) | (1 << (VisualFoxpro9Parser.RELEASE - 39)) | (1 << (VisualFoxpro9Parser.RECYCLE - 39)) | (1 << (VisualFoxpro9Parser.CREATE - 39)) | (1 << (VisualFoxpro9Parser.TABLE - 39)) | (1 << (VisualFoxpro9Parser.DBF - 39)) | (1 << (VisualFoxpro9Parser.NAME - 39)) | (1 << (VisualFoxpro9Parser.FREE - 39)) | (1 << (VisualFoxpro9Parser.SELECT - 39)) | (1 << (VisualFoxpro9Parser.USE - 39)) | (1 << (VisualFoxpro9Parser.READ - 39)) | (1 << (VisualFoxpro9Parser.EVENTS - 39)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 39)) | (1 << (VisualFoxpro9Parser.CLEAR - 39)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 39)) | (1 << (VisualFoxpro9Parser.ENDPROC - 39)) | (1 << (VisualFoxpro9Parser.DEFINE - 39)) | (1 << (VisualFoxpro9Parser.CLASS - 39)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 39)) | (1 << (VisualFoxpro9Parser.LOCATE - 39)) | (1 << (VisualFoxpro9Parser.CONTINUE - 39)) | (1 << (VisualFoxpro9Parser.FOR - 39)) | (1 << (VisualFoxpro9Parser.ENDFOR - 39)) | (1 << (VisualFoxpro9Parser.WHILE - 39)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 39)) | (1 << (VisualFoxpro9Parser.STATUS - 39)) | (1 << (VisualFoxpro9Parser.BAR - 39)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 39)) | (1 << (VisualFoxpro9Parser.CURSOR - 39)) | (1 << (VisualFoxpro9Parser.REFRESH - 39)) | (1 << (VisualFoxpro9Parser.BELL - 39)) | (1 << (VisualFoxpro9Parser.CENTURY - 39)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 39)) | (1 << (VisualFoxpro9Parser.DATE - 39)) | (1 << (VisualFoxpro9Parser.ADD - 39)) | (1 << (VisualFoxpro9Parser.OBJECT - 39)) | (1 << (VisualFoxpro9Parser.REPLACE - 39)) | (1 << (VisualFoxpro9Parser.LIBRARY - 39)) | (1 << (VisualFoxpro9Parser.SHARED - 39)) | (1 << (VisualFoxpro9Parser.WAIT - 39)) | (1 << (VisualFoxpro9Parser.WINDOW - 39)) | (1 << (VisualFoxpro9Parser.NOWAIT - 39)))) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (VisualFoxpro9Parser.NOCLEAR - 103)) | (1 << (VisualFoxpro9Parser.NOTIFY - 103)) | (1 << (VisualFoxpro9Parser.ENDDO - 103)) | (1 << (VisualFoxpro9Parser.DECLARE - 103)) | (1 << (VisualFoxpro9Parser.ERASE - 103)) | (1 << (VisualFoxpro9Parser.SYSMENU - 103)) | (1 << (VisualFoxpro9Parser.CLOCK - 103)) | (1 << (VisualFoxpro9Parser.RETURN - 103)) | (1 << (VisualFoxpro9Parser.PARAMETER - 103)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 103)) | (1 << (VisualFoxpro9Parser.EXACT - 103)) | (1 << (VisualFoxpro9Parser.ALL - 103)) | (1 << (VisualFoxpro9Parser.COUNT - 103)) | (1 << (VisualFoxpro9Parser.GOTO - 103)) | (1 << (VisualFoxpro9Parser.TOP - 103)) | (1 << (VisualFoxpro9Parser.BOTTOM - 103)) | (1 << (VisualFoxpro9Parser.RECORD - 103)) | (1 << (VisualFoxpro9Parser.CLOSE - 103)) | (1 << (VisualFoxpro9Parser.APPEND - 103)) | (1 << (VisualFoxpro9Parser.BLANK - 103)) | (1 << (VisualFoxpro9Parser.NOMENU - 103)) | (1 << (VisualFoxpro9Parser.CASE - 103)) | (1 << (VisualFoxpro9Parser.ENDCASE - 103)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 103)) | (1 << (VisualFoxpro9Parser.FROM - 103)) | (1 << (VisualFoxpro9Parser.REPORT - 103)) | (1 << (VisualFoxpro9Parser.FORM - 103)) | (1 << (VisualFoxpro9Parser.NOEJECT - 103)) | (1 << (VisualFoxpro9Parser.PRINTER - 103)) | (1 << (VisualFoxpro9Parser.PROMPT - 103)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 103)) | (1 << (VisualFoxpro9Parser.DB4 - 103)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 103)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 103)) | (1 << (VisualFoxpro9Parser.COPY - 103)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 103)) | (1 << (VisualFoxpro9Parser.DELETED - 103)) | (1 << (VisualFoxpro9Parser.SUM - 103)) | (1 << (VisualFoxpro9Parser.DISTINCT - 103)) | (1 << (VisualFoxpro9Parser.INTO - 103)) | (1 << (VisualFoxpro9Parser.NEXT - 103)) | (1 << (VisualFoxpro9Parser.REST - 103)) | (1 << (VisualFoxpro9Parser.SKIPKW - 103)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 103)) | (1 << (VisualFoxpro9Parser.NEAR - 103)) | (1 << (VisualFoxpro9Parser.MKDIR - 103)) | (1 << (VisualFoxpro9Parser.RMDIR - 103)) | (1 << (VisualFoxpro9Parser.KEY - 103)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 103)) | (1 << (VisualFoxpro9Parser.LABEL - 103)) | (1 << (VisualFoxpro9Parser.PLAIN - 103)) | (1 << (VisualFoxpro9Parser.MENU - 103)) | (1 << (VisualFoxpro9Parser.AT - 103)) | (1 << (VisualFoxpro9Parser.LINE - 103)) | (1 << (VisualFoxpro9Parser.SCREEN - 103)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 103)) | (1 << (VisualFoxpro9Parser.PAD - 103)) | (1 << (VisualFoxpro9Parser.OF - 103)) | (1 << (VisualFoxpro9Parser.COLOR - 103)) | (1 << (VisualFoxpro9Parser.SCHEME - 103)) | (1 << (VisualFoxpro9Parser.BEFORE - 103)) | (1 << (VisualFoxpro9Parser.AFTER - 103)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 103)) | (1 << (VisualFoxpro9Parser.FONT - 103)))) != 0) or ((((_la - 167)) & ~0x3f) == 0 and ((1 << (_la - 167)) & ((1 << (VisualFoxpro9Parser.STYLE - 167)) | (1 << (VisualFoxpro9Parser.MARK - 167)) | (1 << (VisualFoxpro9Parser.MESSAGE - 167)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 167)) | (1 << (VisualFoxpro9Parser.POPUP - 167)) | (1 << (VisualFoxpro9Parser.EXTENDED - 167)) | (1 << (VisualFoxpro9Parser.SHADOW - 167)) | (1 << (VisualFoxpro9Parser.MARGIN - 167)) | (1 << (VisualFoxpro9Parser.RELATIVE - 167)) | (1 << (VisualFoxpro9Parser.SELECTION - 167)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 167)) | (1 << (VisualFoxpro9Parser.SAME - 167)) | (1 << (VisualFoxpro9Parser.NOSHOW - 167)) | (1 << (VisualFoxpro9Parser.STEP - 167)) | (1 << (VisualFoxpro9Parser.THEN - 167)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 167)) | (1 << (VisualFoxpro9Parser.IFDEF - 167)) | (1 << (VisualFoxpro9Parser.PUSH - 167)) | (1 << (VisualFoxpro9Parser.POP - 167)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 167)) | (1 << (VisualFoxpro9Parser.ENDWITH - 167)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 167)) | (1 << (VisualFoxpro9Parser.ALIAS - 167)) | (1 << (VisualFoxpro9Parser.ORDER - 167)) | (1 << (VisualFoxpro9Parser.SEEK - 167)) | (1 << (VisualFoxpro9Parser.WHERE - 167)) | (1 << (VisualFoxpro9Parser.FILTER - 167)) | (1 << (VisualFoxpro9Parser.RENAME - 167)) | (1 << (VisualFoxpro9Parser.INCLUDE - 167)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 167)) | (1 << (VisualFoxpro9Parser.BY - 167)) | (1 << (VisualFoxpro9Parser.UNIQUE - 167)) | (1 << (VisualFoxpro9Parser.INDEX - 167)) | (1 << (VisualFoxpro9Parser.TAG - 167)) | (1 << (VisualFoxpro9Parser.COMPACT - 167)) | (1 << (VisualFoxpro9Parser.ASCENDING - 167)) | (1 << (VisualFoxpro9Parser.DESCENDING - 167)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 167)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 167)) | (1 << (VisualFoxpro9Parser.DIMENSION - 167)) | (1 << (VisualFoxpro9Parser.NOT - 167)) | (1 << (VisualFoxpro9Parser.AND - 167)) | (1 << (VisualFoxpro9Parser.OR - 167)) | (1 << (VisualFoxpro9Parser.SCAN - 167)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 167)) | (1 << (VisualFoxpro9Parser.NULL - 167)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 167)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 167)) | (1 << (VisualFoxpro9Parser.DLLS - 167)) | (1 << (VisualFoxpro9Parser.MACROS - 167)) | (1 << (VisualFoxpro9Parser.NUMBER - 167)) | (1 << (VisualFoxpro9Parser.ZAP - 167)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 167)) | (1 << (VisualFoxpro9Parser.DEFAULT - 167)) | (1 << (VisualFoxpro9Parser.SAVE - 167)) | (1 << (VisualFoxpro9Parser.NOSAVE - 167)) | (1 << (VisualFoxpro9Parser.DATABASE - 167)) | (1 << (VisualFoxpro9Parser.TABLES - 167)) | (1 << (VisualFoxpro9Parser.INDEXES - 167)) | (1 << (VisualFoxpro9Parser.PACK - 167)) | (1 << (VisualFoxpro9Parser.REINDEX - 167)))) != 0) or ((((_la - 231)) & ~0x3f) == 0 and ((1 << (_la - 231)) & ((1 << (VisualFoxpro9Parser.PROGRAM - 231)) | (1 << (VisualFoxpro9Parser.SCOPE - 231)) | (1 << (VisualFoxpro9Parser.THROW - 231)) | (1 << (VisualFoxpro9Parser.EACH - 231)) | (1 << (VisualFoxpro9Parser.CAST - 231)) | (1 << (VisualFoxpro9Parser.RUN - 231)) | (1 << (VisualFoxpro9Parser.TRY - 231)) | (1 << (VisualFoxpro9Parser.CATCH - 231)) | (1 << (VisualFoxpro9Parser.FINALLY - 231)) | (1 << (VisualFoxpro9Parser.ENDTRY - 231)) | (1 << (VisualFoxpro9Parser.BROWSE - 231)) | (1 << (VisualFoxpro9Parser.INSERT - 231)) | (1 << (VisualFoxpro9Parser.VALUES - 231)) | (1 << (VisualFoxpro9Parser.MEMVAR - 231)) | (1 << (VisualFoxpro9Parser.TYPE - 231)) | (1 << (VisualFoxpro9Parser.SCATTER - 231)) | (1 << (VisualFoxpro9Parser.GATHER - 231)) | (1 << (VisualFoxpro9Parser.EXCEPT - 231)) | (1 << (VisualFoxpro9Parser.LIKE - 231)) | (1 << (VisualFoxpro9Parser.FIELDS - 231)) | (1 << (VisualFoxpro9Parser.ALTER - 231)) | (1 << (VisualFoxpro9Parser.COLUMN - 231)) | (1 << (VisualFoxpro9Parser.DROP - 231)) | (1 << (VisualFoxpro9Parser.HELP - 231)) | (1 << (VisualFoxpro9Parser.SAY - 231)) | (1 << (VisualFoxpro9Parser.COLLECTION - 231)) | (1 << (VisualFoxpro9Parser.SYSTEM - 231)) | (1 << (VisualFoxpro9Parser.TALK - 231)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 231)) | (1 << (VisualFoxpro9Parser.RELATION - 231)) | (1 << (VisualFoxpro9Parser.ID - 231)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx, ruleIndex, predIndex):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[53] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx, predIndex):
            if predIndex == 0:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         




