# Generated from VisualFoxpro9.g4 by ANTLR 4.7.2
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3")
        buf.write(u"\u0134\u0862\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6")
        buf.write(u"\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4")
        buf.write(u"\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t")
        buf.write(u"\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27")
        buf.write(u"\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4")
        buf.write(u"\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t")
        buf.write(u"#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4")
        buf.write(u",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62")
        buf.write(u"\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4")
        buf.write(u"8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\3\2\3\2\3\2")
        buf.write(u"\3\3\7\3\u0081\n\3\f\3\16\3\u0084\13\3\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\5\4\u008b\n\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u0093")
        buf.write(u"\n\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\7\4\u009d\n\4\f")
        buf.write(u"\4\16\4\u00a0\13\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\7\4\u00b1\n\4\f\4\16\4\u00b4")
        buf.write(u"\13\4\3\4\3\4\3\4\3\4\7\4\u00ba\n\4\f\4\16\4\u00bd\13")
        buf.write(u"\4\3\4\5\4\u00c0\n\4\5\4\u00c2\n\4\3\5\3\5\7\5\u00c6")
        buf.write(u"\n\5\f\5\16\5\u00c9\13\5\3\5\3\5\3\6\3\6\7\6\u00cf\n")
        buf.write(u"\6\f\6\16\6\u00d2\13\6\3\6\3\6\5\6\u00d6\n\6\3\7\3\7")
        buf.write(u"\3\7\3\7\3\7\5\7\u00dd\n\7\3\7\3\7\5\7\u00e1\n\7\3\b")
        buf.write(u"\3\b\3\t\7\t\u00e6\n\t\f\t\16\t\u00e9\13\t\3\n\7\n\u00ec")
        buf.write(u"\n\n\f\n\16\n\u00ef\13\n\3\13\3\13\3\13\3\13\5\13\u00f5")
        buf.write(u"\n\13\3\13\3\13\3\f\3\f\7\f\u00fb\n\f\f\f\16\f\u00fe")
        buf.write(u"\13\f\3\f\3\f\3\f\7\f\u0103\n\f\f\f\16\f\u0106\13\f\3")
        buf.write(u"\r\3\r\3\r\3\r\3\r\5\r\u010d\n\r\3\16\3\16\5\16\u0111")
        buf.write(u"\n\16\3\17\3\17\3\17\7\17\u0116\n\17\f\17\16\17\u0119")
        buf.write(u"\13\17\3\20\5\20\u011c\n\20\3\20\3\20\3\20\3\20\5\20")
        buf.write(u"\u0122\n\20\3\20\5\20\u0125\n\20\3\20\5\20\u0128\n\20")
        buf.write(u"\3\20\3\20\3\21\3\21\3\21\3\21\3\21\7\21\u0131\n\21\f")
        buf.write(u"\21\16\21\u0134\13\21\5\21\u0136\n\21\3\22\3\22\3\22")
        buf.write(u"\5\22\u013b\n\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\5")
        buf.write(u"\23\u0144\n\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write(u"\3\24\3\24\5\24\u0150\n\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write(u"\24\3\24\3\24\5\24\u015a\n\24\3\24\3\24\5\24\u015e\n")
        buf.write(u"\24\3\25\3\25\3\25\5\25\u0163\n\25\5\25\u0165\n\25\3")
        buf.write(u"\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\30\3\30")
        buf.write(u"\3\30\3\30\3\31\3\31\3\31\3\31\7\31\u0178\n\31\f\31\16")
        buf.write(u"\31\u017b\13\31\3\31\7\31\u017e\n\31\f\31\16\31\u0181")
        buf.write(u"\13\31\3\31\5\31\u0184\n\31\3\31\3\31\3\32\5\32\u0189")
        buf.write(u"\n\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\34\3")
        buf.write(u"\34\3\34\5\34\u0196\n\34\3\34\3\34\3\34\3\34\3\35\3\35")
        buf.write(u"\5\35\u019e\n\35\3\35\3\35\5\35\u01a2\n\35\3\35\3\35")
        buf.write(u"\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u01ae\n")
        buf.write(u"\36\3\36\3\36\5\36\u01b2\n\36\3\36\3\36\3\36\5\36\u01b7")
        buf.write(u"\n\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5")
        buf.write(u"\37\u01c2\n\37\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(u" \7 \u01d1\n \f \16 \u01d4\13 \5 \u01d6\n \3 \3 \3 \3")
        buf.write(u" \3 \3 \5 \u01de\n \3 \3 \3 \3 \6 \u01e4\n \r \16 \u01e5")
        buf.write(u"\5 \u01e8\n \3 \3 \3 \3 \5 \u01ee\n \3 \3 \3 \5 \u01f3")
        buf.write(u"\n \3 \3 \3 \3 \3 \7 \u01fa\n \f \16 \u01fd\13 \3 \3")
        buf.write(u" \3 \3 \3 \7 \u0204\n \f \16 \u0207\13 \5 \u0209\n \3")
        buf.write(u" \3 \3 \3 \3 \3 \7 \u0211\n \f \16 \u0214\13 \3 \3 \3")
        buf.write(u" \3 \5 \u021a\n \3 \3 \5 \u021e\n \3 \3 \3 \5 \u0223")
        buf.write(u"\n \3 \3 \3 \7 \u0228\n \f \16 \u022b\13 \3 \3 \3 \5")
        buf.write(u" \u0230\n \3 \3 \5 \u0234\n \3 \5 \u0237\n \3 \5 \u023a")
        buf.write(u"\n \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u0245\n \3 \3 \3 \3")
        buf.write(u" \3 \3 \7 \u024d\n \f \16 \u0250\13 \3 \3 \3 \5 \u0255")
        buf.write(u"\n \3 \3 \5 \u0259\n \3 \5 \u025c\n \3 \3 \3 \5 \u0261")
        buf.write(u"\n \3 \3 \3 \3 \3 \3 \3 \3 \5 \u026b\n \3 \3 \3 \3 \3")
        buf.write(u" \5 \u0272\n \3 \3 \3 \3 \3 \5 \u0279\n \3 \3 \3 \3 ")
        buf.write(u"\3 \5 \u0280\n \5 \u0282\n \3 \3 \3 \3 \3 \3 \5 \u028a")
        buf.write(u"\n \3 \5 \u028d\n \5 \u028f\n \3 \3 \3 \5 \u0294\n \3")
        buf.write(u" \3 \3 \3 \5 \u029a\n \5 \u029c\n \3 \3 \3 \3 \3 \5 ")
        buf.write(u"\u02a3\n \3 \3 \5 \u02a7\n \3 \3 \3 \5 \u02ac\n \3 \3")
        buf.write(u" \3 \3 \7 \u02b2\n \f \16 \u02b5\13 \3 \3 \5 \u02b9\n")
        buf.write(u" \3 \3 \3 \5 \u02be\n \3 \5 \u02c1\n \3 \3 \3 \3 \3 ")
        buf.write(u"\3 \3 \5 \u02ca\n \3 \3 \3 \5 \u02cf\n \3 \5 \u02d2\n")
        buf.write(u" \5 \u02d4\n \3 \5 \u02d7\n \3 \3 \3 \3 \3 \3 \3 \3 ")
        buf.write(u"\3 \3 \3 \5 \u02e4\n \3 \3 \3 \3 \5 \u02ea\n \3 \3 \3")
        buf.write(u" \3 \5 \u02f0\n \5 \u02f2\n \3 \3 \3 \3 \3 \3 \3 \3 ")
        buf.write(u"\5 \u02fc\n \5 \u02fe\n \5 \u0300\n \5 \u0302\n \3 \3")
        buf.write(u" \5 \u0306\n \3 \3 \5 \u030a\n \3 \3 \3 \3 \5 \u0310")
        buf.write(u"\n \3 \3 \5 \u0314\n \5 \u0316\n \3 \3 \5 \u031a\n \3")
        buf.write(u" \3 \3 \5 \u031f\n \5 \u0321\n \3 \3 \3 \5 \u0326\n ")
        buf.write(u"\3 \3 \3 \3 \5 \u032c\n \3 \5 \u032f\n \3 \5 \u0332\n")
        buf.write(u" \3 \3 \3 \5 \u0337\n \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 ")
        buf.write(u"\u0342\n \3 \3 \3 \3 \5 \u0348\n \3 \3 \5 \u034c\n \3")
        buf.write(u" \3 \5 \u0350\n \5 \u0352\n \3 \5 \u0355\n \3 \5 \u0358")
        buf.write(u"\n \3 \3 \3 \3 \3 \3 \5 \u0360\n \3 \3 \5 \u0364\n \3")
        buf.write(u" \3 \3 \3 \3 \3 \3 \5 \u036d\n \3 \3 \3 \3 \5 \u0373")
        buf.write(u"\n \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(u" \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \7 \u0391\n \f \16")
        buf.write(u" \u0394\13 \3 \3 \3 \3 \5 \u039a\n \3 \3 \3 \3 \5 \u03a0")
        buf.write(u"\n \3 \3 \3 \7 \u03a5\n \f \16 \u03a8\13 \3 \3 \5 \u03ac")
        buf.write(u"\n \3 \3 \5 \u03b0\n \3 \3 \3 \3 \5 \u03b6\n \3 \3 \3")
        buf.write(u" \3 \7 \u03bc\n \f \16 \u03bf\13 \3 \3 \3 \3 \3 \5 \u03c6")
        buf.write(u"\n \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u03d6")
        buf.write(u"\n \7 \u03d8\n \f \16 \u03db\13 \3 \3 \3 \5 \u03e0\n")
        buf.write(u" \3 \3 \5 \u03e4\n \3 \3 \5 \u03e8\n \3 \3 \5 \u03ec")
        buf.write(u"\n \3 \3 \3 \5 \u03f1\n \3 \3 \3 \5 \u03f6\n \5 \u03f8")
        buf.write(u"\n \3 \3 \3 \3 \3 \5 \u03ff\n \3 \3 \3 \3 \3 \3 \3 \7")
        buf.write(u" \u0408\n \f \16 \u040b\13 \3 \3 \7 \u040f\n \f \16 ")
        buf.write(u"\u0412\13 \3 \3 \3 \3 \3 \3 \3 \3 \7 \u041c\n \f \16")
        buf.write(u" \u041f\13 \3 \3 \3 \3 \3 \3 \5 \u0427\n \3 \5 \u042a")
        buf.write(u"\n \3 \5 \u042d\n \3 \5 \u0430\n \3 \3 \3 \3 \7 \u0436")
        buf.write(u"\n \f \16 \u0439\13 \3 \3 \3 \3 \3 \7 \u0440\n \f \16")
        buf.write(u" \u0443\13 \3 \3 \3 \3 \3 \3 \3 \7 \u044c\n \f \16 \u044f")
        buf.write(u"\13 \3 \3 \3 \3 \7 \u0455\n \f \16 \u0458\13 \7 \u045a")
        buf.write(u"\n \f \16 \u045d\13 \3 \3 \3 \3 \5 \u0463\n \3 \3 \7")
        buf.write(u" \u0467\n \f \16 \u046a\13 \3 \3 \3 \3 \7 \u0470\n \f")
        buf.write(u" \16 \u0473\13 \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u047e\n")
        buf.write(u" \3 \3 \5 \u0482\n \3 \3 \5 \u0486\n \3 \3 \3 \3 \3 ")
        buf.write(u"\3 \5 \u048e\n \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u0499\n")
        buf.write(u" \3 \3 \3 \3 \5 \u049f\n \3 \3 \3 \3 \3 \5 \u04a6\n ")
        buf.write(u"\3 \3 \5 \u04aa\n \3 \3 \5 \u04ae\n \3 \3 \3 \5 \u04b3")
        buf.write(u"\n \3 \3 \3 \3 \3 \3 \3 \5 \u04bc\n \5 \u04be\n \3 \3")
        buf.write(u" \5 \u04c2\n \3 \3 \3 \3 \3 \3 \3 \3 \5 \u04cc\n \3 ")
        buf.write(u"\5 \u04cf\n \3 \5 \u04d2\n \5 \u04d4\n \3 \3 \5 \u04d8")
        buf.write(u"\n \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \7 \u04e5\n \f \16")
        buf.write(u" \u04e8\13 \3 \3 \5 \u04ec\n \3 \3 \3 \3 \3 \7 \u04f3")
        buf.write(u"\n \f \16 \u04f6\13 \3 \3 \3 \3 \5 \u04fc\n \3 \5 \u04ff")
        buf.write(u"\n \3 \3 \5 \u0503\n \3 \3 \3 \3 \3 \3 \5 \u050b\n \3")
        buf.write(u" \3 \7 \u050f\n \f \16 \u0512\13 \3 \3 \5 \u0516\n \3")
        buf.write(u" \3 \3 \3 \3 \5 \u051d\n \3 \3 \7 \u0521\n \f \16 \u0524")
        buf.write(u"\13 \3 \3 \3 \5 \u0529\n \3 \3 \3 \3 \3 \3 \3 \5 \u0532")
        buf.write(u"\n \3 \3 \7 \u0536\n \f \16 \u0539\13 \3 \3 \3 \5 \u053e")
        buf.write(u"\n \3 \3 \3 \3 \3 \3 \3 \7 \u0547\n \f \16 \u054a\13")
        buf.write(u" \3 \3 \3 \5 \u054f\n \3 \5 \u0552\n \3 \3 \5 \u0556")
        buf.write(u"\n \3 \3 \5 \u055a\n \5 \u055c\n \3 \3 \3 \3 \3 \3 \3")
        buf.write(u" \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 ")
        buf.write(u"\u0575\n \3 \3 \3 \3 \5 \u057b\n \3 \3 \3 \3 \5 \u0581")
        buf.write(u"\n \3 \3 \3 \3 \5 \u0587\n \3 \7 \u058a\n \f \16 \u058d")
        buf.write(u"\13 \3 \3 \5 \u0591\n \3 \3 \3 \3 \3 \5 \u0598\n \3 ")
        buf.write(u"\5 \u059b\n \3 \3 \3 \5 \u05a0\n \3 \7 \u05a3\n \f \16")
        buf.write(u" \u05a6\13 \3 \3 \3 \3 \5 \u05ac\n \3 \3 \5 \u05b0\n")
        buf.write(u" \3 \3 \3 \3 \3 \3 \7 \u05b8\n \f \16 \u05bb\13 \3 \3")
        buf.write(u" \3 \3 \3 \3 \3 \5 \u05c4\n \3 \3 \3 \5 \u05c9\n \3 ")
        buf.write(u"\3 \3 \3 \5 \u05cf\n \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(u" \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u05ea")
        buf.write(u"\n \5 \u05ec\n \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \7 \u05f8")
        buf.write(u"\n \f \16 \u05fb\13 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(u" \5 \u0608\n \3 \3 \3 \5 \u060d\n \3!\3!\3!\3!\3!\3!")
        buf.write(u"\5!\u0615\n!\3\"\7\"\u0618\n\"\f\"\16\"\u061b\13\"\3")
        buf.write(u"#\3#\3#\7#\u0620\n#\f#\16#\u0623\13#\3$\3$\5$\u0627\n")
        buf.write(u"$\3$\5$\u062a\n$\3%\3%\3%\5%\u062f\n%\3&\3&\3&\3&\3&")
        buf.write(u"\3&\5&\u0637\n&\5&\u0639\n&\3&\3&\3&\3&\3&\3&\3&\5&\u0642")
        buf.write(u"\n&\3&\3&\3&\3&\3&\3&\3&\5&\u064b\n&\5&\u064d\n&\5&\u064f")
        buf.write(u"\n&\3&\3&\3&\3&\3&\5&\u0656\n&\3&\3&\5&\u065a\n&\3&\5")
        buf.write(u"&\u065d\n&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0668\n&\5&")
        buf.write(u"\u066a\n&\3&\3&\3&\5&\u066f\n&\3&\3&\3&\3&\3&\3&\3&\3")
        buf.write(u"&\3&\3&\3&\3&\5&\u067d\n&\3&\3&\3&\3&\3&\3&\3&\3&\3&")
        buf.write(u"\3&\3&\3&\3&\3&\3&\5&\u068e\n&\5&\u0690\n&\3&\3&\3&\3")
        buf.write(u"&\3&\5&\u0697\n&\3&\3&\5&\u069b\n&\3&\5&\u069e\n&\3&")
        buf.write(u"\3&\3&\5&\u06a3\n&\3&\3&\3&\3&\5&\u06a9\n&\3&\3&\3&\3")
        buf.write(u"&\3&\3&\3&\3&\3&\5&\u06b4\n&\3&\3&\3&\3&\3&\5&\u06bb")
        buf.write(u"\n&\3&\3&\3&\5&\u06c0\n&\3&\3&\5&\u06c4\n&\3&\5&\u06c7")
        buf.write(u"\n&\5&\u06c9\n&\3&\3&\3&\5&\u06ce\n&\3&\3&\3&\3&\3&\3")
        buf.write(u"&\3&\5&\u06d7\n&\5&\u06d9\n&\5&\u06db\n&\3&\3&\3&\3&")
        buf.write(u"\3&\7&\u06e2\n&\f&\16&\u06e5\13&\3&\5&\u06e8\n&\3&\3")
        buf.write(u"&\3&\3&\3&\5&\u06ef\n&\3&\3&\3&\3&\3&\3&\3&\5&\u06f8")
        buf.write(u"\n&\3&\5&\u06fb\n&\3&\3&\3&\3&\5&\u0701\n&\3&\3&\3&\3")
        buf.write(u"&\3&\3&\3&\3&\3&\5&\u070c\n&\3&\3&\5&\u0710\n&\3&\3&")
        buf.write(u"\3&\3&\3&\3&\3&\3&\3&\5&\u071b\n&\3\'\3\'\3\'\3\'\3\'")
        buf.write(u"\5\'\u0722\n\'\5\'\u0724\n\'\3(\3(\3(\3)\3)\3)\5)\u072c")
        buf.write(u"\n)\3*\3*\5*\u0730\n*\3+\3+\7+\u0734\n+\f+\16+\u0737")
        buf.write(u"\13+\3+\6+\u073a\n+\r+\16+\u073b\5+\u073e\n+\3,\3,\3")
        buf.write(u",\7,\u0743\n,\f,\16,\u0746\13,\3-\3-\3-\3.\3.\3.\3.\3")
        buf.write(u".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\5.")
        buf.write(u"\u0760\n.\3.\3.\5.\u0764\n.\5.\u0766\n.\3.\3.\3.\3.\5")
        buf.write(u".\u076c\n.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.")
        buf.write(u"\3.\3.\3.\3.\3.\3.\3.\7.\u0783\n.\f.\16.\u0786\13.\3")
        buf.write(u"/\3/\3\60\3\60\3\61\3\61\3\61\3\61\3\61\5\61\u0791\n")
        buf.write(u"\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u079b")
        buf.write(u"\n\61\3\61\3\61\5\61\u079f\n\61\5\61\u07a1\n\61\3\62")
        buf.write(u"\3\62\5\62\u07a5\n\62\3\63\3\63\5\63\u07a9\n\63\3\63")
        buf.write(u"\3\63\3\63\5\63\u07ae\n\63\3\63\5\63\u07b1\n\63\3\63")
        buf.write(u"\5\63\u07b4\n\63\3\63\3\63\3\63\5\63\u07b9\n\63\5\63")
        buf.write(u"\u07bb\n\63\3\64\3\64\3\64\5\64\u07c0\n\64\3\64\6\64")
        buf.write(u"\u07c3\n\64\r\64\16\64\u07c4\3\65\3\65\3\65\3\65\3\65")
        buf.write(u"\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3")
        buf.write(u"\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65")
        buf.write(u"\u07e0\n\65\3\66\3\66\5\66\u07e4\n\66\3\67\5\67\u07e7")
        buf.write(u"\n\67\3\67\3\67\3\67\3\67\3\67\5\67\u07ee\n\67\3\67\3")
        buf.write(u"\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write(u"\3\67\3\67\3\67\5\67\u07ff\n\67\3\67\5\67\u0802\n\67")
        buf.write(u"\3\67\3\67\3\67\3\67\3\67\5\67\u0809\n\67\5\67\u080b")
        buf.write(u"\n\67\3\67\5\67\u080e\n\67\5\67\u0810\n\67\3\67\3\67")
        buf.write(u"\3\67\7\67\u0815\n\67\f\67\16\67\u0818\13\67\3\67\3\67")
        buf.write(u"\3\67\7\67\u081d\n\67\f\67\16\67\u0820\13\67\3\67\3\67")
        buf.write(u"\3\67\7\67\u0825\n\67\f\67\16\67\u0828\13\67\3\67\5\67")
        buf.write(u"\u082b\n\67\3\67\5\67\u082e\n\67\38\58\u0831\n8\38\3")
        buf.write(u"8\38\78\u0836\n8\f8\168\u0839\138\39\59\u083c\n9\39\3")
        buf.write(u"9\59\u0840\n9\3:\3:\3:\3:\3;\3;\3;\5;\u0849\n;\3;\3;")
        buf.write(u"\3;\3;\3;\5;\u0850\n;\3;\3;\5;\u0854\n;\3<\3<\3=\3=\3")
        buf.write(u"=\3=\3=\3=\5=\u085e\n=\3>\3>\3>\4\u00ed\u07c4\3Z?\2\4")
        buf.write(u"\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64")
        buf.write(u"\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz\2+\3\2\u0132\u0132")
        buf.write(u"\b\2ccoouu\u0097\u0097\u009a\u009a\u0132\u0132\4\3\30")
        buf.write(u"\30\u0132\u0132\4\2\t\t\u00c9\u00c9\3\3\u0132\u0132\4")
        buf.write(u"\2\u0082\u0082\u0100\u0100\5\2\63\63aagg\5\2FF\u00b6")
        buf.write(u"\u00b6\u00f6\u00f6\4\2\u00b2\u00b2\u00dd\u00dd\4\2HH")
        buf.write(u"\u00e0\u00e0\5\2>>\u00fa\u00fa\u0120\u0120\4\2OO\u0084")
        buf.write(u"\u0084\5\2XX]]\u0115\u0115\4\2XX\u0115\u0115\4\2\u0117")
        buf.write(u"\u0117\u011f\u011f\4\2\65\65ff\4\2AA\u0125\u0125\4\2")
        buf.write(u"\177\177\u00a4\u00a4\4\2dd\u00e6\u00e6\4\2]]\u00ae\u00ae")
        buf.write(u"\5\2YY\u009c\u009c\u0115\u0115\4\2\27\27\u00f8\u00f8")
        buf.write(u"\7\2HHYY\u008c\u008c\u00a2\u00a2\u00f0\u00f0\5\2\u00ad")
        buf.write(u"\u00ad\u00b5\u00b5\u00c5\u00c5\3\2xx\3\2\66\67\3\2\u00d1")
        buf.write(u"\u00d2\5\2\\\\\u008e\u008e\u00d1\u00d2\4\2\u00c4\u00c4")
        buf.write(u"\u00e3\u00e3\3\2de\3\2\n\13\4\2\27\27\u00c8\u00c8\4\2")
        buf.write(u"\t\t\f\f\6\2\25\26\30\34\36\36!!\4\2\61\61\u00d5\u00d5")
        buf.write(u"\4\2\u00d3\u00d3\u00d6\u00d6\4\2==\u00cd\u00cd\4\2%%")
        buf.write(u"\u0132\u0132\4\2$$\u0132\u0132\4\2\17\17\u0132\u0132")
        buf.write(u"\5\2)[]\u00d4\u00d7\u0131\2\u0a76\2|\3\2\2\2\4\u0082")
        buf.write(u"\3\2\2\2\6\u00c1\3\2\2\2\b\u00c7\3\2\2\2\n\u00d5\3\2")
        buf.write(u"\2\2\f\u00e0\3\2\2\2\16\u00e2\3\2\2\2\20\u00e7\3\2\2")
        buf.write(u"\2\22\u00ed\3\2\2\2\24\u00f0\3\2\2\2\26\u00f8\3\2\2\2")
        buf.write(u"\30\u010c\3\2\2\2\32\u010e\3\2\2\2\34\u0112\3\2\2\2\36")
        buf.write(u"\u011b\3\2\2\2 \u012b\3\2\2\2\"\u0137\3\2\2\2$\u013e")
        buf.write(u"\3\2\2\2&\u015d\3\2\2\2(\u0164\3\2\2\2*\u0166\3\2\2\2")
        buf.write(u",\u016a\3\2\2\2.\u016f\3\2\2\2\60\u0173\3\2\2\2\62\u0188")
        buf.write(u"\3\2\2\2\64\u018e\3\2\2\2\66\u0192\3\2\2\28\u019b\3\2")
        buf.write(u"\2\2:\u01a7\3\2\2\2<\u01c1\3\2\2\2>\u060c\3\2\2\2@\u0614")
        buf.write(u"\3\2\2\2B\u0619\3\2\2\2D\u061c\3\2\2\2F\u0624\3\2\2\2")
        buf.write(u"H\u062b\3\2\2\2J\u071a\3\2\2\2L\u0723\3\2\2\2N\u0725")
        buf.write(u"\3\2\2\2P\u0728\3\2\2\2R\u072d\3\2\2\2T\u073d\3\2\2\2")
        buf.write(u"V\u073f\3\2\2\2X\u0747\3\2\2\2Z\u0765\3\2\2\2\\\u0787")
        buf.write(u"\3\2\2\2^\u0789\3\2\2\2`\u07a0\3\2\2\2b\u07a4\3\2\2\2")
        buf.write(u"d\u07ba\3\2\2\2f\u07bf\3\2\2\2h\u07df\3\2\2\2j\u07e3")
        buf.write(u"\3\2\2\2l\u082d\3\2\2\2n\u0830\3\2\2\2p\u083b\3\2\2\2")
        buf.write(u"r\u0841\3\2\2\2t\u0853\3\2\2\2v\u0855\3\2\2\2x\u085d")
        buf.write(u"\3\2\2\2z\u085f\3\2\2\2|}\5\4\3\2}~\7\2\2\3~\3\3\2\2")
        buf.write(u"\2\177\u0081\5\6\4\2\u0080\177\3\2\2\2\u0081\u0084\3")
        buf.write(u"\2\2\2\u0082\u0080\3\2\2\2\u0082\u0083\3\2\2\2\u0083")
        buf.write(u"\5\3\2\2\2\u0084\u0082\3\2\2\2\u0085\u008a\7\30\2\2\u0086")
        buf.write(u"\u0087\7\u0097\2\2\u0087\u008b\5Z.\2\u0088\u0089\7\u0098")
        buf.write(u"\2\2\u0089\u008b\5z>\2\u008a\u0086\3\2\2\2\u008a\u0088")
        buf.write(u"\3\2\2\2\u008b\u008c\3\2\2\2\u008c\u008d\7\u0132\2\2")
        buf.write(u"\u008d\u0092\5\4\3\2\u008e\u008f\7\30\2\2\u008f\u0090")
        buf.write(u"\7o\2\2\u0090\u0091\7\u0132\2\2\u0091\u0093\5\4\3\2\u0092")
        buf.write(u"\u008e\3\2\2\2\u0092\u0093\3\2\2\2\u0093\u0094\3\2\2")
        buf.write(u"\2\u0094\u0095\7\30\2\2\u0095\u0096\7u\2\2\u0096\u0097")
        buf.write(u"\5\16\b\2\u0097\u00c2\3\2\2\2\u0098\u0099\7\30\2\2\u0099")
        buf.write(u"\u009a\7c\2\2\u009a\u009e\5z>\2\u009b\u009d\n\2\2\2\u009c")
        buf.write(u"\u009b\3\2\2\2\u009d\u00a0\3\2\2\2\u009e\u009c\3\2\2")
        buf.write(u"\2\u009e\u009f\3\2\2\2\u009f\u00a1\3\2\2\2\u00a0\u009e")
        buf.write(u"\3\2\2\2\u00a1\u00a2\5\16\b\2\u00a2\u00c2\3\2\2\2\u00a3")
        buf.write(u"\u00a4\7\30\2\2\u00a4\u00a5\7\u0124\2\2\u00a5\u00a6\5")
        buf.write(u"z>\2\u00a6\u00a7\5\16\b\2\u00a7\u00c2\3\2\2\2\u00a8\u00a9")
        buf.write(u"\7\30\2\2\u00a9\u00aa\7\u009a\2\2\u00aa\u00ab\5j\66\2")
        buf.write(u"\u00ab\u00ac\5\16\b\2\u00ac\u00c2\3\2\2\2\u00ad\u00ae")
        buf.write(u"\7\30\2\2\u00ae\u00b2\n\3\2\2\u00af\u00b1\n\2\2\2\u00b0")
        buf.write(u"\u00af\3\2\2\2\u00b1\u00b4\3\2\2\2\u00b2\u00b0\3\2\2")
        buf.write(u"\2\u00b2\u00b3\3\2\2\2\u00b3\u00b5\3\2\2\2\u00b4\u00b2")
        buf.write(u"\3\2\2\2\u00b5\u00c2\5\16\b\2\u00b6\u00c0\7\u0132\2\2")
        buf.write(u"\u00b7\u00bb\n\4\2\2\u00b8\u00ba\n\2\2\2\u00b9\u00b8")
        buf.write(u"\3\2\2\2\u00ba\u00bd\3\2\2\2\u00bb\u00b9\3\2\2\2\u00bb")
        buf.write(u"\u00bc\3\2\2\2\u00bc\u00be\3\2\2\2\u00bd\u00bb\3\2\2")
        buf.write(u"\2\u00be\u00c0\5\16\b\2\u00bf\u00b6\3\2\2\2\u00bf\u00b7")
        buf.write(u"\3\2\2\2\u00c0\u00c2\3\2\2\2\u00c1\u0085\3\2\2\2\u00c1")
        buf.write(u"\u0098\3\2\2\2\u00c1\u00a3\3\2\2\2\u00c1\u00a8\3\2\2")
        buf.write(u"\2\u00c1\u00ad\3\2\2\2\u00c1\u00bf\3\2\2\2\u00c2\7\3")
        buf.write(u"\2\2\2\u00c3\u00c6\5\26\f\2\u00c4\u00c6\5 \21\2\u00c5")
        buf.write(u"\u00c3\3\2\2\2\u00c5\u00c4\3\2\2\2\u00c6\u00c9\3\2\2")
        buf.write(u"\2\u00c7\u00c5\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00ca")
        buf.write(u"\3\2\2\2\u00c9\u00c7\3\2\2\2\u00ca\u00cb\7\2\2\3\u00cb")
        buf.write(u"\t\3\2\2\2\u00cc\u00d0\t\5\2\2\u00cd\u00cf\n\2\2\2\u00ce")
        buf.write(u"\u00cd\3\2\2\2\u00cf\u00d2\3\2\2\2\u00d0\u00ce\3\2\2")
        buf.write(u"\2\u00d0\u00d1\3\2\2\2\u00d1\u00d3\3\2\2\2\u00d2\u00d0")
        buf.write(u"\3\2\2\2\u00d3\u00d6\5\16\b\2\u00d4\u00d6\7\u0132\2\2")
        buf.write(u"\u00d5\u00cc\3\2\2\2\u00d5\u00d4\3\2\2\2\u00d6\13\3\2")
        buf.write(u"\2\2\u00d7\u00e1\5\n\6\2\u00d8\u00d9\7(\2\2\u00d9\u00e1")
        buf.write(u"\5\16\b\2\u00da\u00dd\5<\37\2\u00db\u00dd\5> \2\u00dc")
        buf.write(u"\u00da\3\2\2\2\u00dc\u00db\3\2\2\2\u00dd\u00de\3\2\2")
        buf.write(u"\2\u00de\u00df\5\16\b\2\u00df\u00e1\3\2\2\2\u00e0\u00d7")
        buf.write(u"\3\2\2\2\u00e0\u00d8\3\2\2\2\u00e0\u00dc\3\2\2\2\u00e1")
        buf.write(u"\r\3\2\2\2\u00e2\u00e3\t\6\2\2\u00e3\17\3\2\2\2\u00e4")
        buf.write(u"\u00e6\5\f\7\2\u00e5\u00e4\3\2\2\2\u00e6\u00e9\3\2\2")
        buf.write(u"\2\u00e7\u00e5\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\21\3")
        buf.write(u"\2\2\2\u00e9\u00e7\3\2\2\2\u00ea\u00ec\5\f\7\2\u00eb")
        buf.write(u"\u00ea\3\2\2\2\u00ec\u00ef\3\2\2\2\u00ed\u00ee\3\2\2")
        buf.write(u"\2\u00ed\u00eb\3\2\2\2\u00ee\23\3\2\2\2\u00ef\u00ed\3")
        buf.write(u"\2\2\2\u00f0\u00f1\7c\2\2\u00f1\u00f2\7G\2\2\u00f2\u00f4")
        buf.write(u"\5z>\2\u00f3\u00f5\5P)\2\u00f4\u00f3\3\2\2\2\u00f4\u00f5")
        buf.write(u"\3\2\2\2\u00f5\u00f6\3\2\2\2\u00f6\u00f7\7\u0132\2\2")
        buf.write(u"\u00f7\25\3\2\2\2\u00f8\u00fc\5\24\13\2\u00f9\u00fb\5")
        buf.write(u"\30\r\2\u00fa\u00f9\3\2\2\2\u00fb\u00fe\3\2\2\2\u00fc")
        buf.write(u"\u00fa\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fd\u00ff\3\2\2")
        buf.write(u"\2\u00fe\u00fc\3\2\2\2\u00ff\u0100\7r\2\2\u0100\u0104")
        buf.write(u"\5\16\b\2\u0101\u0103\5\n\6\2\u0102\u0101\3\2\2\2\u0103")
        buf.write(u"\u0106\3\2\2\2\u0104\u0102\3\2\2\2\u0104\u0105\3\2\2")
        buf.write(u"\2\u0105\27\3\2\2\2\u0106\u0104\3\2\2\2\u0107\u0108\5")
        buf.write(u"> \2\u0108\u0109\7\u0132\2\2\u0109\u010d\3\2\2\2\u010a")
        buf.write(u"\u010d\5\n\6\2\u010b\u010d\5 \21\2\u010c\u0107\3\2\2")
        buf.write(u"\2\u010c\u010a\3\2\2\2\u010c\u010b\3\2\2\2\u010d\31\3")
        buf.write(u"\2\2\2\u010e\u0110\5p9\2\u010f\u0111\5N(\2\u0110\u010f")
        buf.write(u"\3\2\2\2\u0110\u0111\3\2\2\2\u0111\33\3\2\2\2\u0112\u0117")
        buf.write(u"\5\32\16\2\u0113\u0114\7 \2\2\u0114\u0116\5\32\16\2\u0115")
        buf.write(u"\u0113\3\2\2\2\u0116\u0119\3\2\2\2\u0117\u0115\3\2\2")
        buf.write(u"\2\u0117\u0118\3\2\2\2\u0118\35\3\2\2\2\u0119\u0117\3")
        buf.write(u"\2\2\2\u011a\u011c\7\u0100\2\2\u011b\u011a\3\2\2\2\u011b")
        buf.write(u"\u011c\3\2\2\2\u011c\u011d\3\2\2\2\u011d\u011e\7\u00e0")
        buf.write(u"\2\2\u011e\u0124\5n8\2\u011f\u0121\7\22\2\2\u0120\u0122")
        buf.write(u"\5\34\17\2\u0121\u0120\3\2\2\2\u0121\u0122\3\2\2\2\u0122")
        buf.write(u"\u0123\3\2\2\2\u0123\u0125\7\23\2\2\u0124\u011f\3\2\2")
        buf.write(u"\2\u0124\u0125\3\2\2\2\u0125\u0127\3\2\2\2\u0126\u0128")
        buf.write(u"\5N(\2\u0127\u0126\3\2\2\2\u0127\u0128\3\2\2\2\u0128")
        buf.write(u"\u0129\3\2\2\2\u0129\u012a\7\u0132\2\2\u012a\37\3\2\2")
        buf.write(u"\2\u012b\u012c\5\36\20\2\u012c\u0135\5\20\t\2\u012d\u012e")
        buf.write(u"\7v\2\2\u012e\u0132\5\16\b\2\u012f\u0131\5\n\6\2\u0130")
        buf.write(u"\u012f\3\2\2\2\u0131\u0134\3\2\2\2\u0132\u0130\3\2\2")
        buf.write(u"\2\u0132\u0133\3\2\2\2\u0133\u0136\3\2\2\2\u0134\u0132")
        buf.write(u"\3\2\2\2\u0135\u012d\3\2\2\2\u0135\u0136\3\2\2\2\u0136")
        buf.write(u"!\3\2\2\2\u0137\u0138\7\u0097\2\2\u0138\u013a\5Z.\2\u0139")
        buf.write(u"\u013b\7\u011b\2\2\u013a\u0139\3\2\2\2\u013a\u013b\3")
        buf.write(u"\2\2\2\u013b\u013c\3\2\2\2\u013c\u013d\7\u0132\2\2\u013d")
        buf.write(u"#\3\2\2\2\u013e\u013f\5\"\22\2\u013f\u0143\5\20\t\2\u0140")
        buf.write(u"\u0141\7o\2\2\u0141\u0142\7\u0132\2\2\u0142\u0144\5\20")
        buf.write(u"\t\2\u0143\u0140\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0145")
        buf.write(u"\3\2\2\2\u0145\u0146\7u\2\2\u0146%\3\2\2\2\u0147\u0148")
        buf.write(u"\7\u008a\2\2\u0148\u0149\5p9\2\u0149\u014a\7\36\2\2\u014a")
        buf.write(u"\u014b\5Z.\2\u014b\u014c\7\u011f\2\2\u014c\u014f\5Z.")
        buf.write(u"\2\u014d\u014e\7\u010e\2\2\u014e\u0150\5Z.\2\u014f\u014d")
        buf.write(u"\3\2\2\2\u014f\u0150\3\2\2\2\u0150\u0151\3\2\2\2\u0151")
        buf.write(u"\u0152\7\u0132\2\2\u0152\u015e\3\2\2\2\u0153\u0154\7")
        buf.write(u"\u008a\2\2\u0154\u0155\7m\2\2\u0155\u0156\5p9\2\u0156")
        buf.write(u"\u0157\7\u0099\2\2\u0157\u0159\5Z.\2\u0158\u015a\7\u008d")
        buf.write(u"\2\2\u0159\u0158\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015b")
        buf.write(u"\3\2\2\2\u015b\u015c\7\u0132\2\2\u015c\u015e\3\2\2\2")
        buf.write(u"\u015d\u0147\3\2\2\2\u015d\u0153\3\2\2\2\u015e\'\3\2")
        buf.write(u"\2\2\u015f\u0165\7t\2\2\u0160\u0162\7\u00bc\2\2\u0161")
        buf.write(u"\u0163\5p9\2\u0162\u0161\3\2\2\2\u0162\u0163\3\2\2\2")
        buf.write(u"\u0163\u0165\3\2\2\2\u0164\u015f\3\2\2\2\u0164\u0160")
        buf.write(u"\3\2\2\2\u0165)\3\2\2\2\u0166\u0167\5&\24\2\u0167\u0168")
        buf.write(u"\5\20\t\2\u0168\u0169\5(\25\2\u0169+\3\2\2\2\u016a\u016b")
        buf.write(u"\7B\2\2\u016b\u016c\5Z.\2\u016c\u016d\7\u0132\2\2\u016d")
        buf.write(u"\u016e\5\22\n\2\u016e-\3\2\2\2\u016f\u0170\7\u00d7\2")
        buf.write(u"\2\u0170\u0171\7\u0132\2\2\u0171\u0172\5\20\t\2\u0172")
        buf.write(u"/\3\2\2\2\u0173\u0174\7j\2\2\u0174\u0175\7B\2\2\u0175")
        buf.write(u"\u0179\7\u0132\2\2\u0176\u0178\5\n\6\2\u0177\u0176\3")
        buf.write(u"\2\2\2\u0178\u017b\3\2\2\2\u0179\u0177\3\2\2\2\u0179")
        buf.write(u"\u017a\3\2\2\2\u017a\u017f\3\2\2\2\u017b\u0179\3\2\2")
        buf.write(u"\2\u017c\u017e\5,\27\2\u017d\u017c\3\2\2\2\u017e\u0181")
        buf.write(u"\3\2\2\2\u017f\u017d\3\2\2\2\u017f\u0180\3\2\2\2\u0180")
        buf.write(u"\u0183\3\2\2\2\u0181\u017f\3\2\2\2\u0182\u0184\5.\30")
        buf.write(u"\2\u0183\u0182\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u0185")
        buf.write(u"\3\2\2\2\u0185\u0186\7q\2\2\u0186\61\3\2\2\2\u0187\u0189")
        buf.write(u"\7j\2\2\u0188\u0187\3\2\2\2\u0188\u0189\3\2\2\2\u0189")
        buf.write(u"\u018a\3\2\2\2\u018a\u018b\7\u012c\2\2\u018b\u018c\5")
        buf.write(u"Z.\2\u018c\u018d\7\u0132\2\2\u018d\63\3\2\2\2\u018e\u018f")
        buf.write(u"\5\62\32\2\u018f\u0190\5\20\t\2\u0190\u0191\7s\2\2\u0191")
        buf.write(u"\65\3\2\2\2\u0192\u0193\7\u012e\2\2\u0193\u0195\5p9\2")
        buf.write(u"\u0194\u0196\5P)\2\u0195\u0194\3\2\2\2\u0195\u0196\3")
        buf.write(u"\2\2\2\u0196\u0197\3\2\2\2\u0197\u0198\7\u0132\2\2\u0198")
        buf.write(u"\u0199\5\20\t\2\u0199\u019a\7z\2\2\u019a\67\3\2\2\2\u019b")
        buf.write(u"\u019d\7\u00fd\2\2\u019c\u019e\5x=\2\u019d\u019c\3\2")
        buf.write(u"\2\2\u019d\u019e\3\2\2\2\u019e\u01a1\3\2\2\2\u019f\u01a0")
        buf.write(u"\7\u008a\2\2\u01a0\u01a2\5Z.\2\u01a1\u019f\3\2\2\2\u01a1")
        buf.write(u"\u01a2\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01a4\7\u0132")
        buf.write(u"\2\2\u01a4\u01a5\5\20\t\2\u01a5\u01a6\7w\2\2\u01a69\3")
        buf.write(u"\2\2\2\u01a7\u01a8\7\u0121\2\2\u01a8\u01a9\7\u0132\2")
        buf.write(u"\2\u01a9\u01b1\5\20\t\2\u01aa\u01ad\7D\2\2\u01ab\u01ac")
        buf.write(u"\7\u011f\2\2\u01ac\u01ae\5z>\2\u01ad\u01ab\3\2\2\2\u01ad")
        buf.write(u"\u01ae\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b0\7\u0132")
        buf.write(u"\2\2\u01b0\u01b2\5\20\t\2\u01b1\u01aa\3\2\2\2\u01b1\u01b2")
        buf.write(u"\3\2\2\2\u01b2\u01b6\3\2\2\2\u01b3\u01b4\7\u0087\2\2")
        buf.write(u"\u01b4\u01b5\7\u0132\2\2\u01b5\u01b7\5\20\t\2\u01b6\u01b3")
        buf.write(u"\3\2\2\2\u01b6\u01b7\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8")
        buf.write(u"\u01b9\7y\2\2\u01b9;\3\2\2\2\u01ba\u01c2\5\64\33\2\u01bb")
        buf.write(u"\u01c2\5$\23\2\u01bc\u01c2\5\60\31\2\u01bd\u01c2\5*\26")
        buf.write(u"\2\u01be\u01c2\5\66\34\2\u01bf\u01c2\58\35\2\u01c0\u01c2")
        buf.write(u"\5:\36\2\u01c1\u01ba\3\2\2\2\u01c1\u01bb\3\2\2\2\u01c1")
        buf.write(u"\u01bc\3\2\2\2\u01c1\u01bd\3\2\2\2\u01c1\u01be\3\2\2")
        buf.write(u"\2\u01c1\u01bf\3\2\2\2\u01c1\u01c0\3\2\2\2\u01c2=\3\2")
        buf.write(u"\2\2\u01c3\u01c4\7*\2\2\u01c4\u01c5\7\u00cf\2\2\u01c5")
        buf.write(u"\u01c6\5z>\2\u01c6\u01d5\5N(\2\u01c7\u01c8\7\u012e\2")
        buf.write(u"\2\u01c8\u01c9\5p9\2\u01c9\u01ca\7\36\2\2\u01ca\u01d2")
        buf.write(u"\5Z.\2\u01cb\u01cc\7 \2\2\u01cc\u01cd\5p9\2\u01cd\u01ce")
        buf.write(u"\7\36\2\2\u01ce\u01cf\5Z.\2\u01cf\u01d1\3\2\2\2\u01d0")
        buf.write(u"\u01cb\3\2\2\2\u01d1\u01d4\3\2\2\2\u01d2\u01d0\3\2\2")
        buf.write(u"\2\u01d2\u01d3\3\2\2\2\u01d3\u01d6\3\2\2\2\u01d4\u01d2")
        buf.write(u"\3\2\2\2\u01d5\u01c7\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6")
        buf.write(u"\u060d\3\2\2\2\u01d7\u060d\7\u00e2\2\2\u01d8\u01d9\7")
        buf.write(u"\b\2\2\u01d9\u01e7\5T+\2\u01da\u01dd\7I\2\2\u01db\u01dc")
        buf.write(u"\7\u011f\2\2\u01dc\u01de\5T+\2\u01dd\u01db\3\2\2\2\u01dd")
        buf.write(u"\u01de\3\2\2\2\u01de\u01e8\3\2\2\2\u01df\u01e0\7\u00fc")
        buf.write(u"\2\2\u01e0\u01e4\5Z.\2\u01e1\u01e2\7\u0111\2\2\u01e2")
        buf.write(u"\u01e4\5Z.\2\u01e3\u01df\3\2\2\2\u01e3\u01e1\3\2\2\2")
        buf.write(u"\u01e4\u01e5\3\2\2\2\u01e5\u01e3\3\2\2\2\u01e5\u01e6")
        buf.write(u"\3\2\2\2\u01e6\u01e8\3\2\2\2\u01e7\u01da\3\2\2\2\u01e7")
        buf.write(u"\u01e3\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\u060d\3\2\2")
        buf.write(u"\2\u01e9\u0208\7j\2\2\u01ea\u01ed\7\u008c\2\2\u01eb\u01ee")
        buf.write(u"\7#\2\2\u01ec\u01ee\5j\66\2\u01ed\u01eb\3\2\2\2\u01ed")
        buf.write(u"\u01ec\3\2\2\2\u01ee\u01fb\3\2\2\2\u01ef\u01f0\7\u00b9")
        buf.write(u"\2\2\u01f0\u01f2\5z>\2\u01f1\u01f3\7\u00a6\2\2\u01f2")
        buf.write(u"\u01f1\3\2\2\2\u01f2\u01f3\3\2\2\2\u01f3\u01fa\3\2\2")
        buf.write(u"\2\u01f4\u01f5\7\u012e\2\2\u01f5\u01fa\5T+\2\u01f6\u01f7")
        buf.write(u"\7\u011f\2\2\u01f7\u01fa\5z>\2\u01f8\u01fa\7\u00c7\2")
        buf.write(u"\2\u01f9\u01ef\3\2\2\2\u01f9\u01f4\3\2\2\2\u01f9\u01f6")
        buf.write(u"\3\2\2\2\u01f9\u01f8\3\2\2\2\u01fa\u01fd\3\2\2\2\u01fb")
        buf.write(u"\u01f9\3\2\2\2\u01fb\u01fc\3\2\2\2\u01fc\u0209\3\2\2")
        buf.write(u"\2\u01fd\u01fb\3\2\2\2\u01fe\u0205\5j\66\2\u01ff\u0200")
        buf.write(u"\7\u0099\2\2\u0200\u0204\5j\66\2\u0201\u0202\7\u012e")
        buf.write(u"\2\2\u0202\u0204\5T+\2\u0203\u01ff\3\2\2\2\u0203\u0201")
        buf.write(u"\3\2\2\2\u0204\u0207\3\2\2\2\u0205\u0203\3\2\2\2\u0205")
        buf.write(u"\u0206\3\2\2\2\u0206\u0209\3\2\2\2\u0207\u0205\3\2\2")
        buf.write(u"\2\u0208\u01ea\3\2\2\2\u0208\u01fe\3\2\2\2\u0209\u060d")
        buf.write(u"\3\2\2\2\u020a\u020b\7\u010f\2\2\u020b\u020c\5Z.\2\u020c")
        buf.write(u"\u020d\7\u011f\2\2\u020d\u0212\5p9\2\u020e\u020f\7 \2")
        buf.write(u"\2\u020f\u0211\5p9\2\u0210\u020e\3\2\2\2\u0211\u0214")
        buf.write(u"\3\2\2\2\u0212\u0210\3\2\2\2\u0212\u0213\3\2\2\2\u0213")
        buf.write(u"\u021a\3\2\2\2\u0214\u0212\3\2\2\2\u0215\u0216\5p9\2")
        buf.write(u"\u0216\u0217\7\36\2\2\u0217\u0218\5Z.\2\u0218\u021a\3")
        buf.write(u"\2\2\2\u0219\u020a\3\2\2\2\u0219\u0215\3\2\2\2\u021a")
        buf.write(u"\u060d\3\2\2\2\u021b\u021d\t\7\2\2\u021c\u021e\t\b\2")
        buf.write(u"\2\u021d\u021c\3\2\2\2\u021d\u021e\3\2\2\2\u021e\u0223")
        buf.write(u"\3\2\2\2\u021f\u0223\7g\2\2\u0220\u0223\7a\2\2\u0221")
        buf.write(u"\u0223\7\u00da\2\2\u0222\u021b\3\2\2\2\u0222\u021f\3")
        buf.write(u"\2\2\2\u0222\u0220\3\2\2\2\u0222\u0221\3\2\2\2\u0223")
        buf.write(u"\u0224\3\2\2\2\u0224\u0229\5L\'\2\u0225\u0226\7 \2\2")
        buf.write(u"\u0226\u0228\5L\'\2\u0227\u0225\3\2\2\2\u0228\u022b\3")
        buf.write(u"\2\2\2\u0229\u0227\3\2\2\2\u0229\u022a\3\2\2\2\u022a")
        buf.write(u"\u0230\3\2\2\2\u022b\u0229\3\2\2\2\u022c\u022d\7\u0082")
        buf.write(u"\2\2\u022d\u022e\7\u00e0\2\2\u022e\u0230\5j\66\2\u022f")
        buf.write(u"\u0222\3\2\2\2\u022f\u022c\3\2\2\2\u0230\u060d\3\2\2")
        buf.write(u"\2\u0231\u0233\7#\2\2\u0232\u0234\7#\2\2\u0233\u0232")
        buf.write(u"\3\2\2\2\u0233\u0234\3\2\2\2\u0234\u0237\3\2\2\2\u0235")
        buf.write(u"\u0237\7`\2\2\u0236\u0231\3\2\2\2\u0236\u0235\3\2\2\2")
        buf.write(u"\u0237\u0239\3\2\2\2\u0238\u023a\5T+\2\u0239\u0238\3")
        buf.write(u"\2\2\2\u0239\u023a\3\2\2\2\u023a\u060d\3\2\2\2\u023b")
        buf.write(u"\u024e\7\u012a\2\2\u023c\u023d\7\u011f\2\2\u023d\u024d")
        buf.write(u"\5Z.\2\u023e\u0244\7\u012d\2\2\u023f\u0240\78\2\2\u0240")
        buf.write(u"\u0241\5Z.\2\u0241\u0242\7 \2\2\u0242\u0243\5Z.\2\u0243")
        buf.write(u"\u0245\3\2\2\2\u0244\u023f\3\2\2\2\u0244\u0245\3\2\2")
        buf.write(u"\2\u0245\u024d\3\2\2\2\u0246\u024d\7\u00cc\2\2\u0247")
        buf.write(u"\u024d\7I\2\2\u0248\u024d\7\u00bd\2\2\u0249\u024a\7\u011d")
        buf.write(u"\2\2\u024a\u024d\5Z.\2\u024b\u024d\5Z.\2\u024c\u023c")
        buf.write(u"\3\2\2\2\u024c\u023e\3\2\2\2\u024c\u0246\3\2\2\2\u024c")
        buf.write(u"\u0247\3\2\2\2\u024c\u0248\3\2\2\2\u024c\u0249\3\2\2")
        buf.write(u"\2\u024c\u024b\3\2\2\2\u024d\u0250\3\2\2\2\u024e\u024c")
        buf.write(u"\3\2\2\2\u024e\u024f\3\2\2\2\u024f\u060d\3\2\2\2\u0250")
        buf.write(u"\u024e\3\2\2\2\u0251\u0255\7{\2\2\u0252\u0253\7d\2\2")
        buf.write(u"\u0253\u0255\7\u0084\2\2\u0254\u0251\3\2\2\2\u0254\u0252")
        buf.write(u"\3\2\2\2\u0255\u0258\3\2\2\2\u0256\u0259\5j\66\2\u0257")
        buf.write(u"\u0259\7#\2\2\u0258\u0256\3\2\2\2\u0258\u0257\3\2\2\2")
        buf.write(u"\u0259\u025b\3\2\2\2\u025a\u025c\7\u00e8\2\2\u025b\u025a")
        buf.write(u"\3\2\2\2\u025b\u025c\3\2\2\2\u025c\u060d\3\2\2\2\u025d")
        buf.write(u"\u0261\7\u00ee\2\2\u025e\u025f\7U\2\2\u025f\u0261\7\u0084")
        buf.write(u"\2\2\u0260\u025d\3\2\2\2\u0260\u025e\3\2\2\2\u0261\u0262")
        buf.write(u"\3\2\2\2\u0262\u0263\5j\66\2\u0263\u0264\7\u011f\2\2")
        buf.write(u"\u0264\u0265\5j\66\2\u0265\u060d\3\2\2\2\u0266\u0267")
        buf.write(u"\t\t\2\2\u0267\u060d\5j\66\2\u0268\u026a\7\u00f5\2\2")
        buf.write(u"\u0269\u026b\5Z.\2\u026a\u0269\3\2\2\2\u026a\u026b\3")
        buf.write(u"\2\2\2\u026b\u060d\3\2\2\2\u026c\u028e\7\u00d2\2\2\u026d")
        buf.write(u"\u026e\7\u00d9\2\2\u026e\u0272\5j\66\2\u026f\u0270\7")
        buf.write(u"9\2\2\u0270\u0272\7\4\2\2\u0271\u026d\3\2\2\2\u0271\u026f")
        buf.write(u"\3\2\2\2\u0272\u0273\3\2\2\2\u0273\u0274\7\u00d0\2\2")
        buf.write(u"\u0274\u0278\5j\66\2\u0275\u0276\7)\2\2\u0276\u0277\t")
        buf.write(u"\n\2\2\u0277\u0279\5j\66\2\u0278\u0275\3\2\2\2\u0278")
        buf.write(u"\u0279\3\2\2\2\u0279\u028f\3\2\2\2\u027a\u0281\7\u00a0")
        buf.write(u"\2\2\u027b\u027c\7\u00a2\2\2\u027c\u027f\5z>\2\u027d")
        buf.write(u"\u027e\7\n\2\2\u027e\u0280\5z>\2\u027f\u027d\3\2\2\2")
        buf.write(u"\u027f\u0280\3\2\2\2\u0280\u0282\3\2\2\2\u0281\u027b")
        buf.write(u"\3\2\2\2\u0281\u0282\3\2\2\2\u0282\u028a\3\2\2\2\u0283")
        buf.write(u"\u0284\7\u0104\2\2\u0284\u0285\79\2\2\u0285\u0286\7\4")
        buf.write(u"\2\2\u0286\u0287\7\u00d0\2\2\u0287\u028a\5j\66\2\u0288")
        buf.write(u"\u028a\5z>\2\u0289\u027a\3\2\2\2\u0289\u0283\3\2\2\2")
        buf.write(u"\u0289\u0288\3\2\2\2\u028a\u028c\3\2\2\2\u028b\u028d")
        buf.write(u"\5> \2\u028c\u028b\3\2\2\2\u028c\u028d\3\2\2\2\u028d")
        buf.write(u"\u028f\3\2\2\2\u028e\u0271\3\2\2\2\u028e\u0289\3\2\2")
        buf.write(u"\2\u028f\u060d\3\2\2\2\u0290\u029b\7\u00ed\2\2\u0291")
        buf.write(u"\u029c\7.\2\2\u0292\u0294\t\13\2\2\u0293\u0292\3\2\2")
        buf.write(u"\2\u0293\u0294\3\2\2\2\u0294\u0295\3\2\2\2\u0295\u029c")
        buf.write(u"\5T+\2\u0296\u0297\7\u00dd\2\2\u0297\u0299\5T+\2\u0298")
        buf.write(u"\u029a\7\u0081\2\2\u0299\u0298\3\2\2\2\u0299\u029a\3")
        buf.write(u"\2\2\2\u029a\u029c\3\2\2\2\u029b\u0291\3\2\2\2\u029b")
        buf.write(u"\u0293\3\2\2\2\u029b\u0296\3\2\2\2\u029c\u060d\3\2\2")
        buf.write(u"\2\u029d\u029e\7\u0105\2\2\u029e\u060d\5J&\2\u029f\u02a6")
        buf.write(u"\7\u00e4\2\2\u02a0\u02a2\7\u00a0\2\2\u02a1\u02a3\7I\2")
        buf.write(u"\2\u02a2\u02a1\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3\u02a7")
        buf.write(u"\3\2\2\2\u02a4\u02a5\t\n\2\2\u02a5\u02a7\5z>\2\u02a6")
        buf.write(u"\u02a0\3\2\2\2\u02a6\u02a4\3\2\2\2\u02a7\u060d\3\2\2")
        buf.write(u"\2\u02a8\u02b8\7\u00dc\2\2\u02a9\u02ab\7\u00a0\2\2\u02aa")
        buf.write(u"\u02ac\7.\2\2\u02ab\u02aa\3\2\2\2\u02ab\u02ac\3\2\2\2")
        buf.write(u"\u02ac\u02b9\3\2\2\2\u02ad\u02b3\7\u00b2\2\2\u02ae\u02b2")
        buf.write(u"\5z>\2\u02af\u02b0\7\u011f\2\2\u02b0\u02b2\7\u00ac\2")
        buf.write(u"\2\u02b1\u02ae\3\2\2\2\u02b1\u02af\3\2\2\2\u02b2\u02b5")
        buf.write(u"\3\2\2\2\u02b3\u02b1\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4")
        buf.write(u"\u02b9\3\2\2\2\u02b5\u02b3\3\2\2\2\u02b6\u02b7\7\u00dd")
        buf.write(u"\2\2\u02b7\u02b9\5z>\2\u02b8\u02a9\3\2\2\2\u02b8\u02ad")
        buf.write(u"\3\2\2\2\u02b8\u02b6\3\2\2\2\u02b9\u060d\3\2\2\2\u02ba")
        buf.write(u"\u02bb\7\u00a1\2\2\u02bb\u02bd\5Z.\2\u02bc\u02be\7\u00db")
        buf.write(u"\2\2\u02bd\u02bc\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02c0")
        buf.write(u"\3\2\2\2\u02bf\u02c1\7I\2\2\u02c0\u02bf\3\2\2\2\u02c0")
        buf.write(u"\u02c1\3\2\2\2\u02c1\u060d\3\2\2\2\u02c2\u02c3\7c\2\2")
        buf.write(u"\u02c3\u02c4\7\u00b2\2\2\u02c4\u02c5\5j\66\2\u02c5\u02c9")
        buf.write(u"\79\2\2\u02c6\u02c7\78\2\2\u02c7\u02c8\7\u00a5\2\2\u02c8")
        buf.write(u"\u02ca\7\4\2\2\u02c9\u02c6\3\2\2\2\u02c9\u02ca\3\2\2")
        buf.write(u"\2\u02ca\u02d3\3\2\2\2\u02cb\u02d1\7\u0099\2\2\u02cc")
        buf.write(u"\u02d2\7\u0101\2\2\u02cd\u02cf\7\u012d\2\2\u02ce\u02cd")
        buf.write(u"\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0")
        buf.write(u"\u02d2\5j\66\2\u02d1\u02cc\3\2\2\2\u02d1\u02ce\3\2\2")
        buf.write(u"\2\u02d2\u02d4\3\2\2\2\u02d3\u02cb\3\2\2\2\u02d3\u02d4")
        buf.write(u"\3\2\2\2\u02d4\u02d6\3\2\2\2\u02d5\u02d7\7\u00c1\2\2")
        buf.write(u"\u02d6\u02d5\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7\u060d")
        buf.write(u"\3\2\2\2\u02d8\u02d9\7c\2\2\u02d9\u02da\7\u00d9\2\2\u02da")
        buf.write(u"\u02db\5j\66\2\u02db\u02dc\7\u00d0\2\2\u02dc\u02dd\5")
        buf.write(u"j\66\2\u02dd\u02de\7\u00e3\2\2\u02de\u02e3\5Z.\2\u02df")
        buf.write(u"\u02e0\78\2\2\u02e0\u02e1\7\4\2\2\u02e1\u02e2\7 \2\2")
        buf.write(u"\u02e2\u02e4\7\4\2\2\u02e3\u02df\3\2\2\2\u02e3\u02e4")
        buf.write(u"\3\2\2\2\u02e4\u02e9\3\2\2\2\u02e5\u02e6\7:\2\2\u02e6")
        buf.write(u"\u02ea\5z>\2\u02e7\u02e8\7,\2\2\u02e8\u02ea\5z>\2\u02e9")
        buf.write(u"\u02e5\3\2\2\2\u02e9\u02e7\3\2\2\2\u02e9\u02ea\3\2\2")
        buf.write(u"\2\u02ea\u02f1\3\2\2\2\u02eb\u02ec\7\u00bb\2\2\u02ec")
        buf.write(u"\u02ef\5z>\2\u02ed\u02ee\7 \2\2\u02ee\u02f0\5z>\2\u02ef")
        buf.write(u"\u02ed\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0\u02f2\3\2\2")
        buf.write(u"\2\u02f1\u02eb\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2\u0301")
        buf.write(u"\3\2\2\2\u02f3\u02f4\7\u0089\2\2\u02f4\u02ff\5z>\2\u02f5")
        buf.write(u"\u02f6\7 \2\2\u02f6\u02fd\7\4\2\2\u02f7\u02f8\7 \2\2")
        buf.write(u"\u02f8\u02fb\5Z.\2\u02f9\u02fa\7 \2\2\u02fa\u02fc\5z")
        buf.write(u">\2\u02fb\u02f9\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc\u02fe")
        buf.write(u"\3\2\2\2\u02fd\u02f7\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe")
        buf.write(u"\u0300\3\2\2\2\u02ff\u02f5\3\2\2\2\u02ff\u0300\3\2\2")
        buf.write(u"\2\u0300\u0302\3\2\2\2\u0301\u02f3\3\2\2\2\u0301\u0302")
        buf.write(u"\3\2\2\2\u0302\u0305\3\2\2\2\u0303\u0304\7\u0111\2\2")
        buf.write(u"\u0304\u0306\5z>\2\u0305\u0303\3\2\2\2\u0305\u0306\3")
        buf.write(u"\2\2\2\u0306\u0309\3\2\2\2\u0307\u0308\7\u00b4\2\2\u0308")
        buf.write(u"\u030a\5Z.\2\u0309\u0307\3\2\2\2\u0309\u030a\3\2\2\2")
        buf.write(u"\u030a\u0315\3\2\2\2\u030b\u030c\7\u00a0\2\2\u030c\u030f")
        buf.write(u"\5z>\2\u030d\u030e\7\n\2\2\u030e\u0310\5z>\2\u030f\u030d")
        buf.write(u"\3\2\2\2\u030f\u0310\3\2\2\2\u0310\u0313\3\2\2\2\u0311")
        buf.write(u"\u0312\7 \2\2\u0312\u0314\5Z.\2\u0313\u0311\3\2\2\2\u0313")
        buf.write(u"\u0314\3\2\2\2\u0314\u0316\3\2\2\2\u0315\u030b\3\2\2")
        buf.write(u"\2\u0315\u0316\3\2\2\2\u0316\u0319\3\2\2\2\u0317\u0318")
        buf.write(u"\7\u00ab\2\2\u0318\u031a\5z>\2\u0319\u0317\3\2\2\2\u0319")
        buf.write(u"\u031a\3\2\2\2\u031a\u0320\3\2\2\2\u031b\u031e\7\u010b")
        buf.write(u"\2\2\u031c\u031d\7\u008a\2\2\u031d\u031f\5Z.\2\u031e")
        buf.write(u"\u031c\3\2\2\2\u031e\u031f\3\2\2\2\u031f\u0321\3\2\2")
        buf.write(u"\2\u0320\u031b\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0325")
        buf.write(u"\3\2\2\2\u0322\u0323\7M\2\2\u0323\u0324\7\u00ff\2\2\u0324")
        buf.write(u"\u0326\7\4\2\2\u0325\u0322\3\2\2\2\u0325\u0326\3\2\2")
        buf.write(u"\2\u0326\u060d\3\2\2\2\u0327\u0328\7c\2\2\u0328\u0329")
        buf.write(u"\7\u00dd\2\2\u0329\u032b\5j\66\2\u032a\u032c\7\u0106")
        buf.write(u"\2\2\u032b\u032a\3\2\2\2\u032b\u032c\3\2\2\2\u032c\u032e")
        buf.write(u"\3\2\2\2\u032d\u032f\7\u00aa\2\2\u032e\u032d\3\2\2\2")
        buf.write(u"\u032e\u032f\3\2\2\2\u032f\u0331\3\2\2\2\u0330\u0332")
        buf.write(u"\7\u00ec\2\2\u0331\u0330\3\2\2\2\u0331\u0332\3\2\2\2")
        buf.write(u"\u0332\u0336\3\2\2\2\u0333\u0334\7M\2\2\u0334\u0335\7")
        buf.write(u"\u00ff\2\2\u0335\u0337\7\4\2\2\u0336\u0333\3\2\2\2\u0336")
        buf.write(u"\u0337\3\2\2\2\u0337\u060d\3\2\2\2\u0338\u0339\7c\2\2")
        buf.write(u"\u0339\u033a\79\2\2\u033a\u033b\7\4\2\2\u033b\u033c\7")
        buf.write(u"\u00d0\2\2\u033c\u033d\5j\66\2\u033d\u033e\7\u00e3\2")
        buf.write(u"\2\u033e\u0341\5Z.\2\u033f\u0340\7\u00b4\2\2\u0340\u0342")
        buf.write(u"\5Z.\2\u0341\u033f\3\2\2\2\u0341\u0342\3\2\2\2\u0342")
        buf.write(u"\u060d\3\2\2\2\u0343\u0344\7)\2\2\u0344\u0347\7\u012d")
        buf.write(u"\2\2\u0345\u0348\5\34\17\2\u0346\u0348\7.\2\2\u0347\u0345")
        buf.write(u"\3\2\2\2\u0347\u0346\3\2\2\2\u0348\u0351\3\2\2\2\u0349")
        buf.write(u"\u034f\7\u0099\2\2\u034a\u034c\7\u012d\2\2\u034b\u034a")
        buf.write(u"\3\2\2\2\u034b\u034c\3\2\2\2\u034c\u034d\3\2\2\2\u034d")
        buf.write(u"\u0350\5z>\2\u034e\u0350\7\u0101\2\2\u034f\u034b\3\2")
        buf.write(u"\2\2\u034f\u034e\3\2\2\2\u0350\u0352\3\2\2\2\u0351\u0349")
        buf.write(u"\3\2\2\2\u0351\u0352\3\2\2\2\u0352\u0354\3\2\2\2\u0353")
        buf.write(u"\u0355\t\f\2\2\u0354\u0353\3\2\2\2\u0354\u0355\3\2\2")
        buf.write(u"\2\u0355\u0357\3\2\2\2\u0356\u0358\7\u00c7\2\2\u0357")
        buf.write(u"\u0356\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u060d\3\2\2")
        buf.write(u"\2\u0359\u035a\7)\2\2\u035a\u060d\7\u0101\2\2\u035b\u035c")
        buf.write(u"\7)\2\2\u035c\u035d\7\u00b2\2\2\u035d\u035f\5j\66\2\u035e")
        buf.write(u"\u0360\7\u00cc\2\2\u035f\u035e\3\2\2\2\u035f\u0360\3")
        buf.write(u"\2\2\2\u0360\u0363\3\2\2\2\u0361\u0362\7\u00d9\2\2\u0362")
        buf.write(u"\u0364\5j\66\2\u0363\u0361\3\2\2\2\u0363\u0364\3\2\2")
        buf.write(u"\2\u0364\u060d\3\2\2\2\u0365\u0366\7)\2\2\u0366\u0367")
        buf.write(u"\7\u00dd\2\2\u0367\u060d\5z>\2\u0368\u0369\7^\2\2\u0369")
        buf.write(u"\u036c\t\n\2\2\u036a\u036d\7.\2\2\u036b\u036d\5\34\17")
        buf.write(u"\2\u036c\u036a\3\2\2\2\u036c\u036b\3\2\2\2\u036d\u060d")
        buf.write(u"\3\2\2\2\u036e\u036f\7\u00b7\2\2\u036f\u0372\7\u012d")
        buf.write(u"\2\2\u0370\u0373\7\u0101\2\2\u0371\u0373\5z>\2\u0372")
        buf.write(u"\u0370\3\2\2\2\u0372\u0371\3\2\2\2\u0373\u0392\3\2\2")
        buf.write(u"\2\u0374\u0375\7\u0090\2\2\u0375\u0376\5T+\2\u0376\u0377")
        buf.write(u"\7\u011f\2\2\u0377\u0378\5T+\2\u0378\u0391\3\2\2\2\u0379")
        buf.write(u"\u037a\78\2\2\u037a\u037b\5T+\2\u037b\u037c\7\u010a\2")
        buf.write(u"\2\u037c\u037d\5T+\2\u037d\u0391\3\2\2\2\u037e\u037f")
        buf.write(u"\7\u0089\2\2\u037f\u0391\5T+\2\u0380\u0381\7\u0111\2")
        buf.write(u"\2\u0381\u0391\5Z.\2\u0382\u0383\7\u011e\2\2\u0383\u0391")
        buf.write(u"\5Z.\2\u0384\u0391\5z>\2\u0385\u0386\7\u0096\2\2\u0386")
        buf.write(u"\u0387\7\u0084\2\2\u0387\u0391\5j\66\2\u0388\u0389\7")
        buf.write(u"\u0085\2\2\u0389\u038a\7\u0084\2\2\u038a\u0391\5j\66")
        buf.write(u"\2\u038b\u038c\7M\2\2\u038c\u038d\7\u00ff\2\2\u038d\u0391")
        buf.write(u"\5Z.\2\u038e\u038f\7M\2\2\u038f\u0391\5T+\2\u0390\u0374")
        buf.write(u"\3\2\2\2\u0390\u0379\3\2\2\2\u0390\u037e\3\2\2\2\u0390")
        buf.write(u"\u0380\3\2\2\2\u0390\u0382\3\2\2\2\u0390\u0384\3\2\2")
        buf.write(u"\2\u0390\u0385\3\2\2\2\u0390\u0388\3\2\2\2\u0390\u038b")
        buf.write(u"\3\2\2\2\u0390\u038e\3\2\2\2\u0391\u0394\3\2\2\2\u0392")
        buf.write(u"\u0390\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u060d\3\2\2")
        buf.write(u"\2\u0394\u0392\3\2\2\2\u0395\u0396\7\u00b7\2\2\u0396")
        buf.write(u"\u0399\t\r\2\2\u0397\u039a\7#\2\2\u0398\u039a\5j\66\2")
        buf.write(u"\u0399\u0397\3\2\2\2\u0399\u0398\3\2\2\2\u039a\u03a6")
        buf.write(u"\3\2\2\2\u039b\u039f\7\u0099\2\2\u039c\u039d\7\u012d")
        buf.write(u"\2\2\u039d\u03a0\5z>\2\u039e\u03a0\7\u0101\2\2\u039f")
        buf.write(u"\u039c\3\2\2\2\u039f\u039e\3\2\2\2\u03a0\u03a5\3\2\2")
        buf.write(u"\2\u03a1\u03a2\7\64\2\2\u03a2\u03a5\5Z.\2\u03a3\u03a5")
        buf.write(u"\5z>\2\u03a4\u039b\3\2\2\2\u03a4\u03a1\3\2\2\2\u03a4")
        buf.write(u"\u03a3\3\2\2\2\u03a5\u03a8\3\2\2\2\u03a6\u03a4\3\2\2")
        buf.write(u"\2\u03a6\u03a7\3\2\2\2\u03a7\u060d\3\2\2\2\u03a8\u03a6")
        buf.write(u"\3\2\2\2\u03a9\u03ab\7|\2\2\u03aa\u03ac\5Z.\2\u03ab\u03aa")
        buf.write(u"\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\u060d\3\2\2\2\u03ad")
        buf.write(u"\u03af\7\u011c\2\2\u03ae\u03b0\5Z.\2\u03af\u03ae\3\2")
        buf.write(u"\2\2\u03af\u03b0\3\2\2\2\u03b0\u060d\3\2\2\2\u03b1\u03b2")
        buf.write(u"\7W\2\2\u03b2\u03b3\t\16\2\2\u03b3\u03c5\5j\66\2\u03b4")
        buf.write(u"\u03b6\7\u008f\2\2\u03b5\u03b4\3\2\2\2\u03b5\u03b6\3")
        buf.write(u"\2\2\2\u03b6\u03b7\3\2\2\2\u03b7\u03b8\7\22\2\2\u03b8")
        buf.write(u"\u03bd\5H%\2\u03b9\u03ba\7 \2\2\u03ba\u03bc\5H%\2\u03bb")
        buf.write(u"\u03b9\3\2\2\2\u03bc\u03bf\3\2\2\2\u03bd\u03bb\3\2\2")
        buf.write(u"\2\u03bd\u03be\3\2\2\2\u03be\u03c0\3\2\2\2\u03bf\u03bd")
        buf.write(u"\3\2\2\2\u03c0\u03c1\7\23\2\2\u03c1\u03c6\3\2\2\2\u03c2")
        buf.write(u"\u03c3\7\u0090\2\2\u03c3\u03c4\7\63\2\2\u03c4\u03c6\5")
        buf.write(u"Z.\2\u03c5\u03b5\3\2\2\2\u03c5\u03c2\3\2\2\2\u03c6\u060d")
        buf.write(u"\3\2\2\2\u03c7\u03c8\7/\2\2\u03c8\u03c9\7\u0115\2\2\u03c9")
        buf.write(u"\u03d9\5j\66\2\u03ca\u03cb\7*\2\2\u03cb\u03cc\7N\2\2")
        buf.write(u"\u03cc\u03d8\5H%\2\u03cd\u03ce\7l\2\2\u03ce\u03cf\7N")
        buf.write(u"\2\2\u03cf\u03d8\5z>\2\u03d0\u03d1\7/\2\2\u03d1\u03d2")
        buf.write(u"\7N\2\2\u03d2\u03d5\5z>\2\u03d3\u03d4\7\u00c8\2\2\u03d4")
        buf.write(u"\u03d6\7\u00cd\2\2\u03d5\u03d3\3\2\2\2\u03d5\u03d6\3")
        buf.write(u"\2\2\2\u03d6\u03d8\3\2\2\2\u03d7\u03ca\3\2\2\2\u03d7")
        buf.write(u"\u03cd\3\2\2\2\u03d7\u03d0\3\2\2\2\u03d8\u03db\3\2\2")
        buf.write(u"\2\u03d9\u03d7\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u060d")
        buf.write(u"\3\2\2\2\u03db\u03d9\3\2\2\2\u03dc\u03f7\7\u0103\2\2")
        buf.write(u"\u03dd\u03f8\5j\66\2\u03de\u03e0\7h\2\2\u03df\u03de\3")
        buf.write(u"\2\2\2\u03df\u03e0\3\2\2\2\u03e0\u03e3\3\2\2\2\u03e1")
        buf.write(u"\u03e4\5V,\2\u03e2\u03e4\7\t\2\2\u03e3\u03e1\3\2\2\2")
        buf.write(u"\u03e3\u03e2\3\2\2\2\u03e4\u03e7\3\2\2\2\u03e5\u03e6")
        buf.write(u"\7\u0090\2\2\u03e6\u03e8\5j\66\2\u03e7\u03e5\3\2\2\2")
        buf.write(u"\u03e7\u03e8\3\2\2\2\u03e8\u03eb\3\2\2\2\u03e9\u03ea")
        buf.write(u"\7\u012b\2\2\u03ea\u03ec\5Z.\2\u03eb\u03e9\3\2\2\2\u03eb")
        buf.write(u"\u03ec\3\2\2\2\u03ec\u03f0\3\2\2\2\u03ed\u03ee\7\u009e")
        buf.write(u"\2\2\u03ee\u03ef\t\17\2\2\u03ef\u03f1\5j\66\2\u03f0\u03ed")
        buf.write(u"\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f5\3\2\2\2\u03f2")
        buf.write(u"\u03f3\7\u00d4\2\2\u03f3\u03f4\7@\2\2\u03f4\u03f6\5z")
        buf.write(u">\2\u03f5\u03f2\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f8")
        buf.write(u"\3\2\2\2\u03f7\u03dd\3\2\2\2\u03f7\u03df\3\2\2\2\u03f8")
        buf.write(u"\u060d\3\2\2\2\u03f9\u0409\7\u0128\2\2\u03fa\u03fb\7")
        buf.write(u"\u0099\2\2\u03fb\u0408\5j\66\2\u03fc\u03fe\7\u00d4\2")
        buf.write(u"\2\u03fd\u03ff\7\u0117\2\2\u03fe\u03fd\3\2\2\2\u03fe")
        buf.write(u"\u03ff\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u0408\5Z.\2")
        buf.write(u"\u0401\u0402\7-\2\2\u0402\u0408\5j\66\2\u0403\u0408\7")
        buf.write(u"\u0107\2\2\u0404\u0408\7\u0080\2\2\u0405\u0408\7\u00cb")
        buf.write(u"\2\2\u0406\u0408\5j\66\2\u0407\u03fa\3\2\2\2\u0407\u03fc")
        buf.write(u"\3\2\2\2\u0407\u0401\3\2\2\2\u0407\u0403\3\2\2\2\u0407")
        buf.write(u"\u0404\3\2\2\2\u0407\u0405\3\2\2\2\u0407\u0406\3\2\2")
        buf.write(u"\2\u0408\u040b\3\2\2\2\u0409\u0407\3\2\2\2\u0409\u040a")
        buf.write(u"\3\2\2\2\u040a\u060d\3\2\2\2\u040b\u0409\3\2\2\2\u040c")
        buf.write(u"\u0410\7\u00a8\2\2\u040d\u040f\5@!\2\u040e\u040d\3\2")
        buf.write(u"\2\2\u040f\u0412\3\2\2\2\u0410\u040e\3\2\2\2\u0410\u0411")
        buf.write(u"\3\2\2\2\u0411\u060d\3\2\2\2\u0412\u0410\3\2\2\2\u0413")
        buf.write(u"\u060d\7T\2\2\u0414\u060d\7\u00f4\2\2\u0415\u041d\7\u00ef")
        buf.write(u"\2\2\u0416\u041c\5@!\2\u0417\u0418\5j\66\2\u0418\u0419")
        buf.write(u"\7\u012e\2\2\u0419\u041a\5Z.\2\u041a\u041c\3\2\2\2\u041b")
        buf.write(u"\u0416\3\2\2\2\u041b\u0417\3\2\2\2\u041c\u041f\3\2\2")
        buf.write(u"\2\u041d\u041b\3\2\2\2\u041d\u041e\3\2\2\2\u041e\u060d")
        buf.write(u"\3\2\2\2\u041f\u041d\3\2\2\2\u0420\u0421\7\u009b\2\2")
        buf.write(u"\u0421\u0422\7\u00d2\2\2\u0422\u0423\5j\66\2\u0423\u0424")
        buf.write(u"\t\20\2\2\u0424\u0426\5j\66\2\u0425\u0427\7P\2\2\u0426")
        buf.write(u"\u0425\3\2\2\2\u0426\u0427\3\2\2\2\u0427\u0429\3\2\2")
        buf.write(u"\2\u0428\u042a\t\21\2\2\u0429\u0428\3\2\2\2\u0429\u042a")
        buf.write(u"\3\2\2\2\u042a\u042c\3\2\2\2\u042b\u042d\t\22\2\2\u042c")
        buf.write(u"\u042b\3\2\2\2\u042c\u042d\3\2\2\2\u042d\u042f\3\2\2")
        buf.write(u"\2\u042e\u0430\7+\2\2\u042f\u042e\3\2\2\2\u042f\u0430")
        buf.write(u"\3\2\2\2\u0430\u060d\3\2\2\2\u0431\u0437\7V\2\2\u0432")
        buf.write(u"\u0433\7\u011f\2\2\u0433\u0436\5Z.\2\u0434\u0436\5@!")
        buf.write(u"\2\u0435\u0432\3\2\2\2\u0435\u0434\3\2\2\2\u0436\u0439")
        buf.write(u"\3\2\2\2\u0437\u0435\3\2\2\2\u0437\u0438\3\2\2\2\u0438")
        buf.write(u"\u060d\3\2\2\2\u0439\u0437\3\2\2\2\u043a\u0441\7\u0112")
        buf.write(u"\2\2\u043b\u043c\7\u011f\2\2\u043c\u0440\5Z.\2\u043d")
        buf.write(u"\u0440\5@!\2\u043e\u0440\5Z.\2\u043f\u043b\3\2\2\2\u043f")
        buf.write(u"\u043d\3\2\2\2\u043f\u043e\3\2\2\2\u0440\u0443\3\2\2")
        buf.write(u"\2\u0441\u043f\3\2\2\2\u0441\u0442\3\2\2\2\u0442\u060d")
        buf.write(u"\3\2\2\2\u0443\u0441\3\2\2\2\u0444\u0445\7\u010c\2\2")
        buf.write(u"\u0445\u0446\7\u011f\2\2\u0446\u0447\5Z.\2\u0447\u0448")
        buf.write(u"\7\u00d2\2\2\u0448\u044d\5Z.\2\u0449\u044a\7\f\2\2\u044a")
        buf.write(u"\u044c\5z>\2\u044b\u0449\3\2\2\2\u044c\u044f\3\2\2\2")
        buf.write(u"\u044d\u044b\3\2\2\2\u044d\u044e\3\2\2\2\u044e\u045b")
        buf.write(u"\3\2\2\2\u044f\u044d\3\2\2\2\u0450\u0451\7 \2\2\u0451")
        buf.write(u"\u0456\5Z.\2\u0452\u0453\7\f\2\2\u0453\u0455\5z>\2\u0454")
        buf.write(u"\u0452\3\2\2\2\u0455\u0458\3\2\2\2\u0456\u0454\3\2\2")
        buf.write(u"\2\u0456\u0457\3\2\2\2\u0457\u045a\3\2\2\2\u0458\u0456")
        buf.write(u"\3\2\2\2\u0459\u0450\3\2\2\2\u045a\u045d\3\2\2\2\u045b")
        buf.write(u"\u0459\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u0468\3\2\2")
        buf.write(u"\2\u045d\u045b\3\2\2\2\u045e\u0467\7\65\2\2\u045f\u0467")
        buf.write(u"\7f\2\2\u0460\u0462\7\u0083\2\2\u0461\u0463\t\23\2\2")
        buf.write(u"\u0462\u0461\3\2\2\2\u0462\u0463\3\2\2\2\u0463\u0464")
        buf.write(u"\3\2\2\2\u0464\u0467\5T+\2\u0465\u0467\5@!\2\u0466\u045e")
        buf.write(u"\3\2\2\2\u0466\u045f\3\2\2\2\u0466\u0460\3\2\2\2\u0466")
        buf.write(u"\u0465\3\2\2\2\u0467\u046a\3\2\2\2\u0468\u0466\3\2\2")
        buf.write(u"\2\u0468\u0469\3\2\2\2\u0469\u060d\3\2\2\2\u046a\u0468")
        buf.write(u"\3\2\2\2\u046b\u0471\t\24\2\2\u046c\u0470\5@!\2\u046d")
        buf.write(u"\u046e\7\u0099\2\2\u046e\u0470\5j\66\2\u046f\u046c\3")
        buf.write(u"\2\2\2\u046f\u046d\3\2\2\2\u0470\u0473\3\2\2\2\u0471")
        buf.write(u"\u046f\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u060d\3\2\2")
        buf.write(u"\2\u0473\u0471\3\2\2\2\u0474\u0475\7\62\2\2\u0475\u047d")
        buf.write(u"\7\u0090\2\2\u0476\u0477\7\63\2\2\u0477\u047e\5Z.\2\u0478")
        buf.write(u"\u0479\5j\66\2\u0479\u047a\7\u008a\2\2\u047a\u047b\5")
        buf.write(u"Z.\2\u047b\u047e\3\2\2\2\u047c\u047e\5j\66\2\u047d\u0476")
        buf.write(u"\3\2\2\2\u047d\u0478\3\2\2\2\u047d\u047c\3\2\2\2\u047e")
        buf.write(u"\u0481\3\2\2\2\u047f\u0480\7\u0122\2\2\u0480\u0482\5")
        buf.write(u"j\66\2\u0481\u047f\3\2\2\2\u0481\u0482\3\2\2\2\u0482")
        buf.write(u"\u060d\3\2\2\2\u0483\u0485\7\62\2\2\u0484\u0486\7<\2")
        buf.write(u"\2\u0485\u0484\3\2\2\2\u0485\u0486\3\2\2\2\u0486\u048d")
        buf.write(u"\3\2\2\2\u0487\u0488\7\u0099\2\2\u0488\u0489\5j\66\2")
        buf.write(u"\u0489\u048a\7\u00c2\2\2\u048a\u048e\3\2\2\2\u048b\u048c")
        buf.write(u"\7\u0099\2\2\u048c\u048e\5j\66\2\u048d\u0487\3\2\2\2")
        buf.write(u"\u048d\u048b\3\2\2\2\u048d\u048e\3\2\2\2\u048e\u060d")
        buf.write(u"\3\2\2\2\u048f\u0490\7\u009d\2\2\u0490\u0491\7\u009e")
        buf.write(u"\2\2\u0491\u04a5\5j\66\2\u0492\u0498\7\u0090\2\2\u0493")
        buf.write(u"\u0494\7\63\2\2\u0494\u0499\5Z.\2\u0495\u0499\7\u00b1")
        buf.write(u"\2\2\u0496\u0497\7\u00b9\2\2\u0497\u0499\5Z.\2\u0498")
        buf.write(u"\u0493\3\2\2\2\u0498\u0495\3\2\2\2\u0498\u0496\3\2\2")
        buf.write(u"\2\u0499\u04a6\3\2\2\2\u049a\u049b\7\22\2\2\u049b\u049c")
        buf.write(u"\5V,\2\u049c\u049d\7\23\2\2\u049d\u049f\3\2\2\2\u049e")
        buf.write(u"\u049a\3\2\2\2\u049e\u049f\3\2\2\2\u049f\u04a0\3\2\2")
        buf.write(u"\2\u04a0\u04a1\7\u0129\2\2\u04a1\u04a2\7\22\2\2\u04a2")
        buf.write(u"\u04a3\5T+\2\u04a3\u04a4\7\23\2\2\u04a4\u04a6\3\2\2\2")
        buf.write(u"\u04a5\u0492\3\2\2\2\u04a5\u049e\3\2\2\2\u04a6\u060d")
        buf.write(u"\3\2\2\2\u04a7\u04a9\7\u010b\2\2\u04a8\u04aa\5Z.\2\u04a9")
        buf.write(u"\u04a8\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04ad\3\2\2")
        buf.write(u"\2\u04ab\u04ac\7\u0099\2\2\u04ac\u04ae\5j\66\2\u04ad")
        buf.write(u"\u04ab\3\2\2\2\u04ad\u04ae\3\2\2\2\u04ae\u060d\3\2\2")
        buf.write(u"\2\u04af\u04bd\7\u00d8\2\2\u04b0\u04be\7Y\2\2\u04b1\u04b3")
        buf.write(u"\t\25\2\2\u04b2\u04b1\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3")
        buf.write(u"\u04bb\3\2\2\2\u04b4\u04b5\7\u0099\2\2\u04b5\u04bc\5")
        buf.write(u"j\66\2\u04b6\u04b7\5j\66\2\u04b7\u04b8\7\u0099\2\2\u04b8")
        buf.write(u"\u04b9\5j\66\2\u04b9\u04bc\3\2\2\2\u04ba\u04bc\5j\66")
        buf.write(u"\2\u04bb\u04b4\3\2\2\2\u04bb\u04b6\3\2\2\2\u04bb\u04ba")
        buf.write(u"\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04be\3\2\2\2\u04bd")
        buf.write(u"\u04b0\3\2\2\2\u04bd\u04b2\3\2\2\2\u04be\u060d\3\2\2")
        buf.write(u"\2\u04bf\u04c1\7\u00ea\2\2\u04c0\u04c2\7P\2\2\u04c1\u04c0")
        buf.write(u"\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2\u060d\3\2\2\2\u04c3")
        buf.write(u"\u04c4\7\u0102\2\2\u04c4\u04d3\5Z.\2\u04c5\u04c6\7\u00d4")
        buf.write(u"\2\2\u04c6\u04cf\5Z.\2\u04c7\u04c8\7\u0117\2\2\u04c8")
        buf.write(u"\u04cb\5j\66\2\u04c9\u04ca\7\u00d0\2\2\u04ca\u04cc\5")
        buf.write(u"j\66\2\u04cb\u04c9\3\2\2\2\u04cb\u04cc\3\2\2\2\u04cc")
        buf.write(u"\u04cf\3\2\2\2\u04cd\u04cf\5j\66\2\u04ce\u04c5\3\2\2")
        buf.write(u"\2\u04ce\u04c7\3\2\2\2\u04ce\u04cd\3\2\2\2\u04cf\u04d1")
        buf.write(u"\3\2\2\2\u04d0\u04d2\t\21\2\2\u04d1\u04d0\3\2\2\2\u04d1")
        buf.write(u"\u04d2\3\2\2\2\u04d2\u04d4\3\2\2\2\u04d3\u04ce\3\2\2")
        buf.write(u"\2\u04d3\u04d4\3\2\2\2\u04d4\u04d7\3\2\2\2\u04d5\u04d6")
        buf.write(u"\7\u0099\2\2\u04d6\u04d8\5j\66\2\u04d7\u04d5\3\2\2\2")
        buf.write(u"\u04d7\u04d8\3\2\2\2\u04d8\u060d\3\2\2\2\u04d9\u04da")
        buf.write(u"\7\u0127\2\2\u04da\u04db\5j\66\2\u04db\u04dc\7\u0105")
        buf.write(u"\2\2\u04dc\u04dd\5z>\2\u04dd\u04de\7\36\2\2\u04de\u04e6")
        buf.write(u"\5Z.\2\u04df\u04e0\7 \2\2\u04e0\u04e1\5z>\2\u04e1\u04e2")
        buf.write(u"\7\36\2\2\u04e2\u04e3\5Z.\2\u04e3\u04e5\3\2\2\2\u04e4")
        buf.write(u"\u04df\3\2\2\2\u04e5\u04e8\3\2\2\2\u04e6\u04e4\3\2\2")
        buf.write(u"\2\u04e6\u04e7\3\2\2\2\u04e7\u04f4\3\2\2\2\u04e8\u04e6")
        buf.write(u"\3\2\2\2\u04e9\u04eb\7\u0090\2\2\u04ea\u04ec\7\u008b")
        buf.write(u"\2\2\u04eb\u04ea\3\2\2\2\u04eb\u04ec\3\2\2\2\u04ec\u04ed")
        buf.write(u"\3\2\2\2\u04ed\u04f3\5V,\2\u04ee\u04ef\7\u009f\2\2\u04ef")
        buf.write(u"\u04f3\5V,\2\u04f0\u04f1\7\u012b\2\2\u04f1\u04f3\5Z.")
        buf.write(u"\2\u04f2\u04e9\3\2\2\2\u04f2\u04ee\3\2\2\2\u04f2\u04f0")
        buf.write(u"\3\2\2\2\u04f3\u04f6\3\2\2\2\u04f4\u04f2\3\2\2\2\u04f4")
        buf.write(u"\u04f5\3\2\2\2\u04f5\u060d\3\2\2\2\u04f6\u04f4\3\2\2")
        buf.write(u"\2\u04f7\u04fe\7\u0093\2\2\u04f8\u04ff\7\u0120\2\2\u04f9")
        buf.write(u"\u04ff\7>\2\2\u04fa\u04fc\7\u00e7\2\2\u04fb\u04fa\3\2")
        buf.write(u"\2\2\u04fb\u04fc\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\u04ff")
        buf.write(u"\5Z.\2\u04fe\u04f8\3\2\2\2\u04fe\u04f9\3\2\2\2\u04fe")
        buf.write(u"\u04fb\3\2\2\2\u04ff\u0502\3\2\2\2\u0500\u0501\7\u0099")
        buf.write(u"\2\2\u0501\u0503\5j\66\2\u0502\u0500\3\2\2\2\u0502\u0503")
        buf.write(u"\3\2\2\2\u0503\u060d\3\2\2\2\u0504\u0510\7U\2\2\u0505")
        buf.write(u"\u0506\7\u011f\2\2\u0506\u0507\7\63\2\2\u0507\u050f\5")
        buf.write(u"j\66\2\u0508\u050a\7\u0083\2\2\u0509\u050b\t\23\2\2\u050a")
        buf.write(u"\u0509\3\2\2\2\u050a\u050b\3\2\2\2\u050b\u050c\3\2\2")
        buf.write(u"\2\u050c\u050f\5T+\2\u050d\u050f\5@!\2\u050e\u0505\3")
        buf.write(u"\2\2\2\u050e\u0508\3\2\2\2\u050e\u050d\3\2\2\2\u050f")
        buf.write(u"\u0512\3\2\2\2\u0510\u050e\3\2\2\2\u0510\u0511\3\2\2")
        buf.write(u"\2\u0511\u060d\3\2\2\2\u0512\u0510\3\2\2\2\u0513\u0515")
        buf.write(u"\7U\2\2\u0514\u0516\7\u0110\2\2\u0515\u0514\3\2\2\2\u0515")
        buf.write(u"\u0516\3\2\2\2\u0516\u0517\3\2\2\2\u0517\u0518\7\u011f")
        buf.write(u"\2\2\u0518\u060d\5j\66\2\u0519\u051c\7\u012f\2\2\u051a")
        buf.write(u"\u051b\7\u0099\2\2\u051b\u051d\5j\66\2\u051c\u051a\3")
        buf.write(u"\2\2\2\u051c\u051d\3\2\2\2\u051d\u060d\3\2\2\2\u051e")
        buf.write(u"\u0522\7?\2\2\u051f\u0521\n\2\2\2\u0520\u051f\3\2\2\2")
        buf.write(u"\u0521\u0524\3\2\2\2\u0522\u0520\3\2\2\2\u0522\u0523")
        buf.write(u"\3\2\2\2\u0523\u060d\3\2\2\2\u0524\u0522\3\2\2\2\u0525")
        buf.write(u"\u0537\7\u00fe\2\2\u0526\u0528\7\u0083\2\2\u0527\u0529")
        buf.write(u"\t\23\2\2\u0528\u0527\3\2\2\2\u0528\u0529\3\2\2\2\u0529")
        buf.write(u"\u052a\3\2\2\2\u052a\u0536\5T+\2\u052b\u0536\7\u00ae")
        buf.write(u"\2\2\u052c\u0536\7<\2\2\u052d\u0536\7\u00b1\2\2\u052e")
        buf.write(u"\u052f\7\u00b9\2\2\u052f\u0531\5Z.\2\u0530\u0532\7+\2")
        buf.write(u"\2\u0531\u0530\3\2\2\2\u0531\u0532\3\2\2\2\u0532\u0536")
        buf.write(u"\3\2\2\2\u0533\u0534\7\u011f\2\2\u0534\u0536\5Z.\2\u0535")
        buf.write(u"\u0526\3\2\2\2\u0535\u052b\3\2\2\2\u0535\u052c\3\2\2")
        buf.write(u"\2\u0535\u052d\3\2\2\2\u0535\u052e\3\2\2\2\u0535\u0533")
        buf.write(u"\3\2\2\2\u0536\u0539\3\2\2\2\u0537\u0535\3\2\2\2\u0537")
        buf.write(u"\u0538\3\2\2\2\u0538\u060d\3\2\2\2\u0539\u0537\3\2\2")
        buf.write(u"\2\u053a\u0548\7\u0091\2\2\u053b\u053d\7\u0083\2\2\u053c")
        buf.write(u"\u053e\t\23\2\2\u053d\u053c\3\2\2\2\u053d\u053e\3\2\2")
        buf.write(u"\2\u053e\u053f\3\2\2\2\u053f\u0547\5T+\2\u0540\u0547")
        buf.write(u"\7\u00ae\2\2\u0541\u0547\7\u00b1\2\2\u0542\u0543\7\u00b9")
        buf.write(u"\2\2\u0543\u0547\5Z.\2\u0544\u0545\7\u0090\2\2\u0545")
        buf.write(u"\u0547\5Z.\2\u0546\u053b\3\2\2\2\u0546\u0540\3\2\2\2")
        buf.write(u"\u0546\u0541\3\2\2\2\u0546\u0542\3\2\2\2\u0546\u0544")
        buf.write(u"\3\2\2\2\u0547\u054a\3\2\2\2\u0548\u0546\3\2\2\2\u0548")
        buf.write(u"\u0549\3\2\2\2\u0549\u060d\3\2\2\2\u054a\u0548\3\2\2")
        buf.write(u"\2\u054b\u0551\7K\2\2\u054c\u054e\t\26\2\2\u054d\u054f")
        buf.write(u"\7.\2\2\u054e\u054d\3\2\2\2\u054e\u054f\3\2\2\2\u054f")
        buf.write(u"\u0552\3\2\2\2\u0550\u0552\7.\2\2\u0551\u054c\3\2\2\2")
        buf.write(u"\u0551\u0550\3\2\2\2\u0552\u060d\3\2\2\2\u0553\u0555")
        buf.write(u"\7\u00e5\2\2\u0554\u0556\7}\2\2\u0555\u0554\3\2\2\2\u0555")
        buf.write(u"\u0556\3\2\2\2\u0556\u055c\3\2\2\2\u0557\u0559\7k\2\2")
        buf.write(u"\u0558\u055a\7\u008b\2\2\u0559\u0558\3\2\2\2\u0559\u055a")
        buf.write(u"\3\2\2\2\u055a\u055c\3\2\2\2\u055b\u0553\3\2\2\2\u055b")
        buf.write(u"\u0557\3\2\2\2\u055c\u060d\3\2\2\2\u055d\u055e\7\u0126")
        buf.write(u"\2\2\u055e\u060d\7.\2\2\u055f\u057a\7I\2\2\u0560\u057b")
        buf.write(u"\7.\2\2\u0561\u0562\7G\2\2\u0562\u057b\5Z.\2\u0563\u0564")
        buf.write(u"\7H\2\2\u0564\u057b\5j\66\2\u0565\u057b\7_\2\2\u0566")
        buf.write(u"\u0567\7i\2\2\u0567\u057b\5V,\2\u0568\u057b\7}\2\2\u0569")
        buf.write(u"\u057b\7|\2\2\u056a\u057b\7\u0083\2\2\u056b\u057b\7\u0092")
        buf.write(u"\2\2\u056c\u057b\7\u00a9\2\2\u056d\u057b\7\u00af\2\2")
        buf.write(u"\u056e\u057b\7\u00b3\2\2\u056f\u057b\7\u00dd\2\2\u0570")
        buf.write(u"\u057b\7\u00e1\2\2\u0571\u057b\7\u00e3\2\2\u0572\u0574")
        buf.write(u"\7\u00e5\2\2\u0573\u0575\7.\2\2\u0574\u0573\3\2\2\2\u0574")
        buf.write(u"\u0575\3\2\2\2\u0575\u057b\3\2\2\2\u0576\u0577\7\u00f1")
        buf.write(u"\2\2\u0577\u057b\5Z.\2\u0578\u057b\7\u0123\2\2\u0579")
        buf.write(u"\u057b\7\u012d\2\2\u057a\u0560\3\2\2\2\u057a\u0561\3")
        buf.write(u"\2\2\2\u057a\u0563\3\2\2\2\u057a\u0565\3\2\2\2\u057a")
        buf.write(u"\u0566\3\2\2\2\u057a\u0568\3\2\2\2\u057a\u0569\3\2\2")
        buf.write(u"\2\u057a\u056a\3\2\2\2\u057a\u056b\3\2\2\2\u057a\u056c")
        buf.write(u"\3\2\2\2\u057a\u056d\3\2\2\2\u057a\u056e\3\2\2\2\u057a")
        buf.write(u"\u056f\3\2\2\2\u057a\u0570\3\2\2\2\u057a\u0571\3\2\2")
        buf.write(u"\2\u057a\u0572\3\2\2\2\u057a\u0576\3\2\2\2\u057a\u0578")
        buf.write(u"\3\2\2\2\u057a\u0579\3\2\2\2\u057a\u057b\3\2\2\2\u057b")
        buf.write(u"\u060d\3\2\2\2\u057c\u057d\7\u00f0\2\2\u057d\u0580\7")
        buf.write(u"\u008c\2\2\u057e\u0581\7#\2\2\u057f\u0581\5j\66\2\u0580")
        buf.write(u"\u057e\3\2\2\2\u0580\u057f\3\2\2\2\u0581\u058b\3\2\2")
        buf.write(u"\2\u0582\u058a\7\u00c0\2\2\u0583\u0584\7\u011f\2\2\u0584")
        buf.write(u"\u0586\7\u00df\2\2\u0585\u0587\7\u00e3\2\2\u0586\u0585")
        buf.write(u"\3\2\2\2\u0586\u0587\3\2\2\2\u0587\u058a\3\2\2\2\u0588")
        buf.write(u"\u058a\7\u00be\2\2\u0589\u0582\3\2\2\2\u0589\u0583\3")
        buf.write(u"\2\2\2\u0589\u0588\3\2\2\2\u058a\u058d\3\2\2\2\u058b")
        buf.write(u"\u0589\3\2\2\2\u058b\u058c\3\2\2\2\u058c\u060d\3\2\2")
        buf.write(u"\2\u058d\u058b\3\2\2\2\u058e\u0590\7a\2\2\u058f\u0591")
        buf.write(u"\5v<\2\u0590\u058f\3\2\2\2\u0590\u0591\3\2\2\2\u0591")
        buf.write(u"\u0592\3\2\2\2\u0592\u0593\5z>\2\u0593\u0594\7\u0099")
        buf.write(u"\2\2\u0594\u0597\5j\66\2\u0595\u0596\7\64\2\2\u0596\u0598")
        buf.write(u"\5z>\2\u0597\u0595\3\2\2\2\u0597\u0598\3\2\2\2\u0598")
        buf.write(u"\u059a\3\2\2\2\u0599\u059b\5D#\2\u059a\u0599\3\2\2\2")
        buf.write(u"\u059a\u059b\3\2\2\2\u059b\u060d\3\2\2\2\u059c\u059f")
        buf.write(u"\t\27\2\2\u059d\u059e\7\f\2\2\u059e\u05a0\5z>\2\u059f")
        buf.write(u"\u059d\3\2\2\2\u059f\u05a0\3\2\2\2\u05a0\u05a4\3\2\2")
        buf.write(u"\2\u05a1\u05a3\n\2\2\2\u05a2\u05a1\3\2\2\2\u05a3\u05a6")
        buf.write(u"\3\2\2\2\u05a4\u05a2\3\2\2\2\u05a4\u05a5\3\2\2\2\u05a5")
        buf.write(u"\u060d\3\2\2\2\u05a6\u05a4\3\2\2\2\u05a7\u05a8\7\66\2")
        buf.write(u"\2\u05a8\u05ab\5Z.\2\u05a9\u05aa\7\u00b4\2\2\u05aa\u05ac")
        buf.write(u"\5Z.\2\u05ab\u05a9\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac")
        buf.write(u"\u060d\3\2\2\2\u05ad\u05af\7R\2\2\u05ae\u05b0\t\30\2")
        buf.write(u"\2\u05af\u05ae\3\2\2\2\u05af\u05b0\3\2\2\2\u05b0\u05b9")
        buf.write(u"\3\2\2\2\u05b1\u05b8\7.\2\2\u05b2\u05b8\7p\2\2\u05b3")
        buf.write(u"\u05b8\7\u00bf\2\2\u05b4\u05b5\7\64\2\2\u05b5\u05b8\5")
        buf.write(u"j\66\2\u05b6\u05b8\5j\66\2\u05b7\u05b1\3\2\2\2\u05b7")
        buf.write(u"\u05b2\3\2\2\2\u05b7\u05b3\3\2\2\2\u05b7\u05b4\3\2\2")
        buf.write(u"\2\u05b7\u05b6\3\2\2\2\u05b8\u05bb\3\2\2\2\u05b9\u05b7")
        buf.write(u"\3\2\2\2\u05b9\u05ba\3\2\2\2\u05ba\u060d\3\2\2\2\u05bb")
        buf.write(u"\u05b9\3\2\2\2\u05bc\u05bd\7\u00a7\2\2\u05bd\u060d\5")
        buf.write(u"x=\2\u05be\u05bf\7\u00fb\2\2\u05bf\u05c3\7\u011f\2\2")
        buf.write(u"\u05c0\u05c1\7\u00ae\2\2\u05c1\u05c4\5j\66\2\u05c2\u05c4")
        buf.write(u"\5j\66\2\u05c3\u05c0\3\2\2\2\u05c3\u05c2\3\2\2\2\u05c4")
        buf.write(u"\u05c8\3\2\2\2\u05c5\u05c6\7.\2\2\u05c6\u05c7\t\23\2")
        buf.write(u"\2\u05c7\u05c9\5j\66\2\u05c8\u05c5\3\2\2\2\u05c8\u05c9")
        buf.write(u"\3\2\2\2\u05c9\u060d\3\2\2\2\u05ca\u05cb\7\u00f3\2\2")
        buf.write(u"\u05cb\u05cc\7\u0090\2\2\u05cc\u05ce\5j\66\2\u05cd\u05cf")
        buf.write(u"\7+\2\2\u05ce\u05cd\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf")
        buf.write(u"\u060d\3\2\2\2\u05d0\u05d1\7\u0130\2\2\u05d1\u05d2\7")
        buf.write(u"\u012d\2\2\u05d2\u05d3\5j\66\2\u05d3\u05eb\t\31\2\2\u05d4")
        buf.write(u"\u05d5\78\2\2\u05d5\u05d6\5Z.\2\u05d6\u05d7\7 \2\2\u05d7")
        buf.write(u"\u05d8\5Z.\2\u05d8\u05ec\3\2\2\2\u05d9\u05da\7\u0090")
        buf.write(u"\2\2\u05da\u05db\78\2\2\u05db\u05dc\5Z.\2\u05dc\u05dd")
        buf.write(u"\7 \2\2\u05dd\u05e9\5Z.\2\u05de\u05df\7\u010a\2\2\u05df")
        buf.write(u"\u05e0\78\2\2\u05e0\u05e1\5Z.\2\u05e1\u05e2\7 \2\2\u05e2")
        buf.write(u"\u05e3\5Z.\2\u05e3\u05ea\3\2\2\2\u05e4\u05e5\7\u011f")
        buf.write(u"\2\2\u05e5\u05e6\5Z.\2\u05e6\u05e7\7 \2\2\u05e7\u05e8")
        buf.write(u"\5Z.\2\u05e8\u05ea\3\2\2\2\u05e9\u05de\3\2\2\2\u05e9")
        buf.write(u"\u05e4\3\2\2\2\u05e9\u05ea\3\2\2\2\u05ea\u05ec\3\2\2")
        buf.write(u"\2\u05eb\u05d4\3\2\2\2\u05eb\u05d9\3\2\2\2\u05eb\u05ec")
        buf.write(u"\3\2\2\2\u05ec\u060d\3\2\2\2\u05ed\u05f9\7\u0119\2\2")
        buf.write(u"\u05ee\u05ef\7\u011f\2\2\u05ef\u05f8\5p9\2\u05f0\u05f8")
        buf.write(u"\7+\2\2\u05f1\u05f8\7\u011a\2\2\u05f2\u05f8\7\u00c7\2")
        buf.write(u"\2\u05f3\u05f4\7\u0088\2\2\u05f4\u05f8\5Z.\2\u05f5\u05f6")
        buf.write(u"\7\u00de\2\2\u05f6\u05f8\5Z.\2\u05f7\u05ee\3\2\2\2\u05f7")
        buf.write(u"\u05f0\3\2\2\2\u05f7\u05f1\3\2\2\2\u05f7\u05f2\3\2\2")
        buf.write(u"\2\u05f7\u05f3\3\2\2\2\u05f7\u05f5\3\2\2\2\u05f8\u05fb")
        buf.write(u"\3\2\2\2\u05f9\u05f7\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa")
        buf.write(u"\u05fc\3\2\2\2\u05fb\u05f9\3\2\2\2\u05fc\u05fd\7\u0132")
        buf.write(u"\2\2\u05fd\u05fe\5B\"\2\u05fe\u05ff\7x\2\2\u05ff\u060d")
        buf.write(u"\3\2\2\2\u0600\u0601\7\u0108\2\2\u0601\u060d\7\u0092")
        buf.write(u"\2\2\u0602\u0603\7\u0095\2\2\u0603\u0607\7\u012d\2\2")
        buf.write(u"\u0604\u0608\7.\2\2\u0605\u0608\7\u0101\2\2\u0606\u0608")
        buf.write(u"\5T+\2\u0607\u0604\3\2\2\2\u0607\u0605\3\2\2\2\u0607")
        buf.write(u"\u0606\3\2\2\2\u0608\u060d\3\2\2\2\u0609\u060a\7\36\2")
        buf.write(u"\2\u060a\u060d\5Z.\2\u060b\u060d\5`\61\2\u060c\u01c3")
        buf.write(u"\3\2\2\2\u060c\u01d7\3\2\2\2\u060c\u01d8\3\2\2\2\u060c")
        buf.write(u"\u01e9\3\2\2\2\u060c\u0219\3\2\2\2\u060c\u022f\3\2\2")
        buf.write(u"\2\u060c\u0236\3\2\2\2\u060c\u023b\3\2\2\2\u060c\u0254")
        buf.write(u"\3\2\2\2\u060c\u0260\3\2\2\2\u060c\u0266\3\2\2\2\u060c")
        buf.write(u"\u0268\3\2\2\2\u060c\u026c\3\2\2\2\u060c\u0290\3\2\2")
        buf.write(u"\2\u060c\u029d\3\2\2\2\u060c\u029f\3\2\2\2\u060c\u02a8")
        buf.write(u"\3\2\2\2\u060c\u02ba\3\2\2\2\u060c\u02c2\3\2\2\2\u060c")
        buf.write(u"\u02d8\3\2\2\2\u060c\u0327\3\2\2\2\u060c\u0338\3\2\2")
        buf.write(u"\2\u060c\u0343\3\2\2\2\u060c\u0359\3\2\2\2\u060c\u035b")
        buf.write(u"\3\2\2\2\u060c\u0365\3\2\2\2\u060c\u0368\3\2\2\2\u060c")
        buf.write(u"\u036e\3\2\2\2\u060c\u0395\3\2\2\2\u060c\u03a9\3\2\2")
        buf.write(u"\2\u060c\u03ad\3\2\2\2\u060c\u03b1\3\2\2\2\u060c\u03c7")
        buf.write(u"\3\2\2\2\u060c\u03dc\3\2\2\2\u060c\u03f9\3\2\2\2\u060c")
        buf.write(u"\u040c\3\2\2\2\u060c\u0413\3\2\2\2\u060c\u0414\3\2\2")
        buf.write(u"\2\u060c\u0415\3\2\2\2\u060c\u0420\3\2\2\2\u060c\u0431")
        buf.write(u"\3\2\2\2\u060c\u043a\3\2\2\2\u060c\u0444\3\2\2\2\u060c")
        buf.write(u"\u046b\3\2\2\2\u060c\u0474\3\2\2\2\u060c\u0483\3\2\2")
        buf.write(u"\2\u060c\u048f\3\2\2\2\u060c\u04a7\3\2\2\2\u060c\u04af")
        buf.write(u"\3\2\2\2\u060c\u04bf\3\2\2\2\u060c\u04c3\3\2\2\2\u060c")
        buf.write(u"\u04d9\3\2\2\2\u060c\u04f7\3\2\2\2\u060c\u0504\3\2\2")
        buf.write(u"\2\u060c\u0513\3\2\2\2\u060c\u0519\3\2\2\2\u060c\u051e")
        buf.write(u"\3\2\2\2\u060c\u0525\3\2\2\2\u060c\u053a\3\2\2\2\u060c")
        buf.write(u"\u054b\3\2\2\2\u060c\u055b\3\2\2\2\u060c\u055d\3\2\2")
        buf.write(u"\2\u060c\u055f\3\2\2\2\u060c\u057c\3\2\2\2\u060c\u058e")
        buf.write(u"\3\2\2\2\u060c\u059c\3\2\2\2\u060c\u05a7\3\2\2\2\u060c")
        buf.write(u"\u05ad\3\2\2\2\u060c\u05bc\3\2\2\2\u060c\u05be\3\2\2")
        buf.write(u"\2\u060c\u05ca\3\2\2\2\u060c\u05d0\3\2\2\2\u060c\u05ed")
        buf.write(u"\3\2\2\2\u060c\u0600\3\2\2\2\u060c\u0602\3\2\2\2\u060c")
        buf.write(u"\u0609\3\2\2\2\u060c\u060b\3\2\2\2\u060d?\3\2\2\2\u060e")
        buf.write(u"\u0615\5x=\2\u060f\u0610\7\u008a\2\2\u0610\u0615\5Z.")
        buf.write(u"\2\u0611\u0612\7\u012c\2\2\u0612\u0615\5Z.\2\u0613\u0615")
        buf.write(u"\7\u00c3\2\2\u0614\u060e\3\2\2\2\u0614\u060f\3\2\2\2")
        buf.write(u"\u0614\u0611\3\2\2\2\u0614\u0613\3\2\2\2\u0615A\3\2\2")
        buf.write(u"\2\u0616\u0618\n\32\2\2\u0617\u0616\3\2\2\2\u0618\u061b")
        buf.write(u"\3\2\2\2\u0619\u0617\3\2\2\2\u0619\u061a\3\2\2\2\u061a")
        buf.write(u"C\3\2\2\2\u061b\u0619\3\2\2\2\u061c\u0621\5F$\2\u061d")
        buf.write(u"\u061e\7 \2\2\u061e\u0620\5F$\2\u061f\u061d\3\2\2\2\u0620")
        buf.write(u"\u0623\3\2\2\2\u0621\u061f\3\2\2\2\u0621\u0622\3\2\2")
        buf.write(u"\2\u0622E\3\2\2\2\u0623\u0621\3\2\2\2\u0624\u0626\5v")
        buf.write(u"<\2\u0625\u0627\7\b\2\2\u0626\u0625\3\2\2\2\u0626\u0627")
        buf.write(u"\3\2\2\2\u0627\u0629\3\2\2\2\u0628\u062a\5z>\2\u0629")
        buf.write(u"\u0628\3\2\2\2\u0629\u062a\3\2\2\2\u062aG\3\2\2\2\u062b")
        buf.write(u"\u062c\5z>\2\u062c\u062e\5z>\2\u062d\u062f\5t;\2\u062e")
        buf.write(u"\u062d\3\2\2\2\u062e\u062f\3\2\2\2\u062fI\3\2\2\2\u0630")
        buf.write(u"\u0638\7\60\2\2\u0631\u0639\7\u00d2\2\2\u0632\u0639\7")
        buf.write(u"\u00d1\2\2\u0633\u0634\7\u011f\2\2\u0634\u0636\5j\66")
        buf.write(u"\2\u0635\u0637\7+\2\2\u0636\u0635\3\2\2\2\u0636\u0637")
        buf.write(u"\3\2\2\2\u0637\u0639\3\2\2\2\u0638\u0631\3\2\2\2\u0638")
        buf.write(u"\u0632\3\2\2\2\u0638\u0633\3\2\2\2\u0639\u071b\3\2\2")
        buf.write(u"\2\u063a\u063b\t\33\2\2\u063b\u071b\t\34\2\2\u063c\u0641")
        buf.write(u"\7;\2\2\u063d\u0642\7\u00d2\2\2\u063e\u0642\7\u00d1\2")
        buf.write(u"\2\u063f\u0640\7\u011f\2\2\u0640\u0642\5j\66\2\u0641")
        buf.write(u"\u063d\3\2\2\2\u0641\u063e\3\2\2\2\u0641\u063f\3\2\2")
        buf.write(u"\2\u0642\u071b\3\2\2\2\u0643\u064e\7E\2\2\u0644\u064f")
        buf.write(u"\7\u00d2\2\2\u0645\u064f\7\u00d1\2\2\u0646\u064c\7\u011f")
        buf.write(u"\2\2\u0647\u064a\5Z.\2\u0648\u0649\7\u00f7\2\2\u0649")
        buf.write(u"\u064b\5Z.\2\u064a\u0648\3\2\2\2\u064a\u064b\3\2\2\2")
        buf.write(u"\u064b\u064d\3\2\2\2\u064c\u0647\3\2\2\2\u064c\u064d")
        buf.write(u"\3\2\2\2\u064d\u064f\3\2\2\2\u064e\u0644\3\2\2\2\u064e")
        buf.write(u"\u0645\3\2\2\2\u064e\u0646\3\2\2\2\u064f\u071b\3\2\2")
        buf.write(u"\2\u0650\u0651\7H\2\2\u0651\u0652\7\u011f\2\2\u0652\u0655")
        buf.write(u"\5j\66\2\u0653\u0654\7\u0099\2\2\u0654\u0656\5j\66\2")
        buf.write(u"\u0655\u0653\3\2\2\2\u0655\u0656\3\2\2\2\u0656\u0659")
        buf.write(u"\3\2\2\2\u0657\u0658\7-\2\2\u0658\u065a\5j\66\2\u0659")
        buf.write(u"\u0657\3\2\2\2\u0659\u065a\3\2\2\2\u065a\u065c\3\2\2")
        buf.write(u"\2\u065b\u065d\7+\2\2\u065c\u065b\3\2\2\2\u065c\u065d")
        buf.write(u"\3\2\2\2\u065d\u071b\3\2\2\2\u065e\u0669\7J\2\2\u065f")
        buf.write(u"\u066a\7\u00d2\2\2\u0660\u066a\7\u00d1\2\2\u0661\u066a")
        buf.write(u"\7\u010d\2\2\u0662\u0667\7\u011f\2\2\u0663\u0664\5Z.")
        buf.write(u"\2\u0664\u0665\7 \2\2\u0665\u0666\5Z.\2\u0666\u0668\3")
        buf.write(u"\2\2\2\u0667\u0663\3\2\2\2\u0667\u0668\3\2\2\2\u0668")
        buf.write(u"\u066a\3\2\2\2\u0669\u065f\3\2\2\2\u0669\u0660\3\2\2")
        buf.write(u"\2\u0669\u0661\3\2\2\2\u0669\u0662\3\2\2\2\u066a\u071b")
        buf.write(u"\3\2\2\2\u066b\u066c\7Q\2\2\u066c\u066e\t\35\2\2\u066d")
        buf.write(u"\u066f\t\36\2\2\u066e\u066d\3\2\2\2\u066e\u066f\3\2\2")
        buf.write(u"\2\u066f\u071b\3\2\2\2\u0670\u0671\7S\2\2\u0671\u071b")
        buf.write(u"\t\34\2\2\u0672\u0673\7X\2\2\u0673\u071b\t\34\2\2\u0674")
        buf.write(u"\u0675\7Y\2\2\u0675\u0676\7\u011f\2\2\u0676\u071b\5j")
        buf.write(u"\66\2\u0677\u0678\7Z\2\2\u0678\u0679\7\u011f\2\2\u0679")
        buf.write(u"\u071b\5Z.\2\u067a\u067c\7[\2\2\u067b\u067d\7\u011f\2")
        buf.write(u"\2\u067c\u067b\3\2\2\2\u067c\u067d\3\2\2\2\u067d\u067e")
        buf.write(u"\3\2\2\2\u067e\u071b\5z>\2\u067f\u0680\7b\2\2\u0680\u0681")
        buf.write(u"\7\u011f\2\2\u0681\u071b\5j\66\2\u0682\u0683\t\37\2\2")
        buf.write(u"\u0683\u071b\t\34\2\2\u0684\u0685\7~\2\2\u0685\u071b")
        buf.write(u"\t\34\2\2\u0686\u0687\7\u0080\2\2\u0687\u071b\t\34\2")
        buf.write(u"\2\u0688\u0689\7\u0086\2\2\u0689\u068f\7\u011f\2\2\u068a")
        buf.write(u"\u068d\5j\66\2\u068b\u068c\7\u0099\2\2\u068c\u068e\5")
        buf.write(u"j\66\2\u068d\u068b\3\2\2\2\u068d\u068e\3\2\2\2\u068e")
        buf.write(u"\u0690\3\2\2\2\u068f\u068a\3\2\2\2\u068f\u0690\3\2\2")
        buf.write(u"\2\u0690\u071b\3\2\2\2\u0691\u069d\7\u0094\2\2\u0692")
        buf.write(u"\u069e\7\u00d2\2\2\u0693\u069e\7\u00d1\2\2\u0694\u0696")
        buf.write(u"\7\u011f\2\2\u0695\u0697\5j\66\2\u0696\u0695\3\2\2\2")
        buf.write(u"\u0696\u0697\3\2\2\2\u0697\u069e\3\2\2\2\u0698\u069a")
        buf.write(u"\7L\2\2\u0699\u069b\5j\66\2\u069a\u0699\3\2\2\2\u069a")
        buf.write(u"\u069b\3\2\2\2\u069b\u069e\3\2\2\2\u069c\u069e\7\u0114")
        buf.write(u"\2\2\u069d\u0692\3\2\2\2\u069d\u0693\3\2\2\2\u069d\u0694")
        buf.write(u"\3\2\2\2\u069d\u0698\3\2\2\2\u069d\u069c\3\2\2\2\u069e")
        buf.write(u"\u071b\3\2\2\2\u069f\u06a0\7\u009b\2\2\u06a0\u06a2\7")
        buf.write(u"\u011f\2\2\u06a1\u06a3\5j\66\2\u06a2\u06a1\3\2\2\2\u06a2")
        buf.write(u"\u06a3\3\2\2\2\u06a3\u071b\3\2\2\2\u06a4\u06a5\7\u00a3")
        buf.write(u"\2\2\u06a5\u06a6\7\u011f\2\2\u06a6\u06a8\5j\66\2\u06a7")
        buf.write(u"\u06a9\7+\2\2\u06a8\u06a7\3\2\2\2\u06a8\u06a9\3\2\2\2")
        buf.write(u"\u06a9\u071b\3\2\2\2\u06aa\u06ab\7\u00b0\2\2\u06ab\u06ac")
        buf.write(u"\7\u011f\2\2\u06ac\u071b\5Z.\2\u06ad\u06ae\7\u00b8\2")
        buf.write(u"\2\u06ae\u071b\t\34\2\2\u06af\u06b0\7\u00ba\2\2\u06b0")
        buf.write(u"\u071b\t\34\2\2\u06b1\u06b3\7\u00ca\2\2\u06b2\u06b4\7")
        buf.write(u"X\2\2\u06b3\u06b2\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4\u06b5")
        buf.write(u"\3\2\2\2\u06b5\u071b\t\34\2\2\u06b6\u06b7\7\u00d4\2\2")
        buf.write(u"\u06b7\u06c8\7\u011f\2\2\u06b8\u06c9\5j\66\2\u06b9\u06bb")
        buf.write(u"\7\u0117\2\2\u06ba\u06b9\3\2\2\2\u06ba\u06bb\3\2\2\2")
        buf.write(u"\u06bb\u06bc\3\2\2\2\u06bc\u06bf\5j\66\2\u06bd\u06be")
        buf.write(u"\7\u00d0\2\2\u06be\u06c0\5j\66\2\u06bf\u06bd\3\2\2\2")
        buf.write(u"\u06bf\u06c0\3\2\2\2\u06c0\u06c3\3\2\2\2\u06c1\u06c2")
        buf.write(u"\7\u0099\2\2\u06c2\u06c4\5j\66\2\u06c3\u06c1\3\2\2\2")
        buf.write(u"\u06c3\u06c4\3\2\2\2\u06c4\u06c6\3\2\2\2\u06c5\u06c7")
        buf.write(u"\t\21\2\2\u06c6\u06c5\3\2\2\2\u06c6\u06c7\3\2\2\2\u06c7")
        buf.write(u"\u06c9\3\2\2\2\u06c8\u06b8\3\2\2\2\u06c8\u06ba\3\2\2")
        buf.write(u"\2\u06c8\u06c9\3\2\2\2\u06c9\u071b\3\2\2\2\u06ca\u06da")
        buf.write(u"\7\u00df\2\2\u06cb\u06cd\7\u00d2\2\2\u06cc\u06ce\7\u00e3")
        buf.write(u"\2\2\u06cd\u06cc\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u06db")
        buf.write(u"\3\2\2\2\u06cf\u06db\7\u00d1\2\2\u06d0\u06d8\7\u011f")
        buf.write(u"\2\2\u06d1\u06d9\7b\2\2\u06d2\u06d3\7\u00b9\2\2\u06d3")
        buf.write(u"\u06d9\5j\66\2\u06d4\u06d6\5j\66\2\u06d5\u06d7\7+\2\2")
        buf.write(u"\u06d6\u06d5\3\2\2\2\u06d6\u06d7\3\2\2\2\u06d7\u06d9")
        buf.write(u"\3\2\2\2\u06d8\u06d1\3\2\2\2\u06d8\u06d2\3\2\2\2\u06d8")
        buf.write(u"\u06d4\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u06db\3\2\2")
        buf.write(u"\2\u06da\u06cb\3\2\2\2\u06da\u06cf\3\2\2\2\u06da\u06d0")
        buf.write(u"\3\2\2\2\u06db\u071b\3\2\2\2\u06dc\u06dd\7\u00e0\2\2")
        buf.write(u"\u06dd\u06de\7\u011f\2\2\u06de\u06e3\5j\66\2\u06df\u06e0")
        buf.write(u"\7 \2\2\u06e0\u06e2\5j\66\2\u06e1\u06df\3\2\2\2\u06e2")
        buf.write(u"\u06e5\3\2\2\2\u06e3\u06e1\3\2\2\2\u06e3\u06e4\3\2\2")
        buf.write(u"\2\u06e4\u06e7\3\2\2\2\u06e5\u06e3\3\2\2\2\u06e6\u06e8")
        buf.write(u"\7+\2\2\u06e7\u06e6\3\2\2\2\u06e7\u06e8\3\2\2\2\u06e8")
        buf.write(u"\u071b\3\2\2\2\u06e9\u06ea\7\u00e9\2\2\u06ea\u06eb\7")
        buf.write(u"\u011f\2\2\u06eb\u06ee\5Z.\2\u06ec\u06ed\7 \2\2\u06ed")
        buf.write(u"\u06ef\5Z.\2\u06ee\u06ec\3\2\2\2\u06ee\u06ef\3\2\2\2")
        buf.write(u"\u06ef\u071b\3\2\2\2\u06f0\u06f1\7\u00eb\2\2\u06f1\u06f2")
        buf.write(u"\7\u011f\2\2\u06f2\u06f3\5Z.\2\u06f3\u06f4\7\u009e\2")
        buf.write(u"\2\u06f4\u06f7\5j\66\2\u06f5\u06f6\7\u0099\2\2\u06f6")
        buf.write(u"\u06f8\5j\66\2\u06f7\u06f5\3\2\2\2\u06f7\u06f8\3\2\2")
        buf.write(u"\2\u06f8\u06fa\3\2\2\2\u06f9\u06fb\7+\2\2\u06fa\u06f9")
        buf.write(u"\3\2\2\2\u06fa\u06fb\3\2\2\2\u06fb\u071b\3\2\2\2\u06fc")
        buf.write(u"\u06fd\7\u00f9\2\2\u06fd\u071b\t\34\2\2\u06fe\u0700\7")
        buf.write(u"\u010d\2\2\u06ff\u0701\79\2\2\u0700\u06ff\3\2\2\2\u0700")
        buf.write(u"\u0701\3\2\2\2\u0701\u0702\3\2\2\2\u0702\u071b\t\34\2")
        buf.write(u"\2\u0703\u0704\7\u010e\2\2\u0704\u071b\t\34\2\2\u0705")
        buf.write(u"\u070f\7\u0113\2\2\u0706\u0710\7\u00d2\2\2\u0707\u0710")
        buf.write(u"\7\u00d1\2\2\u0708\u070b\7\u011f\2\2\u0709\u070c\7b\2")
        buf.write(u"\2\u070a\u070c\5Z.\2\u070b\u0709\3\2\2\2\u070b\u070a")
        buf.write(u"\3\2\2\2\u070b\u070c\3\2\2\2\u070c\u0710\3\2\2\2\u070d")
        buf.write(u"\u0710\7\u00fb\2\2\u070e\u0710\7\u00c6\2\2\u070f\u0706")
        buf.write(u"\3\2\2\2\u070f\u0707\3\2\2\2\u070f\u0708\3\2\2\2\u070f")
        buf.write(u"\u070d\3\2\2\2\u070f\u070e\3\2\2\2\u0710\u071b\3\2\2")
        buf.write(u"\2\u0711\u0712\7\u0116\2\2\u0712\u071b\t\34\2\2\u0713")
        buf.write(u"\u0714\7\u0118\2\2\u0714\u071b\t\34\2\2\u0715\u0716\7")
        buf.write(u"\u0123\2\2\u0716\u0717\7\u011f\2\2\u0717\u071b\5Z.\2")
        buf.write(u"\u0718\u0719\7\u0125\2\2\u0719\u071b\t\34\2\2\u071a\u0630")
        buf.write(u"\3\2\2\2\u071a\u063a\3\2\2\2\u071a\u063c\3\2\2\2\u071a")
        buf.write(u"\u0643\3\2\2\2\u071a\u0650\3\2\2\2\u071a\u065e\3\2\2")
        buf.write(u"\2\u071a\u066b\3\2\2\2\u071a\u0670\3\2\2\2\u071a\u0672")
        buf.write(u"\3\2\2\2\u071a\u0674\3\2\2\2\u071a\u0677\3\2\2\2\u071a")
        buf.write(u"\u067a\3\2\2\2\u071a\u067f\3\2\2\2\u071a\u0682\3\2\2")
        buf.write(u"\2\u071a\u0684\3\2\2\2\u071a\u0686\3\2\2\2\u071a\u0688")
        buf.write(u"\3\2\2\2\u071a\u0691\3\2\2\2\u071a\u069f\3\2\2\2\u071a")
        buf.write(u"\u06a4\3\2\2\2\u071a\u06aa\3\2\2\2\u071a\u06ad\3\2\2")
        buf.write(u"\2\u071a\u06af\3\2\2\2\u071a\u06b1\3\2\2\2\u071a\u06b6")
        buf.write(u"\3\2\2\2\u071a\u06ca\3\2\2\2\u071a\u06dc\3\2\2\2\u071a")
        buf.write(u"\u06e9\3\2\2\2\u071a\u06f0\3\2\2\2\u071a\u06fc\3\2\2")
        buf.write(u"\2\u071a\u06fe\3\2\2\2\u071a\u0703\3\2\2\2\u071a\u0705")
        buf.write(u"\3\2\2\2\u071a\u0711\3\2\2\2\u071a\u0713\3\2\2\2\u071a")
        buf.write(u"\u0715\3\2\2\2\u071a\u0718\3\2\2\2\u071bK\3\2\2\2\u071c")
        buf.write(u"\u071d\5n8\2\u071d\u071e\5t;\2\u071e\u0724\3\2\2\2\u071f")
        buf.write(u"\u0721\5p9\2\u0720\u0722\5P)\2\u0721\u0720\3\2\2\2\u0721")
        buf.write(u"\u0722\3\2\2\2\u0722\u0724\3\2\2\2\u0723\u071c\3\2\2")
        buf.write(u"\2\u0723\u071f\3\2\2\2\u0724M\3\2\2\2\u0725\u0726\7\64")
        buf.write(u"\2\2\u0726\u0727\5v<\2\u0727O\3\2\2\2\u0728\u072b\5N")
        buf.write(u"(\2\u0729\u072a\7\u00d0\2\2\u072a\u072c\5j\66\2\u072b")
        buf.write(u"\u0729\3\2\2\2\u072b\u072c\3\2\2\2\u072cQ\3\2\2\2\u072d")
        buf.write(u"\u072f\7 \2\2\u072e\u0730\5Z.\2\u072f\u072e\3\2\2\2\u072f")
        buf.write(u"\u0730\3\2\2\2\u0730S\3\2\2\2\u0731\u0735\5Z.\2\u0732")
        buf.write(u"\u0734\5R*\2\u0733\u0732\3\2\2\2\u0734\u0737\3\2\2\2")
        buf.write(u"\u0735\u0733\3\2\2\2\u0735\u0736\3\2\2\2\u0736\u073e")
        buf.write(u"\3\2\2\2\u0737\u0735\3\2\2\2\u0738\u073a\5R*\2\u0739")
        buf.write(u"\u0738\3\2\2\2\u073a\u073b\3\2\2\2\u073b\u0739\3\2\2")
        buf.write(u"\2\u073b\u073c\3\2\2\2\u073c\u073e\3\2\2\2\u073d\u0731")
        buf.write(u"\3\2\2\2\u073d\u0739\3\2\2\2\u073eU\3\2\2\2\u073f\u0744")
        buf.write(u"\5j\66\2\u0740\u0741\7 \2\2\u0741\u0743\5j\66\2\u0742")
        buf.write(u"\u0740\3\2\2\2\u0743\u0746\3\2\2\2\u0744\u0742\3\2\2")
        buf.write(u"\2\u0744\u0745\3\2\2\2\u0745W\3\2\2\2\u0746\u0744\3\2")
        buf.write(u"\2\2\u0747\u0748\7\b\2\2\u0748\u0749\5p9\2\u0749Y\3\2")
        buf.write(u"\2\2\u074a\u074b\b.\1\2\u074b\u074c\7\22\2\2\u074c\u074d")
        buf.write(u"\5Z.\2\u074d\u074e\7\23\2\2\u074e\u0766\3\2\2\2\u074f")
        buf.write(u"\u0750\t \2\2\u0750\u0766\5Z.\16\u0751\u0752\t!\2\2\u0752")
        buf.write(u"\u0766\5Z.\r\u0753\u0766\5l\67\2\u0754\u0755\7C\2\2\u0755")
        buf.write(u"\u0756\7\22\2\2\u0756\u0757\5Z.\2\u0757\u0758\5N(\2\u0758")
        buf.write(u"\u0759\7\23\2\2\u0759\u0766\3\2\2\2\u075a\u0760\7\r\2")
        buf.write(u"\2\u075b\u075c\5p9\2\u075c\u075d\7\"\2\2\u075d\u075e")
        buf.write(u"\7\"\2\2\u075e\u0760\3\2\2\2\u075f\u075a\3\2\2\2\u075f")
        buf.write(u"\u075b\3\2\2\2\u075f\u0760\3\2\2\2\u0760\u0761\3\2\2")
        buf.write(u"\2\u0761\u0763\5b\62\2\u0762\u0764\5d\63\2\u0763\u0762")
        buf.write(u"\3\2\2\2\u0763\u0764\3\2\2\2\u0764\u0766\3\2\2\2\u0765")
        buf.write(u"\u074a\3\2\2\2\u0765\u074f\3\2\2\2\u0765\u0751\3\2\2")
        buf.write(u"\2\u0765\u0753\3\2\2\2\u0765\u0754\3\2\2\2\u0765\u075f")
        buf.write(u"\3\2\2\2\u0766\u0784\3\2\2\2\u0767\u076b\f\f\2\2\u0768")
        buf.write(u"\u0769\7\t\2\2\u0769\u076c\7\t\2\2\u076a\u076c\7\37\2")
        buf.write(u"\2\u076b\u0768\3\2\2\2\u076b\u076a\3\2\2\2\u076c\u076d")
        buf.write(u"\3\2\2\2\u076d\u0783\5Z.\r\u076e\u076f\f\13\2\2\u076f")
        buf.write(u"\u0770\t\"\2\2\u0770\u0783\5Z.\f\u0771\u0772\f\n\2\2")
        buf.write(u"\u0772\u0773\7\35\2\2\u0773\u0783\5Z.\13\u0774\u0775")
        buf.write(u"\f\t\2\2\u0775\u0776\t \2\2\u0776\u0783\5Z.\n\u0777\u0778")
        buf.write(u"\f\b\2\2\u0778\u0779\t#\2\2\u0779\u0783\5Z.\t\u077a\u077b")
        buf.write(u"\f\7\2\2\u077b\u077c\5\\/\2\u077c\u077d\5Z.\b\u077d\u0783")
        buf.write(u"\3\2\2\2\u077e\u077f\f\6\2\2\u077f\u0780\5^\60\2\u0780")
        buf.write(u"\u0781\5Z.\7\u0781\u0783\3\2\2\2\u0782\u0767\3\2\2\2")
        buf.write(u"\u0782\u076e\3\2\2\2\u0782\u0771\3\2\2\2\u0782\u0774")
        buf.write(u"\3\2\2\2\u0782\u0777\3\2\2\2\u0782\u077a\3\2\2\2\u0782")
        buf.write(u"\u077e\3\2\2\2\u0783\u0786\3\2\2\2\u0784\u0782\3\2\2")
        buf.write(u"\2\u0784\u0785\3\2\2\2\u0785[\3\2\2\2\u0786\u0784\3\2")
        buf.write(u"\2\2\u0787\u0788\t$\2\2\u0788]\3\2\2\2\u0789\u078a\t")
        buf.write(u"%\2\2\u078a_\3\2\2\2\u078b\u0791\7\r\2\2\u078c\u078d")
        buf.write(u"\5p9\2\u078d\u078e\7\"\2\2\u078e\u078f\7\"\2\2\u078f")
        buf.write(u"\u0791\3\2\2\2\u0790\u078b\3\2\2\2\u0790\u078c\3\2\2")
        buf.write(u"\2\u0790\u0791\3\2\2\2\u0791\u0792\3\2\2\2\u0792\u0793")
        buf.write(u"\5b\62\2\u0793\u0794\5d\63\2\u0794\u07a1\3\2\2\2\u0795")
        buf.write(u"\u079b\7\r\2\2\u0796\u0797\5p9\2\u0797\u0798\7\"\2\2")
        buf.write(u"\u0798\u0799\7\"\2\2\u0799\u079b\3\2\2\2\u079a\u0795")
        buf.write(u"\3\2\2\2\u079a\u0796\3\2\2\2\u079b\u079c\3\2\2\2\u079c")
        buf.write(u"\u079e\5b\62\2\u079d\u079f\5d\63\2\u079e\u079d\3\2\2")
        buf.write(u"\2\u079e\u079f\3\2\2\2\u079f\u07a1\3\2\2\2\u07a0\u0790")
        buf.write(u"\3\2\2\2\u07a0\u079a\3\2\2\2\u07a1a\3\2\2\2\u07a2\u07a5")
        buf.write(u"\5z>\2\u07a3\u07a5\5X-\2\u07a4\u07a2\3\2\2\2\u07a4\u07a3")
        buf.write(u"\3\2\2\2\u07a5c\3\2\2\2\u07a6\u07a8\7\22\2\2\u07a7\u07a9")
        buf.write(u"\5T+\2\u07a8\u07a7\3\2\2\2\u07a8\u07a9\3\2\2\2\u07a9")
        buf.write(u"\u07aa\3\2\2\2\u07aa\u07b1\7\23\2\2\u07ab\u07ad\7\16")
        buf.write(u"\2\2\u07ac\u07ae\5T+\2\u07ad\u07ac\3\2\2\2\u07ad\u07ae")
        buf.write(u"\3\2\2\2\u07ae\u07af\3\2\2\2\u07af\u07b1\7\17\2\2\u07b0")
        buf.write(u"\u07a6\3\2\2\2\u07b0\u07ab\3\2\2\2\u07b1\u07b3\3\2\2")
        buf.write(u"\2\u07b2\u07b4\5d\63\2\u07b3\u07b2\3\2\2\2\u07b3\u07b4")
        buf.write(u"\3\2\2\2\u07b4\u07bb\3\2\2\2\u07b5\u07b6\7\r\2\2\u07b6")
        buf.write(u"\u07b8\5z>\2\u07b7\u07b9\5d\63\2\u07b8\u07b7\3\2\2\2")
        buf.write(u"\u07b8\u07b9\3\2\2\2\u07b9\u07bb\3\2\2\2\u07ba\u07b0")
        buf.write(u"\3\2\2\2\u07ba\u07b5\3\2\2\2\u07bbe\3\2\2\2\u07bc\u07bd")
        buf.write(u"\5z>\2\u07bd\u07be\7\"\2\2\u07be\u07c0\3\2\2\2\u07bf")
        buf.write(u"\u07bc\3\2\2\2\u07bf\u07c0\3\2\2\2\u07c0\u07c2\3\2\2")
        buf.write(u"\2\u07c1\u07c3\5h\65\2\u07c2\u07c1\3\2\2\2\u07c3\u07c4")
        buf.write(u"\3\2\2\2\u07c4\u07c5\3\2\2\2\u07c4\u07c2\3\2\2\2\u07c5")
        buf.write(u"g\3\2\2\2\u07c6\u07e0\5z>\2\u07c7\u07e0\7\4\2\2\u07c8")
        buf.write(u"\u07e0\7\24\2\2\u07c9\u07e0\7\6\2\2\u07ca\u07e0\7\7\2")
        buf.write(u"\2\u07cb\u07e0\7\b\2\2\u07cc\u07e0\7\n\2\2\u07cd\u07e0")
        buf.write(u"\7\13\2\2\u07ce\u07e0\7\r\2\2\u07cf\u07e0\7\16\2\2\u07d0")
        buf.write(u"\u07e0\7\17\2\2\u07d1\u07e0\7\20\2\2\u07d2\u07e0\7\21")
        buf.write(u"\2\2\u07d3\u07e0\7\22\2\2\u07d4\u07e0\7\23\2\2\u07d5")
        buf.write(u"\u07e0\7\27\2\2\u07d6\u07e0\7\30\2\2\u07d7\u07e0\7\31")
        buf.write(u"\2\2\u07d8\u07e0\7\32\2\2\u07d9\u07e0\7\35\2\2\u07da")
        buf.write(u"\u07e0\7\36\2\2\u07db\u07e0\7\37\2\2\u07dc\u07e0\7 \2")
        buf.write(u"\2\u07dd\u07e0\7!\2\2\u07de\u07e0\7\3\2\2\u07df\u07c6")
        buf.write(u"\3\2\2\2\u07df\u07c7\3\2\2\2\u07df\u07c8\3\2\2\2\u07df")
        buf.write(u"\u07c9\3\2\2\2\u07df\u07ca\3\2\2\2\u07df\u07cb\3\2\2")
        buf.write(u"\2\u07df\u07cc\3\2\2\2\u07df\u07cd\3\2\2\2\u07df\u07ce")
        buf.write(u"\3\2\2\2\u07df\u07cf\3\2\2\2\u07df\u07d0\3\2\2\2\u07df")
        buf.write(u"\u07d1\3\2\2\2\u07df\u07d2\3\2\2\2\u07df\u07d3\3\2\2")
        buf.write(u"\2\u07df\u07d4\3\2\2\2\u07df\u07d5\3\2\2\2\u07df\u07d6")
        buf.write(u"\3\2\2\2\u07df\u07d7\3\2\2\2\u07df\u07d8\3\2\2\2\u07df")
        buf.write(u"\u07d9\3\2\2\2\u07df\u07da\3\2\2\2\u07df\u07db\3\2\2")
        buf.write(u"\2\u07df\u07dc\3\2\2\2\u07df\u07dd\3\2\2\2\u07df\u07de")
        buf.write(u"\3\2\2\2\u07e0i\3\2\2\2\u07e1\u07e4\5Z.\2\u07e2\u07e4")
        buf.write(u"\5f\64\2\u07e3\u07e1\3\2\2\2\u07e3\u07e2\3\2\2\2\u07e4")
        buf.write(u"k\3\2\2\2\u07e5\u07e7\7!\2\2\u07e6\u07e5\3\2\2\2\u07e6")
        buf.write(u"\u07e7\3\2\2\2\u07e7\u07e8\3\2\2\2\u07e8\u082e\7\4\2")
        buf.write(u"\2\u07e9\u07ea\7\r\2\2\u07ea\u07eb\t&\2\2\u07eb\u07ee")
        buf.write(u"\7\r\2\2\u07ec\u07ee\7\u00cd\2\2\u07ed\u07e9\3\2\2\2")
        buf.write(u"\u07ed\u07ec\3\2\2\2\u07ee\u082e\3\2\2\2\u07ef\u080f")
        buf.write(u"\7\20\2\2\u07f0\u07f1\7\f\2\2\u07f1\u0810\7\f\2\2\u07f2")
        buf.write(u"\u0810\7\"\2\2\u07f3\u07fe\7\37\2\2\u07f4\u07f5\7\4\2")
        buf.write(u"\2\u07f5\u07f6\7\13\2\2\u07f6\u07f7\7\4\2\2\u07f7\u07f8")
        buf.write(u"\7\13\2\2\u07f8\u07ff\7\4\2\2\u07f9\u07fa\7\4\2\2\u07fa")
        buf.write(u"\u07fb\7\f\2\2\u07fb\u07fc\7\4\2\2\u07fc\u07fd\7\f\2")
        buf.write(u"\2\u07fd\u07ff\7\4\2\2\u07fe\u07f4\3\2\2\2\u07fe\u07f9")
        buf.write(u"\3\2\2\2\u07ff\u080d\3\2\2\2\u0800\u0802\7 \2\2\u0801")
        buf.write(u"\u0800\3\2\2\2\u0801\u0802\3\2\2\2\u0802\u0803\3\2\2")
        buf.write(u"\2\u0803\u080a\7\4\2\2\u0804\u0805\7\"\2\2\u0805\u0808")
        buf.write(u"\7\4\2\2\u0806\u0807\7\"\2\2\u0807\u0809\7\4\2\2\u0808")
        buf.write(u"\u0806\3\2\2\2\u0808\u0809\3\2\2\2\u0809\u080b\3\2\2")
        buf.write(u"\2\u080a\u0804\3\2\2\2\u080a\u080b\3\2\2\2\u080b\u080c")
        buf.write(u"\3\2\2\2\u080c\u080e\5z>\2\u080d\u0801\3\2\2\2\u080d")
        buf.write(u"\u080e\3\2\2\2\u080e\u0810\3\2\2\2\u080f\u07f0\3\2\2")
        buf.write(u"\2\u080f\u07f2\3\2\2\2\u080f\u07f3\3\2\2\2\u080f\u0810")
        buf.write(u"\3\2\2\2\u0810\u0811\3\2\2\2\u0811\u082e\7\21\2\2\u0812")
        buf.write(u"\u0816\7%\2\2\u0813\u0815\n\'\2\2\u0814\u0813\3\2\2\2")
        buf.write(u"\u0815\u0818\3\2\2\2\u0816\u0814\3\2\2\2\u0816\u0817")
        buf.write(u"\3\2\2\2\u0817\u0819\3\2\2\2\u0818\u0816\3\2\2\2\u0819")
        buf.write(u"\u082b\7%\2\2\u081a\u081e\7$\2\2\u081b\u081d\n(\2\2\u081c")
        buf.write(u"\u081b\3\2\2\2\u081d\u0820\3\2\2\2\u081e\u081c\3\2\2")
        buf.write(u"\2\u081e\u081f\3\2\2\2\u081f\u0821\3\2\2\2\u0820\u081e")
        buf.write(u"\3\2\2\2\u0821\u082b\7$\2\2\u0822\u0826\7\16\2\2\u0823")
        buf.write(u"\u0825\n)\2\2\u0824\u0823\3\2\2\2\u0825\u0828\3\2\2\2")
        buf.write(u"\u0826\u0824\3\2\2\2\u0826\u0827\3\2\2\2\u0827\u0829")
        buf.write(u"\3\2\2\2\u0828\u0826\3\2\2\2\u0829\u082b\7\17\2\2\u082a")
        buf.write(u"\u0812\3\2\2\2\u082a\u081a\3\2\2\2\u082a\u0822\3\2\2")
        buf.write(u"\2\u082b\u082e\3\2\2\2\u082c\u082e\7\5\2\2\u082d\u07e6")
        buf.write(u"\3\2\2\2\u082d\u07ed\3\2\2\2\u082d\u07ef\3\2\2\2\u082d")
        buf.write(u"\u082a\3\2\2\2\u082d\u082c\3\2\2\2\u082em\3\2\2\2\u082f")
        buf.write(u"\u0831\7\r\2\2\u0830\u082f\3\2\2\2\u0830\u0831\3\2\2")
        buf.write(u"\2\u0831\u0832\3\2\2\2\u0832\u0837\5z>\2\u0833\u0834")
        buf.write(u"\7\r\2\2\u0834\u0836\5z>\2\u0835\u0833\3\2\2\2\u0836")
        buf.write(u"\u0839\3\2\2\2\u0837\u0835\3\2\2\2\u0837\u0838\3\2\2")
        buf.write(u"\2\u0838o\3\2\2\2\u0839\u0837\3\2\2\2\u083a\u083c\7\r")
        buf.write(u"\2\2\u083b\u083a\3\2\2\2\u083b\u083c\3\2\2\2\u083c\u083d")
        buf.write(u"\3\2\2\2\u083d\u083f\5z>\2\u083e\u0840\5d\63\2\u083f")
        buf.write(u"\u083e\3\2\2\2\u083f\u0840\3\2\2\2\u0840q\3\2\2\2\u0841")
        buf.write(u"\u0842\5Z.\2\u0842\u0843\7 \2\2\u0843\u0844\5Z.\2\u0844")
        buf.write(u"s\3\2\2\2\u0845\u0848\7\22\2\2\u0846\u0849\5Z.\2\u0847")
        buf.write(u"\u0849\5r:\2\u0848\u0846\3\2\2\2\u0848\u0847\3\2\2\2")
        buf.write(u"\u0849\u084a\3\2\2\2\u084a\u084b\7\23\2\2\u084b\u0854")
        buf.write(u"\3\2\2\2\u084c\u084f\7\16\2\2\u084d\u0850\5Z.\2\u084e")
        buf.write(u"\u0850\5r:\2\u084f\u084d\3\2\2\2\u084f\u084e\3\2\2\2")
        buf.write(u"\u0850\u0851\3\2\2\2\u0851\u0852\7\17\2\2\u0852\u0854")
        buf.write(u"\3\2\2\2\u0853\u0845\3\2\2\2\u0853\u084c\3\2\2\2\u0854")
        buf.write(u"u\3\2\2\2\u0855\u0856\5p9\2\u0856w\3\2\2\2\u0857\u085e")
        buf.write(u"\7.\2\2\u0858\u0859\7\u00bc\2\2\u0859\u085e\5Z.\2\u085a")
        buf.write(u"\u085b\7\u00e7\2\2\u085b\u085e\5Z.\2\u085c\u085e\7\u00f2")
        buf.write(u"\2\2\u085d\u0857\3\2\2\2\u085d\u0858\3\2\2\2\u085d\u085a")
        buf.write(u"\3\2\2\2\u085d\u085c\3\2\2\2\u085ey\3\2\2\2\u085f\u0860")
        buf.write(u"\t*\2\2\u0860{\3\2\2\2\u0152\u0082\u008a\u0092\u009e")
        buf.write(u"\u00b2\u00bb\u00bf\u00c1\u00c5\u00c7\u00d0\u00d5\u00dc")
        buf.write(u"\u00e0\u00e7\u00ed\u00f4\u00fc\u0104\u010c\u0110\u0117")
        buf.write(u"\u011b\u0121\u0124\u0127\u0132\u0135\u013a\u0143\u014f")
        buf.write(u"\u0159\u015d\u0162\u0164\u0179\u017f\u0183\u0188\u0195")
        buf.write(u"\u019d\u01a1\u01ad\u01b1\u01b6\u01c1\u01d2\u01d5\u01dd")
        buf.write(u"\u01e3\u01e5\u01e7\u01ed\u01f2\u01f9\u01fb\u0203\u0205")
        buf.write(u"\u0208\u0212\u0219\u021d\u0222\u0229\u022f\u0233\u0236")
        buf.write(u"\u0239\u0244\u024c\u024e\u0254\u0258\u025b\u0260\u026a")
        buf.write(u"\u0271\u0278\u027f\u0281\u0289\u028c\u028e\u0293\u0299")
        buf.write(u"\u029b\u02a2\u02a6\u02ab\u02b1\u02b3\u02b8\u02bd\u02c0")
        buf.write(u"\u02c9\u02ce\u02d1\u02d3\u02d6\u02e3\u02e9\u02ef\u02f1")
        buf.write(u"\u02fb\u02fd\u02ff\u0301\u0305\u0309\u030f\u0313\u0315")
        buf.write(u"\u0319\u031e\u0320\u0325\u032b\u032e\u0331\u0336\u0341")
        buf.write(u"\u0347\u034b\u034f\u0351\u0354\u0357\u035f\u0363\u036c")
        buf.write(u"\u0372\u0390\u0392\u0399\u039f\u03a4\u03a6\u03ab\u03af")
        buf.write(u"\u03b5\u03bd\u03c5\u03d5\u03d7\u03d9\u03df\u03e3\u03e7")
        buf.write(u"\u03eb\u03f0\u03f5\u03f7\u03fe\u0407\u0409\u0410\u041b")
        buf.write(u"\u041d\u0426\u0429\u042c\u042f\u0435\u0437\u043f\u0441")
        buf.write(u"\u044d\u0456\u045b\u0462\u0466\u0468\u046f\u0471\u047d")
        buf.write(u"\u0481\u0485\u048d\u0498\u049e\u04a5\u04a9\u04ad\u04b2")
        buf.write(u"\u04bb\u04bd\u04c1\u04cb\u04ce\u04d1\u04d3\u04d7\u04e6")
        buf.write(u"\u04eb\u04f2\u04f4\u04fb\u04fe\u0502\u050a\u050e\u0510")
        buf.write(u"\u0515\u051c\u0522\u0528\u0531\u0535\u0537\u053d\u0546")
        buf.write(u"\u0548\u054e\u0551\u0555\u0559\u055b\u0574\u057a\u0580")
        buf.write(u"\u0586\u0589\u058b\u0590\u0597\u059a\u059f\u05a4\u05ab")
        buf.write(u"\u05af\u05b7\u05b9\u05c3\u05c8\u05ce\u05e9\u05eb\u05f7")
        buf.write(u"\u05f9\u0607\u060c\u0614\u0619\u0621\u0626\u0629\u062e")
        buf.write(u"\u0636\u0638\u0641\u064a\u064c\u064e\u0655\u0659\u065c")
        buf.write(u"\u0667\u0669\u066e\u067c\u068d\u068f\u0696\u069a\u069d")
        buf.write(u"\u06a2\u06a8\u06b3\u06ba\u06bf\u06c3\u06c6\u06c8\u06cd")
        buf.write(u"\u06d6\u06d8\u06da\u06e3\u06e7\u06ee\u06f7\u06fa\u0700")
        buf.write(u"\u070b\u070f\u071a\u0721\u0723\u072b\u072f\u0735\u073b")
        buf.write(u"\u073d\u0744\u075f\u0763\u0765\u076b\u0782\u0784\u0790")
        buf.write(u"\u079a\u079e\u07a0\u07a4\u07a8\u07ad\u07b0\u07b3\u07b8")
        buf.write(u"\u07ba\u07bf\u07c4\u07df\u07e3\u07e6\u07ed\u07fe\u0801")
        buf.write(u"\u0808\u080a\u080d\u080f\u0816\u081e\u0826\u082a\u082d")
        buf.write(u"\u0830\u0837\u083b\u083f\u0848\u084f\u0853\u085d")
        return buf.getvalue()


class VisualFoxpro9Parser ( Parser ):

    grammarFileName = "VisualFoxpro9.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"'_'", u"<INVALID>", u"<INVALID>", u"';'", 
                     u"'&'", u"'@'", u"'*'", u"'+'", u"'-'", u"'/'", u"'.'", 
                     u"'['", u"']'", u"'{'", u"'}'", u"'('", u"')'", u"'\\'", 
                     u"'<'", u"'>'", u"'!'", u"'#'", u"'=='", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"'%'", u"'='", u"'^'", 
                     u"','", u"'$'", u"':'", u"'?'", u"'\"'", u"'''", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"'\n'" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"NUMBER_LITERAL", u"BLOB_LITERAL", 
                      u"SEMICOLON", u"AMPERSAND", u"COMMERCIALAT", u"ASTERISK", 
                      u"PLUS_SIGN", u"MINUS_SIGN", u"FORWARDSLASH", u"PERIOD", 
                      u"LEFTBRACKET", u"RIGHTBRACKET", u"LEFTBRACE", u"RIGHTBRACE", 
                      u"LEFTPAREN", u"RIGHTPAREN", u"BACKSLASH", u"LESSTHAN", 
                      u"GREATERTHAN", u"EXCLAMATION", u"HASH", u"DOUBLEEQUALS", 
                      u"NOTEQUALS", u"GTEQ", u"LTEQ", u"MODULO", u"EQUALS", 
                      u"CARAT", u"COMMA", u"DOLLAR", u"COLON", u"QUESTION", 
                      u"DOUBLEQUOTE", u"SINGLEQUOTE", u"COMMENT", u"LINECONT", 
                      u"MACROLINE", u"ACTIVATE", u"ADD", u"ADDITIVE", u"AFTER", 
                      u"ALIAS", u"ALL", u"ALTER", u"ALTERNATE", u"AND", 
                      u"APPEND", u"ARRAY", u"AS", u"ASCENDING", u"ASSERT", 
                      u"ASSERTS", u"AT", u"BAR", u"BEFORE", u"BELL", u"BLANK", 
                      u"BOOLEANCHAR", u"BOTTOM", u"BROWSE", u"BY", u"CANDIDATE", 
                      u"CASE", u"CAST", u"CATCH", u"CENTURY", u"CHDIR", 
                      u"CLASS", u"CLASSLIB", u"CLEAR", u"CLOCK", u"CLOSE", 
                      u"COLLECTION", u"COLOR", u"COLUMN", u"COMMAND", u"COMPACT", 
                      u"COMPATIBLE", u"COMPILE", u"CONSOLE", u"CONTINUE", 
                      u"COPY", u"COUNT", u"CREATE", u"CURSOR", u"DATABASE", 
                      u"DATASESSION", u"DATE", u"DB4", u"DBF", u"DEACTIVATE", 
                      u"DEBUG", u"DEBUGOUT", u"DECLARE", u"DEFAULT", u"DEFINE", 
                      u"DELETE", u"DELETED", u"DESCENDING", u"DIMENSION", 
                      u"DISTINCT", u"DLLS", u"DO", u"DOEVENTS", u"DROP", 
                      u"EACH", u"ELIF", u"ELSE", u"ENCRYPT", u"ENDCASE", 
                      u"ENDDEFINE", u"ENDDO", u"ENDFOR", u"ENDIF", u"ENDPROC", 
                      u"ENDSCAN", u"ENDTEXT", u"ENDTRY", u"ENDWITH", u"ERASE", 
                      u"ERROR", u"EVENTS", u"EXACT", u"EXCEPT", u"EXCLUSIVE", 
                      u"EXTENDED", u"EXTERNAL", u"FIELDS", u"FILE", u"FILL", 
                      u"FILTER", u"FINALLY", u"FLAGS", u"FONT", u"FOR", 
                      u"FORCE", u"FORM", u"FOXOBJECT", u"FOXPLUS", u"FREE", 
                      u"FROM", u"GATHER", u"GETS", u"GOTO", u"HELP", u"HIDE", 
                      u"ICON", u"IF", u"IFDEF", u"IN", u"INCLUDE", u"INDEX", 
                      u"INDEXES", u"INSERT", u"INTO", u"JOIN", u"KEY", u"KEYBOARD", 
                      u"LABEL", u"LIBRARY", u"LIKE", u"LINE", u"LINKED", 
                      u"LIST", u"LOCATE", u"MACROS", u"MARGIN", u"MARK", 
                      u"MASTER", u"MAX", u"MEMO", u"MEMORY", u"MEMOWIDTH", 
                      u"MEMVAR", u"MENU", u"MENUS", u"MESSAGE", u"MIN", 
                      u"MKDIR", u"MODIFY", u"MULTILOCKS", u"NAME", u"NEAR", 
                      u"NEGOTIATE", u"NEXT", u"NOCLEAR", u"NOCONSOLE", u"NODEBUG", 
                      u"NOEJECT", u"NOMARGIN", u"NOMENU", u"NOOPTIMIZE", 
                      u"NOPROMPT", u"NORM", u"NOSAVE", u"NOSHOW", u"NOT", 
                      u"NOTE", u"NOTIFY", u"NOUPDATE", u"NOWAIT", u"NULL", 
                      u"NUMBER", u"OBJECT", u"OF", u"OFF", u"ON", u"OR", 
                      u"ORDER", u"OTHERAND", u"OTHEROR", u"OTHERWISE", u"PACK", 
                      u"PAD", u"PARAMETER", u"PLAIN", u"POP", u"POPUP", 
                      u"PRETEXT", u"PRINTER", u"PROCEDURE", u"PROGRAM", 
                      u"PROGRAMCONTROL", u"PROMPT", u"PUSH", u"READ", u"RECALL", 
                      u"RECORD", u"RECYCLE", u"REFRESH", u"REINDEX", u"RELATION", 
                      u"RELATIVE", u"RELEASE", u"RENAME", u"REPLACE", u"REPORT", 
                      u"RESOURCES", u"REST", u"RESTORE", u"RETRY", u"RETURN", 
                      u"RMDIR", u"ROLLOVER", u"RUN", u"SAFETY", u"SAME", 
                      u"SAVE", u"SAY", u"SCAN", u"SCATTER", u"SCHEME", u"SCOPE", 
                      u"SCREEN", u"SEEK", u"SELECT", u"SELECTION", u"SET", 
                      u"SHADOW", u"SHARED", u"SHOW", u"SHUTDOWN", u"SIZE", 
                      u"SKIPKW", u"SORT", u"STATUS", u"STEP", u"STORE", 
                      u"STRUCTURE", u"STYLE", u"SUM", u"SYSMENU", u"SYSTEM", 
                      u"TABLE", u"TABLEPROMPT", u"TAG", u"TALK", u"TEXT", 
                      u"TEXTMERGE", u"THEN", u"THROW", u"TIMEOUT", u"TITLE", 
                      u"TO", u"TOP", u"TRY", u"TYPE", u"TYPEAHEAD", u"UNDEFINE", 
                      u"UNIQUE", u"UNLOCK", u"UPDATE", u"USE", u"VALUES", 
                      u"WAIT", u"WHERE", u"WHILE", u"WINDOW", u"WITH", u"ZAP", 
                      u"ZOOM", u"ID", u"NL", u"WS", u"UNMATCHED" ]

    RULE_preprocessorCode = 0
    RULE_preprocessorLines = 1
    RULE_preprocessorLine = 2
    RULE_prg = 3
    RULE_lineComment = 4
    RULE_line = 5
    RULE_lineEnd = 6
    RULE_lines = 7
    RULE_nongreedyLines = 8
    RULE_classDefStart = 9
    RULE_classDef = 10
    RULE_classProperty = 11
    RULE_parameter = 12
    RULE_parameters = 13
    RULE_funcDefStart = 14
    RULE_funcDef = 15
    RULE_ifStart = 16
    RULE_ifStmt = 17
    RULE_forStart = 18
    RULE_forEnd = 19
    RULE_forStmt = 20
    RULE_singleCase = 21
    RULE_otherwise = 22
    RULE_caseStmt = 23
    RULE_whileStart = 24
    RULE_whileStmt = 25
    RULE_withStmt = 26
    RULE_scanStmt = 27
    RULE_tryStmt = 28
    RULE_controlStmt = 29
    RULE_cmd = 30
    RULE_queryCondition = 31
    RULE_textChunk = 32
    RULE_dllArgs = 33
    RULE_dllArg = 34
    RULE_tableField = 35
    RULE_setCmd = 36
    RULE_declarationItem = 37
    RULE_asType = 38
    RULE_asTypeOf = 39
    RULE_argsItem = 40
    RULE_args = 41
    RULE_specialArgs = 42
    RULE_reference = 43
    RULE_expr = 44
    RULE_andOp = 45
    RULE_orOp = 46
    RULE_complexId = 47
    RULE_atom = 48
    RULE_trailer = 49
    RULE_pathname = 50
    RULE_pathElement = 51
    RULE_specialExpr = 52
    RULE_constant = 53
    RULE_idAttr2 = 54
    RULE_idAttr = 55
    RULE_twoExpr = 56
    RULE_arrayIndex = 57
    RULE_datatype = 58
    RULE_scopeClause = 59
    RULE_identifier = 60

    ruleNames =  [ u"preprocessorCode", u"preprocessorLines", u"preprocessorLine", 
                   u"prg", u"lineComment", u"line", u"lineEnd", u"lines", 
                   u"nongreedyLines", u"classDefStart", u"classDef", u"classProperty", 
                   u"parameter", u"parameters", u"funcDefStart", u"funcDef", 
                   u"ifStart", u"ifStmt", u"forStart", u"forEnd", u"forStmt", 
                   u"singleCase", u"otherwise", u"caseStmt", u"whileStart", 
                   u"whileStmt", u"withStmt", u"scanStmt", u"tryStmt", u"controlStmt", 
                   u"cmd", u"queryCondition", u"textChunk", u"dllArgs", 
                   u"dllArg", u"tableField", u"setCmd", u"declarationItem", 
                   u"asType", u"asTypeOf", u"argsItem", u"args", u"specialArgs", 
                   u"reference", u"expr", u"andOp", u"orOp", u"complexId", 
                   u"atom", u"trailer", u"pathname", u"pathElement", u"specialExpr", 
                   u"constant", u"idAttr2", u"idAttr", u"twoExpr", u"arrayIndex", 
                   u"datatype", u"scopeClause", u"identifier" ]

    EOF = Token.EOF
    T__0=1
    NUMBER_LITERAL=2
    BLOB_LITERAL=3
    SEMICOLON=4
    AMPERSAND=5
    COMMERCIALAT=6
    ASTERISK=7
    PLUS_SIGN=8
    MINUS_SIGN=9
    FORWARDSLASH=10
    PERIOD=11
    LEFTBRACKET=12
    RIGHTBRACKET=13
    LEFTBRACE=14
    RIGHTBRACE=15
    LEFTPAREN=16
    RIGHTPAREN=17
    BACKSLASH=18
    LESSTHAN=19
    GREATERTHAN=20
    EXCLAMATION=21
    HASH=22
    DOUBLEEQUALS=23
    NOTEQUALS=24
    GTEQ=25
    LTEQ=26
    MODULO=27
    EQUALS=28
    CARAT=29
    COMMA=30
    DOLLAR=31
    COLON=32
    QUESTION=33
    DOUBLEQUOTE=34
    SINGLEQUOTE=35
    COMMENT=36
    LINECONT=37
    MACROLINE=38
    ACTIVATE=39
    ADD=40
    ADDITIVE=41
    AFTER=42
    ALIAS=43
    ALL=44
    ALTER=45
    ALTERNATE=46
    AND=47
    APPEND=48
    ARRAY=49
    AS=50
    ASCENDING=51
    ASSERT=52
    ASSERTS=53
    AT=54
    BAR=55
    BEFORE=56
    BELL=57
    BLANK=58
    BOOLEANCHAR=59
    BOTTOM=60
    BROWSE=61
    BY=62
    CANDIDATE=63
    CASE=64
    CAST=65
    CATCH=66
    CENTURY=67
    CHDIR=68
    CLASS=69
    CLASSLIB=70
    CLEAR=71
    CLOCK=72
    CLOSE=73
    COLLECTION=74
    COLOR=75
    COLUMN=76
    COMMAND=77
    COMPACT=78
    COMPATIBLE=79
    COMPILE=80
    CONSOLE=81
    CONTINUE=82
    COPY=83
    COUNT=84
    CREATE=85
    CURSOR=86
    DATABASE=87
    DATASESSION=88
    DATE=89
    DB4=90
    DBF=91
    DEACTIVATE=92
    DEBUG=93
    DEBUGOUT=94
    DECLARE=95
    DEFAULT=96
    DEFINE=97
    DELETE=98
    DELETED=99
    DESCENDING=100
    DIMENSION=101
    DISTINCT=102
    DLLS=103
    DO=104
    DOEVENTS=105
    DROP=106
    EACH=107
    ELIF=108
    ELSE=109
    ENCRYPT=110
    ENDCASE=111
    ENDDEFINE=112
    ENDDO=113
    ENDFOR=114
    ENDIF=115
    ENDPROC=116
    ENDSCAN=117
    ENDTEXT=118
    ENDTRY=119
    ENDWITH=120
    ERASE=121
    ERROR=122
    EVENTS=123
    EXACT=124
    EXCEPT=125
    EXCLUSIVE=126
    EXTENDED=127
    EXTERNAL=128
    FIELDS=129
    FILE=130
    FILL=131
    FILTER=132
    FINALLY=133
    FLAGS=134
    FONT=135
    FOR=136
    FORCE=137
    FORM=138
    FOXOBJECT=139
    FOXPLUS=140
    FREE=141
    FROM=142
    GATHER=143
    GETS=144
    GOTO=145
    HELP=146
    HIDE=147
    ICON=148
    IF=149
    IFDEF=150
    IN=151
    INCLUDE=152
    INDEX=153
    INDEXES=154
    INSERT=155
    INTO=156
    JOIN=157
    KEY=158
    KEYBOARD=159
    LABEL=160
    LIBRARY=161
    LIKE=162
    LINE=163
    LINKED=164
    LIST=165
    LOCATE=166
    MACROS=167
    MARGIN=168
    MARK=169
    MASTER=170
    MAX=171
    MEMO=172
    MEMORY=173
    MEMOWIDTH=174
    MEMVAR=175
    MENU=176
    MENUS=177
    MESSAGE=178
    MIN=179
    MKDIR=180
    MODIFY=181
    MULTILOCKS=182
    NAME=183
    NEAR=184
    NEGOTIATE=185
    NEXT=186
    NOCLEAR=187
    NOCONSOLE=188
    NODEBUG=189
    NOEJECT=190
    NOMARGIN=191
    NOMENU=192
    NOOPTIMIZE=193
    NOPROMPT=194
    NORM=195
    NOSAVE=196
    NOSHOW=197
    NOT=198
    NOTE=199
    NOTIFY=200
    NOUPDATE=201
    NOWAIT=202
    NULL=203
    NUMBER=204
    OBJECT=205
    OF=206
    OFF=207
    ON=208
    OR=209
    ORDER=210
    OTHERAND=211
    OTHEROR=212
    OTHERWISE=213
    PACK=214
    PAD=215
    PARAMETER=216
    PLAIN=217
    POP=218
    POPUP=219
    PRETEXT=220
    PRINTER=221
    PROCEDURE=222
    PROGRAM=223
    PROGRAMCONTROL=224
    PROMPT=225
    PUSH=226
    READ=227
    RECALL=228
    RECORD=229
    RECYCLE=230
    REFRESH=231
    REINDEX=232
    RELATION=233
    RELATIVE=234
    RELEASE=235
    RENAME=236
    REPLACE=237
    REPORT=238
    RESOURCES=239
    REST=240
    RESTORE=241
    RETRY=242
    RETURN=243
    RMDIR=244
    ROLLOVER=245
    RUN=246
    SAFETY=247
    SAME=248
    SAVE=249
    SAY=250
    SCAN=251
    SCATTER=252
    SCHEME=253
    SCOPE=254
    SCREEN=255
    SEEK=256
    SELECT=257
    SELECTION=258
    SET=259
    SHADOW=260
    SHARED=261
    SHOW=262
    SHUTDOWN=263
    SIZE=264
    SKIPKW=265
    SORT=266
    STATUS=267
    STEP=268
    STORE=269
    STRUCTURE=270
    STYLE=271
    SUM=272
    SYSMENU=273
    SYSTEM=274
    TABLE=275
    TABLEPROMPT=276
    TAG=277
    TALK=278
    TEXT=279
    TEXTMERGE=280
    THEN=281
    THROW=282
    TIMEOUT=283
    TITLE=284
    TO=285
    TOP=286
    TRY=287
    TYPE=288
    TYPEAHEAD=289
    UNDEFINE=290
    UNIQUE=291
    UNLOCK=292
    UPDATE=293
    USE=294
    VALUES=295
    WAIT=296
    WHERE=297
    WHILE=298
    WINDOW=299
    WITH=300
    ZAP=301
    ZOOM=302
    ID=303
    NL=304
    WS=305
    UNMATCHED=306

    def __init__(self, input, output=sys.stdout):
        super(VisualFoxpro9Parser, self).__init__(input, output=output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class PreprocessorCodeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PreprocessorCodeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def preprocessorLines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.PreprocessorLinesContext,0)


        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_preprocessorCode

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorCode"):
                return visitor.visitPreprocessorCode(self)
            else:
                return visitor.visitChildren(self)




    def preprocessorCode(self):

        localctx = VisualFoxpro9Parser.PreprocessorCodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_preprocessorCode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 122
            self.preprocessorLines()
            self.state = 123
            self.match(VisualFoxpro9Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreprocessorLinesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PreprocessorLinesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def preprocessorLine(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.PreprocessorLineContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.PreprocessorLineContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_preprocessorLines

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorLines"):
                return visitor.visitPreprocessorLines(self)
            else:
                return visitor.visitChildren(self)




    def preprocessorLines(self):

        localctx = VisualFoxpro9Parser.PreprocessorLinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_preprocessorLines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 128
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 125
                    self.preprocessorLine() 
                self.state = 130
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreprocessorLineContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PreprocessorLineContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_preprocessorLine

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.PreprocessorLineContext, self).copyFrom(ctx)



    class NonpreprocessorLineContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.NonpreprocessorLineContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)
        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def HASH(self):
            return self.getToken(VisualFoxpro9Parser.HASH, 0)
        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitNonpreprocessorLine"):
                return visitor.visitNonpreprocessorLine(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorUndefineContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorUndefineContext, self).__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(VisualFoxpro9Parser.HASH, 0)
        def UNDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.UNDEFINE, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorUndefine"):
                return visitor.visitPreprocessorUndefine(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorIfContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorIfContext, self).__init__(parser)
            self.ifBody = None # PreprocessorLinesContext
            self.elseBody = None # PreprocessorLinesContext
            self.copyFrom(ctx)

        def HASH(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.HASH)
            else:
                return self.getToken(VisualFoxpro9Parser.HASH, i)
        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)
        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)
        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def preprocessorLines(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.PreprocessorLinesContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.PreprocessorLinesContext,i)

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def IFDEF(self):
            return self.getToken(VisualFoxpro9Parser.IFDEF, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorIf"):
                return visitor.visitPreprocessorIf(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorJunkContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorJunkContext, self).__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(VisualFoxpro9Parser.HASH, 0)
        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)
        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)
        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)
        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def INCLUDE(self):
            return self.getToken(VisualFoxpro9Parser.INCLUDE, 0)
        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorJunk"):
                return visitor.visitPreprocessorJunk(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorDefineContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorDefineContext, self).__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(VisualFoxpro9Parser.HASH, 0)
        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorDefine"):
                return visitor.visitPreprocessorDefine(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorIncludeContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorIncludeContext, self).__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(VisualFoxpro9Parser.HASH, 0)
        def INCLUDE(self):
            return self.getToken(VisualFoxpro9Parser.INCLUDE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorInclude"):
                return visitor.visitPreprocessorInclude(self)
            else:
                return visitor.visitChildren(self)



    def preprocessorLine(self):

        localctx = VisualFoxpro9Parser.PreprocessorLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_preprocessorLine)
        self._la = 0 # Token type
        try:
            self.state = 191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.PreprocessorIfContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 131
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 136
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.IF]:
                    self.state = 132
                    self.match(VisualFoxpro9Parser.IF)
                    self.state = 133
                    self.expr(0)
                    pass
                elif token in [VisualFoxpro9Parser.IFDEF]:
                    self.state = 134
                    self.match(VisualFoxpro9Parser.IFDEF)
                    self.state = 135
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 138
                self.match(VisualFoxpro9Parser.NL)
                self.state = 139
                localctx.ifBody = self.preprocessorLines()
                self.state = 144
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 140
                    self.match(VisualFoxpro9Parser.HASH)
                    self.state = 141
                    self.match(VisualFoxpro9Parser.ELSE)
                    self.state = 142
                    self.match(VisualFoxpro9Parser.NL)
                    self.state = 143
                    localctx.elseBody = self.preprocessorLines()


                self.state = 146
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 147
                self.match(VisualFoxpro9Parser.ENDIF)
                self.state = 148
                self.lineEnd()
                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.PreprocessorDefineContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 150
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 151
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 152
                self.identifier()
                self.state = 156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.MACROLINE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DB4 - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 153
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 158
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 159
                self.lineEnd()
                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.PreprocessorUndefineContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 161
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 162
                self.match(VisualFoxpro9Parser.UNDEFINE)
                self.state = 163
                self.identifier()
                self.state = 164
                self.lineEnd()
                pass

            elif la_ == 4:
                localctx = VisualFoxpro9Parser.PreprocessorIncludeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 166
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 167
                self.match(VisualFoxpro9Parser.INCLUDE)
                self.state = 168
                self.specialExpr()
                self.state = 169
                self.lineEnd()
                pass

            elif la_ == 5:
                localctx = VisualFoxpro9Parser.PreprocessorJunkContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 171
                self.match(VisualFoxpro9Parser.HASH)

                self.state = 172
                _la = self._input.LA(1)
                if _la <= 0 or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (VisualFoxpro9Parser.DEFINE - 97)) | (1 << (VisualFoxpro9Parser.ELSE - 97)) | (1 << (VisualFoxpro9Parser.ENDIF - 97)) | (1 << (VisualFoxpro9Parser.IF - 97)) | (1 << (VisualFoxpro9Parser.INCLUDE - 97)))) != 0) or _la==VisualFoxpro9Parser.NL:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.MACROLINE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DB4 - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 173
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 179
                self.lineEnd()
                pass

            elif la_ == 6:
                localctx = VisualFoxpro9Parser.NonpreprocessorLineContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 189
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.NL]:
                    self.state = 180
                    self.match(VisualFoxpro9Parser.NL)
                    pass
                elif token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.ASTERISK, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.FORWARDSLASH, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.LESSTHAN, VisualFoxpro9Parser.GREATERTHAN, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.GTEQ, VisualFoxpro9Parser.LTEQ, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.COLON, VisualFoxpro9Parser.QUESTION, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.COMMENT, VisualFoxpro9Parser.LINECONT, VisualFoxpro9Parser.MACROLINE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.ASSERTS, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.CHDIR, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.COMMAND, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.COMPILE, VisualFoxpro9Parser.CONSOLE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.DATASESSION, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.DEBUG, VisualFoxpro9Parser.DEBUGOUT, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.DOEVENTS, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENCRYPT, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.ENDTEXT, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.FILL, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.FLAGS, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.FORCE, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.FOXOBJECT, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.GETS, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.HIDE, VisualFoxpro9Parser.ICON, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.JOIN, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.LINKED, VisualFoxpro9Parser.LIST, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MASTER, VisualFoxpro9Parser.MAX, VisualFoxpro9Parser.MEMO, VisualFoxpro9Parser.MEMORY, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.MENUS, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.MIN, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.MODIFY, VisualFoxpro9Parser.MULTILOCKS, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.NODEBUG, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.NORM, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.NOUPDATE, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.OTHERAND, VisualFoxpro9Parser.OTHEROR, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.PRETEXT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.RESOURCES, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.RESTORE, VisualFoxpro9Parser.RETRY, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.SAFETY, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.SHOW, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.SIZE, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.SORT, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.TABLEPROMPT, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.TEXT, VisualFoxpro9Parser.TEXTMERGE, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.TITLE, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.UNLOCK, VisualFoxpro9Parser.UPDATE, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ZOOM, VisualFoxpro9Parser.ID, VisualFoxpro9Parser.WS, VisualFoxpro9Parser.UNMATCHED]:
                    self.state = 181
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.EOF or _la==VisualFoxpro9Parser.HASH or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 185
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.MACROLINE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DB4 - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                        self.state = 182
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 187
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 188
                    self.lineEnd()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrgContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PrgContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def classDef(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ClassDefContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ClassDefContext,i)


        def funcDef(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.FuncDefContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDefContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_prg

        def accept(self, visitor):
            if hasattr(visitor, "visitPrg"):
                return visitor.visitPrg(self)
            else:
                return visitor.visitChildren(self)




    def prg(self):

        localctx = VisualFoxpro9Parser.PrgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_prg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.DEFINE or _la==VisualFoxpro9Parser.PROCEDURE or _la==VisualFoxpro9Parser.SCOPE:
                self.state = 195
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.DEFINE]:
                    self.state = 193
                    self.classDef()
                    pass
                elif token in [VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.SCOPE]:
                    self.state = 194
                    self.funcDef()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 200
            self.match(VisualFoxpro9Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineCommentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.LineCommentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def ASTERISK(self):
            return self.getToken(VisualFoxpro9Parser.ASTERISK, 0)

        def NOTE(self):
            return self.getToken(VisualFoxpro9Parser.NOTE, 0)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_lineComment

        def accept(self, visitor):
            if hasattr(visitor, "visitLineComment"):
                return visitor.visitLineComment(self)
            else:
                return visitor.visitChildren(self)




    def lineComment(self):

        localctx = VisualFoxpro9Parser.LineCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_lineComment)
        self._la = 0 # Token type
        try:
            self.state = 211
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ASTERISK, VisualFoxpro9Parser.NOTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 202
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ASTERISK or _la==VisualFoxpro9Parser.NOTE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.MACROLINE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DB4 - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 203
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 208
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 209
                self.lineEnd()
                pass
            elif token in [VisualFoxpro9Parser.NL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 210
                self.match(VisualFoxpro9Parser.NL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.LineContext, self).__init__(parent, invokingState)
            self.parser = parser

        def lineComment(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,0)


        def MACROLINE(self):
            return self.getToken(VisualFoxpro9Parser.MACROLINE, 0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def controlStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ControlStmtContext,0)


        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_line

        def accept(self, visitor):
            if hasattr(visitor, "visitLine"):
                return visitor.visitLine(self)
            else:
                return visitor.visitChildren(self)




    def line(self):

        localctx = VisualFoxpro9Parser.LineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_line)
        try:
            self.state = 222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 213
                self.lineComment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 214
                self.match(VisualFoxpro9Parser.MACROLINE)
                self.state = 215
                self.lineEnd()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 218
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 216
                    self.controlStmt()
                    pass

                elif la_ == 2:
                    self.state = 217
                    self.cmd()
                    pass


                self.state = 220
                self.lineEnd()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineEndContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.LineEndContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_lineEnd

        def accept(self, visitor):
            if hasattr(visitor, "visitLineEnd"):
                return visitor.visitLineEnd(self)
            else:
                return visitor.visitChildren(self)




    def lineEnd(self):

        localctx = VisualFoxpro9Parser.LineEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_lineEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            _la = self._input.LA(1)
            if not(_la==VisualFoxpro9Parser.EOF or _la==VisualFoxpro9Parser.NL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.LinesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def line(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_lines

        def accept(self, visitor):
            if hasattr(visitor, "visitLines"):
                return visitor.visitLines(self)
            else:
                return visitor.visitChildren(self)




    def lines(self):

        localctx = VisualFoxpro9Parser.LinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_lines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 226
                    self.line() 
                self.state = 231
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NongreedyLinesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.NongreedyLinesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def line(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_nongreedyLines

        def accept(self, visitor):
            if hasattr(visitor, "visitNongreedyLines"):
                return visitor.visitNongreedyLines(self)
            else:
                return visitor.visitChildren(self)




    def nongreedyLines(self):

        localctx = VisualFoxpro9Parser.NongreedyLinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_nongreedyLines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 232
                    self.line() 
                self.state = 237
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDefStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ClassDefStartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)

        def CLASS(self):
            return self.getToken(VisualFoxpro9Parser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def asTypeOf(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeOfContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_classDefStart

        def accept(self, visitor):
            if hasattr(visitor, "visitClassDefStart"):
                return visitor.visitClassDefStart(self)
            else:
                return visitor.visitChildren(self)




    def classDefStart(self):

        localctx = VisualFoxpro9Parser.ClassDefStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_classDefStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.match(VisualFoxpro9Parser.DEFINE)
            self.state = 239
            self.match(VisualFoxpro9Parser.CLASS)
            self.state = 240
            self.identifier()
            self.state = 242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.AS:
                self.state = 241
                self.asTypeOf()


            self.state = 244
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDefContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ClassDefContext, self).__init__(parent, invokingState)
            self.parser = parser

        def classDefStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ClassDefStartContext,0)


        def ENDDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.ENDDEFINE, 0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def classProperty(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ClassPropertyContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ClassPropertyContext,i)


        def lineComment(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineCommentContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_classDef

        def accept(self, visitor):
            if hasattr(visitor, "visitClassDef"):
                return visitor.visitClassDef(self)
            else:
                return visitor.visitChildren(self)




    def classDef(self):

        localctx = VisualFoxpro9Parser.ClassDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_classDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.classDefStart()
            self.state = 250
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 247
                    self.classProperty() 
                self.state = 252
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 253
            self.match(VisualFoxpro9Parser.ENDDEFINE)
            self.state = 254
            self.lineEnd()
            self.state = 258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.ASTERISK or _la==VisualFoxpro9Parser.NOTE or _la==VisualFoxpro9Parser.NL:
                self.state = 255
                self.lineComment()
                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassPropertyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ClassPropertyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lineComment(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,0)


        def funcDef(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDefContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_classProperty

        def accept(self, visitor):
            if hasattr(visitor, "visitClassProperty"):
                return visitor.visitClassProperty(self)
            else:
                return visitor.visitChildren(self)




    def classProperty(self):

        localctx = VisualFoxpro9Parser.ClassPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_classProperty)
        try:
            self.state = 266
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 261
                self.cmd()
                self.state = 262
                self.match(VisualFoxpro9Parser.NL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 264
                self.lineComment()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 265
                self.funcDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ParameterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_parameter

        def accept(self, visitor):
            if hasattr(visitor, "visitParameter"):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = VisualFoxpro9Parser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self.idAttr()
            self.state = 270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.AS:
                self.state = 269
                self.asType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ParametersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ParameterContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ParameterContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_parameters

        def accept(self, visitor):
            if hasattr(visitor, "visitParameters"):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = VisualFoxpro9Parser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.parameter()
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.COMMA:
                self.state = 273
                self.match(VisualFoxpro9Parser.COMMA)
                self.state = 274
                self.parameter()
                self.state = 279
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncDefStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.FuncDefStartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def idAttr2(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttr2Context,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def SCOPE(self):
            return self.getToken(VisualFoxpro9Parser.SCOPE, 0)

        def LEFTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.LEFTPAREN, 0)

        def RIGHTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTPAREN, 0)

        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)


        def parameters(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParametersContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_funcDefStart

        def accept(self, visitor):
            if hasattr(visitor, "visitFuncDefStart"):
                return visitor.visitFuncDefStart(self)
            else:
                return visitor.visitChildren(self)




    def funcDefStart(self):

        localctx = VisualFoxpro9Parser.FuncDefStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_funcDefStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.SCOPE:
                self.state = 280
                self.match(VisualFoxpro9Parser.SCOPE)


            self.state = 283
            self.match(VisualFoxpro9Parser.PROCEDURE)
            self.state = 284
            self.idAttr2()
            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.LEFTPAREN:
                self.state = 285
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 286
                    self.parameters()


                self.state = 289
                self.match(VisualFoxpro9Parser.RIGHTPAREN)


            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.AS:
                self.state = 292
                self.asType()


            self.state = 295
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncDefContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.FuncDefContext, self).__init__(parent, invokingState)
            self.parser = parser

        def funcDefStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDefStartContext,0)


        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDPROC(self):
            return self.getToken(VisualFoxpro9Parser.ENDPROC, 0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def lineComment(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineCommentContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_funcDef

        def accept(self, visitor):
            if hasattr(visitor, "visitFuncDef"):
                return visitor.visitFuncDef(self)
            else:
                return visitor.visitChildren(self)




    def funcDef(self):

        localctx = VisualFoxpro9Parser.FuncDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_funcDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.funcDefStart()
            self.state = 298
            self.lines()
            self.state = 307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 299
                self.match(VisualFoxpro9Parser.ENDPROC)
                self.state = 300
                self.lineEnd()
                self.state = 304
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 301
                        self.lineComment() 
                    self.state = 306
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,26,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IfStartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def THEN(self):
            return self.getToken(VisualFoxpro9Parser.THEN, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_ifStart

        def accept(self, visitor):
            if hasattr(visitor, "visitIfStart"):
                return visitor.visitIfStart(self)
            else:
                return visitor.visitChildren(self)




    def ifStart(self):

        localctx = VisualFoxpro9Parser.IfStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_ifStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.match(VisualFoxpro9Parser.IF)
            self.state = 310
            self.expr(0)
            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.THEN:
                self.state = 311
                self.match(VisualFoxpro9Parser.THEN)


            self.state = 314
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IfStmtContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.ifBody = None # LinesContext
            self.elseBody = None # LinesContext

        def ifStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IfStartContext,0)


        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)

        def lines(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LinesContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,i)


        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_ifStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitIfStmt"):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = VisualFoxpro9Parser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.ifStart()
            self.state = 317
            localctx.ifBody = self.lines()
            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.ELSE:
                self.state = 318
                self.match(VisualFoxpro9Parser.ELSE)
                self.state = 319
                self.match(VisualFoxpro9Parser.NL)
                self.state = 320
                localctx.elseBody = self.lines()


            self.state = 323
            self.match(VisualFoxpro9Parser.ENDIF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ForStartContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.loopStart = None # ExprContext
            self.loopStop = None # ExprContext
            self.loopStep = None # ExprContext

        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def EQUALS(self):
            return self.getToken(VisualFoxpro9Parser.EQUALS, 0)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def STEP(self):
            return self.getToken(VisualFoxpro9Parser.STEP, 0)

        def EACH(self):
            return self.getToken(VisualFoxpro9Parser.EACH, 0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)

        def FOXOBJECT(self):
            return self.getToken(VisualFoxpro9Parser.FOXOBJECT, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_forStart

        def accept(self, visitor):
            if hasattr(visitor, "visitForStart"):
                return visitor.visitForStart(self)
            else:
                return visitor.visitChildren(self)




    def forStart(self):

        localctx = VisualFoxpro9Parser.ForStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_forStart)
        self._la = 0 # Token type
        try:
            self.state = 347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 325
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 326
                self.idAttr()
                self.state = 327
                self.match(VisualFoxpro9Parser.EQUALS)
                self.state = 328
                localctx.loopStart = self.expr(0)
                self.state = 329
                self.match(VisualFoxpro9Parser.TO)
                self.state = 330
                localctx.loopStop = self.expr(0)
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.STEP:
                    self.state = 331
                    self.match(VisualFoxpro9Parser.STEP)
                    self.state = 332
                    localctx.loopStep = self.expr(0)


                self.state = 335
                self.match(VisualFoxpro9Parser.NL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 337
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 338
                self.match(VisualFoxpro9Parser.EACH)
                self.state = 339
                self.idAttr()
                self.state = 340
                self.match(VisualFoxpro9Parser.IN)
                self.state = 341
                self.expr(0)
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.FOXOBJECT:
                    self.state = 342
                    self.match(VisualFoxpro9Parser.FOXOBJECT)


                self.state = 345
                self.match(VisualFoxpro9Parser.NL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForEndContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ForEndContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ENDFOR(self):
            return self.getToken(VisualFoxpro9Parser.ENDFOR, 0)

        def NEXT(self):
            return self.getToken(VisualFoxpro9Parser.NEXT, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_forEnd

        def accept(self, visitor):
            if hasattr(visitor, "visitForEnd"):
                return visitor.visitForEnd(self)
            else:
                return visitor.visitChildren(self)




    def forEnd(self):

        localctx = VisualFoxpro9Parser.ForEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_forEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ENDFOR]:
                self.state = 349
                self.match(VisualFoxpro9Parser.ENDFOR)
                pass
            elif token in [VisualFoxpro9Parser.NEXT]:
                self.state = 350
                self.match(VisualFoxpro9Parser.NEXT)
                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 351
                    self.idAttr()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ForStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def forStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ForStartContext,0)


        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def forEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ForEndContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_forStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitForStmt"):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = VisualFoxpro9Parser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self.forStart()
            self.state = 357
            self.lines()
            self.state = 358
            self.forEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleCaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SingleCaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(VisualFoxpro9Parser.CASE, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def nongreedyLines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.NongreedyLinesContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_singleCase

        def accept(self, visitor):
            if hasattr(visitor, "visitSingleCase"):
                return visitor.visitSingleCase(self)
            else:
                return visitor.visitChildren(self)




    def singleCase(self):

        localctx = VisualFoxpro9Parser.SingleCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_singleCase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(VisualFoxpro9Parser.CASE)
            self.state = 361
            self.expr(0)
            self.state = 362
            self.match(VisualFoxpro9Parser.NL)
            self.state = 363
            self.nongreedyLines()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OtherwiseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.OtherwiseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OTHERWISE(self):
            return self.getToken(VisualFoxpro9Parser.OTHERWISE, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_otherwise

        def accept(self, visitor):
            if hasattr(visitor, "visitOtherwise"):
                return visitor.visitOtherwise(self)
            else:
                return visitor.visitChildren(self)




    def otherwise(self):

        localctx = VisualFoxpro9Parser.OtherwiseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_otherwise)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(VisualFoxpro9Parser.OTHERWISE)
            self.state = 366
            self.match(VisualFoxpro9Parser.NL)
            self.state = 367
            self.lines()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.CaseStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)

        def CASE(self):
            return self.getToken(VisualFoxpro9Parser.CASE, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def ENDCASE(self):
            return self.getToken(VisualFoxpro9Parser.ENDCASE, 0)

        def lineComment(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineCommentContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,i)


        def singleCase(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SingleCaseContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SingleCaseContext,i)


        def otherwise(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.OtherwiseContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_caseStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitCaseStmt"):
                return visitor.visitCaseStmt(self)
            else:
                return visitor.visitChildren(self)




    def caseStmt(self):

        localctx = VisualFoxpro9Parser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_caseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(VisualFoxpro9Parser.DO)
            self.state = 370
            self.match(VisualFoxpro9Parser.CASE)
            self.state = 371
            self.match(VisualFoxpro9Parser.NL)
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.ASTERISK or _la==VisualFoxpro9Parser.NOTE or _la==VisualFoxpro9Parser.NL:
                self.state = 372
                self.lineComment()
                self.state = 377
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.CASE:
                self.state = 378
                self.singleCase()
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.OTHERWISE:
                self.state = 384
                self.otherwise()


            self.state = 387
            self.match(VisualFoxpro9Parser.ENDCASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.WhileStartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(VisualFoxpro9Parser.WHILE, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_whileStart

        def accept(self, visitor):
            if hasattr(visitor, "visitWhileStart"):
                return visitor.visitWhileStart(self)
            else:
                return visitor.visitChildren(self)




    def whileStart(self):

        localctx = VisualFoxpro9Parser.WhileStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_whileStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.DO:
                self.state = 389
                self.match(VisualFoxpro9Parser.DO)


            self.state = 392
            self.match(VisualFoxpro9Parser.WHILE)
            self.state = 393
            self.expr(0)
            self.state = 394
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.WhileStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def whileStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.WhileStartContext,0)


        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDDO(self):
            return self.getToken(VisualFoxpro9Parser.ENDDO, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_whileStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitWhileStmt"):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = VisualFoxpro9Parser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.whileStart()
            self.state = 397
            self.lines()
            self.state = 398
            self.match(VisualFoxpro9Parser.ENDDO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.WithStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDWITH(self):
            return self.getToken(VisualFoxpro9Parser.ENDWITH, 0)

        def asTypeOf(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeOfContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_withStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitWithStmt"):
                return visitor.visitWithStmt(self)
            else:
                return visitor.visitChildren(self)




    def withStmt(self):

        localctx = VisualFoxpro9Parser.WithStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_withStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(VisualFoxpro9Parser.WITH)
            self.state = 401
            self.idAttr()
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.AS:
                self.state = 402
                self.asTypeOf()


            self.state = 405
            self.match(VisualFoxpro9Parser.NL)
            self.state = 406
            self.lines()
            self.state = 407
            self.match(VisualFoxpro9Parser.ENDWITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ScanStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SCAN(self):
            return self.getToken(VisualFoxpro9Parser.SCAN, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDSCAN(self):
            return self.getToken(VisualFoxpro9Parser.ENDSCAN, 0)

        def scopeClause(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScopeClauseContext,0)


        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_scanStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitScanStmt"):
                return visitor.visitScanStmt(self)
            else:
                return visitor.visitChildren(self)




    def scanStmt(self):

        localctx = VisualFoxpro9Parser.ScanStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_scanStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(VisualFoxpro9Parser.SCAN)
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.ALL or ((((_la - 186)) & ~0x3f) == 0 and ((1 << (_la - 186)) & ((1 << (VisualFoxpro9Parser.NEXT - 186)) | (1 << (VisualFoxpro9Parser.RECORD - 186)) | (1 << (VisualFoxpro9Parser.REST - 186)))) != 0):
                self.state = 410
                self.scopeClause()


            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.FOR:
                self.state = 413
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 414
                self.expr(0)


            self.state = 417
            self.match(VisualFoxpro9Parser.NL)
            self.state = 418
            self.lines()
            self.state = 419
            self.match(VisualFoxpro9Parser.ENDSCAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.TryStmtContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.tryLines = None # LinesContext
            self.catchLines = None # LinesContext
            self.finallyLines = None # LinesContext

        def TRY(self):
            return self.getToken(VisualFoxpro9Parser.TRY, 0)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def ENDTRY(self):
            return self.getToken(VisualFoxpro9Parser.ENDTRY, 0)

        def lines(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LinesContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,i)


        def CATCH(self):
            return self.getToken(VisualFoxpro9Parser.CATCH, 0)

        def FINALLY(self):
            return self.getToken(VisualFoxpro9Parser.FINALLY, 0)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_tryStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitTryStmt"):
                return visitor.visitTryStmt(self)
            else:
                return visitor.visitChildren(self)




    def tryStmt(self):

        localctx = VisualFoxpro9Parser.TryStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_tryStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.match(VisualFoxpro9Parser.TRY)
            self.state = 422
            self.match(VisualFoxpro9Parser.NL)
            self.state = 423
            localctx.tryLines = self.lines()
            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.CATCH:
                self.state = 424
                self.match(VisualFoxpro9Parser.CATCH)
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.TO:
                    self.state = 425
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 426
                    self.identifier()


                self.state = 429
                self.match(VisualFoxpro9Parser.NL)
                self.state = 430
                localctx.catchLines = self.lines()


            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.FINALLY:
                self.state = 433
                self.match(VisualFoxpro9Parser.FINALLY)
                self.state = 434
                self.match(VisualFoxpro9Parser.NL)
                self.state = 435
                localctx.finallyLines = self.lines()


            self.state = 438
            self.match(VisualFoxpro9Parser.ENDTRY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ControlStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def whileStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.WhileStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IfStmtContext,0)


        def caseStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CaseStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ForStmtContext,0)


        def withStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.WithStmtContext,0)


        def scanStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScanStmtContext,0)


        def tryStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TryStmtContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_controlStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitControlStmt"):
                return visitor.visitControlStmt(self)
            else:
                return visitor.visitChildren(self)




    def controlStmt(self):

        localctx = VisualFoxpro9Parser.ControlStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_controlStmt)
        try:
            self.state = 447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 440
                self.whileStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 441
                self.ifStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 442
                self.caseStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 443
                self.forStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 444
                self.withStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 445
                self.scanStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 446
                self.tryStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.CmdContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_cmd

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.CmdContext, self).copyFrom(ctx)



    class ThrowErrorContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ThrowErrorContext, self).__init__(parser)
            self.copyFrom(ctx)

        def THROW(self):
            return self.getToken(VisualFoxpro9Parser.THROW, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitThrowError"):
                return visitor.visitThrowError(self)
            else:
                return visitor.visitChildren(self)


    class SelectContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.SelectContext, self).__init__(parser)
            self.tablename = None # SpecialExprContext
            self.fromExpr = None # SpecialExprContext
            self.whereExpr = None # ExprContext
            self.intoExpr = None # SpecialExprContext
            self.orderbyid = None # IdentifierContext
            self.copyFrom(ctx)

        def SELECT(self):
            return self.getToken(VisualFoxpro9Parser.SELECT, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def specialArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,0)

        def ASTERISK(self):
            return self.getToken(VisualFoxpro9Parser.ASTERISK, 0)
        def DISTINCT(self):
            return self.getToken(VisualFoxpro9Parser.DISTINCT, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def WHERE(self):
            return self.getToken(VisualFoxpro9Parser.WHERE, 0)
        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)
        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)
        def BY(self):
            return self.getToken(VisualFoxpro9Parser.BY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)
        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitSelect"):
                return visitor.visitSelect(self)
            else:
                return visitor.visitChildren(self)


    class DefineMenuContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DefineMenuContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def NOMARGIN(self):
            return self.getToken(VisualFoxpro9Parser.NOMARGIN, 0)
        def AT(self):
            return self.getToken(VisualFoxpro9Parser.AT, 0)
        def LINE(self):
            return self.getToken(VisualFoxpro9Parser.LINE, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)
        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefineMenu"):
                return visitor.visitDefineMenu(self)
            else:
                return visitor.visitChildren(self)


    class IndexOnContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.IndexOnContext, self).__init__(parser)
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(VisualFoxpro9Parser.INDEX, 0)
        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def COMPACT(self):
            return self.getToken(VisualFoxpro9Parser.COMPACT, 0)
        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)
        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)
        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)
        def UNIQUE(self):
            return self.getToken(VisualFoxpro9Parser.UNIQUE, 0)
        def CANDIDATE(self):
            return self.getToken(VisualFoxpro9Parser.CANDIDATE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitIndexOn"):
                return visitor.visitIndexOn(self)
            else:
                return visitor.visitChildren(self)


    class ReleaseContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ReleaseContext, self).__init__(parser)
            self.vartype = None # Token
            self.copyFrom(ctx)

        def RELEASE(self):
            return self.getToken(VisualFoxpro9Parser.RELEASE, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)

        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def EXTENDED(self):
            return self.getToken(VisualFoxpro9Parser.EXTENDED, 0)
        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)
        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitRelease"):
                return visitor.visitRelease(self)
            else:
                return visitor.visitChildren(self)


    class UseContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.UseContext, self).__init__(parser)
            self.workArea = None # SpecialExprContext
            self.orderExpr = None # ExprContext
            self.aliasExpr = None # SpecialExprContext
            self.name = None # SpecialExprContext
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(VisualFoxpro9Parser.USE, 0)
        def IN(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.IN)
            else:
                return self.getToken(VisualFoxpro9Parser.IN, i)
        def ORDER(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ORDER)
            else:
                return self.getToken(VisualFoxpro9Parser.ORDER, i)
        def ALIAS(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ALIAS)
            else:
                return self.getToken(VisualFoxpro9Parser.ALIAS, i)
        def SHARED(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SHARED)
            else:
                return self.getToken(VisualFoxpro9Parser.SHARED, i)
        def EXCLUSIVE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.EXCLUSIVE)
            else:
                return self.getToken(VisualFoxpro9Parser.EXCLUSIVE, i)
        def NOUPDATE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOUPDATE)
            else:
                return self.getToken(VisualFoxpro9Parser.NOUPDATE, i)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def TAG(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TAG)
            else:
                return self.getToken(VisualFoxpro9Parser.TAG, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitUse"):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)


    class ReplaceContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ReplaceContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REPLACE(self):
            return self.getToken(VisualFoxpro9Parser.REPLACE, 0)
        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def WITH(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WITH)
            else:
                return self.getToken(VisualFoxpro9Parser.WITH, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitReplace"):
                return visitor.visitReplace(self)
            else:
                return visitor.visitChildren(self)


    class ClearStmtContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ClearStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def CLASS(self):
            return self.getToken(VisualFoxpro9Parser.CLASS, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def DEBUG(self):
            return self.getToken(VisualFoxpro9Parser.DEBUG, 0)
        def DLLS(self):
            return self.getToken(VisualFoxpro9Parser.DLLS, 0)
        def specialArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,0)

        def EVENTS(self):
            return self.getToken(VisualFoxpro9Parser.EVENTS, 0)
        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)
        def FIELDS(self):
            return self.getToken(VisualFoxpro9Parser.FIELDS, 0)
        def GETS(self):
            return self.getToken(VisualFoxpro9Parser.GETS, 0)
        def MACROS(self):
            return self.getToken(VisualFoxpro9Parser.MACROS, 0)
        def MEMORY(self):
            return self.getToken(VisualFoxpro9Parser.MEMORY, 0)
        def MENUS(self):
            return self.getToken(VisualFoxpro9Parser.MENUS, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def PROGRAM(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAM, 0)
        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)
        def READ(self):
            return self.getToken(VisualFoxpro9Parser.READ, 0)
        def RESOURCES(self):
            return self.getToken(VisualFoxpro9Parser.RESOURCES, 0)
        def TYPEAHEAD(self):
            return self.getToken(VisualFoxpro9Parser.TYPEAHEAD, 0)
        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitClearStmt"):
                return visitor.visitClearStmt(self)
            else:
                return visitor.visitChildren(self)


    class WaitCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.WaitCmdContext, self).__init__(parser)
            self.toExpr = None # ExprContext
            self.atExpr1 = None # ExprContext
            self.atExpr2 = None # ExprContext
            self.timeout = None # ExprContext
            self.message = None # ExprContext
            self.copyFrom(ctx)

        def WAIT(self):
            return self.getToken(VisualFoxpro9Parser.WAIT, 0)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def WINDOW(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WINDOW)
            else:
                return self.getToken(VisualFoxpro9Parser.WINDOW, i)
        def NOWAIT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOWAIT)
            else:
                return self.getToken(VisualFoxpro9Parser.NOWAIT, i)
        def CLEAR(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.CLEAR)
            else:
                return self.getToken(VisualFoxpro9Parser.CLEAR, i)
        def NOCLEAR(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOCLEAR)
            else:
                return self.getToken(VisualFoxpro9Parser.NOCLEAR, i)
        def TIMEOUT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TIMEOUT)
            else:
                return self.getToken(VisualFoxpro9Parser.TIMEOUT, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def AT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.AT)
            else:
                return self.getToken(VisualFoxpro9Parser.AT, i)
        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitWaitCmd"):
                return visitor.visitWaitCmd(self)
            else:
                return visitor.visitChildren(self)


    class DeactivateContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DeactivateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.DEACTIVATE, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def parameters(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParametersContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitDeactivate"):
                return visitor.visitDeactivate(self)
            else:
                return visitor.visitChildren(self)


    class CopyToArrayContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.CopyToArrayContext, self).__init__(parser)
            self.copyFrom(ctx)

        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def ARRAY(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ARRAY)
            else:
                return self.getToken(VisualFoxpro9Parser.ARRAY, i)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def FIELDS(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FIELDS)
            else:
                return self.getToken(VisualFoxpro9Parser.FIELDS, i)
        def args(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,i)

        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def LIKE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.LIKE)
            else:
                return self.getToken(VisualFoxpro9Parser.LIKE, i)
        def EXCEPT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.EXCEPT)
            else:
                return self.getToken(VisualFoxpro9Parser.EXCEPT, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitCopyToArray"):
                return visitor.visitCopyToArray(self)
            else:
                return visitor.visitChildren(self)


    class CopyToContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.CopyToContext, self).__init__(parser)
            self.copyFrom(ctx)

        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def STRUCTURE(self):
            return self.getToken(VisualFoxpro9Parser.STRUCTURE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCopyTo"):
                return visitor.visitCopyTo(self)
            else:
                return visitor.visitChildren(self)


    class ReadEventContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ReadEventContext, self).__init__(parser)
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(VisualFoxpro9Parser.READ, 0)
        def DOEVENTS(self):
            return self.getToken(VisualFoxpro9Parser.DOEVENTS, 0)
        def EVENTS(self):
            return self.getToken(VisualFoxpro9Parser.EVENTS, 0)
        def FORCE(self):
            return self.getToken(VisualFoxpro9Parser.FORCE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitReadEvent"):
                return visitor.visitReadEvent(self)
            else:
                return visitor.visitChildren(self)


    class ComplexIdCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ComplexIdCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def complexId(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ComplexIdContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitComplexIdCmd"):
                return visitor.visitComplexIdCmd(self)
            else:
                return visitor.visitChildren(self)


    class AppendFromContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AppendFromContext, self).__init__(parser)
            self.typeExpr = None # SpecialExprContext
            self.copyFrom(ctx)

        def APPEND(self):
            return self.getToken(VisualFoxpro9Parser.APPEND, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)
        def TYPE(self):
            return self.getToken(VisualFoxpro9Parser.TYPE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitAppendFrom"):
                return visitor.visitAppendFrom(self)
            else:
                return visitor.visitChildren(self)


    class ContinueLocateContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ContinueLocateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(VisualFoxpro9Parser.CONTINUE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitContinueLocate"):
                return visitor.visitContinueLocate(self)
            else:
                return visitor.visitChildren(self)


    class ShellRunContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ShellRunContext, self).__init__(parser)
            self.copyFrom(ctx)

        def RUN(self):
            return self.getToken(VisualFoxpro9Parser.RUN, 0)
        def EXCLAMATION(self):
            return self.getToken(VisualFoxpro9Parser.EXCLAMATION, 0)
        def FORWARDSLASH(self):
            return self.getToken(VisualFoxpro9Parser.FORWARDSLASH, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitShellRun"):
                return visitor.visitShellRun(self)
            else:
                return visitor.visitChildren(self)


    class ZoomCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ZoomCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ZOOM(self):
            return self.getToken(VisualFoxpro9Parser.ZOOM, 0)
        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def MIN(self):
            return self.getToken(VisualFoxpro9Parser.MIN, 0)
        def MAX(self):
            return self.getToken(VisualFoxpro9Parser.MAX, 0)
        def NORM(self):
            return self.getToken(VisualFoxpro9Parser.NORM, 0)
        def AT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.AT)
            else:
                return self.getToken(VisualFoxpro9Parser.AT, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def SIZE(self):
            return self.getToken(VisualFoxpro9Parser.SIZE, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitZoomCmd"):
                return visitor.visitZoomCmd(self)
            else:
                return visitor.visitChildren(self)


    class SaveToCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.SaveToCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SAVE(self):
            return self.getToken(VisualFoxpro9Parser.SAVE, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def MEMO(self):
            return self.getToken(VisualFoxpro9Parser.MEMO, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def LIKE(self):
            return self.getToken(VisualFoxpro9Parser.LIKE, 0)
        def EXCEPT(self):
            return self.getToken(VisualFoxpro9Parser.EXCEPT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitSaveToCmd"):
                return visitor.visitSaveToCmd(self)
            else:
                return visitor.visitChildren(self)


    class SetStmtContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.SetStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(VisualFoxpro9Parser.SET, 0)
        def setCmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SetCmdContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitSetStmt"):
                return visitor.visitSetStmt(self)
            else:
                return visitor.visitChildren(self)


    class ReindexContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ReindexContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REINDEX(self):
            return self.getToken(VisualFoxpro9Parser.REINDEX, 0)
        def COMPACT(self):
            return self.getToken(VisualFoxpro9Parser.COMPACT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitReindex"):
                return visitor.visitReindex(self)
            else:
                return visitor.visitChildren(self)


    class CountContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.CountContext, self).__init__(parser)
            self.toExpr = None # ExprContext
            self.copyFrom(ctx)

        def COUNT(self):
            return self.getToken(VisualFoxpro9Parser.COUNT, 0)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitCount"):
                return visitor.visitCount(self)
            else:
                return visitor.visitChildren(self)


    class ReturnStmtContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ReturnStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(VisualFoxpro9Parser.RETURN, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitReturnStmt"):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)


    class AtPosContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AtPosContext, self).__init__(parser)
            self.toArgs = None # ArgsContext
            self.sayExpr = None # ExprContext
            self.styleExpr = None # ExprContext
            self.copyFrom(ctx)

        def COMMERCIALAT(self):
            return self.getToken(VisualFoxpro9Parser.COMMERCIALAT, 0)
        def args(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,i)

        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def SAY(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SAY)
            else:
                return self.getToken(VisualFoxpro9Parser.SAY, i)
        def STYLE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.STYLE)
            else:
                return self.getToken(VisualFoxpro9Parser.STYLE, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitAtPos"):
                return visitor.visitAtPos(self)
            else:
                return visitor.visitChildren(self)


    class PackContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.PackContext, self).__init__(parser)
            self.workArea = None # SpecialExprContext
            self.tableName = None # SpecialExprContext
            self.copyFrom(ctx)

        def PACK(self):
            return self.getToken(VisualFoxpro9Parser.PACK, 0)
        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def MEMO(self):
            return self.getToken(VisualFoxpro9Parser.MEMO, 0)
        def DBF(self):
            return self.getToken(VisualFoxpro9Parser.DBF, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitPack"):
                return visitor.visitPack(self)
            else:
                return visitor.visitChildren(self)


    class PushContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.PushContext, self).__init__(parser)
            self.copyFrom(ctx)

        def PUSH(self):
            return self.getToken(VisualFoxpro9Parser.PUSH, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitPush"):
                return visitor.visitPush(self)
            else:
                return visitor.visitChildren(self)


    class ListStmtContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ListStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def LIST(self):
            return self.getToken(VisualFoxpro9Parser.LIST, 0)
        def scopeClause(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScopeClauseContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitListStmt"):
                return visitor.visitListStmt(self)
            else:
                return visitor.visitChildren(self)


    class ActivateMenuContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ActivateMenuContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def NOWAIT(self):
            return self.getToken(VisualFoxpro9Parser.NOWAIT, 0)
        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitActivateMenu"):
                return visitor.visitActivateMenu(self)
            else:
                return visitor.visitChildren(self)


    class RaiseErrorContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.RaiseErrorContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitRaiseError"):
                return visitor.visitRaiseError(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AlterTableContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ALTER)
            else:
                return self.getToken(VisualFoxpro9Parser.ALTER, i)
        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def ADD(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ADD)
            else:
                return self.getToken(VisualFoxpro9Parser.ADD, i)
        def COLUMN(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COLUMN)
            else:
                return self.getToken(VisualFoxpro9Parser.COLUMN, i)
        def tableField(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.TableFieldContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.TableFieldContext,i)

        def DROP(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.DROP)
            else:
                return self.getToken(VisualFoxpro9Parser.DROP, i)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def NOT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOT)
            else:
                return self.getToken(VisualFoxpro9Parser.NOT, i)
        def NULL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NULL)
            else:
                return self.getToken(VisualFoxpro9Parser.NULL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitAlterTable"):
                return visitor.visitAlterTable(self)
            else:
                return visitor.visitChildren(self)


    class BrowseContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.BrowseContext, self).__init__(parser)
            self.copyFrom(ctx)

        def BROWSE(self):
            return self.getToken(VisualFoxpro9Parser.BROWSE, 0)
        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitBrowse"):
                return visitor.visitBrowse(self)
            else:
                return visitor.visitChildren(self)


    class GoRecordContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.GoRecordContext, self).__init__(parser)
            self.copyFrom(ctx)

        def GOTO(self):
            return self.getToken(VisualFoxpro9Parser.GOTO, 0)
        def TOP(self):
            return self.getToken(VisualFoxpro9Parser.TOP, 0)
        def BOTTOM(self):
            return self.getToken(VisualFoxpro9Parser.BOTTOM, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def RECORD(self):
            return self.getToken(VisualFoxpro9Parser.RECORD, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitGoRecord"):
                return visitor.visitGoRecord(self)
            else:
                return visitor.visitChildren(self)


    class RestoreCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.RestoreCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def RESTORE(self):
            return self.getToken(VisualFoxpro9Parser.RESTORE, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitRestoreCmd"):
                return visitor.visitRestoreCmd(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.CreateTableContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(VisualFoxpro9Parser.CREATE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)
        def DBF(self):
            return self.getToken(VisualFoxpro9Parser.DBF, 0)
        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)
        def LEFTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.LEFTPAREN, 0)
        def tableField(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.TableFieldContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.TableFieldContext,i)

        def RIGHTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTPAREN, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def FREE(self):
            return self.getToken(VisualFoxpro9Parser.FREE, 0)
        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitCreateTable"):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class ModifyWindowContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ModifyWindowContext, self).__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(VisualFoxpro9Parser.MODIFY, 0)
        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)
        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def FROM(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FROM)
            else:
                return self.getToken(VisualFoxpro9Parser.FROM, i)
        def args(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,i)

        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def AT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.AT)
            else:
                return self.getToken(VisualFoxpro9Parser.AT, i)
        def SIZE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SIZE)
            else:
                return self.getToken(VisualFoxpro9Parser.SIZE, i)
        def FONT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FONT)
            else:
                return self.getToken(VisualFoxpro9Parser.FONT, i)
        def STYLE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.STYLE)
            else:
                return self.getToken(VisualFoxpro9Parser.STYLE, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def TITLE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TITLE)
            else:
                return self.getToken(VisualFoxpro9Parser.TITLE, i)
        def ICON(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ICON)
            else:
                return self.getToken(VisualFoxpro9Parser.ICON, i)
        def FILE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FILE)
            else:
                return self.getToken(VisualFoxpro9Parser.FILE, i)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def FILL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FILL)
            else:
                return self.getToken(VisualFoxpro9Parser.FILL, i)
        def COLOR(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COLOR)
            else:
                return self.getToken(VisualFoxpro9Parser.COLOR, i)
        def SCHEME(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SCHEME)
            else:
                return self.getToken(VisualFoxpro9Parser.SCHEME, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitModifyWindow"):
                return visitor.visitModifyWindow(self)
            else:
                return visitor.visitChildren(self)


    class ActivatePopupContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ActivatePopupContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitActivatePopup"):
                return visitor.visitActivatePopup(self)
            else:
                return visitor.visitChildren(self)


    class LocateContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.LocateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def LOCATE(self):
            return self.getToken(VisualFoxpro9Parser.LOCATE, 0)
        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitLocate"):
                return visitor.visitLocate(self)
            else:
                return visitor.visitChildren(self)


    class InsertContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.InsertContext, self).__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(VisualFoxpro9Parser.INSERT, 0)
        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def VALUES(self):
            return self.getToken(VisualFoxpro9Parser.VALUES, 0)
        def LEFTPAREN(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.LEFTPAREN)
            else:
                return self.getToken(VisualFoxpro9Parser.LEFTPAREN, i)
        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)

        def RIGHTPAREN(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.RIGHTPAREN)
            else:
                return self.getToken(VisualFoxpro9Parser.RIGHTPAREN, i)
        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def MEMVAR(self):
            return self.getToken(VisualFoxpro9Parser.MEMVAR, 0)
        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)
        def specialArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitInsert"):
                return visitor.visitInsert(self)
            else:
                return visitor.visitChildren(self)


    class SumContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.SumContext, self).__init__(parser)
            self.toExpr = None # ExprContext
            self.sumExpr = None # ExprContext
            self.copyFrom(ctx)

        def SUM(self):
            return self.getToken(VisualFoxpro9Parser.SUM, 0)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitSum"):
                return visitor.visitSum(self)
            else:
                return visitor.visitChildren(self)


    class ShowCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ShowCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(VisualFoxpro9Parser.SHOW, 0)
        def GETS(self):
            return self.getToken(VisualFoxpro9Parser.GETS, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitShowCmd"):
                return visitor.visitShowCmd(self)
            else:
                return visitor.visitChildren(self)


    class ActivateScreenContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ActivateScreenContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitActivateScreen"):
                return visitor.visitActivateScreen(self)
            else:
                return visitor.visitChildren(self)


    class PopContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.PopContext, self).__init__(parser)
            self.copyFrom(ctx)

        def POP(self):
            return self.getToken(VisualFoxpro9Parser.POP, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def MASTER(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.MASTER)
            else:
                return self.getToken(VisualFoxpro9Parser.MASTER, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitPop"):
                return visitor.visitPop(self)
            else:
                return visitor.visitChildren(self)


    class ChMkRmDirContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ChMkRmDirContext, self).__init__(parser)
            self.copyFrom(ctx)

        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def CHDIR(self):
            return self.getToken(VisualFoxpro9Parser.CHDIR, 0)
        def MKDIR(self):
            return self.getToken(VisualFoxpro9Parser.MKDIR, 0)
        def RMDIR(self):
            return self.getToken(VisualFoxpro9Parser.RMDIR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitChMkRmDir"):
                return visitor.visitChMkRmDir(self)
            else:
                return visitor.visitChildren(self)


    class ZapTableContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ZapTableContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ZAP(self):
            return self.getToken(VisualFoxpro9Parser.ZAP, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitZapTable"):
                return visitor.visitZapTable(self)
            else:
                return visitor.visitChildren(self)


    class DllDeclareContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DllDeclareContext, self).__init__(parser)
            self.returnType = None # DatatypeContext
            self.alias = None # IdentifierContext
            self.copyFrom(ctx)

        def DECLARE(self):
            return self.getToken(VisualFoxpro9Parser.DECLARE, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)
        def dllArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DllArgsContext,0)

        def datatype(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DatatypeContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitDllDeclare"):
                return visitor.visitDllDeclare(self)
            else:
                return visitor.visitChildren(self)


    class SeekRecordContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.SeekRecordContext, self).__init__(parser)
            self.seekExpr = None # ExprContext
            self.orderExpr = None # ExprContext
            self.tagName = None # SpecialExprContext
            self.cdxFileExpr = None # SpecialExprContext
            self.idxFileExpr = None # SpecialExprContext
            self.tablenameExpr = None # SpecialExprContext
            self.copyFrom(ctx)

        def SEEK(self):
            return self.getToken(VisualFoxpro9Parser.SEEK, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)
        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)
        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)
        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitSeekRecord"):
                return visitor.visitSeekRecord(self)
            else:
                return visitor.visitChildren(self)


    class ActivateWindowContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ActivateWindowContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def WINDOW(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WINDOW)
            else:
                return self.getToken(VisualFoxpro9Parser.WINDOW, i)
        def parameters(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParametersContext,0)

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def NOSHOW(self):
            return self.getToken(VisualFoxpro9Parser.NOSHOW, 0)
        def BOTTOM(self):
            return self.getToken(VisualFoxpro9Parser.BOTTOM, 0)
        def TOP(self):
            return self.getToken(VisualFoxpro9Parser.TOP, 0)
        def SAME(self):
            return self.getToken(VisualFoxpro9Parser.SAME, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitActivateWindow"):
                return visitor.visitActivateWindow(self)
            else:
                return visitor.visitChildren(self)


    class AssertContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AssertContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ASSERT(self):
            return self.getToken(VisualFoxpro9Parser.ASSERT, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitAssert"):
                return visitor.visitAssert(self)
            else:
                return visitor.visitChildren(self)


    class OnStmtContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.OnStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)
        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def SELECTION(self):
            return self.getToken(VisualFoxpro9Parser.SELECTION, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)

        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def LABEL(self):
            return self.getToken(VisualFoxpro9Parser.LABEL, 0)
        def PLUS_SIGN(self):
            return self.getToken(VisualFoxpro9Parser.PLUS_SIGN, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitOnStmt"):
                return visitor.visitOnStmt(self)
            else:
                return visitor.visitChildren(self)


    class GatherExprContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.GatherExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def GATHER(self):
            return self.getToken(VisualFoxpro9Parser.GATHER, 0)
        def FIELDS(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FIELDS)
            else:
                return self.getToken(VisualFoxpro9Parser.FIELDS, i)
        def args(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,i)

        def MEMO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.MEMO)
            else:
                return self.getToken(VisualFoxpro9Parser.MEMO, i)
        def MEMVAR(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.MEMVAR)
            else:
                return self.getToken(VisualFoxpro9Parser.MEMVAR, i)
        def NAME(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NAME)
            else:
                return self.getToken(VisualFoxpro9Parser.NAME, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def FROM(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FROM)
            else:
                return self.getToken(VisualFoxpro9Parser.FROM, i)
        def LIKE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.LIKE)
            else:
                return self.getToken(VisualFoxpro9Parser.LIKE, i)
        def EXCEPT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.EXCEPT)
            else:
                return self.getToken(VisualFoxpro9Parser.EXCEPT, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitGatherExpr"):
                return visitor.visitGatherExpr(self)
            else:
                return visitor.visitChildren(self)


    class FuncDoContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.FuncDoContext, self).__init__(parser)
            self.nameId = None # IdentifierContext
            self.toId = None # IdentifierContext
            self.copyFrom(ctx)

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)
        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def QUESTION(self):
            return self.getToken(VisualFoxpro9Parser.QUESTION, 0)
        def NAME(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NAME)
            else:
                return self.getToken(VisualFoxpro9Parser.NAME, i)
        def WITH(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WITH)
            else:
                return self.getToken(VisualFoxpro9Parser.WITH, i)
        def args(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,i)

        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def NOSHOW(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOSHOW)
            else:
                return self.getToken(VisualFoxpro9Parser.NOSHOW, i)
        def IN(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.IN)
            else:
                return self.getToken(VisualFoxpro9Parser.IN, i)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def LINKED(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.LINKED)
            else:
                return self.getToken(VisualFoxpro9Parser.LINKED, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitFuncDo"):
                return visitor.visitFuncDo(self)
            else:
                return visitor.visitChildren(self)


    class CloseStmtContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.CloseStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CLOSE(self):
            return self.getToken(VisualFoxpro9Parser.CLOSE, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)
        def INDEXES(self):
            return self.getToken(VisualFoxpro9Parser.INDEXES, 0)
        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCloseStmt"):
                return visitor.visitCloseStmt(self)
            else:
                return visitor.visitChildren(self)


    class RetryContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.RetryContext, self).__init__(parser)
            self.copyFrom(ctx)

        def RETRY(self):
            return self.getToken(VisualFoxpro9Parser.RETRY, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitRetry"):
                return visitor.visitRetry(self)
            else:
                return visitor.visitChildren(self)


    class DeleteFileContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DeleteFileContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ERASE(self):
            return self.getToken(VisualFoxpro9Parser.ERASE, 0)
        def DELETE(self):
            return self.getToken(VisualFoxpro9Parser.DELETE, 0)
        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def QUESTION(self):
            return self.getToken(VisualFoxpro9Parser.QUESTION, 0)
        def RECYCLE(self):
            return self.getToken(VisualFoxpro9Parser.RECYCLE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDeleteFile"):
                return visitor.visitDeleteFile(self)
            else:
                return visitor.visitChildren(self)


    class DefinePopupContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DefinePopupContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def SHADOW(self):
            return self.getToken(VisualFoxpro9Parser.SHADOW, 0)
        def MARGIN(self):
            return self.getToken(VisualFoxpro9Parser.MARGIN, 0)
        def RELATIVE(self):
            return self.getToken(VisualFoxpro9Parser.RELATIVE, 0)
        def COLOR(self):
            return self.getToken(VisualFoxpro9Parser.COLOR, 0)
        def SCHEME(self):
            return self.getToken(VisualFoxpro9Parser.SCHEME, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefinePopup"):
                return visitor.visitDefinePopup(self)
            else:
                return visitor.visitChildren(self)


    class UpdateCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.UpdateCmdContext, self).__init__(parser)
            self.tableExpr = None # SpecialExprContext
            self.fromArgs = None # SpecialArgsContext
            self.joinArgs = None # SpecialArgsContext
            self.whereExpr = None # ExprContext
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(VisualFoxpro9Parser.UPDATE, 0)
        def SET(self):
            return self.getToken(VisualFoxpro9Parser.SET, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def EQUALS(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.EQUALS)
            else:
                return self.getToken(VisualFoxpro9Parser.EQUALS, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)
        def FROM(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FROM)
            else:
                return self.getToken(VisualFoxpro9Parser.FROM, i)
        def JOIN(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.JOIN)
            else:
                return self.getToken(VisualFoxpro9Parser.JOIN, i)
        def WHERE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WHERE)
            else:
                return self.getToken(VisualFoxpro9Parser.WHERE, i)
        def specialArgs(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,i)

        def FORCE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FORCE)
            else:
                return self.getToken(VisualFoxpro9Parser.FORCE, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitUpdateCmd"):
                return visitor.visitUpdateCmd(self)
            else:
                return visitor.visitChildren(self)


    class KeyboardContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.KeyboardContext, self).__init__(parser)
            self.copyFrom(ctx)

        def KEYBOARD(self):
            return self.getToken(VisualFoxpro9Parser.KEYBOARD, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def PLAIN(self):
            return self.getToken(VisualFoxpro9Parser.PLAIN, 0)
        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitKeyboard"):
                return visitor.visitKeyboard(self)
            else:
                return visitor.visitChildren(self)


    class UnlockCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.UnlockCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def UNLOCK(self):
            return self.getToken(VisualFoxpro9Parser.UNLOCK, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitUnlockCmd"):
                return visitor.visitUnlockCmd(self)
            else:
                return visitor.visitChildren(self)


    class ProgramControlContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ProgramControlContext, self).__init__(parser)
            self.copyFrom(ctx)

        def PROGRAMCONTROL(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAMCONTROL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitProgramControl"):
                return visitor.visitProgramControl(self)
            else:
                return visitor.visitChildren(self)


    class SkipRecordContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.SkipRecordContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SKIPKW(self):
            return self.getToken(VisualFoxpro9Parser.SKIPKW, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitSkipRecord"):
                return visitor.visitSkipRecord(self)
            else:
                return visitor.visitChildren(self)


    class TextBlockContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.TextBlockContext, self).__init__(parser)
            self.flagExpr = None # ExprContext
            self.pretext = None # ExprContext
            self.copyFrom(ctx)

        def TEXT(self):
            return self.getToken(VisualFoxpro9Parser.TEXT, 0)
        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)
        def textChunk(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TextChunkContext,0)

        def ENDTEXT(self):
            return self.getToken(VisualFoxpro9Parser.ENDTEXT, 0)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def idAttr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdAttrContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,i)

        def ADDITIVE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ADDITIVE)
            else:
                return self.getToken(VisualFoxpro9Parser.ADDITIVE, i)
        def TEXTMERGE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TEXTMERGE)
            else:
                return self.getToken(VisualFoxpro9Parser.TEXTMERGE, i)
        def NOSHOW(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOSHOW)
            else:
                return self.getToken(VisualFoxpro9Parser.NOSHOW, i)
        def FLAGS(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FLAGS)
            else:
                return self.getToken(VisualFoxpro9Parser.FLAGS, i)
        def PRETEXT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.PRETEXT)
            else:
                return self.getToken(VisualFoxpro9Parser.PRETEXT, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitTextBlock"):
                return visitor.visitTextBlock(self)
            else:
                return visitor.visitChildren(self)


    class DeclarationContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DeclarationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def declarationItem(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.DeclarationItemContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.DeclarationItemContext,i)

        def EXTERNAL(self):
            return self.getToken(VisualFoxpro9Parser.EXTERNAL, 0)
        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def DIMENSION(self):
            return self.getToken(VisualFoxpro9Parser.DIMENSION, 0)
        def DECLARE(self):
            return self.getToken(VisualFoxpro9Parser.DECLARE, 0)
        def PARAMETER(self):
            return self.getToken(VisualFoxpro9Parser.PARAMETER, 0)
        def SCOPE(self):
            return self.getToken(VisualFoxpro9Parser.SCOPE, 0)
        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)
        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDeclaration"):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)


    class SortCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.SortCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SORT(self):
            return self.getToken(VisualFoxpro9Parser.SORT, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def FORWARDSLASH(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FORWARDSLASH)
            else:
                return self.getToken(VisualFoxpro9Parser.FORWARDSLASH, i)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)
        def ASCENDING(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ASCENDING)
            else:
                return self.getToken(VisualFoxpro9Parser.ASCENDING, i)
        def DESCENDING(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.DESCENDING)
            else:
                return self.getToken(VisualFoxpro9Parser.DESCENDING, i)
        def FIELDS(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FIELDS)
            else:
                return self.getToken(VisualFoxpro9Parser.FIELDS, i)
        def args(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,i)

        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def LIKE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.LIKE)
            else:
                return self.getToken(VisualFoxpro9Parser.LIKE, i)
        def EXCEPT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.EXCEPT)
            else:
                return self.getToken(VisualFoxpro9Parser.EXCEPT, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitSortCmd"):
                return visitor.visitSortCmd(self)
            else:
                return visitor.visitChildren(self)


    class DefinePadContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DefinePadContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def AT(self):
            return self.getToken(VisualFoxpro9Parser.AT, 0)
        def NUMBER_LITERAL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NUMBER_LITERAL)
            else:
                return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, i)
        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)
        def BEFORE(self):
            return self.getToken(VisualFoxpro9Parser.BEFORE, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def AFTER(self):
            return self.getToken(VisualFoxpro9Parser.AFTER, 0)
        def NEGOTIATE(self):
            return self.getToken(VisualFoxpro9Parser.NEGOTIATE, 0)
        def FONT(self):
            return self.getToken(VisualFoxpro9Parser.FONT, 0)
        def STYLE(self):
            return self.getToken(VisualFoxpro9Parser.STYLE, 0)
        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def MARK(self):
            return self.getToken(VisualFoxpro9Parser.MARK, 0)
        def SKIPKW(self):
            return self.getToken(VisualFoxpro9Parser.SKIPKW, 0)
        def COLOR(self):
            return self.getToken(VisualFoxpro9Parser.COLOR, 0)
        def SCHEME(self):
            return self.getToken(VisualFoxpro9Parser.SCHEME, 0)
        def PLUS_SIGN(self):
            return self.getToken(VisualFoxpro9Parser.PLUS_SIGN, 0)
        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefinePad"):
                return visitor.visitDefinePad(self)
            else:
                return visitor.visitChildren(self)


    class DefineBarContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DefineBarContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefineBar"):
                return visitor.visitDefineBar(self)
            else:
                return visitor.visitChildren(self)


    class PrintStmtContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.PrintStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def QUESTION(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.QUESTION)
            else:
                return self.getToken(VisualFoxpro9Parser.QUESTION, i)
        def DEBUGOUT(self):
            return self.getToken(VisualFoxpro9Parser.DEBUGOUT, 0)
        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitPrintStmt"):
                return visitor.visitPrintStmt(self)
            else:
                return visitor.visitChildren(self)


    class CopyMoveFileContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.CopyMoveFileContext, self).__init__(parser)
            self.copyFrom(ctx)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def RENAME(self):
            return self.getToken(VisualFoxpro9Parser.RENAME, 0)
        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)
        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCopyMoveFile"):
                return visitor.visitCopyMoveFile(self)
            else:
                return visitor.visitChildren(self)


    class AddObjectContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AddObjectContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(VisualFoxpro9Parser.ADD, 0)
        def OBJECT(self):
            return self.getToken(VisualFoxpro9Parser.OBJECT, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)

        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)
        def idAttr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdAttrContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,i)

        def EQUALS(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.EQUALS)
            else:
                return self.getToken(VisualFoxpro9Parser.EQUALS, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitAddObject"):
                return visitor.visitAddObject(self)
            else:
                return visitor.visitChildren(self)


    class ReportContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ReportContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REPORT(self):
            return self.getToken(VisualFoxpro9Parser.REPORT, 0)
        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)
        def QUESTION(self):
            return self.getToken(VisualFoxpro9Parser.QUESTION, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def NOEJECT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOEJECT)
            else:
                return self.getToken(VisualFoxpro9Parser.NOEJECT, i)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def PRINTER(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.PRINTER)
            else:
                return self.getToken(VisualFoxpro9Parser.PRINTER, i)
        def NOCONSOLE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOCONSOLE)
            else:
                return self.getToken(VisualFoxpro9Parser.NOCONSOLE, i)
        def PROMPT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.PROMPT)
            else:
                return self.getToken(VisualFoxpro9Parser.PROMPT, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitReport"):
                return visitor.visitReport(self)
            else:
                return visitor.visitChildren(self)


    class ModifyFileContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ModifyFileContext, self).__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(VisualFoxpro9Parser.MODIFY, 0)
        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)
        def COMMAND(self):
            return self.getToken(VisualFoxpro9Parser.COMMAND, 0)
        def QUESTION(self):
            return self.getToken(VisualFoxpro9Parser.QUESTION, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def IN(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.IN)
            else:
                return self.getToken(VisualFoxpro9Parser.IN, i)
        def AS(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.AS)
            else:
                return self.getToken(VisualFoxpro9Parser.AS, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def WINDOW(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WINDOW)
            else:
                return self.getToken(VisualFoxpro9Parser.WINDOW, i)
        def SCREEN(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SCREEN)
            else:
                return self.getToken(VisualFoxpro9Parser.SCREEN, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitModifyFile"):
                return visitor.visitModifyFile(self)
            else:
                return visitor.visitChildren(self)


    class CompileCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.CompileCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def COMPILE(self):
            return self.getToken(VisualFoxpro9Parser.COMPILE, 0)
        def ALL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ALL)
            else:
                return self.getToken(VisualFoxpro9Parser.ALL, i)
        def ENCRYPT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ENCRYPT)
            else:
                return self.getToken(VisualFoxpro9Parser.ENCRYPT, i)
        def NODEBUG(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NODEBUG)
            else:
                return self.getToken(VisualFoxpro9Parser.NODEBUG, i)
        def AS(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.AS)
            else:
                return self.getToken(VisualFoxpro9Parser.AS, i)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)
        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)
        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)
        def LABEL(self):
            return self.getToken(VisualFoxpro9Parser.LABEL, 0)
        def REPORT(self):
            return self.getToken(VisualFoxpro9Parser.REPORT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCompileCmd"):
                return visitor.visitCompileCmd(self)
            else:
                return visitor.visitChildren(self)


    class HideCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.HideCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def HIDE(self):
            return self.getToken(VisualFoxpro9Parser.HIDE, 0)
        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)
        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitHideCmd"):
                return visitor.visitHideCmd(self)
            else:
                return visitor.visitChildren(self)


    class AppendContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AppendContext, self).__init__(parser)
            self.copyFrom(ctx)

        def APPEND(self):
            return self.getToken(VisualFoxpro9Parser.APPEND, 0)
        def BLANK(self):
            return self.getToken(VisualFoxpro9Parser.BLANK, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def NOMENU(self):
            return self.getToken(VisualFoxpro9Parser.NOMENU, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitAppend"):
                return visitor.visitAppend(self)
            else:
                return visitor.visitChildren(self)


    class ScatterExprContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ScatterExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SCATTER(self):
            return self.getToken(VisualFoxpro9Parser.SCATTER, 0)
        def FIELDS(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FIELDS)
            else:
                return self.getToken(VisualFoxpro9Parser.FIELDS, i)
        def args(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,i)

        def MEMO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.MEMO)
            else:
                return self.getToken(VisualFoxpro9Parser.MEMO, i)
        def BLANK(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.BLANK)
            else:
                return self.getToken(VisualFoxpro9Parser.BLANK, i)
        def MEMVAR(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.MEMVAR)
            else:
                return self.getToken(VisualFoxpro9Parser.MEMVAR, i)
        def NAME(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NAME)
            else:
                return self.getToken(VisualFoxpro9Parser.NAME, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def ADDITIVE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ADDITIVE)
            else:
                return self.getToken(VisualFoxpro9Parser.ADDITIVE, i)
        def LIKE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.LIKE)
            else:
                return self.getToken(VisualFoxpro9Parser.LIKE, i)
        def EXCEPT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.EXCEPT)
            else:
                return self.getToken(VisualFoxpro9Parser.EXCEPT, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitScatterExpr"):
                return visitor.visitScatterExpr(self)
            else:
                return visitor.visitChildren(self)


    class AssignContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AssignContext, self).__init__(parser)
            self.copyFrom(ctx)

        def STORE(self):
            return self.getToken(VisualFoxpro9Parser.STORE, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def idAttr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdAttrContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,i)

        def EQUALS(self):
            return self.getToken(VisualFoxpro9Parser.EQUALS, 0)
        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitAssign"):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)


    class DeleteRecordContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DeleteRecordContext, self).__init__(parser)
            self.inExpr = None # SpecialExprContext
            self.copyFrom(ctx)

        def RECALL(self):
            return self.getToken(VisualFoxpro9Parser.RECALL, 0)
        def DELETE(self):
            return self.getToken(VisualFoxpro9Parser.DELETE, 0)
        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def IN(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.IN)
            else:
                return self.getToken(VisualFoxpro9Parser.IN, i)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitDeleteRecord"):
                return visitor.visitDeleteRecord(self)
            else:
                return visitor.visitChildren(self)


    class ExprCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ExprCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def EQUALS(self):
            return self.getToken(VisualFoxpro9Parser.EQUALS, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitExprCmd"):
                return visitor.visitExprCmd(self)
            else:
                return visitor.visitChildren(self)



    def cmd(self):

        localctx = VisualFoxpro9Parser.CmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_cmd)
        self._la = 0 # Token type
        try:
            self.state = 1546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.AddObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 449
                self.match(VisualFoxpro9Parser.ADD)
                self.state = 450
                self.match(VisualFoxpro9Parser.OBJECT)
                self.state = 451
                self.identifier()
                self.state = 452
                self.asType()
                self.state = 467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.WITH:
                    self.state = 453
                    self.match(VisualFoxpro9Parser.WITH)
                    self.state = 454
                    self.idAttr()
                    self.state = 455
                    self.match(VisualFoxpro9Parser.EQUALS)
                    self.state = 456
                    self.expr(0)
                    self.state = 464
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==VisualFoxpro9Parser.COMMA:
                        self.state = 457
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 458
                        self.idAttr()
                        self.state = 459
                        self.match(VisualFoxpro9Parser.EQUALS)
                        self.state = 460
                        self.expr(0)
                        self.state = 466
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.ProgramControlContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 469
                self.match(VisualFoxpro9Parser.PROGRAMCONTROL)
                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.AtPosContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 470
                self.match(VisualFoxpro9Parser.COMMERCIALAT)
                self.state = 471
                self.args()
                self.state = 485
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.CLEAR]:
                    self.state = 472
                    self.match(VisualFoxpro9Parser.CLEAR)
                    self.state = 475
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.TO:
                        self.state = 473
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 474
                        localctx.toArgs = self.args()


                    pass
                elif token in [VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.STYLE]:
                    self.state = 481 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 481
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [VisualFoxpro9Parser.SAY]:
                            self.state = 477
                            self.match(VisualFoxpro9Parser.SAY)
                            self.state = 478
                            localctx.sayExpr = self.expr(0)
                            pass
                        elif token in [VisualFoxpro9Parser.STYLE]:
                            self.state = 479
                            self.match(VisualFoxpro9Parser.STYLE)
                            self.state = 480
                            localctx.styleExpr = self.expr(0)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 483 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==VisualFoxpro9Parser.SAY or _la==VisualFoxpro9Parser.STYLE):
                            break

                    pass
                elif token in [VisualFoxpro9Parser.EOF, VisualFoxpro9Parser.NL]:
                    pass
                else:
                    pass
                pass

            elif la_ == 4:
                localctx = VisualFoxpro9Parser.FuncDoContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 487
                self.match(VisualFoxpro9Parser.DO)
                self.state = 518
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 488
                    self.match(VisualFoxpro9Parser.FORM)
                    self.state = 491
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.QUESTION]:
                        self.state = 489
                        self.match(VisualFoxpro9Parser.QUESTION)
                        pass
                    elif token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.HASH, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.ASSERTS, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.CHDIR, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.COMMAND, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.COMPILE, VisualFoxpro9Parser.CONSOLE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.DATASESSION, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.DEBUG, VisualFoxpro9Parser.DEBUGOUT, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.DOEVENTS, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENCRYPT, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.ENDTEXT, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.FILL, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.FLAGS, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.FORCE, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.FOXOBJECT, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.GETS, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.HIDE, VisualFoxpro9Parser.ICON, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.JOIN, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.LINKED, VisualFoxpro9Parser.LIST, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MASTER, VisualFoxpro9Parser.MAX, VisualFoxpro9Parser.MEMO, VisualFoxpro9Parser.MEMORY, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.MENUS, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.MIN, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.MODIFY, VisualFoxpro9Parser.MULTILOCKS, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.NODEBUG, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.NORM, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.NOUPDATE, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.PRETEXT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.RESOURCES, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.RESTORE, VisualFoxpro9Parser.RETRY, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.SAFETY, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.SHOW, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.SIZE, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.SORT, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.TABLEPROMPT, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.TEXT, VisualFoxpro9Parser.TEXTMERGE, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.TITLE, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.UNLOCK, VisualFoxpro9Parser.UPDATE, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ZOOM, VisualFoxpro9Parser.ID]:
                        self.state = 490
                        self.specialExpr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 505
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==VisualFoxpro9Parser.NAME or _la==VisualFoxpro9Parser.NOSHOW or _la==VisualFoxpro9Parser.TO or _la==VisualFoxpro9Parser.WITH:
                        self.state = 503
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [VisualFoxpro9Parser.NAME]:
                            self.state = 493
                            self.match(VisualFoxpro9Parser.NAME)
                            self.state = 494
                            localctx.nameId = self.identifier()
                            self.state = 496
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==VisualFoxpro9Parser.LINKED:
                                self.state = 495
                                self.match(VisualFoxpro9Parser.LINKED)


                            pass
                        elif token in [VisualFoxpro9Parser.WITH]:
                            self.state = 498
                            self.match(VisualFoxpro9Parser.WITH)
                            self.state = 499
                            self.args()
                            pass
                        elif token in [VisualFoxpro9Parser.TO]:
                            self.state = 500
                            self.match(VisualFoxpro9Parser.TO)
                            self.state = 501
                            localctx.toId = self.identifier()
                            pass
                        elif token in [VisualFoxpro9Parser.NOSHOW]:
                            self.state = 502
                            self.match(VisualFoxpro9Parser.NOSHOW)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 507
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 508
                    self.specialExpr()
                    self.state = 515
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==VisualFoxpro9Parser.IN or _la==VisualFoxpro9Parser.WITH:
                        self.state = 513
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [VisualFoxpro9Parser.IN]:
                            self.state = 509
                            self.match(VisualFoxpro9Parser.IN)
                            self.state = 510
                            self.specialExpr()
                            pass
                        elif token in [VisualFoxpro9Parser.WITH]:
                            self.state = 511
                            self.match(VisualFoxpro9Parser.WITH)
                            self.state = 512
                            self.args()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 517
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                pass

            elif la_ == 5:
                localctx = VisualFoxpro9Parser.AssignContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 535
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 520
                    self.match(VisualFoxpro9Parser.STORE)
                    self.state = 521
                    self.expr(0)
                    self.state = 522
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 523
                    self.idAttr()
                    self.state = 528
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==VisualFoxpro9Parser.COMMA:
                        self.state = 524
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 525
                        self.idAttr()
                        self.state = 530
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 531
                    self.idAttr()
                    self.state = 532
                    self.match(VisualFoxpro9Parser.EQUALS)
                    self.state = 533
                    self.expr(0)
                    pass


                pass

            elif la_ == 6:
                localctx = VisualFoxpro9Parser.DeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 557
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 544
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.SCOPE]:
                        self.state = 537
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.EXTERNAL or _la==VisualFoxpro9Parser.SCOPE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 539
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                        if la_ == 1:
                            self.state = 538
                            _la = self._input.LA(1)
                            if not(((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & ((1 << (VisualFoxpro9Parser.ARRAY - 49)) | (1 << (VisualFoxpro9Parser.DECLARE - 49)) | (1 << (VisualFoxpro9Parser.DIMENSION - 49)))) != 0)):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        pass
                    elif token in [VisualFoxpro9Parser.DIMENSION]:
                        self.state = 541
                        self.match(VisualFoxpro9Parser.DIMENSION)
                        pass
                    elif token in [VisualFoxpro9Parser.DECLARE]:
                        self.state = 542
                        self.match(VisualFoxpro9Parser.DECLARE)
                        pass
                    elif token in [VisualFoxpro9Parser.PARAMETER]:
                        self.state = 543
                        self.match(VisualFoxpro9Parser.PARAMETER)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 546
                    self.declarationItem()
                    self.state = 551
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==VisualFoxpro9Parser.COMMA:
                        self.state = 547
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 548
                        self.declarationItem()
                        self.state = 553
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 554
                    self.match(VisualFoxpro9Parser.EXTERNAL)
                    self.state = 555
                    self.match(VisualFoxpro9Parser.PROCEDURE)
                    self.state = 556
                    self.specialExpr()
                    pass


                pass

            elif la_ == 7:
                localctx = VisualFoxpro9Parser.PrintStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 564
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.QUESTION]:
                    self.state = 559
                    self.match(VisualFoxpro9Parser.QUESTION)
                    self.state = 561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.QUESTION:
                        self.state = 560
                        self.match(VisualFoxpro9Parser.QUESTION)


                    pass
                elif token in [VisualFoxpro9Parser.DEBUGOUT]:
                    self.state = 563
                    self.match(VisualFoxpro9Parser.DEBUGOUT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 566
                    self.args()


                pass

            elif la_ == 8:
                localctx = VisualFoxpro9Parser.WaitCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 569
                self.match(VisualFoxpro9Parser.WAIT)
                self.state = 588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 586
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                    if la_ == 1:
                        self.state = 570
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 571
                        localctx.toExpr = self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 572
                        self.match(VisualFoxpro9Parser.WINDOW)
                        self.state = 578
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                        if la_ == 1:
                            self.state = 573
                            self.match(VisualFoxpro9Parser.AT)
                            self.state = 574
                            localctx.atExpr1 = self.expr(0)
                            self.state = 575
                            self.match(VisualFoxpro9Parser.COMMA)
                            self.state = 576
                            localctx.atExpr2 = self.expr(0)


                        pass

                    elif la_ == 3:
                        self.state = 580
                        self.match(VisualFoxpro9Parser.NOWAIT)
                        pass

                    elif la_ == 4:
                        self.state = 581
                        self.match(VisualFoxpro9Parser.CLEAR)
                        pass

                    elif la_ == 5:
                        self.state = 582
                        self.match(VisualFoxpro9Parser.NOCLEAR)
                        pass

                    elif la_ == 6:
                        self.state = 583
                        self.match(VisualFoxpro9Parser.TIMEOUT)
                        self.state = 584
                        localctx.timeout = self.expr(0)
                        pass

                    elif la_ == 7:
                        self.state = 585
                        localctx.message = self.expr(0)
                        pass


                    self.state = 590
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 9:
                localctx = VisualFoxpro9Parser.DeleteFileContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 594
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ERASE]:
                    self.state = 591
                    self.match(VisualFoxpro9Parser.ERASE)
                    pass
                elif token in [VisualFoxpro9Parser.DELETE]:
                    self.state = 592
                    self.match(VisualFoxpro9Parser.DELETE)
                    self.state = 593
                    self.match(VisualFoxpro9Parser.FILE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 598
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.HASH, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.ASSERTS, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.CHDIR, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.COMMAND, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.COMPILE, VisualFoxpro9Parser.CONSOLE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.DATASESSION, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.DEBUG, VisualFoxpro9Parser.DEBUGOUT, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.DOEVENTS, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENCRYPT, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.ENDTEXT, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.FILL, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.FLAGS, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.FORCE, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.FOXOBJECT, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.GETS, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.HIDE, VisualFoxpro9Parser.ICON, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.JOIN, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.LINKED, VisualFoxpro9Parser.LIST, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MASTER, VisualFoxpro9Parser.MAX, VisualFoxpro9Parser.MEMO, VisualFoxpro9Parser.MEMORY, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.MENUS, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.MIN, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.MODIFY, VisualFoxpro9Parser.MULTILOCKS, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.NODEBUG, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.NORM, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.NOUPDATE, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.PRETEXT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.RESOURCES, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.RESTORE, VisualFoxpro9Parser.RETRY, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.SAFETY, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.SHOW, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.SIZE, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.SORT, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.TABLEPROMPT, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.TEXT, VisualFoxpro9Parser.TEXTMERGE, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.TITLE, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.UNLOCK, VisualFoxpro9Parser.UPDATE, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ZOOM, VisualFoxpro9Parser.ID]:
                    self.state = 596
                    self.specialExpr()
                    pass
                elif token in [VisualFoxpro9Parser.QUESTION]:
                    self.state = 597
                    self.match(VisualFoxpro9Parser.QUESTION)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.RECYCLE:
                    self.state = 600
                    self.match(VisualFoxpro9Parser.RECYCLE)


                pass

            elif la_ == 10:
                localctx = VisualFoxpro9Parser.CopyMoveFileContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 606
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.RENAME]:
                    self.state = 603
                    self.match(VisualFoxpro9Parser.RENAME)
                    pass
                elif token in [VisualFoxpro9Parser.COPY]:
                    self.state = 604
                    self.match(VisualFoxpro9Parser.COPY)
                    self.state = 605
                    self.match(VisualFoxpro9Parser.FILE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 608
                self.specialExpr()
                self.state = 609
                self.match(VisualFoxpro9Parser.TO)
                self.state = 610
                self.specialExpr()
                pass

            elif la_ == 11:
                localctx = VisualFoxpro9Parser.ChMkRmDirContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 612
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.CHDIR or _la==VisualFoxpro9Parser.MKDIR or _la==VisualFoxpro9Parser.RMDIR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 613
                self.specialExpr()
                pass

            elif la_ == 12:
                localctx = VisualFoxpro9Parser.ReturnStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 614
                self.match(VisualFoxpro9Parser.RETURN)
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 615
                    self.expr(0)


                pass

            elif la_ == 13:
                localctx = VisualFoxpro9Parser.OnStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 618
                self.match(VisualFoxpro9Parser.ON)
                self.state = 652
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 623
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.PAD]:
                        self.state = 619
                        self.match(VisualFoxpro9Parser.PAD)
                        self.state = 620
                        self.specialExpr()
                        pass
                    elif token in [VisualFoxpro9Parser.BAR]:
                        self.state = 621
                        self.match(VisualFoxpro9Parser.BAR)
                        self.state = 622
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 625
                    self.match(VisualFoxpro9Parser.OF)
                    self.state = 626
                    self.specialExpr()
                    self.state = 630
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ACTIVATE:
                        self.state = 627
                        self.match(VisualFoxpro9Parser.ACTIVATE)
                        self.state = 628
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.MENU or _la==VisualFoxpro9Parser.POPUP):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 629
                        self.specialExpr()


                    pass

                elif la_ == 2:
                    self.state = 647
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                    if la_ == 1:
                        self.state = 632
                        self.match(VisualFoxpro9Parser.KEY)
                        self.state = 639
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                        if la_ == 1:
                            self.state = 633
                            self.match(VisualFoxpro9Parser.LABEL)
                            self.state = 634
                            self.identifier()
                            self.state = 637
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==VisualFoxpro9Parser.PLUS_SIGN:
                                self.state = 635
                                self.match(VisualFoxpro9Parser.PLUS_SIGN)
                                self.state = 636
                                self.identifier()




                        pass

                    elif la_ == 2:
                        self.state = 641
                        self.match(VisualFoxpro9Parser.SELECTION)
                        self.state = 642
                        self.match(VisualFoxpro9Parser.BAR)
                        self.state = 643
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 644
                        self.match(VisualFoxpro9Parser.OF)
                        self.state = 645
                        self.specialExpr()
                        pass

                    elif la_ == 3:
                        self.state = 646
                        self.identifier()
                        pass


                    self.state = 650
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                        self.state = 649
                        self.cmd()


                    pass


                pass

            elif la_ == 14:
                localctx = VisualFoxpro9Parser.ReleaseContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 654
                self.match(VisualFoxpro9Parser.RELEASE)
                self.state = 665
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 655
                    self.match(VisualFoxpro9Parser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 657
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                    if la_ == 1:
                        self.state = 656
                        localctx.vartype = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.CLASSLIB or _la==VisualFoxpro9Parser.PROCEDURE):
                            localctx.vartype = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 659
                    self.args()
                    pass

                elif la_ == 3:
                    self.state = 660
                    self.match(VisualFoxpro9Parser.POPUP)
                    self.state = 661
                    self.args()
                    self.state = 663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.EXTENDED:
                        self.state = 662
                        self.match(VisualFoxpro9Parser.EXTENDED)


                    pass


                pass

            elif la_ == 15:
                localctx = VisualFoxpro9Parser.SetStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 667
                self.match(VisualFoxpro9Parser.SET)
                self.state = 668
                self.setCmd()
                pass

            elif la_ == 16:
                localctx = VisualFoxpro9Parser.PushContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 669
                self.match(VisualFoxpro9Parser.PUSH)
                self.state = 676
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.KEY]:
                    self.state = 670
                    self.match(VisualFoxpro9Parser.KEY)
                    self.state = 672
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.CLEAR:
                        self.state = 671
                        self.match(VisualFoxpro9Parser.CLEAR)


                    pass
                elif token in [VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.POPUP]:
                    self.state = 674
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.MENU or _la==VisualFoxpro9Parser.POPUP):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 675
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 17:
                localctx = VisualFoxpro9Parser.PopContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 678
                self.match(VisualFoxpro9Parser.POP)
                self.state = 694
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.KEY]:
                    self.state = 679
                    self.match(VisualFoxpro9Parser.KEY)
                    self.state = 681
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ALL:
                        self.state = 680
                        self.match(VisualFoxpro9Parser.ALL)


                    pass
                elif token in [VisualFoxpro9Parser.MENU]:
                    self.state = 683
                    self.match(VisualFoxpro9Parser.MENU)
                    self.state = 689
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                        self.state = 687
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                        if la_ == 1:
                            self.state = 684
                            self.identifier()
                            pass

                        elif la_ == 2:
                            self.state = 685
                            self.match(VisualFoxpro9Parser.TO)
                            self.state = 686
                            self.match(VisualFoxpro9Parser.MASTER)
                            pass


                        self.state = 691
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [VisualFoxpro9Parser.POPUP]:
                    self.state = 692
                    self.match(VisualFoxpro9Parser.POPUP)
                    self.state = 693
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 18:
                localctx = VisualFoxpro9Parser.KeyboardContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 696
                self.match(VisualFoxpro9Parser.KEYBOARD)
                self.state = 697
                self.expr(0)
                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.PLAIN:
                    self.state = 698
                    self.match(VisualFoxpro9Parser.PLAIN)


                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.CLEAR:
                    self.state = 701
                    self.match(VisualFoxpro9Parser.CLEAR)


                pass

            elif la_ == 19:
                localctx = VisualFoxpro9Parser.DefineMenuContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 704
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 705
                self.match(VisualFoxpro9Parser.MENU)
                self.state = 706
                self.specialExpr()

                self.state = 707
                self.match(VisualFoxpro9Parser.BAR)
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.AT:
                    self.state = 708
                    self.match(VisualFoxpro9Parser.AT)
                    self.state = 709
                    self.match(VisualFoxpro9Parser.LINE)
                    self.state = 710
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 713
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 719
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                    if la_ == 1:
                        self.state = 714
                        self.match(VisualFoxpro9Parser.SCREEN)
                        pass

                    elif la_ == 2:
                        self.state = 716
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                        if la_ == 1:
                            self.state = 715
                            self.match(VisualFoxpro9Parser.WINDOW)


                        self.state = 718
                        self.specialExpr()
                        pass




                self.state = 724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NOMARGIN:
                    self.state = 723
                    self.match(VisualFoxpro9Parser.NOMARGIN)


                pass

            elif la_ == 20:
                localctx = VisualFoxpro9Parser.DefinePadContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 726
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 727
                self.match(VisualFoxpro9Parser.PAD)
                self.state = 728
                self.specialExpr()
                self.state = 729
                self.match(VisualFoxpro9Parser.OF)
                self.state = 730
                self.specialExpr()
                self.state = 731
                self.match(VisualFoxpro9Parser.PROMPT)
                self.state = 732
                self.expr(0)
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.AT:
                    self.state = 733
                    self.match(VisualFoxpro9Parser.AT)
                    self.state = 734
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                    self.state = 735
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 736
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                self.state = 743
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.BEFORE]:
                    self.state = 739
                    self.match(VisualFoxpro9Parser.BEFORE)
                    self.state = 740
                    self.identifier()
                    pass
                elif token in [VisualFoxpro9Parser.AFTER]:
                    self.state = 741
                    self.match(VisualFoxpro9Parser.AFTER)
                    self.state = 742
                    self.identifier()
                    pass
                elif token in [VisualFoxpro9Parser.EOF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.NL]:
                    pass
                else:
                    pass
                self.state = 751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NEGOTIATE:
                    self.state = 745
                    self.match(VisualFoxpro9Parser.NEGOTIATE)
                    self.state = 746
                    self.identifier()
                    self.state = 749
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.COMMA:
                        self.state = 747
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 748
                        self.identifier()




                self.state = 767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.FONT:
                    self.state = 753
                    self.match(VisualFoxpro9Parser.FONT)
                    self.state = 754
                    self.identifier()
                    self.state = 765
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.COMMA:
                        self.state = 755
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 756
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 763
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.COMMA:
                            self.state = 757
                            self.match(VisualFoxpro9Parser.COMMA)
                            self.state = 758
                            self.expr(0)
                            self.state = 761
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==VisualFoxpro9Parser.COMMA:
                                self.state = 759
                                self.match(VisualFoxpro9Parser.COMMA)
                                self.state = 760
                                self.identifier()








                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.STYLE:
                    self.state = 769
                    self.match(VisualFoxpro9Parser.STYLE)
                    self.state = 770
                    self.identifier()


                self.state = 775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MESSAGE:
                    self.state = 773
                    self.match(VisualFoxpro9Parser.MESSAGE)
                    self.state = 774
                    self.expr(0)


                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.KEY:
                    self.state = 777
                    self.match(VisualFoxpro9Parser.KEY)
                    self.state = 778
                    self.identifier()
                    self.state = 781
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.PLUS_SIGN:
                        self.state = 779
                        self.match(VisualFoxpro9Parser.PLUS_SIGN)
                        self.state = 780
                        self.identifier()


                    self.state = 785
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.COMMA:
                        self.state = 783
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 784
                        self.expr(0)




                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MARK:
                    self.state = 789
                    self.match(VisualFoxpro9Parser.MARK)
                    self.state = 790
                    self.identifier()


                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.SKIPKW:
                    self.state = 793
                    self.match(VisualFoxpro9Parser.SKIPKW)
                    self.state = 796
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.FOR:
                        self.state = 794
                        self.match(VisualFoxpro9Parser.FOR)
                        self.state = 795
                        self.expr(0)




                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COLOR:
                    self.state = 800
                    self.match(VisualFoxpro9Parser.COLOR)
                    self.state = 801
                    self.match(VisualFoxpro9Parser.SCHEME)
                    self.state = 802
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                pass

            elif la_ == 21:
                localctx = VisualFoxpro9Parser.DefinePopupContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 805
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 806
                self.match(VisualFoxpro9Parser.POPUP)
                self.state = 807
                self.specialExpr()
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.SHADOW:
                    self.state = 808
                    self.match(VisualFoxpro9Parser.SHADOW)


                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MARGIN:
                    self.state = 811
                    self.match(VisualFoxpro9Parser.MARGIN)


                self.state = 815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.RELATIVE:
                    self.state = 814
                    self.match(VisualFoxpro9Parser.RELATIVE)


                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COLOR:
                    self.state = 817
                    self.match(VisualFoxpro9Parser.COLOR)
                    self.state = 818
                    self.match(VisualFoxpro9Parser.SCHEME)
                    self.state = 819
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                pass

            elif la_ == 22:
                localctx = VisualFoxpro9Parser.DefineBarContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 822
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 823
                self.match(VisualFoxpro9Parser.BAR)
                self.state = 824
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                self.state = 825
                self.match(VisualFoxpro9Parser.OF)
                self.state = 826
                self.specialExpr()
                self.state = 827
                self.match(VisualFoxpro9Parser.PROMPT)
                self.state = 828
                self.expr(0)
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MESSAGE:
                    self.state = 829
                    self.match(VisualFoxpro9Parser.MESSAGE)
                    self.state = 830
                    self.expr(0)


                pass

            elif la_ == 23:
                localctx = VisualFoxpro9Parser.ActivateWindowContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 833
                self.match(VisualFoxpro9Parser.ACTIVATE)
                self.state = 834
                self.match(VisualFoxpro9Parser.WINDOW)
                self.state = 837
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 835
                    self.parameters()
                    pass

                elif la_ == 2:
                    self.state = 836
                    self.match(VisualFoxpro9Parser.ALL)
                    pass


                self.state = 847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 839
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 845
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                    if la_ == 1:
                        self.state = 841
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                        if la_ == 1:
                            self.state = 840
                            self.match(VisualFoxpro9Parser.WINDOW)


                        self.state = 843
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 844
                        self.match(VisualFoxpro9Parser.SCREEN)
                        pass




                self.state = 850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.BOTTOM or _la==VisualFoxpro9Parser.SAME or _la==VisualFoxpro9Parser.TOP:
                    self.state = 849
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.BOTTOM or _la==VisualFoxpro9Parser.SAME or _la==VisualFoxpro9Parser.TOP):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NOSHOW:
                    self.state = 852
                    self.match(VisualFoxpro9Parser.NOSHOW)


                pass

            elif la_ == 24:
                localctx = VisualFoxpro9Parser.ActivateScreenContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 855
                self.match(VisualFoxpro9Parser.ACTIVATE)
                self.state = 856
                self.match(VisualFoxpro9Parser.SCREEN)
                pass

            elif la_ == 25:
                localctx = VisualFoxpro9Parser.ActivateMenuContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 857
                self.match(VisualFoxpro9Parser.ACTIVATE)
                self.state = 858
                self.match(VisualFoxpro9Parser.MENU)
                self.state = 859
                self.specialExpr()
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NOWAIT:
                    self.state = 860
                    self.match(VisualFoxpro9Parser.NOWAIT)


                self.state = 865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.PAD:
                    self.state = 863
                    self.match(VisualFoxpro9Parser.PAD)
                    self.state = 864
                    self.specialExpr()


                pass

            elif la_ == 26:
                localctx = VisualFoxpro9Parser.ActivatePopupContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 867
                self.match(VisualFoxpro9Parser.ACTIVATE)
                self.state = 868
                self.match(VisualFoxpro9Parser.POPUP)
                self.state = 869
                self.identifier()
                pass

            elif la_ == 27:
                localctx = VisualFoxpro9Parser.DeactivateContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 870
                self.match(VisualFoxpro9Parser.DEACTIVATE)
                self.state = 871
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.MENU or _la==VisualFoxpro9Parser.POPUP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 874
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                if la_ == 1:
                    self.state = 872
                    self.match(VisualFoxpro9Parser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 873
                    self.parameters()
                    pass


                pass

            elif la_ == 28:
                localctx = VisualFoxpro9Parser.ModifyWindowContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 876
                self.match(VisualFoxpro9Parser.MODIFY)
                self.state = 877
                self.match(VisualFoxpro9Parser.WINDOW)
                self.state = 880
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 878
                    self.match(VisualFoxpro9Parser.SCREEN)
                    pass

                elif la_ == 2:
                    self.state = 879
                    self.identifier()
                    pass


                self.state = 912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 910
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                    if la_ == 1:
                        self.state = 882
                        self.match(VisualFoxpro9Parser.FROM)
                        self.state = 883
                        self.args()
                        self.state = 884
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 885
                        self.args()
                        pass

                    elif la_ == 2:
                        self.state = 887
                        self.match(VisualFoxpro9Parser.AT)
                        self.state = 888
                        self.args()
                        self.state = 889
                        self.match(VisualFoxpro9Parser.SIZE)
                        self.state = 890
                        self.args()
                        pass

                    elif la_ == 3:
                        self.state = 892
                        self.match(VisualFoxpro9Parser.FONT)
                        self.state = 893
                        self.args()
                        pass

                    elif la_ == 4:
                        self.state = 894
                        self.match(VisualFoxpro9Parser.STYLE)
                        self.state = 895
                        self.expr(0)
                        pass

                    elif la_ == 5:
                        self.state = 896
                        self.match(VisualFoxpro9Parser.TITLE)
                        self.state = 897
                        self.expr(0)
                        pass

                    elif la_ == 6:
                        self.state = 898
                        self.identifier()
                        pass

                    elif la_ == 7:
                        self.state = 899
                        self.match(VisualFoxpro9Parser.ICON)
                        self.state = 900
                        self.match(VisualFoxpro9Parser.FILE)
                        self.state = 901
                        self.specialExpr()
                        pass

                    elif la_ == 8:
                        self.state = 902
                        self.match(VisualFoxpro9Parser.FILL)
                        self.state = 903
                        self.match(VisualFoxpro9Parser.FILE)
                        self.state = 904
                        self.specialExpr()
                        pass

                    elif la_ == 9:
                        self.state = 905
                        self.match(VisualFoxpro9Parser.COLOR)
                        self.state = 906
                        self.match(VisualFoxpro9Parser.SCHEME)
                        self.state = 907
                        self.expr(0)
                        pass

                    elif la_ == 10:
                        self.state = 908
                        self.match(VisualFoxpro9Parser.COLOR)
                        self.state = 909
                        self.args()
                        pass


                    self.state = 914
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 29:
                localctx = VisualFoxpro9Parser.ModifyFileContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 915
                self.match(VisualFoxpro9Parser.MODIFY)
                self.state = 916
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.COMMAND or _la==VisualFoxpro9Parser.FILE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 919
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.QUESTION]:
                    self.state = 917
                    self.match(VisualFoxpro9Parser.QUESTION)
                    pass
                elif token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.HASH, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.ASSERTS, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.CHDIR, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.COMMAND, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.COMPILE, VisualFoxpro9Parser.CONSOLE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.DATASESSION, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.DEBUG, VisualFoxpro9Parser.DEBUGOUT, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.DOEVENTS, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENCRYPT, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.ENDTEXT, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.FILL, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.FLAGS, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.FORCE, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.FOXOBJECT, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.GETS, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.HIDE, VisualFoxpro9Parser.ICON, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.JOIN, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.LINKED, VisualFoxpro9Parser.LIST, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MASTER, VisualFoxpro9Parser.MAX, VisualFoxpro9Parser.MEMO, VisualFoxpro9Parser.MEMORY, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.MENUS, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.MIN, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.MODIFY, VisualFoxpro9Parser.MULTILOCKS, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.NODEBUG, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.NORM, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.NOUPDATE, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.PRETEXT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.RESOURCES, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.RESTORE, VisualFoxpro9Parser.RETRY, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.SAFETY, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.SHOW, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.SIZE, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.SORT, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.TABLEPROMPT, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.TEXT, VisualFoxpro9Parser.TEXTMERGE, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.TITLE, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.UNLOCK, VisualFoxpro9Parser.UPDATE, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ZOOM, VisualFoxpro9Parser.ID]:
                    self.state = 918
                    self.specialExpr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 930
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                    if la_ == 1:
                        self.state = 921
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 925
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [VisualFoxpro9Parser.WINDOW]:
                            self.state = 922
                            self.match(VisualFoxpro9Parser.WINDOW)
                            self.state = 923
                            self.identifier()
                            pass
                        elif token in [VisualFoxpro9Parser.SCREEN]:
                            self.state = 924
                            self.match(VisualFoxpro9Parser.SCREEN)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 2:
                        self.state = 927
                        self.match(VisualFoxpro9Parser.AS)
                        self.state = 928
                        self.expr(0)
                        pass

                    elif la_ == 3:
                        self.state = 929
                        self.identifier()
                        pass


                    self.state = 934
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 30:
                localctx = VisualFoxpro9Parser.RaiseErrorContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 935
                self.match(VisualFoxpro9Parser.ERROR)
                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 936
                    self.expr(0)


                pass

            elif la_ == 31:
                localctx = VisualFoxpro9Parser.ThrowErrorContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 939
                self.match(VisualFoxpro9Parser.THROW)
                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 940
                    self.expr(0)


                pass

            elif la_ == 32:
                localctx = VisualFoxpro9Parser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 943
                self.match(VisualFoxpro9Parser.CREATE)
                self.state = 944
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.CURSOR or _la==VisualFoxpro9Parser.DBF or _la==VisualFoxpro9Parser.TABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 945
                self.specialExpr()
                self.state = 963
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.FREE]:
                    self.state = 947
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.FREE:
                        self.state = 946
                        self.match(VisualFoxpro9Parser.FREE)


                    self.state = 949
                    self.match(VisualFoxpro9Parser.LEFTPAREN)
                    self.state = 950
                    self.tableField()
                    self.state = 955
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==VisualFoxpro9Parser.COMMA:
                        self.state = 951
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 952
                        self.tableField()
                        self.state = 957
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 958
                    self.match(VisualFoxpro9Parser.RIGHTPAREN)
                    pass
                elif token in [VisualFoxpro9Parser.FROM]:
                    self.state = 960
                    self.match(VisualFoxpro9Parser.FROM)
                    self.state = 961
                    self.match(VisualFoxpro9Parser.ARRAY)
                    self.state = 962
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 33:
                localctx = VisualFoxpro9Parser.AlterTableContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 965
                self.match(VisualFoxpro9Parser.ALTER)
                self.state = 966
                self.match(VisualFoxpro9Parser.TABLE)
                self.state = 967
                self.specialExpr()
                self.state = 983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.ADD or _la==VisualFoxpro9Parser.ALTER or _la==VisualFoxpro9Parser.DROP:
                    self.state = 981
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.ADD]:
                        self.state = 968
                        self.match(VisualFoxpro9Parser.ADD)
                        self.state = 969
                        self.match(VisualFoxpro9Parser.COLUMN)
                        self.state = 970
                        self.tableField()
                        pass
                    elif token in [VisualFoxpro9Parser.DROP]:
                        self.state = 971
                        self.match(VisualFoxpro9Parser.DROP)
                        self.state = 972
                        self.match(VisualFoxpro9Parser.COLUMN)
                        self.state = 973
                        self.identifier()
                        pass
                    elif token in [VisualFoxpro9Parser.ALTER]:
                        self.state = 974
                        self.match(VisualFoxpro9Parser.ALTER)
                        self.state = 975
                        self.match(VisualFoxpro9Parser.COLUMN)
                        self.state = 976
                        self.identifier()
                        self.state = 979
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.NOT:
                            self.state = 977
                            self.match(VisualFoxpro9Parser.NOT)
                            self.state = 978
                            self.match(VisualFoxpro9Parser.NULL)


                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 985
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 34:
                localctx = VisualFoxpro9Parser.SelectContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 986
                self.match(VisualFoxpro9Parser.SELECT)
                self.state = 1013
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                if la_ == 1:
                    self.state = 987
                    localctx.tablename = self.specialExpr()
                    pass

                elif la_ == 2:
                    self.state = 989
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                    if la_ == 1:
                        self.state = 988
                        self.match(VisualFoxpro9Parser.DISTINCT)


                    self.state = 993
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.HASH, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.ASSERTS, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.CHDIR, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.COMMAND, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.COMPILE, VisualFoxpro9Parser.CONSOLE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.DATASESSION, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.DEBUG, VisualFoxpro9Parser.DEBUGOUT, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.DOEVENTS, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENCRYPT, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.ENDTEXT, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.FILL, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.FLAGS, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.FORCE, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.FOXOBJECT, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.GETS, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.HIDE, VisualFoxpro9Parser.ICON, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.JOIN, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.LINKED, VisualFoxpro9Parser.LIST, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MASTER, VisualFoxpro9Parser.MAX, VisualFoxpro9Parser.MEMO, VisualFoxpro9Parser.MEMORY, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.MENUS, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.MIN, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.MODIFY, VisualFoxpro9Parser.MULTILOCKS, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.NODEBUG, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.NORM, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.NOUPDATE, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.PRETEXT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.RESOURCES, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.RESTORE, VisualFoxpro9Parser.RETRY, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.SAFETY, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.SHOW, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.SIZE, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.SORT, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.TABLEPROMPT, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.TEXT, VisualFoxpro9Parser.TEXTMERGE, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.TITLE, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.UNLOCK, VisualFoxpro9Parser.UPDATE, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ZOOM, VisualFoxpro9Parser.ID]:
                        self.state = 991
                        self.specialArgs()
                        pass
                    elif token in [VisualFoxpro9Parser.ASTERISK]:
                        self.state = 992
                        self.match(VisualFoxpro9Parser.ASTERISK)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 997
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.FROM:
                        self.state = 995
                        self.match(VisualFoxpro9Parser.FROM)
                        self.state = 996
                        localctx.fromExpr = self.specialExpr()


                    self.state = 1001
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.WHERE:
                        self.state = 999
                        self.match(VisualFoxpro9Parser.WHERE)
                        self.state = 1000
                        localctx.whereExpr = self.expr(0)


                    self.state = 1006
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.INTO:
                        self.state = 1003
                        self.match(VisualFoxpro9Parser.INTO)
                        self.state = 1004
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.CURSOR or _la==VisualFoxpro9Parser.TABLE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1005
                        localctx.intoExpr = self.specialExpr()


                    self.state = 1011
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ORDER:
                        self.state = 1008
                        self.match(VisualFoxpro9Parser.ORDER)
                        self.state = 1009
                        self.match(VisualFoxpro9Parser.BY)
                        self.state = 1010
                        localctx.orderbyid = self.identifier()


                    pass


                pass

            elif la_ == 35:
                localctx = VisualFoxpro9Parser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 1015
                self.match(VisualFoxpro9Parser.USE)
                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 1029
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                    if la_ == 1:
                        self.state = 1016
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1017
                        localctx.workArea = self.specialExpr()
                        pass

                    elif la_ == 2:
                        self.state = 1018
                        self.match(VisualFoxpro9Parser.ORDER)
                        self.state = 1020
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                        if la_ == 1:
                            self.state = 1019
                            self.match(VisualFoxpro9Parser.TAG)


                        self.state = 1022
                        localctx.orderExpr = self.expr(0)
                        pass

                    elif la_ == 3:
                        self.state = 1023
                        self.match(VisualFoxpro9Parser.ALIAS)
                        self.state = 1024
                        localctx.aliasExpr = self.specialExpr()
                        pass

                    elif la_ == 4:
                        self.state = 1025
                        self.match(VisualFoxpro9Parser.SHARED)
                        pass

                    elif la_ == 5:
                        self.state = 1026
                        self.match(VisualFoxpro9Parser.EXCLUSIVE)
                        pass

                    elif la_ == 6:
                        self.state = 1027
                        self.match(VisualFoxpro9Parser.NOUPDATE)
                        pass

                    elif la_ == 7:
                        self.state = 1028
                        localctx.name = self.specialExpr()
                        pass


                    self.state = 1033
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 36:
                localctx = VisualFoxpro9Parser.LocateContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 1034
                self.match(VisualFoxpro9Parser.LOCATE)
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.ALL or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (VisualFoxpro9Parser.FOR - 136)) | (1 << (VisualFoxpro9Parser.NEXT - 136)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 136)))) != 0) or _la==VisualFoxpro9Parser.RECORD or _la==VisualFoxpro9Parser.REST or _la==VisualFoxpro9Parser.WHILE:
                    self.state = 1035
                    self.queryCondition()
                    self.state = 1040
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 37:
                localctx = VisualFoxpro9Parser.ContinueLocateContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 1041
                self.match(VisualFoxpro9Parser.CONTINUE)
                pass

            elif la_ == 38:
                localctx = VisualFoxpro9Parser.RetryContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 1042
                self.match(VisualFoxpro9Parser.RETRY)
                pass

            elif la_ == 39:
                localctx = VisualFoxpro9Parser.ReplaceContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 1043
                self.match(VisualFoxpro9Parser.REPLACE)
                self.state = 1051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 1049
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                    if la_ == 1:
                        self.state = 1044
                        self.queryCondition()
                        pass

                    elif la_ == 2:
                        self.state = 1045
                        self.specialExpr()
                        self.state = 1046
                        self.match(VisualFoxpro9Parser.WITH)
                        self.state = 1047
                        self.expr(0)
                        pass


                    self.state = 1053
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 40:
                localctx = VisualFoxpro9Parser.IndexOnContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 1054
                self.match(VisualFoxpro9Parser.INDEX)
                self.state = 1055
                self.match(VisualFoxpro9Parser.ON)
                self.state = 1056
                self.specialExpr()
                self.state = 1057
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.TAG or _la==VisualFoxpro9Parser.TO):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1058
                self.specialExpr()
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COMPACT:
                    self.state = 1059
                    self.match(VisualFoxpro9Parser.COMPACT)


                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING:
                    self.state = 1062
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.CANDIDATE or _la==VisualFoxpro9Parser.UNIQUE:
                    self.state = 1065
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.CANDIDATE or _la==VisualFoxpro9Parser.UNIQUE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1068
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass

            elif la_ == 41:
                localctx = VisualFoxpro9Parser.CountContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 1071
                self.match(VisualFoxpro9Parser.COUNT)
                self.state = 1077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.ALL or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (VisualFoxpro9Parser.FOR - 136)) | (1 << (VisualFoxpro9Parser.NEXT - 136)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 136)))) != 0) or ((((_la - 229)) & ~0x3f) == 0 and ((1 << (_la - 229)) & ((1 << (VisualFoxpro9Parser.RECORD - 229)) | (1 << (VisualFoxpro9Parser.REST - 229)) | (1 << (VisualFoxpro9Parser.TO - 229)))) != 0) or _la==VisualFoxpro9Parser.WHILE:
                    self.state = 1075
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.TO]:
                        self.state = 1072
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1073
                        localctx.toExpr = self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.WHILE]:
                        self.state = 1074
                        self.queryCondition()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1079
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 42:
                localctx = VisualFoxpro9Parser.SumContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 1080
                self.match(VisualFoxpro9Parser.SUM)
                self.state = 1087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 1085
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                    if la_ == 1:
                        self.state = 1081
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1082
                        localctx.toExpr = self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 1083
                        self.queryCondition()
                        pass

                    elif la_ == 3:
                        self.state = 1084
                        localctx.sumExpr = self.expr(0)
                        pass


                    self.state = 1089
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 43:
                localctx = VisualFoxpro9Parser.SortCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 1090
                self.match(VisualFoxpro9Parser.SORT)
                self.state = 1091
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1092
                self.expr(0)
                self.state = 1093
                self.match(VisualFoxpro9Parser.ON)
                self.state = 1094
                self.expr(0)
                self.state = 1099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.FORWARDSLASH:
                    self.state = 1095
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    self.state = 1096
                    self.identifier()
                    self.state = 1101
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.COMMA:
                    self.state = 1102
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1103
                    self.expr(0)
                    self.state = 1108
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==VisualFoxpro9Parser.FORWARDSLASH:
                        self.state = 1104
                        self.match(VisualFoxpro9Parser.FORWARDSLASH)
                        self.state = 1105
                        self.identifier()
                        self.state = 1110
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1115
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1126
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.ALL or _la==VisualFoxpro9Parser.ASCENDING or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (VisualFoxpro9Parser.DESCENDING - 100)) | (1 << (VisualFoxpro9Parser.FIELDS - 100)) | (1 << (VisualFoxpro9Parser.FOR - 100)))) != 0) or ((((_la - 186)) & ~0x3f) == 0 and ((1 << (_la - 186)) & ((1 << (VisualFoxpro9Parser.NEXT - 186)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 186)) | (1 << (VisualFoxpro9Parser.RECORD - 186)) | (1 << (VisualFoxpro9Parser.REST - 186)))) != 0) or _la==VisualFoxpro9Parser.WHILE:
                    self.state = 1124
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.ASCENDING]:
                        self.state = 1116
                        self.match(VisualFoxpro9Parser.ASCENDING)
                        pass
                    elif token in [VisualFoxpro9Parser.DESCENDING]:
                        self.state = 1117
                        self.match(VisualFoxpro9Parser.DESCENDING)
                        pass
                    elif token in [VisualFoxpro9Parser.FIELDS]:
                        self.state = 1118
                        self.match(VisualFoxpro9Parser.FIELDS)
                        self.state = 1120
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                        if la_ == 1:
                            self.state = 1119
                            _la = self._input.LA(1)
                            if not(_la==VisualFoxpro9Parser.EXCEPT or _la==VisualFoxpro9Parser.LIKE):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 1122
                        self.args()
                        pass
                    elif token in [VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.WHILE]:
                        self.state = 1123
                        self.queryCondition()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1128
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 44:
                localctx = VisualFoxpro9Parser.DeleteRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 1129
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.DELETE or _la==VisualFoxpro9Parser.RECALL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.ALL or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (VisualFoxpro9Parser.FOR - 136)) | (1 << (VisualFoxpro9Parser.IN - 136)) | (1 << (VisualFoxpro9Parser.NEXT - 136)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 136)))) != 0) or _la==VisualFoxpro9Parser.RECORD or _la==VisualFoxpro9Parser.REST or _la==VisualFoxpro9Parser.WHILE:
                    self.state = 1133
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.WHILE]:
                        self.state = 1130
                        self.queryCondition()
                        pass
                    elif token in [VisualFoxpro9Parser.IN]:
                        self.state = 1131
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1132
                        localctx.inExpr = self.specialExpr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1137
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 45:
                localctx = VisualFoxpro9Parser.AppendFromContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 1138
                self.match(VisualFoxpro9Parser.APPEND)
                self.state = 1139
                self.match(VisualFoxpro9Parser.FROM)
                self.state = 1147
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                if la_ == 1:
                    self.state = 1140
                    self.match(VisualFoxpro9Parser.ARRAY)
                    self.state = 1141
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 1142
                    self.specialExpr()
                    self.state = 1143
                    self.match(VisualFoxpro9Parser.FOR)
                    self.state = 1144
                    self.expr(0)
                    pass

                elif la_ == 3:
                    self.state = 1146
                    self.specialExpr()
                    pass


                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.TYPE:
                    self.state = 1149
                    self.match(VisualFoxpro9Parser.TYPE)
                    self.state = 1150
                    localctx.typeExpr = self.specialExpr()


                pass

            elif la_ == 46:
                localctx = VisualFoxpro9Parser.AppendContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 1153
                self.match(VisualFoxpro9Parser.APPEND)
                self.state = 1155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.BLANK:
                    self.state = 1154
                    self.match(VisualFoxpro9Parser.BLANK)


                self.state = 1163
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                if la_ == 1:
                    self.state = 1157
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1158
                    self.specialExpr()
                    self.state = 1159
                    self.match(VisualFoxpro9Parser.NOMENU)

                elif la_ == 2:
                    self.state = 1161
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1162
                    self.specialExpr()


                pass

            elif la_ == 47:
                localctx = VisualFoxpro9Parser.InsertContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 1165
                self.match(VisualFoxpro9Parser.INSERT)
                self.state = 1166
                self.match(VisualFoxpro9Parser.INTO)
                self.state = 1167
                self.specialExpr()
                self.state = 1187
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.FROM]:
                    self.state = 1168
                    self.match(VisualFoxpro9Parser.FROM)
                    self.state = 1174
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.ARRAY]:
                        self.state = 1169
                        self.match(VisualFoxpro9Parser.ARRAY)
                        self.state = 1170
                        self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.MEMVAR]:
                        self.state = 1171
                        self.match(VisualFoxpro9Parser.MEMVAR)
                        pass
                    elif token in [VisualFoxpro9Parser.NAME]:
                        self.state = 1172
                        self.match(VisualFoxpro9Parser.NAME)
                        self.state = 1173
                        self.expr(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.VALUES]:
                    self.state = 1180
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.LEFTPAREN:
                        self.state = 1176
                        self.match(VisualFoxpro9Parser.LEFTPAREN)
                        self.state = 1177
                        self.specialArgs()
                        self.state = 1178
                        self.match(VisualFoxpro9Parser.RIGHTPAREN)


                    self.state = 1182
                    self.match(VisualFoxpro9Parser.VALUES)
                    self.state = 1183
                    self.match(VisualFoxpro9Parser.LEFTPAREN)
                    self.state = 1184
                    self.args()
                    self.state = 1185
                    self.match(VisualFoxpro9Parser.RIGHTPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 48:
                localctx = VisualFoxpro9Parser.SkipRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 1189
                self.match(VisualFoxpro9Parser.SKIPKW)
                self.state = 1191
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1190
                    self.expr(0)


                self.state = 1195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1193
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1194
                    self.specialExpr()


                pass

            elif la_ == 49:
                localctx = VisualFoxpro9Parser.PackContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 1197
                self.match(VisualFoxpro9Parser.PACK)
                self.state = 1211
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1198
                    self.match(VisualFoxpro9Parser.DATABASE)
                    pass

                elif la_ == 2:
                    self.state = 1200
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                    if la_ == 1:
                        self.state = 1199
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.DBF or _la==VisualFoxpro9Parser.MEMO):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1209
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                    if la_ == 1:
                        self.state = 1202
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1203
                        localctx.workArea = self.specialExpr()

                    elif la_ == 2:
                        self.state = 1204
                        localctx.tableName = self.specialExpr()
                        self.state = 1205
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1206
                        localctx.workArea = self.specialExpr()

                    elif la_ == 3:
                        self.state = 1208
                        localctx.tableName = self.specialExpr()


                    pass


                pass

            elif la_ == 50:
                localctx = VisualFoxpro9Parser.ReindexContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 1213
                self.match(VisualFoxpro9Parser.REINDEX)
                self.state = 1215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COMPACT:
                    self.state = 1214
                    self.match(VisualFoxpro9Parser.COMPACT)


                pass

            elif la_ == 51:
                localctx = VisualFoxpro9Parser.SeekRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 1217
                self.match(VisualFoxpro9Parser.SEEK)
                self.state = 1218
                localctx.seekExpr = self.expr(0)
                self.state = 1233
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                if la_ == 1:
                    self.state = 1228
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                    if la_ == 1:
                        self.state = 1219
                        self.match(VisualFoxpro9Parser.ORDER)
                        self.state = 1220
                        localctx.orderExpr = self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 1221
                        self.match(VisualFoxpro9Parser.TAG)
                        self.state = 1222
                        localctx.tagName = self.specialExpr()
                        self.state = 1225
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.OF:
                            self.state = 1223
                            self.match(VisualFoxpro9Parser.OF)
                            self.state = 1224
                            localctx.cdxFileExpr = self.specialExpr()


                        pass

                    elif la_ == 3:
                        self.state = 1227
                        localctx.idxFileExpr = self.specialExpr()
                        pass


                    self.state = 1231
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING:
                        self.state = 1230
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                self.state = 1237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1235
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1236
                    localctx.tablenameExpr = self.specialExpr()


                pass

            elif la_ == 52:
                localctx = VisualFoxpro9Parser.UpdateCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 1239
                self.match(VisualFoxpro9Parser.UPDATE)
                self.state = 1240
                localctx.tableExpr = self.specialExpr()
                self.state = 1241
                self.match(VisualFoxpro9Parser.SET)
                self.state = 1242
                self.identifier()
                self.state = 1243
                self.match(VisualFoxpro9Parser.EQUALS)
                self.state = 1244
                self.expr(0)
                self.state = 1252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.COMMA:
                    self.state = 1245
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1246
                    self.identifier()
                    self.state = 1247
                    self.match(VisualFoxpro9Parser.EQUALS)
                    self.state = 1248
                    self.expr(0)
                    self.state = 1254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.FROM or _la==VisualFoxpro9Parser.JOIN or _la==VisualFoxpro9Parser.WHERE:
                    self.state = 1264
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.FROM]:
                        self.state = 1255
                        self.match(VisualFoxpro9Parser.FROM)
                        self.state = 1257
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                        if la_ == 1:
                            self.state = 1256
                            self.match(VisualFoxpro9Parser.FORCE)


                        self.state = 1259
                        localctx.fromArgs = self.specialArgs()
                        pass
                    elif token in [VisualFoxpro9Parser.JOIN]:
                        self.state = 1260
                        self.match(VisualFoxpro9Parser.JOIN)
                        self.state = 1261
                        localctx.joinArgs = self.specialArgs()
                        pass
                    elif token in [VisualFoxpro9Parser.WHERE]:
                        self.state = 1262
                        self.match(VisualFoxpro9Parser.WHERE)
                        self.state = 1263
                        localctx.whereExpr = self.expr(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1268
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 53:
                localctx = VisualFoxpro9Parser.GoRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 1269
                self.match(VisualFoxpro9Parser.GOTO)
                self.state = 1276
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                if la_ == 1:
                    self.state = 1270
                    self.match(VisualFoxpro9Parser.TOP)
                    pass

                elif la_ == 2:
                    self.state = 1271
                    self.match(VisualFoxpro9Parser.BOTTOM)
                    pass

                elif la_ == 3:
                    self.state = 1273
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                    if la_ == 1:
                        self.state = 1272
                        self.match(VisualFoxpro9Parser.RECORD)


                    self.state = 1275
                    self.expr(0)
                    pass


                self.state = 1280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1278
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1279
                    self.specialExpr()


                pass

            elif la_ == 54:
                localctx = VisualFoxpro9Parser.CopyToArrayContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 1282
                self.match(VisualFoxpro9Parser.COPY)
                self.state = 1294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.ALL or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FIELDS - 129)) | (1 << (VisualFoxpro9Parser.FOR - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.NOOPTIMIZE - 193)) | (1 << (VisualFoxpro9Parser.RECORD - 193)) | (1 << (VisualFoxpro9Parser.REST - 193)))) != 0) or _la==VisualFoxpro9Parser.TO or _la==VisualFoxpro9Parser.WHILE:
                    self.state = 1292
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.TO]:
                        self.state = 1283
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1284
                        self.match(VisualFoxpro9Parser.ARRAY)
                        self.state = 1285
                        self.specialExpr()
                        pass
                    elif token in [VisualFoxpro9Parser.FIELDS]:
                        self.state = 1286
                        self.match(VisualFoxpro9Parser.FIELDS)
                        self.state = 1288
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                        if la_ == 1:
                            self.state = 1287
                            _la = self._input.LA(1)
                            if not(_la==VisualFoxpro9Parser.EXCEPT or _la==VisualFoxpro9Parser.LIKE):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 1290
                        self.args()
                        pass
                    elif token in [VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.WHILE]:
                        self.state = 1291
                        self.queryCondition()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1296
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 55:
                localctx = VisualFoxpro9Parser.CopyToContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 1297
                self.match(VisualFoxpro9Parser.COPY)
                self.state = 1299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.STRUCTURE:
                    self.state = 1298
                    self.match(VisualFoxpro9Parser.STRUCTURE)


                self.state = 1301
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1302
                self.specialExpr()
                pass

            elif la_ == 56:
                localctx = VisualFoxpro9Parser.ZapTableContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 1303
                self.match(VisualFoxpro9Parser.ZAP)
                self.state = 1306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1304
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1305
                    self.specialExpr()


                pass

            elif la_ == 57:
                localctx = VisualFoxpro9Parser.BrowseContext(self, localctx)
                self.enterOuterAlt(localctx, 57)
                self.state = 1308
                self.match(VisualFoxpro9Parser.BROWSE)
                self.state = 1312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.MACROLINE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DB4 - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 1309
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1314
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 58:
                localctx = VisualFoxpro9Parser.ScatterExprContext(self, localctx)
                self.enterOuterAlt(localctx, 58)
                self.state = 1315
                self.match(VisualFoxpro9Parser.SCATTER)
                self.state = 1333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.BLANK or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FIELDS - 129)) | (1 << (VisualFoxpro9Parser.MEMO - 129)) | (1 << (VisualFoxpro9Parser.MEMVAR - 129)) | (1 << (VisualFoxpro9Parser.NAME - 129)))) != 0) or _la==VisualFoxpro9Parser.TO:
                    self.state = 1331
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.FIELDS]:
                        self.state = 1316
                        self.match(VisualFoxpro9Parser.FIELDS)
                        self.state = 1318
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                        if la_ == 1:
                            self.state = 1317
                            _la = self._input.LA(1)
                            if not(_la==VisualFoxpro9Parser.EXCEPT or _la==VisualFoxpro9Parser.LIKE):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 1320
                        self.args()
                        pass
                    elif token in [VisualFoxpro9Parser.MEMO]:
                        self.state = 1321
                        self.match(VisualFoxpro9Parser.MEMO)
                        pass
                    elif token in [VisualFoxpro9Parser.BLANK]:
                        self.state = 1322
                        self.match(VisualFoxpro9Parser.BLANK)
                        pass
                    elif token in [VisualFoxpro9Parser.MEMVAR]:
                        self.state = 1323
                        self.match(VisualFoxpro9Parser.MEMVAR)
                        pass
                    elif token in [VisualFoxpro9Parser.NAME]:
                        self.state = 1324
                        self.match(VisualFoxpro9Parser.NAME)
                        self.state = 1325
                        self.expr(0)
                        self.state = 1327
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.ADDITIVE:
                            self.state = 1326
                            self.match(VisualFoxpro9Parser.ADDITIVE)


                        pass
                    elif token in [VisualFoxpro9Parser.TO]:
                        self.state = 1329
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1330
                        self.expr(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1335
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 59:
                localctx = VisualFoxpro9Parser.GatherExprContext(self, localctx)
                self.enterOuterAlt(localctx, 59)
                self.state = 1336
                self.match(VisualFoxpro9Parser.GATHER)
                self.state = 1350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FIELDS - 129)) | (1 << (VisualFoxpro9Parser.FROM - 129)) | (1 << (VisualFoxpro9Parser.MEMO - 129)) | (1 << (VisualFoxpro9Parser.MEMVAR - 129)) | (1 << (VisualFoxpro9Parser.NAME - 129)))) != 0):
                    self.state = 1348
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.FIELDS]:
                        self.state = 1337
                        self.match(VisualFoxpro9Parser.FIELDS)
                        self.state = 1339
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                        if la_ == 1:
                            self.state = 1338
                            _la = self._input.LA(1)
                            if not(_la==VisualFoxpro9Parser.EXCEPT or _la==VisualFoxpro9Parser.LIKE):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 1341
                        self.args()
                        pass
                    elif token in [VisualFoxpro9Parser.MEMO]:
                        self.state = 1342
                        self.match(VisualFoxpro9Parser.MEMO)
                        pass
                    elif token in [VisualFoxpro9Parser.MEMVAR]:
                        self.state = 1343
                        self.match(VisualFoxpro9Parser.MEMVAR)
                        pass
                    elif token in [VisualFoxpro9Parser.NAME]:
                        self.state = 1344
                        self.match(VisualFoxpro9Parser.NAME)
                        self.state = 1345
                        self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.FROM]:
                        self.state = 1346
                        self.match(VisualFoxpro9Parser.FROM)
                        self.state = 1347
                        self.expr(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1352
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 60:
                localctx = VisualFoxpro9Parser.CloseStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 60)
                self.state = 1353
                self.match(VisualFoxpro9Parser.CLOSE)
                self.state = 1359
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.TABLE]:
                    self.state = 1354
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.DATABASE or _la==VisualFoxpro9Parser.INDEXES or _la==VisualFoxpro9Parser.TABLE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1356
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ALL:
                        self.state = 1355
                        self.match(VisualFoxpro9Parser.ALL)


                    pass
                elif token in [VisualFoxpro9Parser.ALL]:
                    self.state = 1358
                    self.match(VisualFoxpro9Parser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 61:
                localctx = VisualFoxpro9Parser.ReadEventContext(self, localctx)
                self.enterOuterAlt(localctx, 61)
                self.state = 1369
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.READ]:
                    self.state = 1361
                    self.match(VisualFoxpro9Parser.READ)
                    self.state = 1363
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.EVENTS:
                        self.state = 1362
                        self.match(VisualFoxpro9Parser.EVENTS)


                    pass
                elif token in [VisualFoxpro9Parser.DOEVENTS]:
                    self.state = 1365
                    self.match(VisualFoxpro9Parser.DOEVENTS)
                    self.state = 1367
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.FORCE:
                        self.state = 1366
                        self.match(VisualFoxpro9Parser.FORCE)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 62:
                localctx = VisualFoxpro9Parser.UnlockCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 62)
                self.state = 1371
                self.match(VisualFoxpro9Parser.UNLOCK)
                self.state = 1372
                self.match(VisualFoxpro9Parser.ALL)
                pass

            elif la_ == 63:
                localctx = VisualFoxpro9Parser.ClearStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 63)
                self.state = 1373
                self.match(VisualFoxpro9Parser.CLEAR)
                self.state = 1400
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ALL]:
                    self.state = 1374
                    self.match(VisualFoxpro9Parser.ALL)
                    pass
                elif token in [VisualFoxpro9Parser.CLASS]:
                    self.state = 1375
                    self.match(VisualFoxpro9Parser.CLASS)
                    self.state = 1376
                    self.expr(0)
                    pass
                elif token in [VisualFoxpro9Parser.CLASSLIB]:
                    self.state = 1377
                    self.match(VisualFoxpro9Parser.CLASSLIB)
                    self.state = 1378
                    self.specialExpr()
                    pass
                elif token in [VisualFoxpro9Parser.DEBUG]:
                    self.state = 1379
                    self.match(VisualFoxpro9Parser.DEBUG)
                    pass
                elif token in [VisualFoxpro9Parser.DLLS]:
                    self.state = 1380
                    self.match(VisualFoxpro9Parser.DLLS)
                    self.state = 1381
                    self.specialArgs()
                    pass
                elif token in [VisualFoxpro9Parser.EVENTS]:
                    self.state = 1382
                    self.match(VisualFoxpro9Parser.EVENTS)
                    pass
                elif token in [VisualFoxpro9Parser.ERROR]:
                    self.state = 1383
                    self.match(VisualFoxpro9Parser.ERROR)
                    pass
                elif token in [VisualFoxpro9Parser.FIELDS]:
                    self.state = 1384
                    self.match(VisualFoxpro9Parser.FIELDS)
                    pass
                elif token in [VisualFoxpro9Parser.GETS]:
                    self.state = 1385
                    self.match(VisualFoxpro9Parser.GETS)
                    pass
                elif token in [VisualFoxpro9Parser.MACROS]:
                    self.state = 1386
                    self.match(VisualFoxpro9Parser.MACROS)
                    pass
                elif token in [VisualFoxpro9Parser.MEMORY]:
                    self.state = 1387
                    self.match(VisualFoxpro9Parser.MEMORY)
                    pass
                elif token in [VisualFoxpro9Parser.MENUS]:
                    self.state = 1388
                    self.match(VisualFoxpro9Parser.MENUS)
                    pass
                elif token in [VisualFoxpro9Parser.POPUP]:
                    self.state = 1389
                    self.match(VisualFoxpro9Parser.POPUP)
                    pass
                elif token in [VisualFoxpro9Parser.PROGRAM]:
                    self.state = 1390
                    self.match(VisualFoxpro9Parser.PROGRAM)
                    pass
                elif token in [VisualFoxpro9Parser.PROMPT]:
                    self.state = 1391
                    self.match(VisualFoxpro9Parser.PROMPT)
                    pass
                elif token in [VisualFoxpro9Parser.READ]:
                    self.state = 1392
                    self.match(VisualFoxpro9Parser.READ)
                    self.state = 1394
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ALL:
                        self.state = 1393
                        self.match(VisualFoxpro9Parser.ALL)


                    pass
                elif token in [VisualFoxpro9Parser.RESOURCES]:
                    self.state = 1396
                    self.match(VisualFoxpro9Parser.RESOURCES)
                    self.state = 1397
                    self.expr(0)
                    pass
                elif token in [VisualFoxpro9Parser.TYPEAHEAD]:
                    self.state = 1398
                    self.match(VisualFoxpro9Parser.TYPEAHEAD)
                    pass
                elif token in [VisualFoxpro9Parser.WINDOW]:
                    self.state = 1399
                    self.match(VisualFoxpro9Parser.WINDOW)
                    pass
                elif token in [VisualFoxpro9Parser.EOF, VisualFoxpro9Parser.NL]:
                    pass
                else:
                    pass
                pass

            elif la_ == 64:
                localctx = VisualFoxpro9Parser.ReportContext(self, localctx)
                self.enterOuterAlt(localctx, 64)
                self.state = 1402
                self.match(VisualFoxpro9Parser.REPORT)
                self.state = 1403
                self.match(VisualFoxpro9Parser.FORM)
                self.state = 1406
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.QUESTION]:
                    self.state = 1404
                    self.match(VisualFoxpro9Parser.QUESTION)
                    pass
                elif token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.HASH, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.ASSERTS, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.CHDIR, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.COMMAND, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.COMPILE, VisualFoxpro9Parser.CONSOLE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.DATASESSION, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.DEBUG, VisualFoxpro9Parser.DEBUGOUT, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.DOEVENTS, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENCRYPT, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.ENDTEXT, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.FILL, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.FLAGS, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.FORCE, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.FOXOBJECT, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.GETS, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.HIDE, VisualFoxpro9Parser.ICON, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.JOIN, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.LINKED, VisualFoxpro9Parser.LIST, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MASTER, VisualFoxpro9Parser.MAX, VisualFoxpro9Parser.MEMO, VisualFoxpro9Parser.MEMORY, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.MENUS, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.MIN, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.MODIFY, VisualFoxpro9Parser.MULTILOCKS, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.NODEBUG, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.NORM, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.NOUPDATE, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.PRETEXT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.RESOURCES, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.RESTORE, VisualFoxpro9Parser.RETRY, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.SAFETY, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.SHOW, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.SIZE, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.SORT, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.TABLEPROMPT, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.TEXT, VisualFoxpro9Parser.TEXTMERGE, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.TITLE, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.UNLOCK, VisualFoxpro9Parser.UPDATE, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ZOOM, VisualFoxpro9Parser.ID]:
                    self.state = 1405
                    self.specialExpr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.NOCONSOLE or _la==VisualFoxpro9Parser.NOEJECT or _la==VisualFoxpro9Parser.TO:
                    self.state = 1415
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.NOEJECT]:
                        self.state = 1408
                        self.match(VisualFoxpro9Parser.NOEJECT)
                        pass
                    elif token in [VisualFoxpro9Parser.TO]:
                        self.state = 1409
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1410
                        self.match(VisualFoxpro9Parser.PRINTER)
                        self.state = 1412
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.PROMPT:
                            self.state = 1411
                            self.match(VisualFoxpro9Parser.PROMPT)


                        pass
                    elif token in [VisualFoxpro9Parser.NOCONSOLE]:
                        self.state = 1414
                        self.match(VisualFoxpro9Parser.NOCONSOLE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1419
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 65:
                localctx = VisualFoxpro9Parser.DllDeclareContext(self, localctx)
                self.enterOuterAlt(localctx, 65)
                self.state = 1420
                self.match(VisualFoxpro9Parser.DECLARE)
                self.state = 1422
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                if la_ == 1:
                    self.state = 1421
                    localctx.returnType = self.datatype()


                self.state = 1424
                self.identifier()
                self.state = 1425
                self.match(VisualFoxpro9Parser.IN)
                self.state = 1426
                self.specialExpr()
                self.state = 1429
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                if la_ == 1:
                    self.state = 1427
                    self.match(VisualFoxpro9Parser.AS)
                    self.state = 1428
                    localctx.alias = self.identifier()


                self.state = 1432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 1431
                    self.dllArgs()


                pass

            elif la_ == 66:
                localctx = VisualFoxpro9Parser.ShellRunContext(self, localctx)
                self.enterOuterAlt(localctx, 66)
                self.state = 1434
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.EXCLAMATION or _la==VisualFoxpro9Parser.RUN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1437
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                if la_ == 1:
                    self.state = 1435
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    self.state = 1436
                    self.identifier()


                self.state = 1442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.MACROLINE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DB4 - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 1439
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1444
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 67:
                localctx = VisualFoxpro9Parser.AssertContext(self, localctx)
                self.enterOuterAlt(localctx, 67)
                self.state = 1445
                self.match(VisualFoxpro9Parser.ASSERT)
                self.state = 1446
                self.expr(0)
                self.state = 1449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MESSAGE:
                    self.state = 1447
                    self.match(VisualFoxpro9Parser.MESSAGE)
                    self.state = 1448
                    self.expr(0)


                pass

            elif la_ == 68:
                localctx = VisualFoxpro9Parser.CompileCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 68)
                self.state = 1451
                self.match(VisualFoxpro9Parser.COMPILE)
                self.state = 1453
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                if la_ == 1:
                    self.state = 1452
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.CLASSLIB or _la==VisualFoxpro9Parser.DATABASE or _la==VisualFoxpro9Parser.FORM or _la==VisualFoxpro9Parser.LABEL or _la==VisualFoxpro9Parser.REPORT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 1461
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
                    if la_ == 1:
                        self.state = 1455
                        self.match(VisualFoxpro9Parser.ALL)
                        pass

                    elif la_ == 2:
                        self.state = 1456
                        self.match(VisualFoxpro9Parser.ENCRYPT)
                        pass

                    elif la_ == 3:
                        self.state = 1457
                        self.match(VisualFoxpro9Parser.NODEBUG)
                        pass

                    elif la_ == 4:
                        self.state = 1458
                        self.match(VisualFoxpro9Parser.AS)
                        self.state = 1459
                        self.specialExpr()
                        pass

                    elif la_ == 5:
                        self.state = 1460
                        self.specialExpr()
                        pass


                    self.state = 1465
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 69:
                localctx = VisualFoxpro9Parser.ListStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 69)
                self.state = 1466
                self.match(VisualFoxpro9Parser.LIST)
                self.state = 1467
                self.scopeClause()
                pass

            elif la_ == 70:
                localctx = VisualFoxpro9Parser.SaveToCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 70)
                self.state = 1468
                self.match(VisualFoxpro9Parser.SAVE)
                self.state = 1469
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1473
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 1470
                    self.match(VisualFoxpro9Parser.MEMO)
                    self.state = 1471
                    self.specialExpr()
                    pass

                elif la_ == 2:
                    self.state = 1472
                    self.specialExpr()
                    pass


                self.state = 1478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ALL:
                    self.state = 1475
                    self.match(VisualFoxpro9Parser.ALL)
                    self.state = 1476
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.EXCEPT or _la==VisualFoxpro9Parser.LIKE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1477
                    self.specialExpr()


                pass

            elif la_ == 71:
                localctx = VisualFoxpro9Parser.RestoreCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 71)
                self.state = 1480
                self.match(VisualFoxpro9Parser.RESTORE)
                self.state = 1481
                self.match(VisualFoxpro9Parser.FROM)
                self.state = 1482
                self.specialExpr()
                self.state = 1484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1483
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass

            elif la_ == 72:
                localctx = VisualFoxpro9Parser.ZoomCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 72)
                self.state = 1486
                self.match(VisualFoxpro9Parser.ZOOM)
                self.state = 1487
                self.match(VisualFoxpro9Parser.WINDOW)
                self.state = 1488
                self.specialExpr()
                self.state = 1489
                _la = self._input.LA(1)
                if not(((((_la - 171)) & ~0x3f) == 0 and ((1 << (_la - 171)) & ((1 << (VisualFoxpro9Parser.MAX - 171)) | (1 << (VisualFoxpro9Parser.MIN - 171)) | (1 << (VisualFoxpro9Parser.NORM - 171)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1513
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.AT]:
                    self.state = 1490
                    self.match(VisualFoxpro9Parser.AT)
                    self.state = 1491
                    self.expr(0)
                    self.state = 1492
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1493
                    self.expr(0)
                    pass
                elif token in [VisualFoxpro9Parser.FROM]:
                    self.state = 1495
                    self.match(VisualFoxpro9Parser.FROM)
                    self.state = 1496
                    self.match(VisualFoxpro9Parser.AT)
                    self.state = 1497
                    self.expr(0)
                    self.state = 1498
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1499
                    self.expr(0)
                    self.state = 1511
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.SIZE]:
                        self.state = 1500
                        self.match(VisualFoxpro9Parser.SIZE)
                        self.state = 1501
                        self.match(VisualFoxpro9Parser.AT)
                        self.state = 1502
                        self.expr(0)
                        self.state = 1503
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 1504
                        self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.TO]:
                        self.state = 1506
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1507
                        self.expr(0)
                        self.state = 1508
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 1509
                        self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.EOF, VisualFoxpro9Parser.NL]:
                        pass
                    else:
                        pass
                    pass
                elif token in [VisualFoxpro9Parser.EOF, VisualFoxpro9Parser.NL]:
                    pass
                else:
                    pass
                pass

            elif la_ == 73:
                localctx = VisualFoxpro9Parser.TextBlockContext(self, localctx)
                self.enterOuterAlt(localctx, 73)
                self.state = 1515
                self.match(VisualFoxpro9Parser.TEXT)
                self.state = 1527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.ADDITIVE or _la==VisualFoxpro9Parser.FLAGS or _la==VisualFoxpro9Parser.NOSHOW or _la==VisualFoxpro9Parser.PRETEXT or _la==VisualFoxpro9Parser.TEXTMERGE or _la==VisualFoxpro9Parser.TO:
                    self.state = 1525
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.TO]:
                        self.state = 1516
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1517
                        self.idAttr()
                        pass
                    elif token in [VisualFoxpro9Parser.ADDITIVE]:
                        self.state = 1518
                        self.match(VisualFoxpro9Parser.ADDITIVE)
                        pass
                    elif token in [VisualFoxpro9Parser.TEXTMERGE]:
                        self.state = 1519
                        self.match(VisualFoxpro9Parser.TEXTMERGE)
                        pass
                    elif token in [VisualFoxpro9Parser.NOSHOW]:
                        self.state = 1520
                        self.match(VisualFoxpro9Parser.NOSHOW)
                        pass
                    elif token in [VisualFoxpro9Parser.FLAGS]:
                        self.state = 1521
                        self.match(VisualFoxpro9Parser.FLAGS)
                        self.state = 1522
                        localctx.flagExpr = self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.PRETEXT]:
                        self.state = 1523
                        self.match(VisualFoxpro9Parser.PRETEXT)
                        self.state = 1524
                        localctx.pretext = self.expr(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1529
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1530
                self.match(VisualFoxpro9Parser.NL)
                self.state = 1531
                self.textChunk()
                self.state = 1532
                self.match(VisualFoxpro9Parser.ENDTEXT)
                pass

            elif la_ == 74:
                localctx = VisualFoxpro9Parser.ShowCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 74)
                self.state = 1534
                self.match(VisualFoxpro9Parser.SHOW)
                self.state = 1535
                self.match(VisualFoxpro9Parser.GETS)
                pass

            elif la_ == 75:
                localctx = VisualFoxpro9Parser.HideCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 75)
                self.state = 1536
                self.match(VisualFoxpro9Parser.HIDE)
                self.state = 1537
                self.match(VisualFoxpro9Parser.WINDOW)
                self.state = 1541
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
                if la_ == 1:
                    self.state = 1538
                    self.match(VisualFoxpro9Parser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 1539
                    self.match(VisualFoxpro9Parser.SCREEN)
                    pass

                elif la_ == 3:
                    self.state = 1540
                    self.args()
                    pass


                pass

            elif la_ == 76:
                localctx = VisualFoxpro9Parser.ExprCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 76)
                self.state = 1543
                self.match(VisualFoxpro9Parser.EQUALS)
                self.state = 1544
                self.expr(0)
                pass

            elif la_ == 77:
                localctx = VisualFoxpro9Parser.ComplexIdCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 77)
                self.state = 1545
                self.complexId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryConditionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.QueryConditionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def scopeClause(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScopeClauseContext,0)


        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def WHILE(self):
            return self.getToken(VisualFoxpro9Parser.WHILE, 0)

        def NOOPTIMIZE(self):
            return self.getToken(VisualFoxpro9Parser.NOOPTIMIZE, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_queryCondition

        def accept(self, visitor):
            if hasattr(visitor, "visitQueryCondition"):
                return visitor.visitQueryCondition(self)
            else:
                return visitor.visitChildren(self)




    def queryCondition(self):

        localctx = VisualFoxpro9Parser.QueryConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_queryCondition)
        try:
            self.state = 1554
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.REST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1548
                self.scopeClause()
                pass
            elif token in [VisualFoxpro9Parser.FOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1549
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 1550
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.WHILE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1551
                self.match(VisualFoxpro9Parser.WHILE)
                self.state = 1552
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.NOOPTIMIZE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1553
                self.match(VisualFoxpro9Parser.NOOPTIMIZE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextChunkContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.TextChunkContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ENDTEXT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ENDTEXT)
            else:
                return self.getToken(VisualFoxpro9Parser.ENDTEXT, i)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_textChunk

        def accept(self, visitor):
            if hasattr(visitor, "visitTextChunk"):
                return visitor.visitTextChunk(self)
            else:
                return visitor.visitChildren(self)




    def textChunk(self):

        localctx = VisualFoxpro9Parser.TextChunkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_textChunk)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.MACROLINE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DB4 - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.NL - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                self.state = 1556
                _la = self._input.LA(1)
                if _la <= 0 or _la==VisualFoxpro9Parser.ENDTEXT:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1561
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DllArgsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DllArgsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def dllArg(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.DllArgContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.DllArgContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_dllArgs

        def accept(self, visitor):
            if hasattr(visitor, "visitDllArgs"):
                return visitor.visitDllArgs(self)
            else:
                return visitor.visitChildren(self)




    def dllArgs(self):

        localctx = VisualFoxpro9Parser.DllArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dllArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1562
            self.dllArg()
            self.state = 1567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.COMMA:
                self.state = 1563
                self.match(VisualFoxpro9Parser.COMMA)
                self.state = 1564
                self.dllArg()
                self.state = 1569
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DllArgContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DllArgContext, self).__init__(parent, invokingState)
            self.parser = parser

        def datatype(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DatatypeContext,0)


        def COMMERCIALAT(self):
            return self.getToken(VisualFoxpro9Parser.COMMERCIALAT, 0)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_dllArg

        def accept(self, visitor):
            if hasattr(visitor, "visitDllArg"):
                return visitor.visitDllArg(self)
            else:
                return visitor.visitChildren(self)




    def dllArg(self):

        localctx = VisualFoxpro9Parser.DllArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dllArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1570
            self.datatype()
            self.state = 1572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.COMMERCIALAT:
                self.state = 1571
                self.match(VisualFoxpro9Parser.COMMERCIALAT)


            self.state = 1575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                self.state = 1574
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableFieldContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.TableFieldContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)


        def arrayIndex(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArrayIndexContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_tableField

        def accept(self, visitor):
            if hasattr(visitor, "visitTableField"):
                return visitor.visitTableField(self)
            else:
                return visitor.visitChildren(self)




    def tableField(self):

        localctx = VisualFoxpro9Parser.TableFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_tableField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1577
            self.identifier()
            self.state = 1578
            self.identifier()
            self.state = 1580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.LEFTBRACKET or _la==VisualFoxpro9Parser.LEFTPAREN:
                self.state = 1579
                self.arrayIndex()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetCmdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SetCmdContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.setword = None # Token
            self.ofExpr = None # SpecialExprContext
            self.inExpr = None # SpecialExprContext

        def ALTERNATE(self):
            return self.getToken(VisualFoxpro9Parser.ALTERNATE, 0)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)

        def OFF(self):
            return self.getToken(VisualFoxpro9Parser.OFF, 0)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)

        def ASSERT(self):
            return self.getToken(VisualFoxpro9Parser.ASSERT, 0)

        def ASSERTS(self):
            return self.getToken(VisualFoxpro9Parser.ASSERTS, 0)

        def BELL(self):
            return self.getToken(VisualFoxpro9Parser.BELL, 0)

        def CENTURY(self):
            return self.getToken(VisualFoxpro9Parser.CENTURY, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def ROLLOVER(self):
            return self.getToken(VisualFoxpro9Parser.ROLLOVER, 0)

        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)

        def ALIAS(self):
            return self.getToken(VisualFoxpro9Parser.ALIAS, 0)

        def CLOCK(self):
            return self.getToken(VisualFoxpro9Parser.CLOCK, 0)

        def STATUS(self):
            return self.getToken(VisualFoxpro9Parser.STATUS, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)

        def COMPATIBLE(self):
            return self.getToken(VisualFoxpro9Parser.COMPATIBLE, 0)

        def DB4(self):
            return self.getToken(VisualFoxpro9Parser.DB4, 0)

        def FOXPLUS(self):
            return self.getToken(VisualFoxpro9Parser.FOXPLUS, 0)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)

        def NOPROMPT(self):
            return self.getToken(VisualFoxpro9Parser.NOPROMPT, 0)

        def CONSOLE(self):
            return self.getToken(VisualFoxpro9Parser.CONSOLE, 0)

        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)

        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)

        def DATASESSION(self):
            return self.getToken(VisualFoxpro9Parser.DATASESSION, 0)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def DATE(self):
            return self.getToken(VisualFoxpro9Parser.DATE, 0)

        def DEFAULT(self):
            return self.getToken(VisualFoxpro9Parser.DEFAULT, 0)

        def DELETE(self):
            return self.getToken(VisualFoxpro9Parser.DELETE, 0)

        def DELETED(self):
            return self.getToken(VisualFoxpro9Parser.DELETED, 0)

        def EXACT(self):
            return self.getToken(VisualFoxpro9Parser.EXACT, 0)

        def EXCLUSIVE(self):
            return self.getToken(VisualFoxpro9Parser.EXCLUSIVE, 0)

        def FILTER(self):
            return self.getToken(VisualFoxpro9Parser.FILTER, 0)

        def HELP(self):
            return self.getToken(VisualFoxpro9Parser.HELP, 0)

        def COLLECTION(self):
            return self.getToken(VisualFoxpro9Parser.COLLECTION, 0)

        def SYSTEM(self):
            return self.getToken(VisualFoxpro9Parser.SYSTEM, 0)

        def INDEX(self):
            return self.getToken(VisualFoxpro9Parser.INDEX, 0)

        def LIBRARY(self):
            return self.getToken(VisualFoxpro9Parser.LIBRARY, 0)

        def MEMOWIDTH(self):
            return self.getToken(VisualFoxpro9Parser.MEMOWIDTH, 0)

        def MULTILOCKS(self):
            return self.getToken(VisualFoxpro9Parser.MULTILOCKS, 0)

        def NEAR(self):
            return self.getToken(VisualFoxpro9Parser.NEAR, 0)

        def NOTIFY(self):
            return self.getToken(VisualFoxpro9Parser.NOTIFY, 0)

        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)

        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)

        def PRINTER(self):
            return self.getToken(VisualFoxpro9Parser.PRINTER, 0)

        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def REFRESH(self):
            return self.getToken(VisualFoxpro9Parser.REFRESH, 0)

        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)

        def RELATION(self):
            return self.getToken(VisualFoxpro9Parser.RELATION, 0)

        def SAFETY(self):
            return self.getToken(VisualFoxpro9Parser.SAFETY, 0)

        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)

        def STEP(self):
            return self.getToken(VisualFoxpro9Parser.STEP, 0)

        def SYSMENU(self):
            return self.getToken(VisualFoxpro9Parser.SYSMENU, 0)

        def SAVE(self):
            return self.getToken(VisualFoxpro9Parser.SAVE, 0)

        def NOSAVE(self):
            return self.getToken(VisualFoxpro9Parser.NOSAVE, 0)

        def TABLEPROMPT(self):
            return self.getToken(VisualFoxpro9Parser.TABLEPROMPT, 0)

        def TALK(self):
            return self.getToken(VisualFoxpro9Parser.TALK, 0)

        def TYPEAHEAD(self):
            return self.getToken(VisualFoxpro9Parser.TYPEAHEAD, 0)

        def UNIQUE(self):
            return self.getToken(VisualFoxpro9Parser.UNIQUE, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_setCmd

        def accept(self, visitor):
            if hasattr(visitor, "visitSetCmd"):
                return visitor.visitSetCmd(self)
            else:
                return visitor.visitChildren(self)




    def setCmd(self):

        localctx = VisualFoxpro9Parser.SetCmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_setCmd)
        self._la = 0 # Token type
        try:
            self.state = 1816
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ALTERNATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1582
                localctx.setword = self.match(VisualFoxpro9Parser.ALTERNATE)
                self.state = 1590
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1583
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1584
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1585
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1586
                    self.specialExpr()
                    self.state = 1588
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ADDITIVE:
                        self.state = 1587
                        self.match(VisualFoxpro9Parser.ADDITIVE)


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.ASSERTS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1592
                localctx.setword = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ASSERT or _la==VisualFoxpro9Parser.ASSERTS):
                    localctx.setword = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1593
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.OFF or _la==VisualFoxpro9Parser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.BELL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1594
                localctx.setword = self.match(VisualFoxpro9Parser.BELL)
                self.state = 1599
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1595
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1596
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1597
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1598
                    self.specialExpr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.CENTURY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1601
                localctx.setword = self.match(VisualFoxpro9Parser.CENTURY)
                self.state = 1612
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1602
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1603
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1604
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1610
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                        self.state = 1605
                        self.expr(0)
                        self.state = 1608
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.ROLLOVER:
                            self.state = 1606
                            self.match(VisualFoxpro9Parser.ROLLOVER)
                            self.state = 1607
                            self.expr(0)




                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.CLASSLIB]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1614
                localctx.setword = self.match(VisualFoxpro9Parser.CLASSLIB)
                self.state = 1615
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1616
                self.specialExpr()
                self.state = 1619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1617
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1618
                    self.specialExpr()


                self.state = 1623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ALIAS:
                    self.state = 1621
                    self.match(VisualFoxpro9Parser.ALIAS)
                    self.state = 1622
                    self.specialExpr()


                self.state = 1626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1625
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [VisualFoxpro9Parser.CLOCK]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1628
                localctx.setword = self.match(VisualFoxpro9Parser.CLOCK)
                self.state = 1639
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1629
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1630
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.STATUS]:
                    self.state = 1631
                    self.match(VisualFoxpro9Parser.STATUS)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1632
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1637
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                        self.state = 1633
                        self.expr(0)
                        self.state = 1634
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 1635
                        self.expr(0)


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.COMPATIBLE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1641
                localctx.setword = self.match(VisualFoxpro9Parser.COMPATIBLE)
                self.state = 1642
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.DB4 or _la==VisualFoxpro9Parser.FOXPLUS or _la==VisualFoxpro9Parser.OFF or _la==VisualFoxpro9Parser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NOPROMPT or _la==VisualFoxpro9Parser.PROMPT:
                    self.state = 1643
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.NOPROMPT or _la==VisualFoxpro9Parser.PROMPT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [VisualFoxpro9Parser.CONSOLE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1646
                localctx.setword = self.match(VisualFoxpro9Parser.CONSOLE)
                self.state = 1647
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.OFF or _la==VisualFoxpro9Parser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.CURSOR]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1648
                localctx.setword = self.match(VisualFoxpro9Parser.CURSOR)
                self.state = 1649
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.OFF or _la==VisualFoxpro9Parser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.DATABASE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1650
                localctx.setword = self.match(VisualFoxpro9Parser.DATABASE)
                self.state = 1651
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1652
                self.specialExpr()
                pass
            elif token in [VisualFoxpro9Parser.DATASESSION]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1653
                localctx.setword = self.match(VisualFoxpro9Parser.DATASESSION)
                self.state = 1654
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1655
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.DATE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1656
                localctx.setword = self.match(VisualFoxpro9Parser.DATE)
                self.state = 1658
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
                if la_ == 1:
                    self.state = 1657
                    self.match(VisualFoxpro9Parser.TO)


                self.state = 1660
                self.identifier()
                pass
            elif token in [VisualFoxpro9Parser.DEFAULT]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1661
                localctx.setword = self.match(VisualFoxpro9Parser.DEFAULT)
                self.state = 1662
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1663
                self.specialExpr()
                pass
            elif token in [VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.DELETED]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1664
                localctx.setword = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.DELETE or _la==VisualFoxpro9Parser.DELETED):
                    localctx.setword = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1665
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.OFF or _la==VisualFoxpro9Parser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.EXACT]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1666
                localctx.setword = self.match(VisualFoxpro9Parser.EXACT)
                self.state = 1667
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.OFF or _la==VisualFoxpro9Parser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.EXCLUSIVE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1668
                localctx.setword = self.match(VisualFoxpro9Parser.EXCLUSIVE)
                self.state = 1669
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.OFF or _la==VisualFoxpro9Parser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.FILTER]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1670
                localctx.setword = self.match(VisualFoxpro9Parser.FILTER)
                self.state = 1671
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 1672
                    self.specialExpr()
                    self.state = 1675
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.IN:
                        self.state = 1673
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1674
                        self.specialExpr()




                pass
            elif token in [VisualFoxpro9Parser.HELP]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1679
                localctx.setword = self.match(VisualFoxpro9Parser.HELP)
                self.state = 1691
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1680
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1681
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1682
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1684
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                        self.state = 1683
                        self.specialExpr()


                    pass
                elif token in [VisualFoxpro9Parser.COLLECTION]:
                    self.state = 1686
                    self.match(VisualFoxpro9Parser.COLLECTION)
                    self.state = 1688
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                        self.state = 1687
                        self.specialExpr()


                    pass
                elif token in [VisualFoxpro9Parser.SYSTEM]:
                    self.state = 1690
                    self.match(VisualFoxpro9Parser.SYSTEM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.INDEX]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1693
                localctx.setword = self.match(VisualFoxpro9Parser.INDEX)
                self.state = 1694
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                    self.state = 1695
                    self.specialExpr()


                pass
            elif token in [VisualFoxpro9Parser.LIBRARY]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1698
                localctx.setword = self.match(VisualFoxpro9Parser.LIBRARY)
                self.state = 1699
                self.match(VisualFoxpro9Parser.TO)

                self.state = 1700
                self.specialExpr()
                self.state = 1702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1701
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [VisualFoxpro9Parser.MEMOWIDTH]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1704
                localctx.setword = self.match(VisualFoxpro9Parser.MEMOWIDTH)
                self.state = 1705
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1706
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.MULTILOCKS]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1707
                localctx.setword = self.match(VisualFoxpro9Parser.MULTILOCKS)
                self.state = 1708
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.OFF or _la==VisualFoxpro9Parser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.NEAR]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1709
                localctx.setword = self.match(VisualFoxpro9Parser.NEAR)
                self.state = 1710
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.OFF or _la==VisualFoxpro9Parser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.NOTIFY]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1711
                localctx.setword = self.match(VisualFoxpro9Parser.NOTIFY)
                self.state = 1713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.CURSOR:
                    self.state = 1712
                    self.match(VisualFoxpro9Parser.CURSOR)


                self.state = 1715
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.OFF or _la==VisualFoxpro9Parser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.ORDER]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1716
                localctx.setword = self.match(VisualFoxpro9Parser.ORDER)
                self.state = 1717
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1734
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                if la_ == 1:
                    self.state = 1718
                    self.specialExpr()

                elif la_ == 2:
                    self.state = 1720
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
                    if la_ == 1:
                        self.state = 1719
                        self.match(VisualFoxpro9Parser.TAG)


                    self.state = 1722
                    self.specialExpr()
                    self.state = 1725
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.OF:
                        self.state = 1723
                        self.match(VisualFoxpro9Parser.OF)
                        self.state = 1724
                        localctx.ofExpr = self.specialExpr()


                    self.state = 1729
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.IN:
                        self.state = 1727
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1728
                        localctx.inExpr = self.specialExpr()


                    self.state = 1732
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING:
                        self.state = 1731
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                pass
            elif token in [VisualFoxpro9Parser.PRINTER]:
                self.enterOuterAlt(localctx, 26)
                self.state = 1736
                localctx.setword = self.match(VisualFoxpro9Parser.PRINTER)
                self.state = 1752
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1737
                    self.match(VisualFoxpro9Parser.ON)
                    self.state = 1739
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.PROMPT:
                        self.state = 1738
                        self.match(VisualFoxpro9Parser.PROMPT)


                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1741
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1742
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1750
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
                    if la_ == 1:
                        self.state = 1743
                        self.match(VisualFoxpro9Parser.DEFAULT)

                    elif la_ == 2:
                        self.state = 1744
                        self.match(VisualFoxpro9Parser.NAME)
                        self.state = 1745
                        self.specialExpr()

                    elif la_ == 3:
                        self.state = 1746
                        self.specialExpr()
                        self.state = 1748
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.ADDITIVE:
                            self.state = 1747
                            self.match(VisualFoxpro9Parser.ADDITIVE)




                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.PROCEDURE]:
                self.enterOuterAlt(localctx, 27)
                self.state = 1754
                localctx.setword = self.match(VisualFoxpro9Parser.PROCEDURE)
                self.state = 1755
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1756
                self.specialExpr()
                self.state = 1761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.COMMA:
                    self.state = 1757
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1758
                    self.specialExpr()
                    self.state = 1763
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1764
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [VisualFoxpro9Parser.REFRESH]:
                self.enterOuterAlt(localctx, 28)
                self.state = 1767
                localctx.setword = self.match(VisualFoxpro9Parser.REFRESH)
                self.state = 1768
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1769
                self.expr(0)
                self.state = 1772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COMMA:
                    self.state = 1770
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1771
                    self.expr(0)


                pass
            elif token in [VisualFoxpro9Parser.RELATION]:
                self.enterOuterAlt(localctx, 29)
                self.state = 1774
                localctx.setword = self.match(VisualFoxpro9Parser.RELATION)
                self.state = 1775
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1776
                self.expr(0)
                self.state = 1777
                self.match(VisualFoxpro9Parser.INTO)
                self.state = 1778
                self.specialExpr()
                self.state = 1781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1779
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1780
                    self.specialExpr()


                self.state = 1784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1783
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [VisualFoxpro9Parser.SAFETY]:
                self.enterOuterAlt(localctx, 30)
                self.state = 1786
                localctx.setword = self.match(VisualFoxpro9Parser.SAFETY)
                self.state = 1787
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.OFF or _la==VisualFoxpro9Parser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.STATUS]:
                self.enterOuterAlt(localctx, 31)
                self.state = 1788
                localctx.setword = self.match(VisualFoxpro9Parser.STATUS)
                self.state = 1790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.BAR:
                    self.state = 1789
                    self.match(VisualFoxpro9Parser.BAR)


                self.state = 1792
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.OFF or _la==VisualFoxpro9Parser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.STEP]:
                self.enterOuterAlt(localctx, 32)
                self.state = 1793
                localctx.setword = self.match(VisualFoxpro9Parser.STEP)
                self.state = 1794
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.OFF or _la==VisualFoxpro9Parser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.SYSMENU]:
                self.enterOuterAlt(localctx, 33)
                self.state = 1795
                localctx.setword = self.match(VisualFoxpro9Parser.SYSMENU)
                self.state = 1805
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1796
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1797
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1798
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1801
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                    if la_ == 1:
                        self.state = 1799
                        self.match(VisualFoxpro9Parser.DEFAULT)

                    elif la_ == 2:
                        self.state = 1800
                        self.expr(0)


                    pass
                elif token in [VisualFoxpro9Parser.SAVE]:
                    self.state = 1803
                    self.match(VisualFoxpro9Parser.SAVE)
                    pass
                elif token in [VisualFoxpro9Parser.NOSAVE]:
                    self.state = 1804
                    self.match(VisualFoxpro9Parser.NOSAVE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.TABLEPROMPT]:
                self.enterOuterAlt(localctx, 34)
                self.state = 1807
                localctx.setword = self.match(VisualFoxpro9Parser.TABLEPROMPT)
                self.state = 1808
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.OFF or _la==VisualFoxpro9Parser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.TALK]:
                self.enterOuterAlt(localctx, 35)
                self.state = 1809
                localctx.setword = self.match(VisualFoxpro9Parser.TALK)
                self.state = 1810
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.OFF or _la==VisualFoxpro9Parser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.TYPEAHEAD]:
                self.enterOuterAlt(localctx, 36)
                self.state = 1811
                localctx.setword = self.match(VisualFoxpro9Parser.TYPEAHEAD)
                self.state = 1812
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1813
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.UNIQUE]:
                self.enterOuterAlt(localctx, 37)
                self.state = 1814
                localctx.setword = self.match(VisualFoxpro9Parser.UNIQUE)
                self.state = 1815
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.OFF or _la==VisualFoxpro9Parser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationItemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DeclarationItemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def idAttr2(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttr2Context,0)


        def arrayIndex(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArrayIndexContext,0)


        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def asTypeOf(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeOfContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_declarationItem

        def accept(self, visitor):
            if hasattr(visitor, "visitDeclarationItem"):
                return visitor.visitDeclarationItem(self)
            else:
                return visitor.visitChildren(self)




    def declarationItem(self):

        localctx = VisualFoxpro9Parser.DeclarationItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_declarationItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.state = 1818
                self.idAttr2()
                self.state = 1819
                self.arrayIndex()
                pass

            elif la_ == 2:
                self.state = 1821
                self.idAttr()
                self.state = 1823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.AS:
                    self.state = 1822
                    self.asTypeOf()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.AsTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)

        def datatype(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DatatypeContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_asType

        def accept(self, visitor):
            if hasattr(visitor, "visitAsType"):
                return visitor.visitAsType(self)
            else:
                return visitor.visitChildren(self)




    def asType(self):

        localctx = VisualFoxpro9Parser.AsTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_asType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1827
            self.match(VisualFoxpro9Parser.AS)
            self.state = 1828
            self.datatype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsTypeOfContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.AsTypeOfContext, self).__init__(parent, invokingState)
            self.parser = parser

        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)


        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_asTypeOf

        def accept(self, visitor):
            if hasattr(visitor, "visitAsTypeOf"):
                return visitor.visitAsTypeOf(self)
            else:
                return visitor.visitChildren(self)




    def asTypeOf(self):

        localctx = VisualFoxpro9Parser.AsTypeOfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_asTypeOf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1830
            self.asType()
            self.state = 1833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.OF:
                self.state = 1831
                self.match(VisualFoxpro9Parser.OF)
                self.state = 1832
                self.specialExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsItemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ArgsItemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(VisualFoxpro9Parser.COMMA, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_argsItem

        def accept(self, visitor):
            if hasattr(visitor, "visitArgsItem"):
                return visitor.visitArgsItem(self)
            else:
                return visitor.visitChildren(self)




    def argsItem(self):

        localctx = VisualFoxpro9Parser.ArgsItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_argsItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1835
            self.match(VisualFoxpro9Parser.COMMA)
            self.state = 1837
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
            if la_ == 1:
                self.state = 1836
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ArgsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def argsItem(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArgsItemContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsItemContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_args

        def accept(self, visitor):
            if hasattr(visitor, "visitArgs"):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = VisualFoxpro9Parser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_args)
        self._la = 0 # Token type
        try:
            self.state = 1851
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.ASSERTS, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.CHDIR, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.COMMAND, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.COMPILE, VisualFoxpro9Parser.CONSOLE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.DATASESSION, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.DEBUG, VisualFoxpro9Parser.DEBUGOUT, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.DOEVENTS, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENCRYPT, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.ENDTEXT, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.FILL, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.FLAGS, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.FORCE, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.FOXOBJECT, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.GETS, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.HIDE, VisualFoxpro9Parser.ICON, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.JOIN, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.LINKED, VisualFoxpro9Parser.LIST, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MASTER, VisualFoxpro9Parser.MAX, VisualFoxpro9Parser.MEMO, VisualFoxpro9Parser.MEMORY, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.MENUS, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.MIN, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.MODIFY, VisualFoxpro9Parser.MULTILOCKS, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.NODEBUG, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.NORM, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.NOUPDATE, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.PRETEXT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.RESOURCES, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.RESTORE, VisualFoxpro9Parser.RETRY, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.SAFETY, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.SHOW, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.SIZE, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.SORT, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.TABLEPROMPT, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.TEXT, VisualFoxpro9Parser.TEXTMERGE, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.TITLE, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.UNLOCK, VisualFoxpro9Parser.UPDATE, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ZOOM, VisualFoxpro9Parser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1839
                self.expr(0)
                self.state = 1843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.COMMA:
                    self.state = 1840
                    self.argsItem()
                    self.state = 1845
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [VisualFoxpro9Parser.COMMA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1847 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1846
                    self.argsItem()
                    self.state = 1849 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualFoxpro9Parser.COMMA):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialArgsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SpecialArgsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COMMA)
            else:
                return self.getToken(VisualFoxpro9Parser.COMMA, i)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_specialArgs

        def accept(self, visitor):
            if hasattr(visitor, "visitSpecialArgs"):
                return visitor.visitSpecialArgs(self)
            else:
                return visitor.visitChildren(self)




    def specialArgs(self):

        localctx = VisualFoxpro9Parser.SpecialArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_specialArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1853
            self.specialExpr()
            self.state = 1858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.COMMA:
                self.state = 1854
                self.match(VisualFoxpro9Parser.COMMA)
                self.state = 1855
                self.specialExpr()
                self.state = 1860
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ReferenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COMMERCIALAT(self):
            return self.getToken(VisualFoxpro9Parser.COMMERCIALAT, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_reference

        def accept(self, visitor):
            if hasattr(visitor, "visitReference"):
                return visitor.visitReference(self)
            else:
                return visitor.visitChildren(self)




    def reference(self):

        localctx = VisualFoxpro9Parser.ReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1861
            self.match(VisualFoxpro9Parser.COMMERCIALAT)
            self.state = 1862
            self.idAttr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ExprContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_expr

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.ExprContext, self).copyFrom(ctx)


    class ComparisonContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.ComparisonContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def DOUBLEEQUALS(self):
            return self.getToken(VisualFoxpro9Parser.DOUBLEEQUALS, 0)
        def NOTEQUALS(self):
            return self.getToken(VisualFoxpro9Parser.NOTEQUALS, 0)
        def EQUALS(self):
            return self.getToken(VisualFoxpro9Parser.EQUALS, 0)
        def HASH(self):
            return self.getToken(VisualFoxpro9Parser.HASH, 0)
        def GREATERTHAN(self):
            return self.getToken(VisualFoxpro9Parser.GREATERTHAN, 0)
        def GTEQ(self):
            return self.getToken(VisualFoxpro9Parser.GTEQ, 0)
        def LESSTHAN(self):
            return self.getToken(VisualFoxpro9Parser.LESSTHAN, 0)
        def LTEQ(self):
            return self.getToken(VisualFoxpro9Parser.LTEQ, 0)
        def DOLLAR(self):
            return self.getToken(VisualFoxpro9Parser.DOLLAR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitComparison"):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)


    class CastExprContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.CastExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(VisualFoxpro9Parser.CAST, 0)
        def LEFTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.LEFTPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)

        def RIGHTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTPAREN, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCastExpr"):
                return visitor.visitCastExpr(self)
            else:
                return visitor.visitChildren(self)


    class AtomExprContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.AtomExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def atom(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AtomContext,0)

        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)
        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)

        def COLON(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COLON)
            else:
                return self.getToken(VisualFoxpro9Parser.COLON, i)
        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitAtomExpr"):
                return visitor.visitAtomExpr(self)
            else:
                return visitor.visitChildren(self)


    class SubExprContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.SubExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def LEFTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.LEFTPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def RIGHTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTPAREN, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitSubExpr"):
                return visitor.visitSubExpr(self)
            else:
                return visitor.visitChildren(self)


    class BooleanNegationContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.BooleanNegationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def EXCLAMATION(self):
            return self.getToken(VisualFoxpro9Parser.EXCLAMATION, 0)
        def NOT(self):
            return self.getToken(VisualFoxpro9Parser.NOT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitBooleanNegation"):
                return visitor.visitBooleanNegation(self)
            else:
                return visitor.visitChildren(self)


    class UnaryNegationContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.UnaryNegationContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def PLUS_SIGN(self):
            return self.getToken(VisualFoxpro9Parser.PLUS_SIGN, 0)
        def MINUS_SIGN(self):
            return self.getToken(VisualFoxpro9Parser.MINUS_SIGN, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitUnaryNegation"):
                return visitor.visitUnaryNegation(self)
            else:
                return visitor.visitChildren(self)


    class BooleanOrContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.BooleanOrContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def orOp(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.OrOpContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitBooleanOr"):
                return visitor.visitBooleanOr(self)
            else:
                return visitor.visitChildren(self)


    class PowerContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.PowerContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def ASTERISK(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.ASTERISK)
            else:
                return self.getToken(VisualFoxpro9Parser.ASTERISK, i)
        def CARAT(self):
            return self.getToken(VisualFoxpro9Parser.CARAT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitPower"):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)


    class MultiplicationContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.MultiplicationContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def ASTERISK(self):
            return self.getToken(VisualFoxpro9Parser.ASTERISK, 0)
        def FORWARDSLASH(self):
            return self.getToken(VisualFoxpro9Parser.FORWARDSLASH, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitMultiplication"):
                return visitor.visitMultiplication(self)
            else:
                return visitor.visitChildren(self)


    class ModuloContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.ModuloContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def MODULO(self):
            return self.getToken(VisualFoxpro9Parser.MODULO, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitModulo"):
                return visitor.visitModulo(self)
            else:
                return visitor.visitChildren(self)


    class ConstantExprContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.ConstantExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ConstantContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitConstantExpr"):
                return visitor.visitConstantExpr(self)
            else:
                return visitor.visitChildren(self)


    class AdditionContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.AdditionContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def PLUS_SIGN(self):
            return self.getToken(VisualFoxpro9Parser.PLUS_SIGN, 0)
        def MINUS_SIGN(self):
            return self.getToken(VisualFoxpro9Parser.MINUS_SIGN, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitAddition"):
                return visitor.visitAddition(self)
            else:
                return visitor.visitChildren(self)


    class BooleanAndContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.BooleanAndContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def andOp(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AndOpContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitBooleanAnd"):
                return visitor.visitBooleanAnd(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VisualFoxpro9Parser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 88
        self.enterRecursionRule(localctx, 88, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1891
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.SubExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1865
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 1866
                self.expr(0)
                self.state = 1867
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.UnaryNegationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1869
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.PLUS_SIGN or _la==VisualFoxpro9Parser.MINUS_SIGN):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1870
                self.expr(12)
                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.BooleanNegationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1871
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.EXCLAMATION or _la==VisualFoxpro9Parser.NOT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1872
                self.expr(11)
                pass

            elif la_ == 4:
                localctx = VisualFoxpro9Parser.ConstantExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1873
                self.constant()
                pass

            elif la_ == 5:
                localctx = VisualFoxpro9Parser.CastExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1874
                self.match(VisualFoxpro9Parser.CAST)
                self.state = 1875
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 1876
                self.expr(0)
                self.state = 1877
                self.asType()
                self.state = 1878
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass

            elif la_ == 6:
                localctx = VisualFoxpro9Parser.AtomExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1885
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                if la_ == 1:
                    self.state = 1880
                    self.match(VisualFoxpro9Parser.PERIOD)

                elif la_ == 2:
                    self.state = 1881
                    self.idAttr()
                    self.state = 1882
                    self.match(VisualFoxpro9Parser.COLON)
                    self.state = 1883
                    self.match(VisualFoxpro9Parser.COLON)


                self.state = 1887
                self.atom()
                self.state = 1889
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
                if la_ == 1:
                    self.state = 1888
                    self.trailer()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1922
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,299,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1920
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
                    if la_ == 1:
                        localctx = VisualFoxpro9Parser.PowerContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1893
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1897
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [VisualFoxpro9Parser.ASTERISK]:
                            self.state = 1894
                            self.match(VisualFoxpro9Parser.ASTERISK)
                            self.state = 1895
                            self.match(VisualFoxpro9Parser.ASTERISK)
                            pass
                        elif token in [VisualFoxpro9Parser.CARAT]:
                            self.state = 1896
                            self.match(VisualFoxpro9Parser.CARAT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1899
                        self.expr(11)
                        pass

                    elif la_ == 2:
                        localctx = VisualFoxpro9Parser.MultiplicationContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1900
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1901
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.ASTERISK or _la==VisualFoxpro9Parser.FORWARDSLASH):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1902
                        self.expr(10)
                        pass

                    elif la_ == 3:
                        localctx = VisualFoxpro9Parser.ModuloContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1903
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1904
                        self.match(VisualFoxpro9Parser.MODULO)
                        self.state = 1905
                        self.expr(9)
                        pass

                    elif la_ == 4:
                        localctx = VisualFoxpro9Parser.AdditionContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1906
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1907
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.PLUS_SIGN or _la==VisualFoxpro9Parser.MINUS_SIGN):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1908
                        self.expr(8)
                        pass

                    elif la_ == 5:
                        localctx = VisualFoxpro9Parser.ComparisonContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1909
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1910
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.DOLLAR))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1911
                        self.expr(7)
                        pass

                    elif la_ == 6:
                        localctx = VisualFoxpro9Parser.BooleanAndContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1912
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1913
                        self.andOp()
                        self.state = 1914
                        self.expr(6)
                        pass

                    elif la_ == 7:
                        localctx = VisualFoxpro9Parser.BooleanOrContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1916
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1917
                        self.orOp()
                        self.state = 1918
                        self.expr(5)
                        pass

             
                self.state = 1924
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,299,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AndOpContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.AndOpContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OTHERAND(self):
            return self.getToken(VisualFoxpro9Parser.OTHERAND, 0)

        def AND(self):
            return self.getToken(VisualFoxpro9Parser.AND, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_andOp

        def accept(self, visitor):
            if hasattr(visitor, "visitAndOp"):
                return visitor.visitAndOp(self)
            else:
                return visitor.visitChildren(self)




    def andOp(self):

        localctx = VisualFoxpro9Parser.AndOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_andOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1925
            _la = self._input.LA(1)
            if not(_la==VisualFoxpro9Parser.AND or _la==VisualFoxpro9Parser.OTHERAND):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrOpContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.OrOpContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OTHEROR(self):
            return self.getToken(VisualFoxpro9Parser.OTHEROR, 0)

        def OR(self):
            return self.getToken(VisualFoxpro9Parser.OR, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_orOp

        def accept(self, visitor):
            if hasattr(visitor, "visitOrOp"):
                return visitor.visitOrOp(self)
            else:
                return visitor.visitChildren(self)




    def orOp(self):

        localctx = VisualFoxpro9Parser.OrOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_orOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1927
            _la = self._input.LA(1)
            if not(_la==VisualFoxpro9Parser.OR or _la==VisualFoxpro9Parser.OTHEROR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexIdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ComplexIdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AtomContext,0)


        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def COLON(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COLON)
            else:
                return self.getToken(VisualFoxpro9Parser.COLON, i)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_complexId

        def accept(self, visitor):
            if hasattr(visitor, "visitComplexId"):
                return visitor.visitComplexId(self)
            else:
                return visitor.visitChildren(self)




    def complexId(self):

        localctx = VisualFoxpro9Parser.ComplexIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_complexId)
        self._la = 0 # Token type
        try:
            self.state = 1950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1934
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
                if la_ == 1:
                    self.state = 1929
                    self.match(VisualFoxpro9Parser.PERIOD)

                elif la_ == 2:
                    self.state = 1930
                    self.idAttr()
                    self.state = 1931
                    self.match(VisualFoxpro9Parser.COLON)
                    self.state = 1932
                    self.match(VisualFoxpro9Parser.COLON)


                self.state = 1936
                self.atom()
                self.state = 1937
                self.trailer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1944
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
                if la_ == 1:
                    self.state = 1939
                    self.match(VisualFoxpro9Parser.PERIOD)
                    pass

                elif la_ == 2:
                    self.state = 1940
                    self.idAttr()
                    self.state = 1941
                    self.match(VisualFoxpro9Parser.COLON)
                    self.state = 1942
                    self.match(VisualFoxpro9Parser.COLON)
                    pass


                self.state = 1946
                self.atom()
                self.state = 1948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTPAREN))) != 0):
                    self.state = 1947
                    self.trailer()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.AtomContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def reference(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ReferenceContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_atom

        def accept(self, visitor):
            if hasattr(visitor, "visitAtom"):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = VisualFoxpro9Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_atom)
        try:
            self.state = 1954
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.ASSERTS, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.CHDIR, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.COMMAND, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.COMPILE, VisualFoxpro9Parser.CONSOLE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.DATASESSION, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.DEBUG, VisualFoxpro9Parser.DEBUGOUT, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.DOEVENTS, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENCRYPT, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.ENDTEXT, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.FILL, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.FLAGS, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.FORCE, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.FOXOBJECT, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.GETS, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.HIDE, VisualFoxpro9Parser.ICON, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.JOIN, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.LINKED, VisualFoxpro9Parser.LIST, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MASTER, VisualFoxpro9Parser.MAX, VisualFoxpro9Parser.MEMO, VisualFoxpro9Parser.MEMORY, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.MENUS, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.MIN, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.MODIFY, VisualFoxpro9Parser.MULTILOCKS, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.NODEBUG, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.NORM, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.NOUPDATE, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.PRETEXT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.RESOURCES, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.RESTORE, VisualFoxpro9Parser.RETRY, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.SAFETY, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.SHOW, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.SIZE, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.SORT, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.TABLEPROMPT, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.TEXT, VisualFoxpro9Parser.TEXTMERGE, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.TITLE, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.UNLOCK, VisualFoxpro9Parser.UPDATE, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ZOOM, VisualFoxpro9Parser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1952
                self.identifier()
                pass
            elif token in [VisualFoxpro9Parser.COMMERCIALAT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1953
                self.reference()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.TrailerContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_trailer

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.TrailerContext, self).copyFrom(ctx)



    class FuncCallTrailerContext(TrailerContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.TrailerContext)
            super(VisualFoxpro9Parser.FuncCallTrailerContext, self).__init__(parser)
            self.copyFrom(ctx)

        def LEFTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.LEFTPAREN, 0)
        def RIGHTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTPAREN, 0)
        def LEFTBRACKET(self):
            return self.getToken(VisualFoxpro9Parser.LEFTBRACKET, 0)
        def RIGHTBRACKET(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTBRACKET, 0)
        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)

        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitFuncCallTrailer"):
                return visitor.visitFuncCallTrailer(self)
            else:
                return visitor.visitChildren(self)


    class IdentTrailerContext(TrailerContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.TrailerContext)
            super(VisualFoxpro9Parser.IdentTrailerContext, self).__init__(parser)
            self.copyFrom(ctx)

        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitIdentTrailer"):
                return visitor.visitIdentTrailer(self)
            else:
                return visitor.visitChildren(self)



    def trailer(self):

        localctx = VisualFoxpro9Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 1976
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.LEFTPAREN]:
                localctx = VisualFoxpro9Parser.FuncCallTrailerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1966
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.LEFTPAREN]:
                    self.state = 1956
                    self.match(VisualFoxpro9Parser.LEFTPAREN)
                    self.state = 1958
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                        self.state = 1957
                        self.args()


                    self.state = 1960
                    self.match(VisualFoxpro9Parser.RIGHTPAREN)
                    pass
                elif token in [VisualFoxpro9Parser.LEFTBRACKET]:
                    self.state = 1961
                    self.match(VisualFoxpro9Parser.LEFTBRACKET)
                    self.state = 1963
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0):
                        self.state = 1962
                        self.args()


                    self.state = 1965
                    self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1969
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
                if la_ == 1:
                    self.state = 1968
                    self.trailer()


                pass
            elif token in [VisualFoxpro9Parser.PERIOD]:
                localctx = VisualFoxpro9Parser.IdentTrailerContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1971
                self.match(VisualFoxpro9Parser.PERIOD)
                self.state = 1972
                self.identifier()
                self.state = 1974
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
                if la_ == 1:
                    self.state = 1973
                    self.trailer()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathnameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PathnameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(VisualFoxpro9Parser.COLON, 0)

        def pathElement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.PathElementContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.PathElementContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_pathname

        def accept(self, visitor):
            if hasattr(visitor, "visitPathname"):
                return visitor.visitPathname(self)
            else:
                return visitor.visitChildren(self)




    def pathname(self):

        localctx = VisualFoxpro9Parser.PathnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_pathname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                self.state = 1978
                self.identifier()
                self.state = 1979
                self.match(VisualFoxpro9Parser.COLON)


            self.state = 1984 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 1983
                    self.pathElement()

                else:
                    raise NoViableAltException(self)
                self.state = 1986 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,312,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PathElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)

        def BACKSLASH(self):
            return self.getToken(VisualFoxpro9Parser.BACKSLASH, 0)

        def SEMICOLON(self):
            return self.getToken(VisualFoxpro9Parser.SEMICOLON, 0)

        def AMPERSAND(self):
            return self.getToken(VisualFoxpro9Parser.AMPERSAND, 0)

        def COMMERCIALAT(self):
            return self.getToken(VisualFoxpro9Parser.COMMERCIALAT, 0)

        def PLUS_SIGN(self):
            return self.getToken(VisualFoxpro9Parser.PLUS_SIGN, 0)

        def MINUS_SIGN(self):
            return self.getToken(VisualFoxpro9Parser.MINUS_SIGN, 0)

        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)

        def LEFTBRACKET(self):
            return self.getToken(VisualFoxpro9Parser.LEFTBRACKET, 0)

        def RIGHTBRACKET(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTBRACKET, 0)

        def LEFTBRACE(self):
            return self.getToken(VisualFoxpro9Parser.LEFTBRACE, 0)

        def RIGHTBRACE(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTBRACE, 0)

        def LEFTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.LEFTPAREN, 0)

        def RIGHTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTPAREN, 0)

        def EXCLAMATION(self):
            return self.getToken(VisualFoxpro9Parser.EXCLAMATION, 0)

        def HASH(self):
            return self.getToken(VisualFoxpro9Parser.HASH, 0)

        def DOUBLEEQUALS(self):
            return self.getToken(VisualFoxpro9Parser.DOUBLEEQUALS, 0)

        def NOTEQUALS(self):
            return self.getToken(VisualFoxpro9Parser.NOTEQUALS, 0)

        def MODULO(self):
            return self.getToken(VisualFoxpro9Parser.MODULO, 0)

        def EQUALS(self):
            return self.getToken(VisualFoxpro9Parser.EQUALS, 0)

        def CARAT(self):
            return self.getToken(VisualFoxpro9Parser.CARAT, 0)

        def COMMA(self):
            return self.getToken(VisualFoxpro9Parser.COMMA, 0)

        def DOLLAR(self):
            return self.getToken(VisualFoxpro9Parser.DOLLAR, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_pathElement

        def accept(self, visitor):
            if hasattr(visitor, "visitPathElement"):
                return visitor.visitPathElement(self)
            else:
                return visitor.visitChildren(self)




    def pathElement(self):

        localctx = VisualFoxpro9Parser.PathElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_pathElement)
        try:
            self.state = 2013
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.ASSERTS, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.CHDIR, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.COMMAND, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.COMPILE, VisualFoxpro9Parser.CONSOLE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.DATASESSION, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.DEBUG, VisualFoxpro9Parser.DEBUGOUT, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.DOEVENTS, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENCRYPT, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.ENDTEXT, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.FILL, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.FLAGS, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.FORCE, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.FOXOBJECT, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.GETS, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.HIDE, VisualFoxpro9Parser.ICON, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.JOIN, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.LINKED, VisualFoxpro9Parser.LIST, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MASTER, VisualFoxpro9Parser.MAX, VisualFoxpro9Parser.MEMO, VisualFoxpro9Parser.MEMORY, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.MENUS, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.MIN, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.MODIFY, VisualFoxpro9Parser.MULTILOCKS, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.NODEBUG, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.NORM, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.NOUPDATE, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.PRETEXT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.RESOURCES, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.RESTORE, VisualFoxpro9Parser.RETRY, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.SAFETY, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.SHOW, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.SIZE, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.SORT, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.TABLEPROMPT, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.TEXT, VisualFoxpro9Parser.TEXTMERGE, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.TITLE, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.UNLOCK, VisualFoxpro9Parser.UPDATE, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ZOOM, VisualFoxpro9Parser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1988
                self.identifier()
                pass
            elif token in [VisualFoxpro9Parser.NUMBER_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1989
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                pass
            elif token in [VisualFoxpro9Parser.BACKSLASH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1990
                self.match(VisualFoxpro9Parser.BACKSLASH)
                pass
            elif token in [VisualFoxpro9Parser.SEMICOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1991
                self.match(VisualFoxpro9Parser.SEMICOLON)
                pass
            elif token in [VisualFoxpro9Parser.AMPERSAND]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1992
                self.match(VisualFoxpro9Parser.AMPERSAND)
                pass
            elif token in [VisualFoxpro9Parser.COMMERCIALAT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1993
                self.match(VisualFoxpro9Parser.COMMERCIALAT)
                pass
            elif token in [VisualFoxpro9Parser.PLUS_SIGN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1994
                self.match(VisualFoxpro9Parser.PLUS_SIGN)
                pass
            elif token in [VisualFoxpro9Parser.MINUS_SIGN]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1995
                self.match(VisualFoxpro9Parser.MINUS_SIGN)
                pass
            elif token in [VisualFoxpro9Parser.PERIOD]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1996
                self.match(VisualFoxpro9Parser.PERIOD)
                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACKET]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1997
                self.match(VisualFoxpro9Parser.LEFTBRACKET)
                pass
            elif token in [VisualFoxpro9Parser.RIGHTBRACKET]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1998
                self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1999
                self.match(VisualFoxpro9Parser.LEFTBRACE)
                pass
            elif token in [VisualFoxpro9Parser.RIGHTBRACE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2000
                self.match(VisualFoxpro9Parser.RIGHTBRACE)
                pass
            elif token in [VisualFoxpro9Parser.LEFTPAREN]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2001
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                pass
            elif token in [VisualFoxpro9Parser.RIGHTPAREN]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2002
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass
            elif token in [VisualFoxpro9Parser.EXCLAMATION]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2003
                self.match(VisualFoxpro9Parser.EXCLAMATION)
                pass
            elif token in [VisualFoxpro9Parser.HASH]:
                self.enterOuterAlt(localctx, 17)
                self.state = 2004
                self.match(VisualFoxpro9Parser.HASH)
                pass
            elif token in [VisualFoxpro9Parser.DOUBLEEQUALS]:
                self.enterOuterAlt(localctx, 18)
                self.state = 2005
                self.match(VisualFoxpro9Parser.DOUBLEEQUALS)
                pass
            elif token in [VisualFoxpro9Parser.NOTEQUALS]:
                self.enterOuterAlt(localctx, 19)
                self.state = 2006
                self.match(VisualFoxpro9Parser.NOTEQUALS)
                pass
            elif token in [VisualFoxpro9Parser.MODULO]:
                self.enterOuterAlt(localctx, 20)
                self.state = 2007
                self.match(VisualFoxpro9Parser.MODULO)
                pass
            elif token in [VisualFoxpro9Parser.EQUALS]:
                self.enterOuterAlt(localctx, 21)
                self.state = 2008
                self.match(VisualFoxpro9Parser.EQUALS)
                pass
            elif token in [VisualFoxpro9Parser.CARAT]:
                self.enterOuterAlt(localctx, 22)
                self.state = 2009
                self.match(VisualFoxpro9Parser.CARAT)
                pass
            elif token in [VisualFoxpro9Parser.COMMA]:
                self.enterOuterAlt(localctx, 23)
                self.state = 2010
                self.match(VisualFoxpro9Parser.COMMA)
                pass
            elif token in [VisualFoxpro9Parser.DOLLAR]:
                self.enterOuterAlt(localctx, 24)
                self.state = 2011
                self.match(VisualFoxpro9Parser.DOLLAR)
                pass
            elif token in [VisualFoxpro9Parser.T__0]:
                self.enterOuterAlt(localctx, 25)
                self.state = 2012
                self.match(VisualFoxpro9Parser.T__0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SpecialExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def pathname(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.PathnameContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_specialExpr

        def accept(self, visitor):
            if hasattr(visitor, "visitSpecialExpr"):
                return visitor.visitSpecialExpr(self)
            else:
                return visitor.visitChildren(self)




    def specialExpr(self):

        localctx = VisualFoxpro9Parser.SpecialExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_specialExpr)
        try:
            self.state = 2017
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2015
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2016
                self.pathname()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ConstantContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_constant

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.ConstantContext, self).copyFrom(ctx)



    class DateContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.DateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def LEFTBRACE(self):
            return self.getToken(VisualFoxpro9Parser.LEFTBRACE, 0)
        def RIGHTBRACE(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTBRACE, 0)
        def FORWARDSLASH(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.FORWARDSLASH)
            else:
                return self.getToken(VisualFoxpro9Parser.FORWARDSLASH, i)
        def COLON(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.COLON)
            else:
                return self.getToken(VisualFoxpro9Parser.COLON, i)
        def CARAT(self):
            return self.getToken(VisualFoxpro9Parser.CARAT, 0)
        def NUMBER_LITERAL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NUMBER_LITERAL)
            else:
                return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, i)
        def MINUS_SIGN(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.MINUS_SIGN)
            else:
                return self.getToken(VisualFoxpro9Parser.MINUS_SIGN, i)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def COMMA(self):
            return self.getToken(VisualFoxpro9Parser.COMMA, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDate"):
                return visitor.visitDate(self)
            else:
                return visitor.visitChildren(self)


    class BoolOrNullContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.BoolOrNullContext, self).__init__(parser)
            self.copyFrom(ctx)

        def PERIOD(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.PERIOD)
            else:
                return self.getToken(VisualFoxpro9Parser.PERIOD, i)
        def NULL(self):
            return self.getToken(VisualFoxpro9Parser.NULL, 0)
        def BOOLEANCHAR(self):
            return self.getToken(VisualFoxpro9Parser.BOOLEANCHAR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitBoolOrNull"):
                return visitor.visitBoolOrNull(self)
            else:
                return visitor.visitChildren(self)


    class BlobContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.BlobContext, self).__init__(parser)
            self.copyFrom(ctx)

        def BLOB_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.BLOB_LITERAL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitBlob"):
                return visitor.visitBlob(self)
            else:
                return visitor.visitChildren(self)


    class StringContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.StringContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SINGLEQUOTE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SINGLEQUOTE)
            else:
                return self.getToken(VisualFoxpro9Parser.SINGLEQUOTE, i)
        def DOUBLEQUOTE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.DOUBLEQUOTE)
            else:
                return self.getToken(VisualFoxpro9Parser.DOUBLEQUOTE, i)
        def LEFTBRACKET(self):
            return self.getToken(VisualFoxpro9Parser.LEFTBRACKET, 0)
        def RIGHTBRACKET(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.RIGHTBRACKET)
            else:
                return self.getToken(VisualFoxpro9Parser.RIGHTBRACKET, i)
        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitString"):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)


    class NumberOrCurrencyContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.NumberOrCurrencyContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def DOLLAR(self):
            return self.getToken(VisualFoxpro9Parser.DOLLAR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitNumberOrCurrency"):
                return visitor.visitNumberOrCurrency(self)
            else:
                return visitor.visitChildren(self)



    def constant(self):

        localctx = VisualFoxpro9Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 2091
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.DOLLAR]:
                localctx = VisualFoxpro9Parser.NumberOrCurrencyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.DOLLAR:
                    self.state = 2019
                    self.match(VisualFoxpro9Parser.DOLLAR)


                self.state = 2022
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                pass
            elif token in [VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.NULL]:
                localctx = VisualFoxpro9Parser.BoolOrNullContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2027
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.PERIOD]:
                    self.state = 2023
                    self.match(VisualFoxpro9Parser.PERIOD)
                    self.state = 2024
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.BOOLEANCHAR or _la==VisualFoxpro9Parser.NULL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2025
                    self.match(VisualFoxpro9Parser.PERIOD)
                    pass
                elif token in [VisualFoxpro9Parser.NULL]:
                    self.state = 2026
                    self.match(VisualFoxpro9Parser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACE]:
                localctx = VisualFoxpro9Parser.DateContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2029
                self.match(VisualFoxpro9Parser.LEFTBRACE)
                self.state = 2061
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.FORWARDSLASH]:
                    self.state = 2030
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    self.state = 2031
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    pass
                elif token in [VisualFoxpro9Parser.COLON]:
                    self.state = 2032
                    self.match(VisualFoxpro9Parser.COLON)
                    pass
                elif token in [VisualFoxpro9Parser.CARAT]:
                    self.state = 2033
                    self.match(VisualFoxpro9Parser.CARAT)
                    self.state = 2044
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
                    if la_ == 1:
                        self.state = 2034
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 2035
                        self.match(VisualFoxpro9Parser.MINUS_SIGN)
                        self.state = 2036
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 2037
                        self.match(VisualFoxpro9Parser.MINUS_SIGN)
                        self.state = 2038
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        pass

                    elif la_ == 2:
                        self.state = 2039
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 2040
                        self.match(VisualFoxpro9Parser.FORWARDSLASH)
                        self.state = 2041
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 2042
                        self.match(VisualFoxpro9Parser.FORWARDSLASH)
                        self.state = 2043
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        pass


                    self.state = 2059
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.NUMBER_LITERAL or _la==VisualFoxpro9Parser.COMMA:
                        self.state = 2047
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.COMMA:
                            self.state = 2046
                            self.match(VisualFoxpro9Parser.COMMA)


                        self.state = 2049
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 2056
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.COLON:
                            self.state = 2050
                            self.match(VisualFoxpro9Parser.COLON)
                            self.state = 2051
                            self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                            self.state = 2054
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==VisualFoxpro9Parser.COLON:
                                self.state = 2052
                                self.match(VisualFoxpro9Parser.COLON)
                                self.state = 2053
                                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)




                        self.state = 2058
                        self.identifier()


                    pass
                elif token in [VisualFoxpro9Parser.RIGHTBRACE]:
                    pass
                else:
                    pass
                self.state = 2063
                self.match(VisualFoxpro9Parser.RIGHTBRACE)
                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE]:
                localctx = VisualFoxpro9Parser.StringContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2088
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.SINGLEQUOTE]:
                    self.state = 2064
                    self.match(VisualFoxpro9Parser.SINGLEQUOTE)
                    self.state = 2068
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.MACROLINE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DB4 - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                        self.state = 2065
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==VisualFoxpro9Parser.SINGLEQUOTE or _la==VisualFoxpro9Parser.NL:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2070
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2071
                    self.match(VisualFoxpro9Parser.SINGLEQUOTE)
                    pass
                elif token in [VisualFoxpro9Parser.DOUBLEQUOTE]:
                    self.state = 2072
                    self.match(VisualFoxpro9Parser.DOUBLEQUOTE)
                    self.state = 2076
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.MACROLINE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DB4 - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                        self.state = 2073
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==VisualFoxpro9Parser.DOUBLEQUOTE or _la==VisualFoxpro9Parser.NL:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2078
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2079
                    self.match(VisualFoxpro9Parser.DOUBLEQUOTE)
                    pass
                elif token in [VisualFoxpro9Parser.LEFTBRACKET]:
                    self.state = 2080
                    self.match(VisualFoxpro9Parser.LEFTBRACKET)
                    self.state = 2084
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.MACROLINE) | (1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DB4 - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                        self.state = 2081
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==VisualFoxpro9Parser.RIGHTBRACKET or _la==VisualFoxpro9Parser.NL:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2086
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2087
                    self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.BLOB_LITERAL]:
                localctx = VisualFoxpro9Parser.BlobContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2090
                self.match(VisualFoxpro9Parser.BLOB_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdAttr2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IdAttr2Context, self).__init__(parent, invokingState)
            self.parser = parser
            self.startPeriod = None # Token

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)


        def PERIOD(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.PERIOD)
            else:
                return self.getToken(VisualFoxpro9Parser.PERIOD, i)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_idAttr2

        def accept(self, visitor):
            if hasattr(visitor, "visitIdAttr2"):
                return visitor.visitIdAttr2(self)
            else:
                return visitor.visitChildren(self)




    def idAttr2(self):

        localctx = VisualFoxpro9Parser.IdAttr2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_idAttr2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.PERIOD:
                self.state = 2093
                localctx.startPeriod = self.match(VisualFoxpro9Parser.PERIOD)


            self.state = 2096
            self.identifier()
            self.state = 2101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.PERIOD:
                self.state = 2097
                self.match(VisualFoxpro9Parser.PERIOD)
                self.state = 2098
                self.identifier()
                self.state = 2103
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdAttrContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IdAttrContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)

        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_idAttr

        def accept(self, visitor):
            if hasattr(visitor, "visitIdAttr"):
                return visitor.visitIdAttr(self)
            else:
                return visitor.visitChildren(self)




    def idAttr(self):

        localctx = VisualFoxpro9Parser.IdAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_idAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.PERIOD:
                self.state = 2104
                self.match(VisualFoxpro9Parser.PERIOD)


            self.state = 2107
            self.identifier()
            self.state = 2109
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.state = 2108
                self.trailer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TwoExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.TwoExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def COMMA(self):
            return self.getToken(VisualFoxpro9Parser.COMMA, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_twoExpr

        def accept(self, visitor):
            if hasattr(visitor, "visitTwoExpr"):
                return visitor.visitTwoExpr(self)
            else:
                return visitor.visitChildren(self)




    def twoExpr(self):

        localctx = VisualFoxpro9Parser.TwoExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_twoExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2111
            self.expr(0)
            self.state = 2112
            self.match(VisualFoxpro9Parser.COMMA)
            self.state = 2113
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayIndexContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ArrayIndexContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LEFTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.LEFTPAREN, 0)

        def RIGHTPAREN(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def twoExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TwoExprContext,0)


        def LEFTBRACKET(self):
            return self.getToken(VisualFoxpro9Parser.LEFTBRACKET, 0)

        def RIGHTBRACKET(self):
            return self.getToken(VisualFoxpro9Parser.RIGHTBRACKET, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_arrayIndex

        def accept(self, visitor):
            if hasattr(visitor, "visitArrayIndex"):
                return visitor.visitArrayIndex(self)
            else:
                return visitor.visitChildren(self)




    def arrayIndex(self):

        localctx = VisualFoxpro9Parser.ArrayIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_arrayIndex)
        try:
            self.state = 2129
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.LEFTPAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2115
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 2118
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
                if la_ == 1:
                    self.state = 2116
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 2117
                    self.twoExpr()
                    pass


                self.state = 2120
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2122
                self.match(VisualFoxpro9Parser.LEFTBRACKET)
                self.state = 2125
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
                if la_ == 1:
                    self.state = 2123
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 2124
                    self.twoExpr()
                    pass


                self.state = 2127
                self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatatypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DatatypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_datatype

        def accept(self, visitor):
            if hasattr(visitor, "visitDatatype"):
                return visitor.visitDatatype(self)
            else:
                return visitor.visitChildren(self)




    def datatype(self):

        localctx = VisualFoxpro9Parser.DatatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_datatype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2131
            self.idAttr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ScopeClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)

        def NEXT(self):
            return self.getToken(VisualFoxpro9Parser.NEXT, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def RECORD(self):
            return self.getToken(VisualFoxpro9Parser.RECORD, 0)

        def REST(self):
            return self.getToken(VisualFoxpro9Parser.REST, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_scopeClause

        def accept(self, visitor):
            if hasattr(visitor, "visitScopeClause"):
                return visitor.visitScopeClause(self)
            else:
                return visitor.visitChildren(self)




    def scopeClause(self):

        localctx = VisualFoxpro9Parser.ScopeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_scopeClause)
        try:
            self.state = 2139
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2133
                self.match(VisualFoxpro9Parser.ALL)
                pass
            elif token in [VisualFoxpro9Parser.NEXT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2134
                self.match(VisualFoxpro9Parser.NEXT)
                self.state = 2135
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.RECORD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2136
                self.match(VisualFoxpro9Parser.RECORD)
                self.state = 2137
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.REST]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2138
                self.match(VisualFoxpro9Parser.REST)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IdentifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(VisualFoxpro9Parser.ID, 0)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)

        def ADD(self):
            return self.getToken(VisualFoxpro9Parser.ADD, 0)

        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)

        def AFTER(self):
            return self.getToken(VisualFoxpro9Parser.AFTER, 0)

        def ALIAS(self):
            return self.getToken(VisualFoxpro9Parser.ALIAS, 0)

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)

        def ALTER(self):
            return self.getToken(VisualFoxpro9Parser.ALTER, 0)

        def ALTERNATE(self):
            return self.getToken(VisualFoxpro9Parser.ALTERNATE, 0)

        def AND(self):
            return self.getToken(VisualFoxpro9Parser.AND, 0)

        def APPEND(self):
            return self.getToken(VisualFoxpro9Parser.APPEND, 0)

        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)

        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)

        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)

        def ASSERT(self):
            return self.getToken(VisualFoxpro9Parser.ASSERT, 0)

        def ASSERTS(self):
            return self.getToken(VisualFoxpro9Parser.ASSERTS, 0)

        def AT(self):
            return self.getToken(VisualFoxpro9Parser.AT, 0)

        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)

        def BEFORE(self):
            return self.getToken(VisualFoxpro9Parser.BEFORE, 0)

        def BELL(self):
            return self.getToken(VisualFoxpro9Parser.BELL, 0)

        def BLANK(self):
            return self.getToken(VisualFoxpro9Parser.BLANK, 0)

        def BOOLEANCHAR(self):
            return self.getToken(VisualFoxpro9Parser.BOOLEANCHAR, 0)

        def BOTTOM(self):
            return self.getToken(VisualFoxpro9Parser.BOTTOM, 0)

        def BROWSE(self):
            return self.getToken(VisualFoxpro9Parser.BROWSE, 0)

        def BY(self):
            return self.getToken(VisualFoxpro9Parser.BY, 0)

        def CANDIDATE(self):
            return self.getToken(VisualFoxpro9Parser.CANDIDATE, 0)

        def CASE(self):
            return self.getToken(VisualFoxpro9Parser.CASE, 0)

        def CAST(self):
            return self.getToken(VisualFoxpro9Parser.CAST, 0)

        def CATCH(self):
            return self.getToken(VisualFoxpro9Parser.CATCH, 0)

        def CENTURY(self):
            return self.getToken(VisualFoxpro9Parser.CENTURY, 0)

        def CHDIR(self):
            return self.getToken(VisualFoxpro9Parser.CHDIR, 0)

        def CLASS(self):
            return self.getToken(VisualFoxpro9Parser.CLASS, 0)

        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)

        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)

        def CLOCK(self):
            return self.getToken(VisualFoxpro9Parser.CLOCK, 0)

        def CLOSE(self):
            return self.getToken(VisualFoxpro9Parser.CLOSE, 0)

        def COLLECTION(self):
            return self.getToken(VisualFoxpro9Parser.COLLECTION, 0)

        def COLOR(self):
            return self.getToken(VisualFoxpro9Parser.COLOR, 0)

        def COLUMN(self):
            return self.getToken(VisualFoxpro9Parser.COLUMN, 0)

        def COMMAND(self):
            return self.getToken(VisualFoxpro9Parser.COMMAND, 0)

        def COMPACT(self):
            return self.getToken(VisualFoxpro9Parser.COMPACT, 0)

        def COMPATIBLE(self):
            return self.getToken(VisualFoxpro9Parser.COMPATIBLE, 0)

        def COMPILE(self):
            return self.getToken(VisualFoxpro9Parser.COMPILE, 0)

        def CONSOLE(self):
            return self.getToken(VisualFoxpro9Parser.CONSOLE, 0)

        def CONTINUE(self):
            return self.getToken(VisualFoxpro9Parser.CONTINUE, 0)

        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)

        def COUNT(self):
            return self.getToken(VisualFoxpro9Parser.COUNT, 0)

        def CREATE(self):
            return self.getToken(VisualFoxpro9Parser.CREATE, 0)

        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)

        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)

        def DATASESSION(self):
            return self.getToken(VisualFoxpro9Parser.DATASESSION, 0)

        def DATE(self):
            return self.getToken(VisualFoxpro9Parser.DATE, 0)

        def DBF(self):
            return self.getToken(VisualFoxpro9Parser.DBF, 0)

        def DEACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.DEACTIVATE, 0)

        def DEBUG(self):
            return self.getToken(VisualFoxpro9Parser.DEBUG, 0)

        def DEBUGOUT(self):
            return self.getToken(VisualFoxpro9Parser.DEBUGOUT, 0)

        def DECLARE(self):
            return self.getToken(VisualFoxpro9Parser.DECLARE, 0)

        def DEFAULT(self):
            return self.getToken(VisualFoxpro9Parser.DEFAULT, 0)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)

        def DELETE(self):
            return self.getToken(VisualFoxpro9Parser.DELETE, 0)

        def DELETED(self):
            return self.getToken(VisualFoxpro9Parser.DELETED, 0)

        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)

        def DIMENSION(self):
            return self.getToken(VisualFoxpro9Parser.DIMENSION, 0)

        def DISTINCT(self):
            return self.getToken(VisualFoxpro9Parser.DISTINCT, 0)

        def DLLS(self):
            return self.getToken(VisualFoxpro9Parser.DLLS, 0)

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)

        def DOEVENTS(self):
            return self.getToken(VisualFoxpro9Parser.DOEVENTS, 0)

        def DROP(self):
            return self.getToken(VisualFoxpro9Parser.DROP, 0)

        def EACH(self):
            return self.getToken(VisualFoxpro9Parser.EACH, 0)

        def ELIF(self):
            return self.getToken(VisualFoxpro9Parser.ELIF, 0)

        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)

        def ENCRYPT(self):
            return self.getToken(VisualFoxpro9Parser.ENCRYPT, 0)

        def ENDCASE(self):
            return self.getToken(VisualFoxpro9Parser.ENDCASE, 0)

        def ENDDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.ENDDEFINE, 0)

        def ENDDO(self):
            return self.getToken(VisualFoxpro9Parser.ENDDO, 0)

        def ENDFOR(self):
            return self.getToken(VisualFoxpro9Parser.ENDFOR, 0)

        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)

        def ENDPROC(self):
            return self.getToken(VisualFoxpro9Parser.ENDPROC, 0)

        def ENDSCAN(self):
            return self.getToken(VisualFoxpro9Parser.ENDSCAN, 0)

        def ENDTEXT(self):
            return self.getToken(VisualFoxpro9Parser.ENDTEXT, 0)

        def ENDTRY(self):
            return self.getToken(VisualFoxpro9Parser.ENDTRY, 0)

        def ENDWITH(self):
            return self.getToken(VisualFoxpro9Parser.ENDWITH, 0)

        def ERASE(self):
            return self.getToken(VisualFoxpro9Parser.ERASE, 0)

        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)

        def EVENTS(self):
            return self.getToken(VisualFoxpro9Parser.EVENTS, 0)

        def EXACT(self):
            return self.getToken(VisualFoxpro9Parser.EXACT, 0)

        def EXCEPT(self):
            return self.getToken(VisualFoxpro9Parser.EXCEPT, 0)

        def EXCLUSIVE(self):
            return self.getToken(VisualFoxpro9Parser.EXCLUSIVE, 0)

        def EXTENDED(self):
            return self.getToken(VisualFoxpro9Parser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(VisualFoxpro9Parser.EXTERNAL, 0)

        def FIELDS(self):
            return self.getToken(VisualFoxpro9Parser.FIELDS, 0)

        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)

        def FILL(self):
            return self.getToken(VisualFoxpro9Parser.FILL, 0)

        def FILTER(self):
            return self.getToken(VisualFoxpro9Parser.FILTER, 0)

        def FINALLY(self):
            return self.getToken(VisualFoxpro9Parser.FINALLY, 0)

        def FLAGS(self):
            return self.getToken(VisualFoxpro9Parser.FLAGS, 0)

        def FONT(self):
            return self.getToken(VisualFoxpro9Parser.FONT, 0)

        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def FORCE(self):
            return self.getToken(VisualFoxpro9Parser.FORCE, 0)

        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)

        def FOXOBJECT(self):
            return self.getToken(VisualFoxpro9Parser.FOXOBJECT, 0)

        def FOXPLUS(self):
            return self.getToken(VisualFoxpro9Parser.FOXPLUS, 0)

        def FREE(self):
            return self.getToken(VisualFoxpro9Parser.FREE, 0)

        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)

        def GATHER(self):
            return self.getToken(VisualFoxpro9Parser.GATHER, 0)

        def GETS(self):
            return self.getToken(VisualFoxpro9Parser.GETS, 0)

        def GOTO(self):
            return self.getToken(VisualFoxpro9Parser.GOTO, 0)

        def HELP(self):
            return self.getToken(VisualFoxpro9Parser.HELP, 0)

        def HIDE(self):
            return self.getToken(VisualFoxpro9Parser.HIDE, 0)

        def ICON(self):
            return self.getToken(VisualFoxpro9Parser.ICON, 0)

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)

        def IFDEF(self):
            return self.getToken(VisualFoxpro9Parser.IFDEF, 0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)

        def INCLUDE(self):
            return self.getToken(VisualFoxpro9Parser.INCLUDE, 0)

        def INDEX(self):
            return self.getToken(VisualFoxpro9Parser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(VisualFoxpro9Parser.INDEXES, 0)

        def INSERT(self):
            return self.getToken(VisualFoxpro9Parser.INSERT, 0)

        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)

        def JOIN(self):
            return self.getToken(VisualFoxpro9Parser.JOIN, 0)

        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)

        def KEYBOARD(self):
            return self.getToken(VisualFoxpro9Parser.KEYBOARD, 0)

        def LABEL(self):
            return self.getToken(VisualFoxpro9Parser.LABEL, 0)

        def LIBRARY(self):
            return self.getToken(VisualFoxpro9Parser.LIBRARY, 0)

        def LIKE(self):
            return self.getToken(VisualFoxpro9Parser.LIKE, 0)

        def LINE(self):
            return self.getToken(VisualFoxpro9Parser.LINE, 0)

        def LINKED(self):
            return self.getToken(VisualFoxpro9Parser.LINKED, 0)

        def LIST(self):
            return self.getToken(VisualFoxpro9Parser.LIST, 0)

        def LOCATE(self):
            return self.getToken(VisualFoxpro9Parser.LOCATE, 0)

        def MACROS(self):
            return self.getToken(VisualFoxpro9Parser.MACROS, 0)

        def MARGIN(self):
            return self.getToken(VisualFoxpro9Parser.MARGIN, 0)

        def MARK(self):
            return self.getToken(VisualFoxpro9Parser.MARK, 0)

        def MASTER(self):
            return self.getToken(VisualFoxpro9Parser.MASTER, 0)

        def MAX(self):
            return self.getToken(VisualFoxpro9Parser.MAX, 0)

        def MEMO(self):
            return self.getToken(VisualFoxpro9Parser.MEMO, 0)

        def MEMORY(self):
            return self.getToken(VisualFoxpro9Parser.MEMORY, 0)

        def MEMOWIDTH(self):
            return self.getToken(VisualFoxpro9Parser.MEMOWIDTH, 0)

        def MEMVAR(self):
            return self.getToken(VisualFoxpro9Parser.MEMVAR, 0)

        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)

        def MENUS(self):
            return self.getToken(VisualFoxpro9Parser.MENUS, 0)

        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)

        def MIN(self):
            return self.getToken(VisualFoxpro9Parser.MIN, 0)

        def MKDIR(self):
            return self.getToken(VisualFoxpro9Parser.MKDIR, 0)

        def MODIFY(self):
            return self.getToken(VisualFoxpro9Parser.MODIFY, 0)

        def MULTILOCKS(self):
            return self.getToken(VisualFoxpro9Parser.MULTILOCKS, 0)

        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)

        def NEAR(self):
            return self.getToken(VisualFoxpro9Parser.NEAR, 0)

        def NEGOTIATE(self):
            return self.getToken(VisualFoxpro9Parser.NEGOTIATE, 0)

        def NEXT(self):
            return self.getToken(VisualFoxpro9Parser.NEXT, 0)

        def NOCLEAR(self):
            return self.getToken(VisualFoxpro9Parser.NOCLEAR, 0)

        def NOCONSOLE(self):
            return self.getToken(VisualFoxpro9Parser.NOCONSOLE, 0)

        def NODEBUG(self):
            return self.getToken(VisualFoxpro9Parser.NODEBUG, 0)

        def NOEJECT(self):
            return self.getToken(VisualFoxpro9Parser.NOEJECT, 0)

        def NOMARGIN(self):
            return self.getToken(VisualFoxpro9Parser.NOMARGIN, 0)

        def NOMENU(self):
            return self.getToken(VisualFoxpro9Parser.NOMENU, 0)

        def NOOPTIMIZE(self):
            return self.getToken(VisualFoxpro9Parser.NOOPTIMIZE, 0)

        def NOPROMPT(self):
            return self.getToken(VisualFoxpro9Parser.NOPROMPT, 0)

        def NORM(self):
            return self.getToken(VisualFoxpro9Parser.NORM, 0)

        def NOSAVE(self):
            return self.getToken(VisualFoxpro9Parser.NOSAVE, 0)

        def NOSHOW(self):
            return self.getToken(VisualFoxpro9Parser.NOSHOW, 0)

        def NOT(self):
            return self.getToken(VisualFoxpro9Parser.NOT, 0)

        def NOTE(self):
            return self.getToken(VisualFoxpro9Parser.NOTE, 0)

        def NOTIFY(self):
            return self.getToken(VisualFoxpro9Parser.NOTIFY, 0)

        def NOUPDATE(self):
            return self.getToken(VisualFoxpro9Parser.NOUPDATE, 0)

        def NOWAIT(self):
            return self.getToken(VisualFoxpro9Parser.NOWAIT, 0)

        def NULL(self):
            return self.getToken(VisualFoxpro9Parser.NULL, 0)

        def NUMBER(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER, 0)

        def OBJECT(self):
            return self.getToken(VisualFoxpro9Parser.OBJECT, 0)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def OFF(self):
            return self.getToken(VisualFoxpro9Parser.OFF, 0)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)

        def OR(self):
            return self.getToken(VisualFoxpro9Parser.OR, 0)

        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)

        def OTHERWISE(self):
            return self.getToken(VisualFoxpro9Parser.OTHERWISE, 0)

        def PACK(self):
            return self.getToken(VisualFoxpro9Parser.PACK, 0)

        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)

        def PARAMETER(self):
            return self.getToken(VisualFoxpro9Parser.PARAMETER, 0)

        def PLAIN(self):
            return self.getToken(VisualFoxpro9Parser.PLAIN, 0)

        def POP(self):
            return self.getToken(VisualFoxpro9Parser.POP, 0)

        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)

        def PRETEXT(self):
            return self.getToken(VisualFoxpro9Parser.PRETEXT, 0)

        def PRINTER(self):
            return self.getToken(VisualFoxpro9Parser.PRINTER, 0)

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def PROGRAM(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAM, 0)

        def PROGRAMCONTROL(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAMCONTROL, 0)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)

        def PUSH(self):
            return self.getToken(VisualFoxpro9Parser.PUSH, 0)

        def READ(self):
            return self.getToken(VisualFoxpro9Parser.READ, 0)

        def RECALL(self):
            return self.getToken(VisualFoxpro9Parser.RECALL, 0)

        def RECORD(self):
            return self.getToken(VisualFoxpro9Parser.RECORD, 0)

        def RECYCLE(self):
            return self.getToken(VisualFoxpro9Parser.RECYCLE, 0)

        def REFRESH(self):
            return self.getToken(VisualFoxpro9Parser.REFRESH, 0)

        def REINDEX(self):
            return self.getToken(VisualFoxpro9Parser.REINDEX, 0)

        def RELATION(self):
            return self.getToken(VisualFoxpro9Parser.RELATION, 0)

        def RELATIVE(self):
            return self.getToken(VisualFoxpro9Parser.RELATIVE, 0)

        def RELEASE(self):
            return self.getToken(VisualFoxpro9Parser.RELEASE, 0)

        def RENAME(self):
            return self.getToken(VisualFoxpro9Parser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(VisualFoxpro9Parser.REPLACE, 0)

        def REPORT(self):
            return self.getToken(VisualFoxpro9Parser.REPORT, 0)

        def RESOURCES(self):
            return self.getToken(VisualFoxpro9Parser.RESOURCES, 0)

        def REST(self):
            return self.getToken(VisualFoxpro9Parser.REST, 0)

        def RESTORE(self):
            return self.getToken(VisualFoxpro9Parser.RESTORE, 0)

        def RETRY(self):
            return self.getToken(VisualFoxpro9Parser.RETRY, 0)

        def RETURN(self):
            return self.getToken(VisualFoxpro9Parser.RETURN, 0)

        def RMDIR(self):
            return self.getToken(VisualFoxpro9Parser.RMDIR, 0)

        def ROLLOVER(self):
            return self.getToken(VisualFoxpro9Parser.ROLLOVER, 0)

        def RUN(self):
            return self.getToken(VisualFoxpro9Parser.RUN, 0)

        def SAFETY(self):
            return self.getToken(VisualFoxpro9Parser.SAFETY, 0)

        def SAME(self):
            return self.getToken(VisualFoxpro9Parser.SAME, 0)

        def SAVE(self):
            return self.getToken(VisualFoxpro9Parser.SAVE, 0)

        def SAY(self):
            return self.getToken(VisualFoxpro9Parser.SAY, 0)

        def SCAN(self):
            return self.getToken(VisualFoxpro9Parser.SCAN, 0)

        def SCATTER(self):
            return self.getToken(VisualFoxpro9Parser.SCATTER, 0)

        def SCHEME(self):
            return self.getToken(VisualFoxpro9Parser.SCHEME, 0)

        def SCOPE(self):
            return self.getToken(VisualFoxpro9Parser.SCOPE, 0)

        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)

        def SEEK(self):
            return self.getToken(VisualFoxpro9Parser.SEEK, 0)

        def SELECT(self):
            return self.getToken(VisualFoxpro9Parser.SELECT, 0)

        def SELECTION(self):
            return self.getToken(VisualFoxpro9Parser.SELECTION, 0)

        def SET(self):
            return self.getToken(VisualFoxpro9Parser.SET, 0)

        def SHADOW(self):
            return self.getToken(VisualFoxpro9Parser.SHADOW, 0)

        def SHARED(self):
            return self.getToken(VisualFoxpro9Parser.SHARED, 0)

        def SHOW(self):
            return self.getToken(VisualFoxpro9Parser.SHOW, 0)

        def SHUTDOWN(self):
            return self.getToken(VisualFoxpro9Parser.SHUTDOWN, 0)

        def SIZE(self):
            return self.getToken(VisualFoxpro9Parser.SIZE, 0)

        def SKIPKW(self):
            return self.getToken(VisualFoxpro9Parser.SKIPKW, 0)

        def SORT(self):
            return self.getToken(VisualFoxpro9Parser.SORT, 0)

        def STATUS(self):
            return self.getToken(VisualFoxpro9Parser.STATUS, 0)

        def STEP(self):
            return self.getToken(VisualFoxpro9Parser.STEP, 0)

        def STORE(self):
            return self.getToken(VisualFoxpro9Parser.STORE, 0)

        def STRUCTURE(self):
            return self.getToken(VisualFoxpro9Parser.STRUCTURE, 0)

        def STYLE(self):
            return self.getToken(VisualFoxpro9Parser.STYLE, 0)

        def SUM(self):
            return self.getToken(VisualFoxpro9Parser.SUM, 0)

        def SYSMENU(self):
            return self.getToken(VisualFoxpro9Parser.SYSMENU, 0)

        def SYSTEM(self):
            return self.getToken(VisualFoxpro9Parser.SYSTEM, 0)

        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)

        def TABLEPROMPT(self):
            return self.getToken(VisualFoxpro9Parser.TABLEPROMPT, 0)

        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)

        def TALK(self):
            return self.getToken(VisualFoxpro9Parser.TALK, 0)

        def TEXT(self):
            return self.getToken(VisualFoxpro9Parser.TEXT, 0)

        def TEXTMERGE(self):
            return self.getToken(VisualFoxpro9Parser.TEXTMERGE, 0)

        def THEN(self):
            return self.getToken(VisualFoxpro9Parser.THEN, 0)

        def THROW(self):
            return self.getToken(VisualFoxpro9Parser.THROW, 0)

        def TIMEOUT(self):
            return self.getToken(VisualFoxpro9Parser.TIMEOUT, 0)

        def TITLE(self):
            return self.getToken(VisualFoxpro9Parser.TITLE, 0)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def TOP(self):
            return self.getToken(VisualFoxpro9Parser.TOP, 0)

        def TRY(self):
            return self.getToken(VisualFoxpro9Parser.TRY, 0)

        def TYPE(self):
            return self.getToken(VisualFoxpro9Parser.TYPE, 0)

        def TYPEAHEAD(self):
            return self.getToken(VisualFoxpro9Parser.TYPEAHEAD, 0)

        def UNDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.UNDEFINE, 0)

        def UNIQUE(self):
            return self.getToken(VisualFoxpro9Parser.UNIQUE, 0)

        def UNLOCK(self):
            return self.getToken(VisualFoxpro9Parser.UNLOCK, 0)

        def UPDATE(self):
            return self.getToken(VisualFoxpro9Parser.UPDATE, 0)

        def USE(self):
            return self.getToken(VisualFoxpro9Parser.USE, 0)

        def VALUES(self):
            return self.getToken(VisualFoxpro9Parser.VALUES, 0)

        def WAIT(self):
            return self.getToken(VisualFoxpro9Parser.WAIT, 0)

        def WHERE(self):
            return self.getToken(VisualFoxpro9Parser.WHERE, 0)

        def WHILE(self):
            return self.getToken(VisualFoxpro9Parser.WHILE, 0)

        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)

        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)

        def ZAP(self):
            return self.getToken(VisualFoxpro9Parser.ZAP, 0)

        def ZOOM(self):
            return self.getToken(VisualFoxpro9Parser.ZOOM, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_identifier

        def accept(self, visitor):
            if hasattr(visitor, "visitIdentifier"):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = VisualFoxpro9Parser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2141
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.ACTIVATE) | (1 << VisualFoxpro9Parser.ADD) | (1 << VisualFoxpro9Parser.ADDITIVE) | (1 << VisualFoxpro9Parser.AFTER) | (1 << VisualFoxpro9Parser.ALIAS) | (1 << VisualFoxpro9Parser.ALL) | (1 << VisualFoxpro9Parser.ALTER) | (1 << VisualFoxpro9Parser.ALTERNATE) | (1 << VisualFoxpro9Parser.AND) | (1 << VisualFoxpro9Parser.APPEND) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.ASCENDING) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.AT) | (1 << VisualFoxpro9Parser.BAR) | (1 << VisualFoxpro9Parser.BEFORE) | (1 << VisualFoxpro9Parser.BELL) | (1 << VisualFoxpro9Parser.BLANK) | (1 << VisualFoxpro9Parser.BOOLEANCHAR) | (1 << VisualFoxpro9Parser.BOTTOM) | (1 << VisualFoxpro9Parser.BROWSE) | (1 << VisualFoxpro9Parser.BY) | (1 << VisualFoxpro9Parser.CANDIDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.CAST - 64)) | (1 << (VisualFoxpro9Parser.CATCH - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.CHDIR - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.COLLECTION - 64)) | (1 << (VisualFoxpro9Parser.COLOR - 64)) | (1 << (VisualFoxpro9Parser.COLUMN - 64)) | (1 << (VisualFoxpro9Parser.COMMAND - 64)) | (1 << (VisualFoxpro9Parser.COMPACT - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.COMPILE - 64)) | (1 << (VisualFoxpro9Parser.CONSOLE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.COPY - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.CREATE - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.DATABASE - 64)) | (1 << (VisualFoxpro9Parser.DATASESSION - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 64)) | (1 << (VisualFoxpro9Parser.DEBUG - 64)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.DEFAULT - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.DELETE - 64)) | (1 << (VisualFoxpro9Parser.DELETED - 64)) | (1 << (VisualFoxpro9Parser.DESCENDING - 64)) | (1 << (VisualFoxpro9Parser.DIMENSION - 64)) | (1 << (VisualFoxpro9Parser.DISTINCT - 64)) | (1 << (VisualFoxpro9Parser.DLLS - 64)) | (1 << (VisualFoxpro9Parser.DO - 64)) | (1 << (VisualFoxpro9Parser.DOEVENTS - 64)) | (1 << (VisualFoxpro9Parser.DROP - 64)) | (1 << (VisualFoxpro9Parser.EACH - 64)) | (1 << (VisualFoxpro9Parser.ELIF - 64)) | (1 << (VisualFoxpro9Parser.ELSE - 64)) | (1 << (VisualFoxpro9Parser.ENCRYPT - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.ENDIF - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 64)) | (1 << (VisualFoxpro9Parser.ENDTEXT - 64)) | (1 << (VisualFoxpro9Parser.ENDTRY - 64)) | (1 << (VisualFoxpro9Parser.ENDWITH - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.ERROR - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.EXCEPT - 64)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 64)) | (1 << (VisualFoxpro9Parser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.EXTERNAL - 128)) | (1 << (VisualFoxpro9Parser.FIELDS - 128)) | (1 << (VisualFoxpro9Parser.FILE - 128)) | (1 << (VisualFoxpro9Parser.FILL - 128)) | (1 << (VisualFoxpro9Parser.FILTER - 128)) | (1 << (VisualFoxpro9Parser.FINALLY - 128)) | (1 << (VisualFoxpro9Parser.FLAGS - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.FOR - 128)) | (1 << (VisualFoxpro9Parser.FORCE - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.FOXOBJECT - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.FREE - 128)) | (1 << (VisualFoxpro9Parser.FROM - 128)) | (1 << (VisualFoxpro9Parser.GATHER - 128)) | (1 << (VisualFoxpro9Parser.GETS - 128)) | (1 << (VisualFoxpro9Parser.GOTO - 128)) | (1 << (VisualFoxpro9Parser.HELP - 128)) | (1 << (VisualFoxpro9Parser.HIDE - 128)) | (1 << (VisualFoxpro9Parser.ICON - 128)) | (1 << (VisualFoxpro9Parser.IF - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.IN - 128)) | (1 << (VisualFoxpro9Parser.INCLUDE - 128)) | (1 << (VisualFoxpro9Parser.INDEX - 128)) | (1 << (VisualFoxpro9Parser.INDEXES - 128)) | (1 << (VisualFoxpro9Parser.INSERT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.JOIN - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.LIBRARY - 128)) | (1 << (VisualFoxpro9Parser.LIKE - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.LINKED - 128)) | (1 << (VisualFoxpro9Parser.LIST - 128)) | (1 << (VisualFoxpro9Parser.LOCATE - 128)) | (1 << (VisualFoxpro9Parser.MACROS - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MASTER - 128)) | (1 << (VisualFoxpro9Parser.MAX - 128)) | (1 << (VisualFoxpro9Parser.MEMO - 128)) | (1 << (VisualFoxpro9Parser.MEMORY - 128)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 128)) | (1 << (VisualFoxpro9Parser.MEMVAR - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.MENUS - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.MIN - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.MODIFY - 128)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 128)) | (1 << (VisualFoxpro9Parser.NAME - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.NODEBUG - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.NOMENU - 192)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 192)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 192)) | (1 << (VisualFoxpro9Parser.NORM - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSHOW - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.NOTE - 192)) | (1 << (VisualFoxpro9Parser.NOTIFY - 192)) | (1 << (VisualFoxpro9Parser.NOUPDATE - 192)) | (1 << (VisualFoxpro9Parser.NOWAIT - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.OBJECT - 192)) | (1 << (VisualFoxpro9Parser.OF - 192)) | (1 << (VisualFoxpro9Parser.OFF - 192)) | (1 << (VisualFoxpro9Parser.ON - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.ORDER - 192)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.PAD - 192)) | (1 << (VisualFoxpro9Parser.PARAMETER - 192)) | (1 << (VisualFoxpro9Parser.PLAIN - 192)) | (1 << (VisualFoxpro9Parser.POP - 192)) | (1 << (VisualFoxpro9Parser.POPUP - 192)) | (1 << (VisualFoxpro9Parser.PRETEXT - 192)) | (1 << (VisualFoxpro9Parser.PRINTER - 192)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 192)) | (1 << (VisualFoxpro9Parser.PROMPT - 192)) | (1 << (VisualFoxpro9Parser.PUSH - 192)) | (1 << (VisualFoxpro9Parser.READ - 192)) | (1 << (VisualFoxpro9Parser.RECALL - 192)) | (1 << (VisualFoxpro9Parser.RECORD - 192)) | (1 << (VisualFoxpro9Parser.RECYCLE - 192)) | (1 << (VisualFoxpro9Parser.REFRESH - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.RELATION - 192)) | (1 << (VisualFoxpro9Parser.RELATIVE - 192)) | (1 << (VisualFoxpro9Parser.RELEASE - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.REPLACE - 192)) | (1 << (VisualFoxpro9Parser.REPORT - 192)) | (1 << (VisualFoxpro9Parser.RESOURCES - 192)) | (1 << (VisualFoxpro9Parser.REST - 192)) | (1 << (VisualFoxpro9Parser.RESTORE - 192)) | (1 << (VisualFoxpro9Parser.RETRY - 192)) | (1 << (VisualFoxpro9Parser.RETURN - 192)) | (1 << (VisualFoxpro9Parser.RMDIR - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.SAFETY - 192)) | (1 << (VisualFoxpro9Parser.SAME - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.SAY - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.SCHEME - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.SCREEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.SEEK - 256)) | (1 << (VisualFoxpro9Parser.SELECT - 256)) | (1 << (VisualFoxpro9Parser.SELECTION - 256)) | (1 << (VisualFoxpro9Parser.SET - 256)) | (1 << (VisualFoxpro9Parser.SHADOW - 256)) | (1 << (VisualFoxpro9Parser.SHARED - 256)) | (1 << (VisualFoxpro9Parser.SHOW - 256)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 256)) | (1 << (VisualFoxpro9Parser.SIZE - 256)) | (1 << (VisualFoxpro9Parser.SKIPKW - 256)) | (1 << (VisualFoxpro9Parser.SORT - 256)) | (1 << (VisualFoxpro9Parser.STATUS - 256)) | (1 << (VisualFoxpro9Parser.STEP - 256)) | (1 << (VisualFoxpro9Parser.STORE - 256)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 256)) | (1 << (VisualFoxpro9Parser.STYLE - 256)) | (1 << (VisualFoxpro9Parser.SUM - 256)) | (1 << (VisualFoxpro9Parser.SYSMENU - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TABLE - 256)) | (1 << (VisualFoxpro9Parser.TABLEPROMPT - 256)) | (1 << (VisualFoxpro9Parser.TAG - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.TEXT - 256)) | (1 << (VisualFoxpro9Parser.TEXTMERGE - 256)) | (1 << (VisualFoxpro9Parser.THEN - 256)) | (1 << (VisualFoxpro9Parser.THROW - 256)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 256)) | (1 << (VisualFoxpro9Parser.TITLE - 256)) | (1 << (VisualFoxpro9Parser.TO - 256)) | (1 << (VisualFoxpro9Parser.TOP - 256)) | (1 << (VisualFoxpro9Parser.TRY - 256)) | (1 << (VisualFoxpro9Parser.TYPE - 256)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 256)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 256)) | (1 << (VisualFoxpro9Parser.UNIQUE - 256)) | (1 << (VisualFoxpro9Parser.UNLOCK - 256)) | (1 << (VisualFoxpro9Parser.UPDATE - 256)) | (1 << (VisualFoxpro9Parser.USE - 256)) | (1 << (VisualFoxpro9Parser.VALUES - 256)) | (1 << (VisualFoxpro9Parser.WAIT - 256)) | (1 << (VisualFoxpro9Parser.WHERE - 256)) | (1 << (VisualFoxpro9Parser.WHILE - 256)) | (1 << (VisualFoxpro9Parser.WINDOW - 256)) | (1 << (VisualFoxpro9Parser.WITH - 256)) | (1 << (VisualFoxpro9Parser.ZAP - 256)) | (1 << (VisualFoxpro9Parser.ZOOM - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx, ruleIndex, predIndex):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[44] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx, predIndex):
            if predIndex == 0:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 4)
         




