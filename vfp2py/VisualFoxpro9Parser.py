# Generated from VisualFoxpro9.g4 by ANTLR 4.7
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3")
        buf.write(u"\u0112\u0703\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6")
        buf.write(u"\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4")
        buf.write(u"\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t")
        buf.write(u"\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27")
        buf.write(u"\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4")
        buf.write(u"\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t")
        buf.write(u"#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4")
        buf.write(u",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62")
        buf.write(u"\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4")
        buf.write(u"8\t8\49\t9\4:\t:\4;\t;\3\2\3\2\3\2\3\3\7\3{\n\3\f\3\16")
        buf.write(u"\3~\13\3\3\4\3\4\3\4\3\4\3\4\5\4\u0085\n\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\5\4\u008d\n\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write(u"\3\4\3\4\7\4\u0097\n\4\f\4\16\4\u009a\13\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\7")
        buf.write(u"\4\u00ab\n\4\f\4\16\4\u00ae\13\4\3\4\3\4\3\4\3\4\7\4")
        buf.write(u"\u00b4\n\4\f\4\16\4\u00b7\13\4\3\4\5\4\u00ba\n\4\5\4")
        buf.write(u"\u00bc\n\4\3\5\3\5\7\5\u00c0\n\5\f\5\16\5\u00c3\13\5")
        buf.write(u"\3\5\3\5\3\6\3\6\7\6\u00c9\n\6\f\6\16\6\u00cc\13\6\3")
        buf.write(u"\6\3\6\5\6\u00d0\n\6\3\7\3\7\3\7\5\7\u00d5\n\7\3\7\3")
        buf.write(u"\7\5\7\u00d9\n\7\3\b\3\b\3\t\7\t\u00de\n\t\f\t\16\t\u00e1")
        buf.write(u"\13\t\3\n\3\n\3\n\3\n\5\n\u00e7\n\n\3\n\3\n\3\13\3\13")
        buf.write(u"\7\13\u00ed\n\13\f\13\16\13\u00f0\13\13\3\13\3\13\3\13")
        buf.write(u"\7\13\u00f5\n\13\f\13\16\13\u00f8\13\13\3\f\3\f\3\f\3")
        buf.write(u"\f\3\f\5\f\u00ff\n\f\3\r\3\r\5\r\u0103\n\r\3\16\3\16")
        buf.write(u"\3\16\7\16\u0108\n\16\f\16\16\16\u010b\13\16\3\17\5\17")
        buf.write(u"\u010e\n\17\3\17\3\17\3\17\3\17\5\17\u0114\n\17\3\17")
        buf.write(u"\5\17\u0117\n\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\7")
        buf.write(u"\20\u0120\n\20\f\20\16\20\u0123\13\20\5\20\u0125\n\20")
        buf.write(u"\3\21\3\21\3\21\5\21\u012a\n\21\3\21\3\21\3\22\3\22\3")
        buf.write(u"\22\3\22\3\22\5\22\u0133\n\22\3\22\3\22\3\23\3\23\3\23")
        buf.write(u"\3\23\3\23\3\23\3\23\3\23\5\23\u013f\n\23\3\23\3\23\3")
        buf.write(u"\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u014a\n\23\3\24")
        buf.write(u"\3\24\3\24\5\24\u014f\n\24\5\24\u0151\n\24\3\25\3\25")
        buf.write(u"\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3")
        buf.write(u"\27\3\30\3\30\3\30\3\30\7\30\u0164\n\30\f\30\16\30\u0167")
        buf.write(u"\13\30\3\30\7\30\u016a\n\30\f\30\16\30\u016d\13\30\3")
        buf.write(u"\30\5\30\u0170\n\30\3\30\3\30\3\31\5\31\u0175\n\31\3")
        buf.write(u"\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\33\3\33\3\33")
        buf.write(u"\3\33\3\33\3\33\3\34\3\34\5\34\u0187\n\34\3\34\3\34\5")
        buf.write(u"\34\u018b\n\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35")
        buf.write(u"\3\35\3\35\5\35\u0197\n\35\3\35\3\35\5\35\u019b\n\35")
        buf.write(u"\3\35\3\35\3\35\5\35\u01a0\n\35\3\35\3\35\3\36\3\36\3")
        buf.write(u"\36\3\36\3\36\3\36\3\36\5\36\u01ab\n\36\3\37\3\37\3\37")
        buf.write(u"\3\37\3\37\3\37\5\37\u01b3\n\37\5\37\u01b5\n\37\3\37")
        buf.write(u"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3")
        buf.write(u"\37\3\37\3\37\7\37\u01c5\n\37\f\37\16\37\u01c8\13\37")
        buf.write(u"\5\37\u01ca\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\7")
        buf.write(u"\37\u01d3\n\37\f\37\16\37\u01d6\13\37\3\37\3\37\3\37")
        buf.write(u"\3\37\3\37\3\37\3\37\5\37\u01df\n\37\3\37\3\37\5\37\u01e3")
        buf.write(u"\n\37\5\37\u01e5\n\37\3\37\3\37\3\37\3\37\3\37\3\37\7")
        buf.write(u"\37\u01ed\n\37\f\37\16\37\u01f0\13\37\3\37\3\37\3\37")
        buf.write(u"\3\37\5\37\u01f6\n\37\3\37\3\37\5\37\u01fa\n\37\3\37")
        buf.write(u"\3\37\3\37\5\37\u01ff\n\37\3\37\3\37\3\37\7\37\u0204")
        buf.write(u"\n\37\f\37\16\37\u0207\13\37\3\37\3\37\3\37\5\37\u020c")
        buf.write(u"\n\37\3\37\3\37\5\37\u0210\n\37\3\37\5\37\u0213\n\37")
        buf.write(u"\3\37\5\37\u0216\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3")
        buf.write(u"\37\3\37\3\37\5\37\u0221\n\37\3\37\3\37\3\37\3\37\3\37")
        buf.write(u"\3\37\7\37\u0229\n\37\f\37\16\37\u022c\13\37\3\37\3\37")
        buf.write(u"\3\37\5\37\u0231\n\37\3\37\3\37\5\37\u0235\n\37\3\37")
        buf.write(u"\5\37\u0238\n\37\3\37\3\37\3\37\5\37\u023d\n\37\3\37")
        buf.write(u"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0247\n\37\3")
        buf.write(u"\37\3\37\3\37\3\37\3\37\5\37\u024e\n\37\3\37\3\37\3\37")
        buf.write(u"\3\37\5\37\u0254\n\37\5\37\u0256\n\37\3\37\3\37\3\37")
        buf.write(u"\3\37\3\37\5\37\u025d\n\37\3\37\3\37\3\37\5\37\u0262")
        buf.write(u"\n\37\3\37\3\37\3\37\5\37\u0267\n\37\3\37\5\37\u026a")
        buf.write(u"\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0273\n")
        buf.write(u"\37\3\37\3\37\5\37\u0277\n\37\3\37\3\37\5\37\u027b\n")
        buf.write(u"\37\5\37\u027d\n\37\3\37\5\37\u0280\n\37\3\37\3\37\3")
        buf.write(u"\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u028d")
        buf.write(u"\n\37\3\37\3\37\3\37\3\37\5\37\u0293\n\37\3\37\3\37\3")
        buf.write(u"\37\3\37\5\37\u0299\n\37\5\37\u029b\n\37\3\37\3\37\3")
        buf.write(u"\37\3\37\3\37\3\37\3\37\3\37\5\37\u02a5\n\37\5\37\u02a7")
        buf.write(u"\n\37\5\37\u02a9\n\37\5\37\u02ab\n\37\3\37\3\37\5\37")
        buf.write(u"\u02af\n\37\3\37\3\37\5\37\u02b3\n\37\3\37\3\37\3\37")
        buf.write(u"\3\37\5\37\u02b9\n\37\3\37\3\37\5\37\u02bd\n\37\5\37")
        buf.write(u"\u02bf\n\37\3\37\3\37\5\37\u02c3\n\37\3\37\3\37\3\37")
        buf.write(u"\5\37\u02c8\n\37\5\37\u02ca\n\37\3\37\3\37\3\37\5\37")
        buf.write(u"\u02cf\n\37\3\37\3\37\3\37\3\37\5\37\u02d5\n\37\3\37")
        buf.write(u"\5\37\u02d8\n\37\3\37\5\37\u02db\n\37\3\37\3\37\3\37")
        buf.write(u"\5\37\u02e0\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3")
        buf.write(u"\37\3\37\5\37\u02eb\n\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write(u"\3\37\3\37\5\37\u02f5\n\37\3\37\3\37\3\37\3\37\3\37\3")
        buf.write(u"\37\3\37\3\37\5\37\u02ff\n\37\3\37\3\37\3\37\3\37\3\37")
        buf.write(u"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u030d\n\37\3")
        buf.write(u"\37\3\37\5\37\u0311\n\37\3\37\3\37\5\37\u0315\n\37\5")
        buf.write(u"\37\u0317\n\37\3\37\5\37\u031a\n\37\3\37\5\37\u031d\n")
        buf.write(u"\37\3\37\3\37\3\37\3\37\5\37\u0323\n\37\3\37\3\37\5\37")
        buf.write(u"\u0327\n\37\3\37\3\37\3\37\3\37\5\37\u032d\n\37\3\37")
        buf.write(u"\3\37\5\37\u0331\n\37\3\37\3\37\5\37\u0335\n\37\3\37")
        buf.write(u"\3\37\3\37\3\37\5\37\u033b\n\37\3\37\3\37\3\37\3\37\3")
        buf.write(u"\37\3\37\3\37\3\37\3\37\7\37\u0346\n\37\f\37\16\37\u0349")
        buf.write(u"\13\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3")
        buf.write(u"\37\3\37\3\37\3\37\3\37\5\37\u0359\n\37\3\37\3\37\3\37")
        buf.write(u"\5\37\u035e\n\37\3\37\3\37\5\37\u0362\n\37\3\37\3\37")
        buf.write(u"\5\37\u0366\n\37\3\37\3\37\5\37\u036a\n\37\3\37\3\37")
        buf.write(u"\3\37\5\37\u036f\n\37\3\37\3\37\3\37\5\37\u0374\n\37")
        buf.write(u"\5\37\u0376\n\37\3\37\3\37\5\37\u037a\n\37\3\37\3\37")
        buf.write(u"\3\37\3\37\3\37\3\37\3\37\5\37\u0383\n\37\3\37\5\37\u0386")
        buf.write(u"\n\37\3\37\3\37\5\37\u038a\n\37\3\37\3\37\7\37\u038e")
        buf.write(u"\n\37\f\37\16\37\u0391\13\37\3\37\3\37\3\37\3\37\3\37")
        buf.write(u"\3\37\3\37\7\37\u039a\n\37\f\37\16\37\u039d\13\37\3\37")
        buf.write(u"\3\37\3\37\3\37\3\37\3\37\5\37\u03a5\n\37\3\37\5\37\u03a8")
        buf.write(u"\n\37\3\37\5\37\u03ab\n\37\3\37\5\37\u03ae\n\37\3\37")
        buf.write(u"\3\37\3\37\3\37\7\37\u03b4\n\37\f\37\16\37\u03b7\13\37")
        buf.write(u"\3\37\3\37\3\37\3\37\3\37\7\37\u03be\n\37\f\37\16\37")
        buf.write(u"\u03c1\13\37\3\37\3\37\3\37\3\37\7\37\u03c7\n\37\f\37")
        buf.write(u"\16\37\u03ca\13\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write(u"\3\37\3\37\5\37\u03d5\n\37\3\37\3\37\5\37\u03d9\n\37")
        buf.write(u"\3\37\3\37\5\37\u03dd\n\37\3\37\3\37\3\37\3\37\3\37\3")
        buf.write(u"\37\5\37\u03e5\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write(u"\3\37\3\37\5\37\u03f0\n\37\3\37\3\37\3\37\3\37\5\37\u03f6")
        buf.write(u"\n\37\3\37\3\37\3\37\3\37\3\37\5\37\u03fd\n\37\3\37\3")
        buf.write(u"\37\5\37\u0401\n\37\3\37\3\37\5\37\u0405\n\37\3\37\3")
        buf.write(u"\37\3\37\5\37\u040a\n\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write(u"\3\37\5\37\u0413\n\37\5\37\u0415\n\37\3\37\3\37\5\37")
        buf.write(u"\u0419\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5")
        buf.write(u"\37\u0423\n\37\3\37\5\37\u0426\n\37\3\37\5\37\u0429\n")
        buf.write(u"\37\5\37\u042b\n\37\3\37\3\37\5\37\u042f\n\37\3\37\3")
        buf.write(u"\37\3\37\3\37\5\37\u0435\n\37\3\37\5\37\u0438\n\37\3")
        buf.write(u"\37\3\37\5\37\u043c\n\37\3\37\3\37\5\37\u0440\n\37\3")
        buf.write(u"\37\3\37\3\37\3\37\3\37\5\37\u0447\n\37\3\37\3\37\7\37")
        buf.write(u"\u044b\n\37\f\37\16\37\u044e\13\37\3\37\3\37\3\37\5\37")
        buf.write(u"\u0453\n\37\3\37\5\37\u0456\n\37\3\37\5\37\u0459\n\37")
        buf.write(u"\3\37\5\37\u045c\n\37\3\37\3\37\3\37\3\37\5\37\u0462")
        buf.write(u"\n\37\3\37\3\37\5\37\u0466\n\37\3\37\3\37\3\37\5\37\u046b")
        buf.write(u"\n\37\3\37\5\37\u046e\n\37\3\37\5\37\u0471\n\37\3\37")
        buf.write(u"\3\37\3\37\3\37\3\37\5\37\u0478\n\37\3\37\3\37\3\37\5")
        buf.write(u"\37\u047d\n\37\3\37\5\37\u0480\n\37\3\37\3\37\3\37\3")
        buf.write(u"\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write(u"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0499")
        buf.write(u"\n\37\3\37\3\37\3\37\3\37\5\37\u049f\n\37\3\37\3\37\3")
        buf.write(u"\37\3\37\5\37\u04a5\n\37\3\37\3\37\3\37\3\37\5\37\u04ab")
        buf.write(u"\n\37\3\37\7\37\u04ae\n\37\f\37\16\37\u04b1\13\37\3\37")
        buf.write(u"\3\37\5\37\u04b5\n\37\3\37\3\37\3\37\3\37\3\37\5\37\u04bc")
        buf.write(u"\n\37\3\37\5\37\u04bf\n\37\3\37\3\37\3\37\3\37\5\37\u04c5")
        buf.write(u"\n\37\3\37\7\37\u04c8\n\37\f\37\16\37\u04cb\13\37\3\37")
        buf.write(u"\3\37\3\37\3\37\5\37\u04d1\n\37\3\37\3\37\3\37\5\37\u04d6")
        buf.write(u"\n\37\3 \3 \3 \3 \3 \3 \5 \u04de\n \3!\3!\3!\7!\u04e3")
        buf.write(u"\n!\f!\16!\u04e6\13!\3\"\3\"\5\"\u04ea\n\"\3\"\5\"\u04ed")
        buf.write(u"\n\"\3#\3#\3#\5#\u04f2\n#\3$\3$\3$\5$\u04f7\n$\3%\3%")
        buf.write(u"\3%\3%\3%\3%\5%\u04ff\n%\5%\u0501\n%\3%\3%\3%\3%\3%\3")
        buf.write(u"%\3%\5%\u050a\n%\3%\3%\3%\3%\3%\3%\3%\5%\u0513\n%\5%")
        buf.write(u"\u0515\n%\5%\u0517\n%\3%\3%\3%\3%\3%\5%\u051e\n%\3%\3")
        buf.write(u"%\5%\u0522\n%\3%\5%\u0525\n%\3%\3%\3%\3%\3%\3%\3%\3%")
        buf.write(u"\3%\5%\u0530\n%\5%\u0532\n%\3%\3%\3%\5%\u0537\n%\3%\3")
        buf.write(u"%\3%\3%\5%\u053d\n%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%")
        buf.write(u"\3%\5%\u054b\n%\5%\u054d\n%\3%\3%\3%\3%\3%\5%\u0554\n")
        buf.write(u"%\3%\3%\5%\u0558\n%\3%\5%\u055b\n%\3%\3%\3%\5%\u0560")
        buf.write(u"\n%\3%\3%\3%\3%\5%\u0566\n%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write(u"%\5%\u0571\n%\3%\3%\3%\3%\3%\5%\u0578\n%\3%\3%\3%\5%")
        buf.write(u"\u057d\n%\3%\3%\5%\u0581\n%\3%\5%\u0584\n%\5%\u0586\n")
        buf.write(u"%\3%\3%\3%\5%\u058b\n%\3%\3%\3%\3%\3%\3%\3%\5%\u0594")
        buf.write(u"\n%\5%\u0596\n%\5%\u0598\n%\3%\3%\3%\3%\3%\7%\u059f\n")
        buf.write(u"%\f%\16%\u05a2\13%\3%\5%\u05a5\n%\3%\3%\3%\3%\3%\5%\u05ac")
        buf.write(u"\n%\3%\3%\3%\3%\3%\3%\3%\5%\u05b5\n%\3%\5%\u05b8\n%\3")
        buf.write(u"%\3%\3%\3%\5%\u05be\n%\3%\3%\3%\3%\3%\3%\3%\5%\u05c7")
        buf.write(u"\n%\3%\3%\5%\u05cb\n%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u05d6")
        buf.write(u"\n%\3&\3&\3&\3&\3&\5&\u05dd\n&\5&\u05df\n&\3\'\3\'\3")
        buf.write(u"\'\3(\3(\3(\5(\u05e7\n(\3)\3)\3)\7)\u05ec\n)\f)\16)\u05ef")
        buf.write(u"\13)\3)\5)\u05f2\n)\3*\3*\3*\7*\u05f7\n*\f*\16*\u05fa")
        buf.write(u"\13*\3+\3+\3+\3,\3,\3,\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-")
        buf.write(u"\3-\3-\3-\3-\3-\3-\3-\5-\u0613\n-\3-\3-\5-\u0617\n-\5")
        buf.write(u"-\u0619\n-\3-\3-\3-\3-\5-\u061f\n-\3-\3-\3-\3-\3-\3-")
        buf.write(u"\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\7-\u0631\n-\f-\16-\u0634")
        buf.write(u"\13-\3.\5.\u0637\n.\3.\3.\3.\3.\3.\3.\5.\u063f\n.\5.")
        buf.write(u"\u0641\n.\3/\3/\3/\5/\u0646\n/\3\60\3\60\5\60\u064a\n")
        buf.write(u"\60\3\60\3\60\3\60\5\60\u064f\n\60\3\60\5\60\u0652\n")
        buf.write(u"\60\3\60\5\60\u0655\n\60\3\60\3\60\3\60\5\60\u065a\n")
        buf.write(u"\60\5\60\u065c\n\60\3\61\3\61\3\61\5\61\u0661\n\61\3")
        buf.write(u"\61\6\61\u0664\n\61\r\61\16\61\u0665\3\62\3\62\3\62\3")
        buf.write(u"\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write(u"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3")
        buf.write(u"\62\5\62\u0681\n\62\3\63\3\63\5\63\u0685\n\63\3\64\5")
        buf.write(u"\64\u0688\n\64\3\64\3\64\3\64\3\64\3\64\5\64\u068f\n")
        buf.write(u"\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write(u"\3\64\3\64\3\64\3\64\3\64\5\64\u06a0\n\64\3\64\5\64\u06a3")
        buf.write(u"\n\64\3\64\3\64\3\64\3\64\3\64\5\64\u06aa\n\64\5\64\u06ac")
        buf.write(u"\n\64\3\64\5\64\u06af\n\64\5\64\u06b1\n\64\3\64\3\64")
        buf.write(u"\3\64\7\64\u06b6\n\64\f\64\16\64\u06b9\13\64\3\64\3\64")
        buf.write(u"\3\64\7\64\u06be\n\64\f\64\16\64\u06c1\13\64\3\64\3\64")
        buf.write(u"\3\64\7\64\u06c6\n\64\f\64\16\64\u06c9\13\64\3\64\5\64")
        buf.write(u"\u06cc\n\64\3\64\5\64\u06cf\n\64\3\65\5\65\u06d2\n\65")
        buf.write(u"\3\65\3\65\3\65\7\65\u06d7\n\65\f\65\16\65\u06da\13\65")
        buf.write(u"\3\66\5\66\u06dd\n\66\3\66\3\66\5\66\u06e1\n\66\3\67")
        buf.write(u"\3\67\3\67\3\67\38\38\38\58\u06ea\n8\38\38\38\38\38\5")
        buf.write(u"8\u06f1\n8\38\38\58\u06f5\n8\39\39\3:\3:\3:\3:\3:\3:")
        buf.write(u"\5:\u06ff\n:\3;\3;\3;\3\u0665\3X<\2\4\6\b\n\f\16\20\22")
        buf.write(u"\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNP")
        buf.write(u"RTVXZ\\^`bdfhjlnprt\2%\3\2\u0110\u0110\7\2//\61\62NN")
        buf.write(u"\u00c5\u00c5\u0110\u0110\4\3\30\30\u0110\u0110\4\2\t")
        buf.write(u"\t((\3\3\u0110\u0110\4\288\u00ea\u00ea\5\299ll\u00d0")
        buf.write(u"\u00d0\4\2\u0096\u0097\u00f9\u00f9\4\2LL\u00c6\u00c6")
        buf.write(u"\4\2\u009c\u009c\u00ad\u00ad\4\2wx\u00b4\u00b4\5\2AA")
        buf.write(u"CC[[\4\2AA[[\4\2ee\u0094\u0094\4\2++\u00ca\u00ca\3\2")
        buf.write(u"\u00cc\u00cd\4\2\u00c8\u00c8\u00ce\u00ce\3\2:;\4\2CC")
        buf.write(u"\u00e8\u00e8\3\2\u00fc\u00fd\3\2\u00e3\u00e5\4\2\27\27")
        buf.write(u"\u00ee\u00ee\3\2\63\64\4\2\63\64\u0088\u0089\3\2\u0086")
        buf.write(u"\u0087\3\2\n\13\4\2\27\27\u00d1\u00d1\4\2\t\t\f\f\6\2")
        buf.write(u"\25\26\30\34\36\36!!\3\2\u00d2\u00d5\3\2\u00d8\u00d9")
        buf.write(u"\4\2%%\u0110\u0110\4\2$$\u0110\u0110\4\2\17\17\u0110")
        buf.write(u"\u0110\f\2))+ACVX\u00d2\u00d4\u00d4\u00d6\u00e7\u00e9")
        buf.write(u"\u00ee\u00f0\u00f8\u00fa\u0101\u0108\u010f\2\u08ad\2")
        buf.write(u"v\3\2\2\2\4|\3\2\2\2\6\u00bb\3\2\2\2\b\u00c1\3\2\2\2")
        buf.write(u"\n\u00cf\3\2\2\2\f\u00d8\3\2\2\2\16\u00da\3\2\2\2\20")
        buf.write(u"\u00df\3\2\2\2\22\u00e2\3\2\2\2\24\u00ea\3\2\2\2\26\u00fe")
        buf.write(u"\3\2\2\2\30\u0100\3\2\2\2\32\u0104\3\2\2\2\34\u010d\3")
        buf.write(u"\2\2\2\36\u011a\3\2\2\2 \u0126\3\2\2\2\"\u012d\3\2\2")
        buf.write(u"\2$\u0149\3\2\2\2&\u0150\3\2\2\2(\u0152\3\2\2\2*\u0156")
        buf.write(u"\3\2\2\2,\u015b\3\2\2\2.\u015f\3\2\2\2\60\u0174\3\2\2")
        buf.write(u"\2\62\u017a\3\2\2\2\64\u017e\3\2\2\2\66\u0184\3\2\2\2")
        buf.write(u"8\u0190\3\2\2\2:\u01aa\3\2\2\2<\u04d5\3\2\2\2>\u04dd")
        buf.write(u"\3\2\2\2@\u04df\3\2\2\2B\u04e7\3\2\2\2D\u04ee\3\2\2\2")
        buf.write(u"F\u04f3\3\2\2\2H\u05d5\3\2\2\2J\u05de\3\2\2\2L\u05e0")
        buf.write(u"\3\2\2\2N\u05e3\3\2\2\2P\u05e8\3\2\2\2R\u05f3\3\2\2\2")
        buf.write(u"T\u05fb\3\2\2\2V\u05fe\3\2\2\2X\u0618\3\2\2\2Z\u0640")
        buf.write(u"\3\2\2\2\\\u0645\3\2\2\2^\u065b\3\2\2\2`\u0660\3\2\2")
        buf.write(u"\2b\u0680\3\2\2\2d\u0684\3\2\2\2f\u06ce\3\2\2\2h\u06d1")
        buf.write(u"\3\2\2\2j\u06dc\3\2\2\2l\u06e2\3\2\2\2n\u06f4\3\2\2\2")
        buf.write(u"p\u06f6\3\2\2\2r\u06fe\3\2\2\2t\u0700\3\2\2\2vw\5\4\3")
        buf.write(u"\2wx\7\2\2\3x\3\3\2\2\2y{\5\6\4\2zy\3\2\2\2{~\3\2\2\2")
        buf.write(u"|z\3\2\2\2|}\3\2\2\2}\5\3\2\2\2~|\3\2\2\2\177\u0084\7")
        buf.write(u"\30\2\2\u0080\u0081\7/\2\2\u0081\u0085\5X-\2\u0082\u0083")
        buf.write(u"\7\u00b9\2\2\u0083\u0085\5t;\2\u0084\u0080\3\2\2\2\u0084")
        buf.write(u"\u0082\3\2\2\2\u0085\u0086\3\2\2\2\u0086\u0087\7\u0110")
        buf.write(u"\2\2\u0087\u008c\5\4\3\2\u0088\u0089\7\30\2\2\u0089\u008a")
        buf.write(u"\7\61\2\2\u008a\u008b\7\u0110\2\2\u008b\u008d\5\4\3\2")
        buf.write(u"\u008c\u0088\3\2\2\2\u008c\u008d\3\2\2\2\u008d\u008e")
        buf.write(u"\3\2\2\2\u008e\u008f\7\30\2\2\u008f\u0090\7\62\2\2\u0090")
        buf.write(u"\u0091\5\16\b\2\u0091\u00bc\3\2\2\2\u0092\u0093\7\30")
        buf.write(u"\2\2\u0093\u0094\7N\2\2\u0094\u0098\5t;\2\u0095\u0097")
        buf.write(u"\n\2\2\2\u0096\u0095\3\2\2\2\u0097\u009a\3\2\2\2\u0098")
        buf.write(u"\u0096\3\2\2\2\u0098\u0099\3\2\2\2\u0099\u009b\3\2\2")
        buf.write(u"\2\u009a\u0098\3\2\2\2\u009b\u009c\5\16\b\2\u009c\u00bc")
        buf.write(u"\3\2\2\2\u009d\u009e\7\30\2\2\u009e\u009f\7\u00b8\2\2")
        buf.write(u"\u009f\u00a0\5t;\2\u00a0\u00a1\5\16\b\2\u00a1\u00bc\3")
        buf.write(u"\2\2\2\u00a2\u00a3\7\30\2\2\u00a3\u00a4\7\u00c5\2\2\u00a4")
        buf.write(u"\u00a5\5d\63\2\u00a5\u00a6\5\16\b\2\u00a6\u00bc\3\2\2")
        buf.write(u"\2\u00a7\u00a8\7\30\2\2\u00a8\u00ac\n\3\2\2\u00a9\u00ab")
        buf.write(u"\n\2\2\2\u00aa\u00a9\3\2\2\2\u00ab\u00ae\3\2\2\2\u00ac")
        buf.write(u"\u00aa\3\2\2\2\u00ac\u00ad\3\2\2\2\u00ad\u00af\3\2\2")
        buf.write(u"\2\u00ae\u00ac\3\2\2\2\u00af\u00bc\5\16\b\2\u00b0\u00ba")
        buf.write(u"\7\u0110\2\2\u00b1\u00b5\n\4\2\2\u00b2\u00b4\n\2\2\2")
        buf.write(u"\u00b3\u00b2\3\2\2\2\u00b4\u00b7\3\2\2\2\u00b5\u00b3")
        buf.write(u"\3\2\2\2\u00b5\u00b6\3\2\2\2\u00b6\u00b8\3\2\2\2\u00b7")
        buf.write(u"\u00b5\3\2\2\2\u00b8\u00ba\5\16\b\2\u00b9\u00b0\3\2\2")
        buf.write(u"\2\u00b9\u00b1\3\2\2\2\u00ba\u00bc\3\2\2\2\u00bb\177")
        buf.write(u"\3\2\2\2\u00bb\u0092\3\2\2\2\u00bb\u009d\3\2\2\2\u00bb")
        buf.write(u"\u00a2\3\2\2\2\u00bb\u00a7\3\2\2\2\u00bb\u00b9\3\2\2")
        buf.write(u"\2\u00bc\7\3\2\2\2\u00bd\u00c0\5\24\13\2\u00be\u00c0")
        buf.write(u"\5\36\20\2\u00bf\u00bd\3\2\2\2\u00bf\u00be\3\2\2\2\u00c0")
        buf.write(u"\u00c3\3\2\2\2\u00c1\u00bf\3\2\2\2\u00c1\u00c2\3\2\2")
        buf.write(u"\2\u00c2\u00c4\3\2\2\2\u00c3\u00c1\3\2\2\2\u00c4\u00c5")
        buf.write(u"\7\2\2\3\u00c5\t\3\2\2\2\u00c6\u00ca\t\5\2\2\u00c7\u00c9")
        buf.write(u"\n\2\2\2\u00c8\u00c7\3\2\2\2\u00c9\u00cc\3\2\2\2\u00ca")
        buf.write(u"\u00c8\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00cd\3\2\2")
        buf.write(u"\2\u00cc\u00ca\3\2\2\2\u00cd\u00d0\5\16\b\2\u00ce\u00d0")
        buf.write(u"\7\u0110\2\2\u00cf\u00c6\3\2\2\2\u00cf\u00ce\3\2\2\2")
        buf.write(u"\u00d0\13\3\2\2\2\u00d1\u00d9\5\n\6\2\u00d2\u00d5\5:")
        buf.write(u"\36\2\u00d3\u00d5\5<\37\2\u00d4\u00d2\3\2\2\2\u00d4\u00d3")
        buf.write(u"\3\2\2\2\u00d5\u00d6\3\2\2\2\u00d6\u00d7\5\16\b\2\u00d7")
        buf.write(u"\u00d9\3\2\2\2\u00d8\u00d1\3\2\2\2\u00d8\u00d4\3\2\2")
        buf.write(u"\2\u00d9\r\3\2\2\2\u00da\u00db\t\6\2\2\u00db\17\3\2\2")
        buf.write(u"\2\u00dc\u00de\5\f\7\2\u00dd\u00dc\3\2\2\2\u00de\u00e1")
        buf.write(u"\3\2\2\2\u00df\u00dd\3\2\2\2\u00df\u00e0\3\2\2\2\u00e0")
        buf.write(u"\21\3\2\2\2\u00e1\u00df\3\2\2\2\u00e2\u00e3\7N\2\2\u00e3")
        buf.write(u"\u00e4\7O\2\2\u00e4\u00e6\5t;\2\u00e5\u00e7\5N(\2\u00e6")
        buf.write(u"\u00e5\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7\u00e8\3\2\2")
        buf.write(u"\2\u00e8\u00e9\7\u0110\2\2\u00e9\23\3\2\2\2\u00ea\u00ee")
        buf.write(u"\5\22\n\2\u00eb\u00ed\5\26\f\2\u00ec\u00eb\3\2\2\2\u00ed")
        buf.write(u"\u00f0\3\2\2\2\u00ee\u00ec\3\2\2\2\u00ee\u00ef\3\2\2")
        buf.write(u"\2\u00ef\u00f1\3\2\2\2\u00f0\u00ee\3\2\2\2\u00f1\u00f2")
        buf.write(u"\7P\2\2\u00f2\u00f6\5\16\b\2\u00f3\u00f5\5\n\6\2\u00f4")
        buf.write(u"\u00f3\3\2\2\2\u00f5\u00f8\3\2\2\2\u00f6\u00f4\3\2\2")
        buf.write(u"\2\u00f6\u00f7\3\2\2\2\u00f7\25\3\2\2\2\u00f8\u00f6\3")
        buf.write(u"\2\2\2\u00f9\u00fa\5<\37\2\u00fa\u00fb\7\u0110\2\2\u00fb")
        buf.write(u"\u00ff\3\2\2\2\u00fc\u00ff\5\n\6\2\u00fd\u00ff\5\36\20")
        buf.write(u"\2\u00fe\u00f9\3\2\2\2\u00fe\u00fc\3\2\2\2\u00fe\u00fd")
        buf.write(u"\3\2\2\2\u00ff\27\3\2\2\2\u0100\u0102\5j\66\2\u0101\u0103")
        buf.write(u"\5L\'\2\u0102\u0101\3\2\2\2\u0102\u0103\3\2\2\2\u0103")
        buf.write(u"\31\3\2\2\2\u0104\u0109\5\30\r\2\u0105\u0106\7 \2\2\u0106")
        buf.write(u"\u0108\5\30\r\2\u0107\u0105\3\2\2\2\u0108\u010b\3\2\2")
        buf.write(u"\2\u0109\u0107\3\2\2\2\u0109\u010a\3\2\2\2\u010a\33\3")
        buf.write(u"\2\2\2\u010b\u0109\3\2\2\2\u010c\u010e\7\u00ea\2\2\u010d")
        buf.write(u"\u010c\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u010f\3\2\2")
        buf.write(u"\2\u010f\u0110\7L\2\2\u0110\u0116\5h\65\2\u0111\u0113")
        buf.write(u"\7\22\2\2\u0112\u0114\5\32\16\2\u0113\u0112\3\2\2\2\u0113")
        buf.write(u"\u0114\3\2\2\2\u0114\u0115\3\2\2\2\u0115\u0117\7\23\2")
        buf.write(u"\2\u0116\u0111\3\2\2\2\u0116\u0117\3\2\2\2\u0117\u0118")
        buf.write(u"\3\2\2\2\u0118\u0119\7\u0110\2\2\u0119\35\3\2\2\2\u011a")
        buf.write(u"\u011b\5\34\17\2\u011b\u0124\5\20\t\2\u011c\u011d\7M")
        buf.write(u"\2\2\u011d\u0121\5\16\b\2\u011e\u0120\5\n\6\2\u011f\u011e")
        buf.write(u"\3\2\2\2\u0120\u0123\3\2\2\2\u0121\u011f\3\2\2\2\u0121")
        buf.write(u"\u0122\3\2\2\2\u0122\u0125\3\2\2\2\u0123\u0121\3\2\2")
        buf.write(u"\2\u0124\u011c\3\2\2\2\u0124\u0125\3\2\2\2\u0125\37\3")
        buf.write(u"\2\2\2\u0126\u0127\7/\2\2\u0127\u0129\5X-\2\u0128\u012a")
        buf.write(u"\7\u00b7\2\2\u0129\u0128\3\2\2\2\u0129\u012a\3\2\2\2")
        buf.write(u"\u012a\u012b\3\2\2\2\u012b\u012c\7\u0110\2\2\u012c!\3")
        buf.write(u"\2\2\2\u012d\u012e\5 \21\2\u012e\u0132\5\20\t\2\u012f")
        buf.write(u"\u0130\7\61\2\2\u0130\u0131\7\u0110\2\2\u0131\u0133\5")
        buf.write(u"\20\t\2\u0132\u012f\3\2\2\2\u0132\u0133\3\2\2\2\u0133")
        buf.write(u"\u0134\3\2\2\2\u0134\u0135\7\62\2\2\u0135#\3\2\2\2\u0136")
        buf.write(u"\u0137\7S\2\2\u0137\u0138\5j\66\2\u0138\u0139\7\36\2")
        buf.write(u"\2\u0139\u013a\5X-\2\u013a\u013b\7+\2\2\u013b\u013e\5")
        buf.write(u"X-\2\u013c\u013d\7\u00b6\2\2\u013d\u013f\5X-\2\u013e")
        buf.write(u"\u013c\3\2\2\2\u013e\u013f\3\2\2\2\u013f\u0140\3\2\2")
        buf.write(u"\2\u0140\u0141\7\u0110\2\2\u0141\u014a\3\2\2\2\u0142")
        buf.write(u"\u0143\7S\2\2\u0143\u0144\7\u00ec\2\2\u0144\u0145\5j")
        buf.write(u"\66\2\u0145\u0146\7-\2\2\u0146\u0147\5X-\2\u0147\u0148")
        buf.write(u"\7\u0110\2\2\u0148\u014a\3\2\2\2\u0149\u0136\3\2\2\2")
        buf.write(u"\u0149\u0142\3\2\2\2\u014a%\3\2\2\2\u014b\u0151\7T\2")
        buf.write(u"\2\u014c\u014e\7\u0091\2\2\u014d\u014f\5j\66\2\u014e")
        buf.write(u"\u014d\3\2\2\2\u014e\u014f\3\2\2\2\u014f\u0151\3\2\2")
        buf.write(u"\2\u0150\u014b\3\2\2\2\u0150\u014c\3\2\2\2\u0151\'\3")
        buf.write(u"\2\2\2\u0152\u0153\5$\23\2\u0153\u0154\5\20\t\2\u0154")
        buf.write(u"\u0155\5&\24\2\u0155)\3\2\2\2\u0156\u0157\7~\2\2\u0157")
        buf.write(u"\u0158\5X-\2\u0158\u0159\7\u0110\2\2\u0159\u015a\5\20")
        buf.write(u"\t\2\u015a+\3\2\2\2\u015b\u015c\7\u0080\2\2\u015c\u015d")
        buf.write(u"\7\u0110\2\2\u015d\u015e\5\20\t\2\u015e-\3\2\2\2\u015f")
        buf.write(u"\u0160\7,\2\2\u0160\u0161\7~\2\2\u0161\u0165\7\u0110")
        buf.write(u"\2\2\u0162\u0164\5\n\6\2\u0163\u0162\3\2\2\2\u0164\u0167")
        buf.write(u"\3\2\2\2\u0165\u0163\3\2\2\2\u0165\u0166\3\2\2\2\u0166")
        buf.write(u"\u016b\3\2\2\2\u0167\u0165\3\2\2\2\u0168\u016a\5*\26")
        buf.write(u"\2\u0169\u0168\3\2\2\2\u016a\u016d\3\2\2\2\u016b\u0169")
        buf.write(u"\3\2\2\2\u016b\u016c\3\2\2\2\u016c\u016f\3\2\2\2\u016d")
        buf.write(u"\u016b\3\2\2\2\u016e\u0170\5,\27\2\u016f\u016e\3\2\2")
        buf.write(u"\2\u016f\u0170\3\2\2\2\u0170\u0171\3\2\2\2\u0171\u0172")
        buf.write(u"\7\177\2\2\u0172/\3\2\2\2\u0173\u0175\7,\2\2\u0174\u0173")
        buf.write(u"\3\2\2\2\u0174\u0175\3\2\2\2\u0175\u0176\3\2\2\2\u0176")
        buf.write(u"\u0177\7U\2\2\u0177\u0178\5X-\2\u0178\u0179\7\u0110\2")
        buf.write(u"\2\u0179\61\3\2\2\2\u017a\u017b\5\60\31\2\u017b\u017c")
        buf.write(u"\5\20\t\2\u017c\u017d\7k\2\2\u017d\63\3\2\2\2\u017e\u017f")
        buf.write(u"\7\66\2\2\u017f\u0180\5j\66\2\u0180\u0181\7\u0110\2\2")
        buf.write(u"\u0181\u0182\5\20\t\2\u0182\u0183\7\u00bd\2\2\u0183\65")
        buf.write(u"\3\2\2\2\u0184\u0186\7\u00d6\2\2\u0185\u0187\5r:\2\u0186")
        buf.write(u"\u0185\3\2\2\2\u0186\u0187\3\2\2\2\u0187\u018a\3\2\2")
        buf.write(u"\2\u0188\u0189\7S\2\2\u0189\u018b\5X-\2\u018a\u0188\3")
        buf.write(u"\2\2\2\u018a\u018b\3\2\2\2\u018b\u018c\3\2\2\2\u018c")
        buf.write(u"\u018d\7\u0110\2\2\u018d\u018e\5\20\t\2\u018e\u018f\7")
        buf.write(u"\u00d7\2\2\u018f\67\3\2\2\2\u0190\u0191\7\u00f0\2\2\u0191")
        buf.write(u"\u0192\7\u0110\2\2\u0192\u019a\5\20\t\2\u0193\u0196\7")
        buf.write(u"\u00f1\2\2\u0194\u0195\7+\2\2\u0195\u0197\5t;\2\u0196")
        buf.write(u"\u0194\3\2\2\2\u0196\u0197\3\2\2\2\u0197\u0198\3\2\2")
        buf.write(u"\2\u0198\u0199\7\u0110\2\2\u0199\u019b\5\20\t\2\u019a")
        buf.write(u"\u0193\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u019f\3\2\2")
        buf.write(u"\2\u019c\u019d\7\u00f2\2\2\u019d\u019e\7\u0110\2\2\u019e")
        buf.write(u"\u01a0\5\20\t\2\u019f\u019c\3\2\2\2\u019f\u01a0\3\2\2")
        buf.write(u"\2\u01a0\u01a1\3\2\2\2\u01a1\u01a2\7\u00f3\2\2\u01a2")
        buf.write(u"9\3\2\2\2\u01a3\u01ab\5\62\32\2\u01a4\u01ab\5\"\22\2")
        buf.write(u"\u01a5\u01ab\5.\30\2\u01a6\u01ab\5(\25\2\u01a7\u01ab")
        buf.write(u"\5\64\33\2\u01a8\u01ab\5\66\34\2\u01a9\u01ab\58\35\2")
        buf.write(u"\u01aa\u01a3\3\2\2\2\u01aa\u01a4\3\2\2\2\u01aa\u01a5")
        buf.write(u"\3\2\2\2\u01aa\u01a6\3\2\2\2\u01aa\u01a7\3\2\2\2\u01aa")
        buf.write(u"\u01a8\3\2\2\2\u01aa\u01a9\3\2\2\2\u01ab;\3\2\2\2\u01ac")
        buf.write(u"\u01ad\7\63\2\2\u01ad\u01b4\7\u0098\2\2\u01ae\u01af\7")
        buf.write(u"\u009a\2\2\u01af\u01b2\5t;\2\u01b0\u01b1\7\n\2\2\u01b1")
        buf.write(u"\u01b3\5t;\2\u01b2\u01b0\3\2\2\2\u01b2\u01b3\3\2\2\2")
        buf.write(u"\u01b3\u01b5\3\2\2\2\u01b4\u01ae\3\2\2\2\u01b4\u01b5")
        buf.write(u"\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u04d6\5<\37\2\u01b7")
        buf.write(u"\u01b8\7a\2\2\u01b8\u01b9\7b\2\2\u01b9\u01ba\5t;\2\u01ba")
        buf.write(u"\u01c9\5L\'\2\u01bb\u01bc\7\66\2\2\u01bc\u01bd\5j\66")
        buf.write(u"\2\u01bd\u01be\7\36\2\2\u01be\u01c6\5X-\2\u01bf\u01c0")
        buf.write(u"\7 \2\2\u01c0\u01c1\5j\66\2\u01c1\u01c2\7\36\2\2\u01c2")
        buf.write(u"\u01c3\5X-\2\u01c3\u01c5\3\2\2\2\u01c4\u01bf\3\2\2\2")
        buf.write(u"\u01c5\u01c8\3\2\2\2\u01c6\u01c4\3\2\2\2\u01c6\u01c7")
        buf.write(u"\3\2\2\2\u01c7\u01ca\3\2\2\2\u01c8\u01c6\3\2\2\2\u01c9")
        buf.write(u"\u01bb\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u04d6\3\2\2")
        buf.write(u"\2\u01cb\u04d6\7\u010d\2\2\u01cc\u01cd\7\b\2\2\u01cd")
        buf.write(u"\u01d4\5P)\2\u01ce\u01cf\7\u0109\2\2\u01cf\u01d3\5X-")
        buf.write(u"\2\u01d0\u01d1\7\u00a9\2\2\u01d1\u01d3\5X-\2\u01d2\u01ce")
        buf.write(u"\3\2\2\2\u01d2\u01d0\3\2\2\2\u01d3\u01d6\3\2\2\2\u01d4")
        buf.write(u"\u01d2\3\2\2\2\u01d4\u01d5\3\2\2\2\u01d5\u04d6\3\2\2")
        buf.write(u"\2\u01d6\u01d4\3\2\2\2\u01d7\u01d8\7,\2\2\u01d8\u01d9")
        buf.write(u"\7\u0083\2\2\u01d9\u01e5\5d\63\2\u01da\u01db\7,\2\2\u01db")
        buf.write(u"\u01de\5d\63\2\u01dc\u01dd\7-\2\2\u01dd\u01df\5d\63\2")
        buf.write(u"\u01de\u01dc\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u01e2")
        buf.write(u"\3\2\2\2\u01e0\u01e1\7\66\2\2\u01e1\u01e3\5P)\2\u01e2")
        buf.write(u"\u01e0\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3\u01e5\3\2\2")
        buf.write(u"\2\u01e4\u01d7\3\2\2\2\u01e4\u01da\3\2\2\2\u01e5\u04d6")
        buf.write(u"\3\2\2\2\u01e6\u01e7\7\67\2\2\u01e7\u01e8\5X-\2\u01e8")
        buf.write(u"\u01e9\7+\2\2\u01e9\u01ee\5j\66\2\u01ea\u01eb\7 \2\2")
        buf.write(u"\u01eb\u01ed\5j\66\2\u01ec\u01ea\3\2\2\2\u01ed\u01f0")
        buf.write(u"\3\2\2\2\u01ee\u01ec\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef")
        buf.write(u"\u01f6\3\2\2\2\u01f0\u01ee\3\2\2\2\u01f1\u01f2\5j\66")
        buf.write(u"\2\u01f2\u01f3\7\36\2\2\u01f3\u01f4\5X-\2\u01f4\u01f6")
        buf.write(u"\3\2\2\2\u01f5\u01e6\3\2\2\2\u01f5\u01f1\3\2\2\2\u01f6")
        buf.write(u"\u04d6\3\2\2\2\u01f7\u01f9\t\7\2\2\u01f8\u01fa\t\b\2")
        buf.write(u"\2\u01f9\u01f8\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01ff")
        buf.write(u"\3\2\2\2\u01fb\u01ff\7\u00d0\2\2\u01fc\u01ff\7l\2\2\u01fd")
        buf.write(u"\u01ff\7q\2\2\u01fe\u01f7\3\2\2\2\u01fe\u01fb\3\2\2\2")
        buf.write(u"\u01fe\u01fc\3\2\2\2\u01fe\u01fd\3\2\2\2\u01ff\u0200")
        buf.write(u"\3\2\2\2\u0200\u0205\5J&\2\u0201\u0202\7 \2\2\u0202\u0204")
        buf.write(u"\5J&\2\u0203\u0201\3\2\2\2\u0204\u0207\3\2\2\2\u0205")
        buf.write(u"\u0203\3\2\2\2\u0205\u0206\3\2\2\2\u0206\u020c\3\2\2")
        buf.write(u"\2\u0207\u0205\3\2\2\2\u0208\u0209\78\2\2\u0209\u020a")
        buf.write(u"\7L\2\2\u020a\u020c\5d\63\2\u020b\u01fe\3\2\2\2\u020b")
        buf.write(u"\u0208\3\2\2\2\u020c\u04d6\3\2\2\2\u020d\u020f\7#\2\2")
        buf.write(u"\u020e\u0210\7#\2\2\u020f\u020e\3\2\2\2\u020f\u0210\3")
        buf.write(u"\2\2\2\u0210\u0213\3\2\2\2\u0211\u0213\7\u0104\2\2\u0212")
        buf.write(u"\u020d\3\2\2\2\u0212\u0211\3\2\2\2\u0213\u0215\3\2\2")
        buf.write(u"\2\u0214\u0216\5P)\2\u0215\u0214\3\2\2\2\u0215\u0216")
        buf.write(u"\3\2\2\2\u0216\u04d6\3\2\2\2\u0217\u022a\7f\2\2\u0218")
        buf.write(u"\u0219\7+\2\2\u0219\u0229\5X-\2\u021a\u0220\7g\2\2\u021b")
        buf.write(u"\u021c\7\u009d\2\2\u021c\u021d\5X-\2\u021d\u021e\7 \2")
        buf.write(u"\2\u021e\u021f\5X-\2\u021f\u0221\3\2\2\2\u0220\u021b")
        buf.write(u"\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u0229\3\2\2\2\u0222")
        buf.write(u"\u0229\7h\2\2\u0223\u0229\7K\2\2\u0224\u0229\7i\2\2\u0225")
        buf.write(u"\u0226\7\u00bc\2\2\u0226\u0229\5X-\2\u0227\u0229\5X-")
        buf.write(u"\2\u0228\u0218\3\2\2\2\u0228\u021a\3\2\2\2\u0228\u0222")
        buf.write(u"\3\2\2\2\u0228\u0223\3\2\2\2\u0228\u0224\3\2\2\2\u0228")
        buf.write(u"\u0225\3\2\2\2\u0228\u0227\3\2\2\2\u0229\u022c\3\2\2")
        buf.write(u"\2\u022a\u0228\3\2\2\2\u022a\u022b\3\2\2\2\u022b\u04d6")
        buf.write(u"\3\2\2\2\u022c\u022a\3\2\2\2\u022d\u0231\7m\2\2\u022e")
        buf.write(u"\u022f\7:\2\2\u022f\u0231\7<\2\2\u0230\u022d\3\2\2\2")
        buf.write(u"\u0230\u022e\3\2\2\2\u0231\u0234\3\2\2\2\u0232\u0235")
        buf.write(u"\5d\63\2\u0233\u0235\7#\2\2\u0234\u0232\3\2\2\2\u0234")
        buf.write(u"\u0233\3\2\2\2\u0235\u0237\3\2\2\2\u0236\u0238\7?\2\2")
        buf.write(u"\u0237\u0236\3\2\2\2\u0237\u0238\3\2\2\2\u0238\u04d6")
        buf.write(u"\3\2\2\2\u0239\u023d\7\u00c4\2\2\u023a\u023b\7\u008b")
        buf.write(u"\2\2\u023b\u023d\7<\2\2\u023c\u0239\3\2\2\2\u023c\u023a")
        buf.write(u"\3\2\2\2\u023d\u023e\3\2\2\2\u023e\u023f\5d\63\2\u023f")
        buf.write(u"\u0240\7+\2\2\u0240\u0241\5d\63\2\u0241\u04d6\3\2\2\2")
        buf.write(u"\u0242\u0243\t\t\2\2\u0243\u04d6\5d\63\2\u0244\u0246")
        buf.write(u"\7p\2\2\u0245\u0247\5X-\2\u0246\u0245\3\2\2\2\u0246\u0247")
        buf.write(u"\3\2\2\2\u0247\u04d6\3\2\2\2\u0248\u04d6\5D#\2\u0249")
        buf.write(u"\u04d6\5F$\2\u024a\u0255\7>\2\2\u024b\u0256\7t\2\2\u024c")
        buf.write(u"\u024e\t\n\2\2\u024d\u024c\3\2\2\2\u024d\u024e\3\2\2")
        buf.write(u"\2\u024e\u024f\3\2\2\2\u024f\u0256\5P)\2\u0250\u0251")
        buf.write(u"\7\u00ad\2\2\u0251\u0253\5P)\2\u0252\u0254\7\u00ae\2")
        buf.write(u"\2\u0253\u0252\3\2\2\2\u0253\u0254\3\2\2\2\u0254\u0256")
        buf.write(u"\3\2\2\2\u0255\u024b\3\2\2\2\u0255\u024d\3\2\2\2\u0255")
        buf.write(u"\u0250\3\2\2\2\u0256\u04d6\3\2\2\2\u0257\u0258\7=\2\2")
        buf.write(u"\u0258\u04d6\5H%\2\u0259\u025a\7\u00ba\2\2\u025a\u025c")
        buf.write(u"\7\u0098\2\2\u025b\u025d\7K\2\2\u025c\u025b\3\2\2\2\u025c")
        buf.write(u"\u025d\3\2\2\2\u025d\u04d6\3\2\2\2\u025e\u025f\7\u00bb")
        buf.write(u"\2\2\u025f\u0261\7\u0098\2\2\u0260\u0262\7t\2\2\u0261")
        buf.write(u"\u0260\3\2\2\2\u0261\u0262\3\2\2\2\u0262\u04d6\3\2\2")
        buf.write(u"\2\u0263\u0264\7\u0099\2\2\u0264\u0266\5X-\2\u0265\u0267")
        buf.write(u"\7\u009b\2\2\u0266\u0265\3\2\2\2\u0266\u0267\3\2\2\2")
        buf.write(u"\u0267\u0269\3\2\2\2\u0268\u026a\7K\2\2\u0269\u0268\3")
        buf.write(u"\2\2\2\u0269\u026a\3\2\2\2\u026a\u04d6\3\2\2\2\u026b")
        buf.write(u"\u026c\7N\2\2\u026c\u026d\7\u009c\2\2\u026d\u026e\5t")
        buf.write(u";\2\u026e\u0272\7Y\2\2\u026f\u0270\7\u009d\2\2\u0270")
        buf.write(u"\u0271\7\u009e\2\2\u0271\u0273\7\4\2\2\u0272\u026f\3")
        buf.write(u"\2\2\2\u0272\u0273\3\2\2\2\u0273\u027c\3\2\2\2\u0274")
        buf.write(u"\u027a\7-\2\2\u0275\u0277\7g\2\2\u0276\u0275\3\2\2\2")
        buf.write(u"\u0276\u0277\3\2\2\2\u0277\u0278\3\2\2\2\u0278\u027b")
        buf.write(u"\5t;\2\u0279\u027b\7\u009f\2\2\u027a\u0276\3\2\2\2\u027a")
        buf.write(u"\u0279\3\2\2\2\u027b\u027d\3\2\2\2\u027c\u0274\3\2\2")
        buf.write(u"\2\u027c\u027d\3\2\2\2\u027d\u027f\3\2\2\2\u027e\u0280")
        buf.write(u"\7\u00a0\2\2\u027f\u027e\3\2\2\2\u027f\u0280\3\2\2\2")
        buf.write(u"\u0280\u04d6\3\2\2\2\u0281\u0282\7N\2\2\u0282\u0283\7")
        buf.write(u"\u00a1\2\2\u0283\u0284\5t;\2\u0284\u0285\7\u00a2\2\2")
        buf.write(u"\u0285\u0286\5X-\2\u0286\u0287\7\u0086\2\2\u0287\u028c")
        buf.write(u"\5X-\2\u0288\u0289\7\u009d\2\2\u0289\u028a\7\4\2\2\u028a")
        buf.write(u"\u028b\7 \2\2\u028b\u028d\7\4\2\2\u028c\u0288\3\2\2\2")
        buf.write(u"\u028c\u028d\3\2\2\2\u028d\u0292\3\2\2\2\u028e\u028f")
        buf.write(u"\7\u00a5\2\2\u028f\u0293\5t;\2\u0290\u0291\7\u00a6\2")
        buf.write(u"\2\u0291\u0293\5t;\2\u0292\u028e\3\2\2\2\u0292\u0290")
        buf.write(u"\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u029a\3\2\2\2\u0294")
        buf.write(u"\u0295\7\u00a7\2\2\u0295\u0298\5t;\2\u0296\u0297\7 \2")
        buf.write(u"\2\u0297\u0299\5t;\2\u0298\u0296\3\2\2\2\u0298\u0299")
        buf.write(u"\3\2\2\2\u0299\u029b\3\2\2\2\u029a\u0294\3\2\2\2\u029a")
        buf.write(u"\u029b\3\2\2\2\u029b\u02aa\3\2\2\2\u029c\u029d\7\u00a8")
        buf.write(u"\2\2\u029d\u02a8\5t;\2\u029e\u029f\7 \2\2\u029f\u02a6")
        buf.write(u"\7\4\2\2\u02a0\u02a1\7 \2\2\u02a1\u02a4\5X-\2\u02a2\u02a3")
        buf.write(u"\7 \2\2\u02a3\u02a5\5t;\2\u02a4\u02a2\3\2\2\2\u02a4\u02a5")
        buf.write(u"\3\2\2\2\u02a5\u02a7\3\2\2\2\u02a6\u02a0\3\2\2\2\u02a6")
        buf.write(u"\u02a7\3\2\2\2\u02a7\u02a9\3\2\2\2\u02a8\u029e\3\2\2")
        buf.write(u"\2\u02a8\u02a9\3\2\2\2\u02a9\u02ab\3\2\2\2\u02aa\u029c")
        buf.write(u"\3\2\2\2\u02aa\u02ab\3\2\2\2\u02ab\u02ae\3\2\2\2\u02ac")
        buf.write(u"\u02ad\7\u00a9\2\2\u02ad\u02af\5t;\2\u02ae\u02ac\3\2")
        buf.write(u"\2\2\u02ae\u02af\3\2\2\2\u02af\u02b2\3\2\2\2\u02b0\u02b1")
        buf.write(u"\7\u00ab\2\2\u02b1\u02b3\5X-\2\u02b2\u02b0\3\2\2\2\u02b2")
        buf.write(u"\u02b3\3\2\2\2\u02b3\u02be\3\2\2\2\u02b4\u02b5\7\u0098")
        buf.write(u"\2\2\u02b5\u02b8\5t;\2\u02b6\u02b7\7\n\2\2\u02b7\u02b9")
        buf.write(u"\5t;\2\u02b8\u02b6\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9")
        buf.write(u"\u02bc\3\2\2\2\u02ba\u02bb\7 \2\2\u02bb\u02bd\5X-\2\u02bc")
        buf.write(u"\u02ba\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd\u02bf\3\2\2")
        buf.write(u"\2\u02be\u02b4\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c2")
        buf.write(u"\3\2\2\2\u02c0\u02c1\7\u00aa\2\2\u02c1\u02c3\5t;\2\u02c2")
        buf.write(u"\u02c0\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3\u02c9\3\2\2")
        buf.write(u"\2\u02c4\u02c7\7\u0093\2\2\u02c5\u02c6\7S\2\2\u02c6\u02c8")
        buf.write(u"\5X-\2\u02c7\u02c5\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c8")
        buf.write(u"\u02ca\3\2\2\2\u02c9\u02c4\3\2\2\2\u02c9\u02ca\3\2\2")
        buf.write(u"\2\u02ca\u02ce\3\2\2\2\u02cb\u02cc\7\u00a3\2\2\u02cc")
        buf.write(u"\u02cd\7\u00a4\2\2\u02cd\u02cf\7\4\2\2\u02ce\u02cb\3")
        buf.write(u"\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u04d6\3\2\2\2\u02d0")
        buf.write(u"\u02d1\7N\2\2\u02d1\u02d2\7\u00ad\2\2\u02d2\u02d4\5t")
        buf.write(u";\2\u02d3\u02d5\7\u00af\2\2\u02d4\u02d3\3\2\2\2\u02d4")
        buf.write(u"\u02d5\3\2\2\2\u02d5\u02d7\3\2\2\2\u02d6\u02d8\7\u00b0")
        buf.write(u"\2\2\u02d7\u02d6\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8\u02da")
        buf.write(u"\3\2\2\2\u02d9\u02db\7\u00b1\2\2\u02da\u02d9\3\2\2\2")
        buf.write(u"\u02da\u02db\3\2\2\2\u02db\u02df\3\2\2\2\u02dc\u02dd")
        buf.write(u"\7\u00a3\2\2\u02dd\u02de\7\u00a4\2\2\u02de\u02e0\7\4")
        buf.write(u"\2\2\u02df\u02dc\3\2\2\2\u02df\u02e0\3\2\2\2\u02e0\u04d6")
        buf.write(u"\3\2\2\2\u02e1\u02e2\7N\2\2\u02e2\u02e3\7Y\2\2\u02e3")
        buf.write(u"\u02e4\7\4\2\2\u02e4\u02e5\7\u00a2\2\2\u02e5\u02e6\5")
        buf.write(u"t;\2\u02e6\u02e7\7\u0086\2\2\u02e7\u02ea\5X-\2\u02e8")
        buf.write(u"\u02e9\7\u00ab\2\2\u02e9\u02eb\5X-\2\u02ea\u02e8\3\2")
        buf.write(u"\2\2\u02ea\u02eb\3\2\2\2\u02eb\u04d6\3\2\2\2\u02ec\u02ed")
        buf.write(u"\7\63\2\2\u02ed\u02ee\7\u00a1\2\2\u02ee\u02ef\5t;\2\u02ef")
        buf.write(u"\u02f0\7\u00a2\2\2\u02f0\u02f4\5t;\2\u02f1\u02f2\7\u00ac")
        buf.write(u"\2\2\u02f2\u02f3\t\13\2\2\u02f3\u02f5\5t;\2\u02f4\u02f1")
        buf.write(u"\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u04d6\3\2\2\2\u02f6")
        buf.write(u"\u02f7\7\63\2\2\u02f7\u02f8\7Y\2\2\u02f8\u02f9\7\4\2")
        buf.write(u"\2\u02f9\u02fa\7\u00a2\2\2\u02fa\u02fe\5t;\2\u02fb\u02fc")
        buf.write(u"\7\u00ac\2\2\u02fc\u02fd\t\13\2\2\u02fd\u02ff\5t;\2\u02fe")
        buf.write(u"\u02fb\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u04d6\3\2\2")
        buf.write(u"\2\u0300\u0301\7\63\2\2\u0301\u0302\7\u00b2\2\2\u0302")
        buf.write(u"\u0303\7Y\2\2\u0303\u0304\7\4\2\2\u0304\u0305\7\u00a2")
        buf.write(u"\2\2\u0305\u0306\5t;\2\u0306\u0307\5<\37\2\u0307\u04d6")
        buf.write(u"\3\2\2\2\u0308\u0309\7\u00ac\2\2\u0309\u030c\7g\2\2\u030a")
        buf.write(u"\u030d\5\32\16\2\u030b\u030d\7t\2\2\u030c\u030a\3\2\2")
        buf.write(u"\2\u030c\u030b\3\2\2\2\u030d\u0316\3\2\2\2\u030e\u0314")
        buf.write(u"\7-\2\2\u030f\u0311\7g\2\2\u0310\u030f\3\2\2\2\u0310")
        buf.write(u"\u0311\3\2\2\2\u0311\u0312\3\2\2\2\u0312\u0315\5t;\2")
        buf.write(u"\u0313\u0315\7\u009f\2\2\u0314\u0310\3\2\2\2\u0314\u0313")
        buf.write(u"\3\2\2\2\u0315\u0317\3\2\2\2\u0316\u030e\3\2\2\2\u0316")
        buf.write(u"\u0317\3\2\2\2\u0317\u0319\3\2\2\2\u0318\u031a\t\f\2")
        buf.write(u"\2\u0319\u0318\3\2\2\2\u0319\u031a\3\2\2\2\u031a\u031c")
        buf.write(u"\3\2\2\2\u031b\u031d\7\u00b5\2\2\u031c\u031b\3\2\2\2")
        buf.write(u"\u031c\u031d\3\2\2\2\u031d\u04d6\3\2\2\2\u031e\u031f")
        buf.write(u"\7\u00ac\2\2\u031f\u0320\7\u009c\2\2\u0320\u0322\5t;")
        buf.write(u"\2\u0321\u0323\7h\2\2\u0322\u0321\3\2\2\2\u0322\u0323")
        buf.write(u"\3\2\2\2\u0323\u0326\3\2\2\2\u0324\u0325\7\u00a1\2\2")
        buf.write(u"\u0325\u0327\5t;\2\u0326\u0324\3\2\2\2\u0326\u0327\3")
        buf.write(u"\2\2\2\u0327\u04d6\3\2\2\2\u0328\u0329\7\u00b3\2\2\u0329")
        buf.write(u"\u032c\t\13\2\2\u032a\u032d\7t\2\2\u032b\u032d\5\32\16")
        buf.write(u"\2\u032c\u032a\3\2\2\2\u032c\u032b\3\2\2\2\u032d\u04d6")
        buf.write(u"\3\2\2\2\u032e\u0330\7\65\2\2\u032f\u0331\5X-\2\u0330")
        buf.write(u"\u032f\3\2\2\2\u0330\u0331\3\2\2\2\u0331\u04d6\3\2\2")
        buf.write(u"\2\u0332\u0334\7\u00eb\2\2\u0333\u0335\5X-\2\u0334\u0333")
        buf.write(u"\3\2\2\2\u0334\u0335\3\2\2\2\u0335\u04d6\3\2\2\2\u0336")
        buf.write(u"\u0337\7@\2\2\u0337\u0338\t\r\2\2\u0338\u033a\5d\63\2")
        buf.write(u"\u0339\u033b\7E\2\2\u033a\u0339\3\2\2\2\u033a\u033b\3")
        buf.write(u"\2\2\2\u033b\u033c\3\2\2\2\u033c\u033d\7\22\2\2\u033d")
        buf.write(u"\u033e\5t;\2\u033e\u033f\5t;\2\u033f\u0347\5n8\2\u0340")
        buf.write(u"\u0341\7 \2\2\u0341\u0342\5t;\2\u0342\u0343\5t;\2\u0343")
        buf.write(u"\u0344\5n8\2\u0344\u0346\3\2\2\2\u0345\u0340\3\2\2\2")
        buf.write(u"\u0346\u0349\3\2\2\2\u0347\u0345\3\2\2\2\u0347\u0348")
        buf.write(u"\3\2\2\2\u0348\u034a\3\2\2\2\u0349\u0347\3\2\2\2\u034a")
        buf.write(u"\u034b\7\23\2\2\u034b\u04d6\3\2\2\2\u034c\u034d\7\u00ff")
        buf.write(u"\2\2\u034d\u034e\7A\2\2\u034e\u0358\5d\63\2\u034f\u0350")
        buf.write(u"\7a\2\2\u0350\u0351\7\u0100\2\2\u0351\u0352\5t;\2\u0352")
        buf.write(u"\u0353\5t;\2\u0353\u0354\5n8\2\u0354\u0359\3\2\2\2\u0355")
        buf.write(u"\u0356\7\u0101\2\2\u0356\u0357\7\u0100\2\2\u0357\u0359")
        buf.write(u"\5t;\2\u0358\u034f\3\2\2\2\u0358\u0355\3\2\2\2\u0359")
        buf.write(u"\u04d6\3\2\2\2\u035a\u0375\7F\2\2\u035b\u0376\5d\63\2")
        buf.write(u"\u035c\u035e\7\u008f\2\2\u035d\u035c\3\2\2\2\u035d\u035e")
        buf.write(u"\3\2\2\2\u035e\u0361\3\2\2\2\u035f\u0362\5R*\2\u0360")
        buf.write(u"\u0362\7\t\2\2\u0361\u035f\3\2\2\2\u0361\u0360\3\2\2")
        buf.write(u"\2\u0362\u0365\3\2\2\2\u0363\u0364\7\u0081\2\2\u0364")
        buf.write(u"\u0366\5d\63\2\u0365\u0363\3\2\2\2\u0365\u0366\3\2\2")
        buf.write(u"\2\u0366\u0369\3\2\2\2\u0367\u0368\7\u00c2\2\2\u0368")
        buf.write(u"\u036a\5X-\2\u0369\u0367\3\2\2\2\u0369\u036a\3\2\2\2")
        buf.write(u"\u036a\u036e\3\2\2\2\u036b\u036c\7\u0090\2\2\u036c\u036d")
        buf.write(u"\t\16\2\2\u036d\u036f\5d\63\2\u036e\u036b\3\2\2\2\u036e")
        buf.write(u"\u036f\3\2\2\2\u036f\u0373\3\2\2\2\u0370\u0371\7\u00c0")
        buf.write(u"\2\2\u0371\u0372\7\u00c7\2\2\u0372\u0374\5t;\2\u0373")
        buf.write(u"\u0370\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u0376\3\2\2")
        buf.write(u"\2\u0375\u035b\3\2\2\2\u0375\u035d\3\2\2\2\u0376\u04d6")
        buf.write(u"\3\2\2\2\u0377\u0379\7G\2\2\u0378\u037a\t\17\2\2\u0379")
        buf.write(u"\u0378\3\2\2\2\u0379\u037a\3\2\2\2\u037a\u0382\3\2\2")
        buf.write(u"\2\u037b\u037c\7-\2\2\u037c\u0383\5d\63\2\u037d\u037e")
        buf.write(u"\5d\63\2\u037e\u037f\7-\2\2\u037f\u0380\5d\63\2\u0380")
        buf.write(u"\u0383\3\2\2\2\u0381\u0383\5d\63\2\u0382\u037b\3\2\2")
        buf.write(u"\2\u0382\u037d\3\2\2\2\u0382\u0381\3\2\2\2\u0382\u0383")
        buf.write(u"\3\2\2\2\u0383\u0385\3\2\2\2\u0384\u0386\t\17\2\2\u0385")
        buf.write(u"\u0384\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0389\3\2\2")
        buf.write(u"\2\u0387\u0388\7\u00bf\2\2\u0388\u038a\5d\63\2\u0389")
        buf.write(u"\u0387\3\2\2\2\u0389\u038a\3\2\2\2\u038a\u04d6\3\2\2")
        buf.write(u"\2\u038b\u038f\7Q\2\2\u038c\u038e\5> \2\u038d\u038c\3")
        buf.write(u"\2\2\2\u038e\u0391\3\2\2\2\u038f\u038d\3\2\2\2\u038f")
        buf.write(u"\u0390\3\2\2\2\u0390\u04d6\3\2\2\2\u0391\u038f\3\2\2")
        buf.write(u"\2\u0392\u04d6\7R\2\2\u0393\u039b\7c\2\2\u0394\u039a")
        buf.write(u"\5> \2\u0395\u0396\5d\63\2\u0396\u0397\7\66\2\2\u0397")
        buf.write(u"\u0398\5X-\2\u0398\u039a\3\2\2\2\u0399\u0394\3\2\2\2")
        buf.write(u"\u0399\u0395\3\2\2\2\u039a\u039d\3\2\2\2\u039b\u0399")
        buf.write(u"\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u04d6\3\2\2\2\u039d")
        buf.write(u"\u039b\3\2\2\2\u039e\u039f\7\u00c9\2\2\u039f\u03a0\7")
        buf.write(u"\63\2\2\u03a0\u03a1\5d\63\2\u03a1\u03a2\t\20\2\2\u03a2")
        buf.write(u"\u03a4\5d\63\2\u03a3\u03a5\7\u00cb\2\2\u03a4\u03a3\3")
        buf.write(u"\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a7\3\2\2\2\u03a6")
        buf.write(u"\u03a8\t\21\2\2\u03a7\u03a6\3\2\2\2\u03a7\u03a8\3\2\2")
        buf.write(u"\2\u03a8\u03aa\3\2\2\2\u03a9\u03ab\t\22\2\2\u03aa\u03a9")
        buf.write(u"\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u03ad\3\2\2\2\u03ac")
        buf.write(u"\u03ae\7\u00cf\2\2\u03ad\u03ac\3\2\2\2\u03ad\u03ae\3")
        buf.write(u"\2\2\2\u03ae\u04d6\3\2\2\2\u03af\u03b5\7u\2\2\u03b0\u03b1")
        buf.write(u"\7+\2\2\u03b1\u03b4\5X-\2\u03b2\u03b4\5> \2\u03b3\u03b0")
        buf.write(u"\3\2\2\2\u03b3\u03b2\3\2\2\2\u03b4\u03b7\3\2\2\2\u03b5")
        buf.write(u"\u03b3\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u04d6\3\2\2")
        buf.write(u"\2\u03b7\u03b5\3\2\2\2\u03b8\u03bf\7\u008e\2\2\u03b9")
        buf.write(u"\u03ba\7+\2\2\u03ba\u03be\5X-\2\u03bb\u03be\5> \2\u03bc")
        buf.write(u"\u03be\5X-\2\u03bd\u03b9\3\2\2\2\u03bd\u03bb\3\2\2\2")
        buf.write(u"\u03bd\u03bc\3\2\2\2\u03be\u03c1\3\2\2\2\u03bf\u03bd")
        buf.write(u"\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0\u04d6\3\2\2\2\u03c1")
        buf.write(u"\u03bf\3\2\2\2\u03c2\u03c8\t\23\2\2\u03c3\u03c7\5> \2")
        buf.write(u"\u03c4\u03c5\7-\2\2\u03c5\u03c7\5d\63\2\u03c6\u03c3\3")
        buf.write(u"\2\2\2\u03c6\u03c4\3\2\2\2\u03c7\u03ca\3\2\2\2\u03c8")
        buf.write(u"\u03c6\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u04d6\3\2\2")
        buf.write(u"\2\u03ca\u03c8\3\2\2\2\u03cb\u03cc\7{\2\2\u03cc\u03d4")
        buf.write(u"\7\u0081\2\2\u03cd\u03ce\79\2\2\u03ce\u03d5\5X-\2\u03cf")
        buf.write(u"\u03d0\5d\63\2\u03d0\u03d1\7S\2\2\u03d1\u03d2\5X-\2\u03d2")
        buf.write(u"\u03d5\3\2\2\2\u03d3\u03d5\5d\63\2\u03d4\u03cd\3\2\2")
        buf.write(u"\2\u03d4\u03cf\3\2\2\2\u03d4\u03d3\3\2\2\2\u03d5\u03d8")
        buf.write(u"\3\2\2\2\u03d6\u03d7\7\u00f8\2\2\u03d7\u03d9\5d\63\2")
        buf.write(u"\u03d8\u03d6\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u04d6")
        buf.write(u"\3\2\2\2\u03da\u03dc\7{\2\2\u03db\u03dd\7|\2\2\u03dc")
        buf.write(u"\u03db\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd\u03e4\3\2\2")
        buf.write(u"\2\u03de\u03df\7-\2\2\u03df\u03e0\5d\63\2\u03e0\u03e1")
        buf.write(u"\7}\2\2\u03e1\u03e5\3\2\2\2\u03e2\u03e3\7-\2\2\u03e3")
        buf.write(u"\u03e5\5d\63\2\u03e4\u03de\3\2\2\2\u03e4\u03e2\3\2\2")
        buf.write(u"\2\u03e4\u03e5\3\2\2\2\u03e5\u04d6\3\2\2\2\u03e6\u03e7")
        buf.write(u"\7\u00f5\2\2\u03e7\u03e8\7\u0090\2\2\u03e8\u03fc\5d\63")
        buf.write(u"\2\u03e9\u03ef\7\u0081\2\2\u03ea\u03eb\79\2\2\u03eb\u03f0")
        buf.write(u"\5X-\2\u03ec\u03f0\7\u00f7\2\2\u03ed\u03ee\7D\2\2\u03ee")
        buf.write(u"\u03f0\5X-\2\u03ef\u03ea\3\2\2\2\u03ef\u03ec\3\2\2\2")
        buf.write(u"\u03ef\u03ed\3\2\2\2\u03f0\u03fd\3\2\2\2\u03f1\u03f2")
        buf.write(u"\7\22\2\2\u03f2\u03f3\5R*\2\u03f3\u03f4\7\23\2\2\u03f4")
        buf.write(u"\u03f6\3\2\2\2\u03f5\u03f1\3\2\2\2\u03f5\u03f6\3\2\2")
        buf.write(u"\2\u03f6\u03f7\3\2\2\2\u03f7\u03f8\7\u00f6\2\2\u03f8")
        buf.write(u"\u03f9\7\22\2\2\u03f9\u03fa\5P)\2\u03fa\u03fb\7\23\2")
        buf.write(u"\2\u03fb\u03fd\3\2\2\2\u03fc\u03e9\3\2\2\2\u03fc\u03f5")
        buf.write(u"\3\2\2\2\u03fd\u04d6\3\2\2\2\u03fe\u0400\7\u0093\2\2")
        buf.write(u"\u03ff\u0401\5X-\2\u0400\u03ff\3\2\2\2\u0400\u0401\3")
        buf.write(u"\2\2\2\u0401\u0404\3\2\2\2\u0402\u0403\7-\2\2\u0403\u0405")
        buf.write(u"\5d\63\2\u0404\u0402\3\2\2\2\u0404\u0405\3\2\2\2\u0405")
        buf.write(u"\u04d6\3\2\2\2\u0406\u0414\7\u00e6\2\2\u0407\u0415\7")
        buf.write(u"\u00e3\2\2\u0408\u040a\t\24\2\2\u0409\u0408\3\2\2\2\u0409")
        buf.write(u"\u040a\3\2\2\2\u040a\u0412\3\2\2\2\u040b\u040c\7-\2\2")
        buf.write(u"\u040c\u0413\5d\63\2\u040d\u040e\5d\63\2\u040e\u040f")
        buf.write(u"\7-\2\2\u040f\u0410\5d\63\2\u0410\u0413\3\2\2\2\u0411")
        buf.write(u"\u0413\5d\63\2\u0412\u040b\3\2\2\2\u0412\u040d\3\2\2")
        buf.write(u"\2\u0412\u0411\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u0415")
        buf.write(u"\3\2\2\2\u0414\u0407\3\2\2\2\u0414\u0409\3\2\2\2\u0415")
        buf.write(u"\u04d6\3\2\2\2\u0416\u0418\7\u00e7\2\2\u0417\u0419\7")
        buf.write(u"\u00cb\2\2\u0418\u0417\3\2\2\2\u0418\u0419\3\2\2\2\u0419")
        buf.write(u"\u04d6\3\2\2\2\u041a\u041b\7\u00c1\2\2\u041b\u042a\5")
        buf.write(u"X-\2\u041c\u041d\7\u00c0\2\2\u041d\u0426\5X-\2\u041e")
        buf.write(u"\u041f\7\u00ca\2\2\u041f\u0422\5d\63\2\u0420\u0421\7")
        buf.write(u"\u00a2\2\2\u0421\u0423\5d\63\2\u0422\u0420\3\2\2\2\u0422")
        buf.write(u"\u0423\3\2\2\2\u0423\u0426\3\2\2\2\u0424\u0426\5d\63")
        buf.write(u"\2\u0425\u041c\3\2\2\2\u0425\u041e\3\2\2\2\u0425\u0424")
        buf.write(u"\3\2\2\2\u0426\u0428\3\2\2\2\u0427\u0429\t\21\2\2\u0428")
        buf.write(u"\u0427\3\2\2\2\u0428\u0429\3\2\2\2\u0429\u042b\3\2\2")
        buf.write(u"\2\u042a\u0425\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u042e")
        buf.write(u"\3\2\2\2\u042c\u042d\7-\2\2\u042d\u042f\5d\63\2\u042e")
        buf.write(u"\u042c\3\2\2\2\u042e\u042f\3\2\2\2\u042f\u04d6\3\2\2")
        buf.write(u"\2\u0430\u0437\7v\2\2\u0431\u0438\7w\2\2\u0432\u0438")
        buf.write(u"\7x\2\2\u0433\u0435\7y\2\2\u0434\u0433\3\2\2\2\u0434")
        buf.write(u"\u0435\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u0438\5X-\2")
        buf.write(u"\u0437\u0431\3\2\2\2\u0437\u0432\3\2\2\2\u0437\u0434")
        buf.write(u"\3\2\2\2\u0438\u043b\3\2\2\2\u0439\u043a\7-\2\2\u043a")
        buf.write(u"\u043c\5d\63\2\u043b\u0439\3\2\2\2\u043b\u043c\3\2\2")
        buf.write(u"\2\u043c\u04d6\3\2\2\2\u043d\u043f\7\u008b\2\2\u043e")
        buf.write(u"\u0440\7\u008c\2\2\u043f\u043e\3\2\2\2\u043f\u0440\3")
        buf.write(u"\2\2\2\u0440\u0441\3\2\2\2\u0441\u0442\7+\2\2\u0442\u04d6")
        buf.write(u"\5d\63\2\u0443\u0446\7\u00de\2\2\u0444\u0445\7-\2\2\u0445")
        buf.write(u"\u0447\5d\63\2\u0446\u0444\3\2\2\2\u0446\u0447\3\2\2")
        buf.write(u"\2\u0447\u04d6\3\2\2\2\u0448\u044c\7\u00f4\2\2\u0449")
        buf.write(u"\u044b\n\2\2\2\u044a\u0449\3\2\2\2\u044b\u044e\3\2\2")
        buf.write(u"\2\u044c\u044a\3\2\2\2\u044c\u044d\3\2\2\2\u044d\u04d6")
        buf.write(u"\3\2\2\2\u044e\u044c\3\2\2\2\u044f\u0455\7\u00fa\2\2")
        buf.write(u"\u0450\u0452\7\u00fe\2\2\u0451\u0453\t\25\2\2\u0452\u0451")
        buf.write(u"\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u0454\3\2\2\2\u0454")
        buf.write(u"\u0456\5X-\2\u0455\u0450\3\2\2\2\u0455\u0456\3\2\2\2")
        buf.write(u"\u0456\u0458\3\2\2\2\u0457\u0459\7\u00e8\2\2\u0458\u0457")
        buf.write(u"\3\2\2\2\u0458\u0459\3\2\2\2\u0459\u045b\3\2\2\2\u045a")
        buf.write(u"\u045c\7|\2\2\u045b\u045a\3\2\2\2\u045b\u045c\3\2\2\2")
        buf.write(u"\u045c\u0465\3\2\2\2\u045d\u0466\7\u00f7\2\2\u045e\u045f")
        buf.write(u"\7D\2\2\u045f\u0461\5X-\2\u0460\u0462\7\u00cf\2\2\u0461")
        buf.write(u"\u0460\3\2\2\2\u0461\u0462\3\2\2\2\u0462\u0466\3\2\2")
        buf.write(u"\2\u0463\u0464\7+\2\2\u0464\u0466\5X-\2\u0465\u045d\3")
        buf.write(u"\2\2\2\u0465\u045e\3\2\2\2\u0465\u0463\3\2\2\2\u0466")
        buf.write(u"\u04d6\3\2\2\2\u0467\u046d\7\u00fb\2\2\u0468\u046a\7")
        buf.write(u"\u00fe\2\2\u0469\u046b\t\25\2\2\u046a\u0469\3\2\2\2\u046a")
        buf.write(u"\u046b\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u046e\5X-\2")
        buf.write(u"\u046d\u0468\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u0470")
        buf.write(u"\3\2\2\2\u046f\u0471\7\u00e8\2\2\u0470\u046f\3\2\2\2")
        buf.write(u"\u0470\u0471\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0477")
        buf.write(u"\7\u0081\2\2\u0473\u0478\7\u00f7\2\2\u0474\u0475\7D\2")
        buf.write(u"\2\u0475\u0478\5X-\2\u0476\u0478\5X-\2\u0477\u0473\3")
        buf.write(u"\2\2\2\u0477\u0474\3\2\2\2\u0477\u0476\3\2\2\2\u0478")
        buf.write(u"\u04d6\3\2\2\2\u0479\u047f\7z\2\2\u047a\u047c\t\26\2")
        buf.write(u"\2\u047b\u047d\7t\2\2\u047c\u047b\3\2\2\2\u047c\u047d")
        buf.write(u"\3\2\2\2\u047d\u0480\3\2\2\2\u047e\u0480\7t\2\2\u047f")
        buf.write(u"\u047a\3\2\2\2\u047f\u047e\3\2\2\2\u0480\u04d6\3\2\2")
        buf.write(u"\2\u0481\u0482\7H\2\2\u0482\u04d6\7I\2\2\u0483\u049e")
        buf.write(u"\7K\2\2\u0484\u049f\7t\2\2\u0485\u0486\7O\2\2\u0486\u049f")
        buf.write(u"\5X-\2\u0487\u0488\7\u00c6\2\2\u0488\u049f\5d\63\2\u0489")
        buf.write(u"\u049f\7\u0102\2\2\u048a\u048b\7\u00db\2\2\u048b\u049f")
        buf.write(u"\5R*\2\u048c\u049f\7I\2\2\u048d\u049f\7\65\2\2\u048e")
        buf.write(u"\u049f\7\u00fe\2\2\u048f\u049f\7\u0103\2\2\u0490\u049f")
        buf.write(u"\7\u00dc\2\2\u0491\u049f\7\u0105\2\2\u0492\u049f\7\u0106")
        buf.write(u"\2\2\u0493\u049f\7\u00ad\2\2\u0494\u049f\7\u00e9\2\2")
        buf.write(u"\u0495\u049f\7\u0086\2\2\u0496\u0498\7H\2\2\u0497\u0499")
        buf.write(u"\7t\2\2\u0498\u0497\3\2\2\2\u0498\u0499\3\2\2\2\u0499")
        buf.write(u"\u049f\3\2\2\2\u049a\u049b\7\u0107\2\2\u049b\u049f\5")
        buf.write(u"X-\2\u049c\u049f\7\u00be\2\2\u049d\u049f\7g\2\2\u049e")
        buf.write(u"\u0484\3\2\2\2\u049e\u0485\3\2\2\2\u049e\u0487\3\2\2")
        buf.write(u"\2\u049e\u0489\3\2\2\2\u049e\u048a\3\2\2\2\u049e\u048c")
        buf.write(u"\3\2\2\2\u049e\u048d\3\2\2\2\u049e\u048e\3\2\2\2\u049e")
        buf.write(u"\u048f\3\2\2\2\u049e\u0490\3\2\2\2\u049e\u0491\3\2\2")
        buf.write(u"\2\u049e\u0492\3\2\2\2\u049e\u0493\3\2\2\2\u049e\u0494")
        buf.write(u"\3\2\2\2\u049e\u0495\3\2\2\2\u049e\u0496\3\2\2\2\u049e")
        buf.write(u"\u049a\3\2\2\2\u049e\u049c\3\2\2\2\u049e\u049d\3\2\2")
        buf.write(u"\2\u049e\u049f\3\2\2\2\u049f\u04d6\3\2\2\2\u04a0\u04a1")
        buf.write(u"\7\u0082\2\2\u04a1\u04a4\7\u0083\2\2\u04a2\u04a5\7#\2")
        buf.write(u"\2\u04a3\u04a5\5d\63\2\u04a4\u04a2\3\2\2\2\u04a4\u04a3")
        buf.write(u"\3\2\2\2\u04a5\u04af\3\2\2\2\u04a6\u04ae\7\u0084\2\2")
        buf.write(u"\u04a7\u04a8\7+\2\2\u04a8\u04aa\7\u0085\2\2\u04a9\u04ab")
        buf.write(u"\7\u0086\2\2\u04aa\u04a9\3\2\2\2\u04aa\u04ab\3\2\2\2")
        buf.write(u"\u04ab\u04ae\3\2\2\2\u04ac\u04ae\7\u008a\2\2\u04ad\u04a6")
        buf.write(u"\3\2\2\2\u04ad\u04a7\3\2\2\2\u04ad\u04ac\3\2\2\2\u04ae")
        buf.write(u"\u04b1\3\2\2\2\u04af\u04ad\3\2\2\2\u04af\u04b0\3\2\2")
        buf.write(u"\2\u04b0\u04d6\3\2\2\2\u04b1\u04af\3\2\2\2\u04b2\u04b4")
        buf.write(u"\7l\2\2\u04b3\u04b5\5p9\2\u04b4\u04b3\3\2\2\2\u04b4\u04b5")
        buf.write(u"\3\2\2\2\u04b5\u04b6\3\2\2\2\u04b6\u04b7\5t;\2\u04b7")
        buf.write(u"\u04b8\7-\2\2\u04b8\u04bb\5d\63\2\u04b9\u04ba\7.\2\2")
        buf.write(u"\u04ba\u04bc\5t;\2\u04bb\u04b9\3\2\2\2\u04bb\u04bc\3")
        buf.write(u"\2\2\2\u04bc\u04be\3\2\2\2\u04bd\u04bf\5@!\2\u04be\u04bd")
        buf.write(u"\3\2\2\2\u04be\u04bf\3\2\2\2\u04bf\u04d6\3\2\2\2\u04c0")
        buf.write(u"\u04d6\7\u00da\2\2\u04c1\u04c4\t\27\2\2\u04c2\u04c3\7")
        buf.write(u"\f\2\2\u04c3\u04c5\5t;\2\u04c4\u04c2\3\2\2\2\u04c4\u04c5")
        buf.write(u"\3\2\2\2\u04c5\u04c9\3\2\2\2\u04c6\u04c8\n\2\2\2\u04c7")
        buf.write(u"\u04c6\3\2\2\2\u04c8\u04cb\3\2\2\2\u04c9\u04c7\3\2\2")
        buf.write(u"\2\u04c9\u04ca\3\2\2\2\u04ca\u04d6\3\2\2\2\u04cb\u04c9")
        buf.write(u"\3\2\2\2\u04cc\u04cd\7)\2\2\u04cd\u04d0\5X-\2\u04ce\u04cf")
        buf.write(u"\7\u00ab\2\2\u04cf\u04d1\5X-\2\u04d0\u04ce\3\2\2\2\u04d0")
        buf.write(u"\u04d1\3\2\2\2\u04d1\u04d6\3\2\2\2\u04d2\u04d3\7\36\2")
        buf.write(u"\2\u04d3\u04d6\5X-\2\u04d4\u04d6\5Z.\2\u04d5\u01ac\3")
        buf.write(u"\2\2\2\u04d5\u01b7\3\2\2\2\u04d5\u01cb\3\2\2\2\u04d5")
        buf.write(u"\u01cc\3\2\2\2\u04d5\u01e4\3\2\2\2\u04d5\u01f5\3\2\2")
        buf.write(u"\2\u04d5\u020b\3\2\2\2\u04d5\u0212\3\2\2\2\u04d5\u0217")
        buf.write(u"\3\2\2\2\u04d5\u0230\3\2\2\2\u04d5\u023c\3\2\2\2\u04d5")
        buf.write(u"\u0242\3\2\2\2\u04d5\u0244\3\2\2\2\u04d5\u0248\3\2\2")
        buf.write(u"\2\u04d5\u0249\3\2\2\2\u04d5\u024a\3\2\2\2\u04d5\u0257")
        buf.write(u"\3\2\2\2\u04d5\u0259\3\2\2\2\u04d5\u025e\3\2\2\2\u04d5")
        buf.write(u"\u0263\3\2\2\2\u04d5\u026b\3\2\2\2\u04d5\u0281\3\2\2")
        buf.write(u"\2\u04d5\u02d0\3\2\2\2\u04d5\u02e1\3\2\2\2\u04d5\u02ec")
        buf.write(u"\3\2\2\2\u04d5\u02f6\3\2\2\2\u04d5\u0300\3\2\2\2\u04d5")
        buf.write(u"\u0308\3\2\2\2\u04d5\u031e\3\2\2\2\u04d5\u0328\3\2\2")
        buf.write(u"\2\u04d5\u032e\3\2\2\2\u04d5\u0332\3\2\2\2\u04d5\u0336")
        buf.write(u"\3\2\2\2\u04d5\u034c\3\2\2\2\u04d5\u035a\3\2\2\2\u04d5")
        buf.write(u"\u0377\3\2\2\2\u04d5\u038b\3\2\2\2\u04d5\u0392\3\2\2")
        buf.write(u"\2\u04d5\u0393\3\2\2\2\u04d5\u039e\3\2\2\2\u04d5\u03af")
        buf.write(u"\3\2\2\2\u04d5\u03b8\3\2\2\2\u04d5\u03c2\3\2\2\2\u04d5")
        buf.write(u"\u03cb\3\2\2\2\u04d5\u03da\3\2\2\2\u04d5\u03e6\3\2\2")
        buf.write(u"\2\u04d5\u03fe\3\2\2\2\u04d5\u0406\3\2\2\2\u04d5\u0416")
        buf.write(u"\3\2\2\2\u04d5\u041a\3\2\2\2\u04d5\u0430\3\2\2\2\u04d5")
        buf.write(u"\u043d\3\2\2\2\u04d5\u0443\3\2\2\2\u04d5\u0448\3\2\2")
        buf.write(u"\2\u04d5\u044f\3\2\2\2\u04d5\u0467\3\2\2\2\u04d5\u0479")
        buf.write(u"\3\2\2\2\u04d5\u0481\3\2\2\2\u04d5\u0483\3\2\2\2\u04d5")
        buf.write(u"\u04a0\3\2\2\2\u04d5\u04b2\3\2\2\2\u04d5\u04c0\3\2\2")
        buf.write(u"\2\u04d5\u04c1\3\2\2\2\u04d5\u04cc\3\2\2\2\u04d5\u04d2")
        buf.write(u"\3\2\2\2\u04d5\u04d4\3\2\2\2\u04d6=\3\2\2\2\u04d7\u04de")
        buf.write(u"\5r:\2\u04d8\u04d9\7S\2\2\u04d9\u04de\5X-\2\u04da\u04db")
        buf.write(u"\7U\2\2\u04db\u04de\5X-\2\u04dc\u04de\7V\2\2\u04dd\u04d7")
        buf.write(u"\3\2\2\2\u04dd\u04d8\3\2\2\2\u04dd\u04da\3\2\2\2\u04dd")
        buf.write(u"\u04dc\3\2\2\2\u04de?\3\2\2\2\u04df\u04e4\5B\"\2\u04e0")
        buf.write(u"\u04e1\7 \2\2\u04e1\u04e3\5B\"\2\u04e2\u04e0\3\2\2\2")
        buf.write(u"\u04e3\u04e6\3\2\2\2\u04e4\u04e2\3\2\2\2\u04e4\u04e5")
        buf.write(u"\3\2\2\2\u04e5A\3\2\2\2\u04e6\u04e4\3\2\2\2\u04e7\u04e9")
        buf.write(u"\5p9\2\u04e8\u04ea\7\b\2\2\u04e9\u04e8\3\2\2\2\u04e9")
        buf.write(u"\u04ea\3\2\2\2\u04ea\u04ec\3\2\2\2\u04eb\u04ed\5t;\2")
        buf.write(u"\u04ec\u04eb\3\2\2\2\u04ec\u04ed\3\2\2\2\u04edC\3\2\2")
        buf.write(u"\2\u04ee\u04ef\7\63\2\2\u04ef\u04f1\7\65\2\2\u04f0\u04f2")
        buf.write(u"\5<\37\2\u04f1\u04f0\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2")
        buf.write(u"E\3\2\2\2\u04f3\u04f4\7\63\2\2\u04f4\u04f6\7J\2\2\u04f5")
        buf.write(u"\u04f7\5<\37\2\u04f6\u04f5\3\2\2\2\u04f6\u04f7\3\2\2")
        buf.write(u"\2\u04f7G\3\2\2\2\u04f8\u0500\7r\2\2\u04f9\u0501\7\63")
        buf.write(u"\2\2\u04fa\u0501\7\64\2\2\u04fb\u04fc\7+\2\2\u04fc\u04fe")
        buf.write(u"\5d\63\2\u04fd\u04ff\7\u00cf\2\2\u04fe\u04fd\3\2\2\2")
        buf.write(u"\u04fe\u04ff\3\2\2\2\u04ff\u0501\3\2\2\2\u0500\u04f9")
        buf.write(u"\3\2\2\2\u0500\u04fa\3\2\2\2\u0500\u04fb\3\2\2\2\u0501")
        buf.write(u"\u05d6\3\2\2\2\u0502\u0503\7*\2\2\u0503\u05d6\t\30\2")
        buf.write(u"\2\u0504\u0509\7]\2\2\u0505\u050a\7\63\2\2\u0506\u050a")
        buf.write(u"\7\64\2\2\u0507\u0508\7+\2\2\u0508\u050a\5d\63\2\u0509")
        buf.write(u"\u0505\3\2\2\2\u0509\u0506\3\2\2\2\u0509\u0507\3\2\2")
        buf.write(u"\2\u050a\u05d6\3\2\2\2\u050b\u0516\7^\2\2\u050c\u0517")
        buf.write(u"\7\63\2\2\u050d\u0517\7\64\2\2\u050e\u0514\7+\2\2\u050f")
        buf.write(u"\u0512\5X-\2\u0510\u0511\7\u00df\2\2\u0511\u0513\5X-")
        buf.write(u"\2\u0512\u0510\3\2\2\2\u0512\u0513\3\2\2\2\u0513\u0515")
        buf.write(u"\3\2\2\2\u0514\u050f\3\2\2\2\u0514\u0515\3\2\2\2\u0515")
        buf.write(u"\u0517\3\2\2\2\u0516\u050c\3\2\2\2\u0516\u050d\3\2\2")
        buf.write(u"\2\u0516\u050e\3\2\2\2\u0517\u05d6\3\2\2\2\u0518\u0519")
        buf.write(u"\7\u00c6\2\2\u0519\u051a\7+\2\2\u051a\u051d\5d\63\2\u051b")
        buf.write(u"\u051c\7-\2\2\u051c\u051e\5d\63\2\u051d\u051b\3\2\2\2")
        buf.write(u"\u051d\u051e\3\2\2\2\u051e\u0521\3\2\2\2\u051f\u0520")
        buf.write(u"\7\u00bf\2\2\u0520\u0522\5d\63\2\u0521\u051f\3\2\2\2")
        buf.write(u"\u0521\u0522\3\2\2\2\u0522\u0524\3\2\2\2\u0523\u0525")
        buf.write(u"\7\u00cf\2\2\u0524\u0523\3\2\2\2\u0524\u0525\3\2\2\2")
        buf.write(u"\u0525\u05d6\3\2\2\2\u0526\u0531\7o\2\2\u0527\u0532\7")
        buf.write(u"\63\2\2\u0528\u0532\7\64\2\2\u0529\u0532\7X\2\2\u052a")
        buf.write(u"\u052f\7+\2\2\u052b\u052c\5X-\2\u052c\u052d\7 \2\2\u052d")
        buf.write(u"\u052e\5X-\2\u052e\u0530\3\2\2\2\u052f\u052b\3\2\2\2")
        buf.write(u"\u052f\u0530\3\2\2\2\u0530\u0532\3\2\2\2\u0531\u0527")
        buf.write(u"\3\2\2\2\u0531\u0528\3\2\2\2\u0531\u0529\3\2\2\2\u0531")
        buf.write(u"\u052a\3\2\2\2\u0532\u05d6\3\2\2\2\u0533\u0534\7_\2\2")
        buf.write(u"\u0534\u0536\t\31\2\2\u0535\u0537\t\32\2\2\u0536\u0535")
        buf.write(u"\3\2\2\2\u0536\u0537\3\2\2\2\u0537\u05d6\3\2\2\2\u0538")
        buf.write(u"\u0539\7[\2\2\u0539\u05d6\t\30\2\2\u053a\u053c\7`\2\2")
        buf.write(u"\u053b\u053d\7+\2\2\u053c\u053b\3\2\2\2\u053c\u053d\3")
        buf.write(u"\2\2\2\u053d\u053e\3\2\2\2\u053e\u05d6\5t;\2\u053f\u0540")
        buf.write(u"\7\u008d\2\2\u0540\u05d6\t\30\2\2\u0541\u0542\7s\2\2")
        buf.write(u"\u0542\u05d6\t\30\2\2\u0543\u0544\7\u0094\2\2\u0544\u05d6")
        buf.write(u"\t\30\2\2\u0545\u0546\7\u00c3\2\2\u0546\u054c\7+\2\2")
        buf.write(u"\u0547\u054a\5d\63\2\u0548\u0549\7-\2\2\u0549\u054b\5")
        buf.write(u"d\63\2\u054a\u0548\3\2\2\2\u054a\u054b\3\2\2\2\u054b")
        buf.write(u"\u054d\3\2\2\2\u054c\u0547\3\2\2\2\u054c\u054d\3\2\2")
        buf.write(u"\2\u054d\u05d6\3\2\2\2\u054e\u055a\7\u0108\2\2\u054f")
        buf.write(u"\u055b\7\63\2\2\u0550\u055b\7\64\2\2\u0551\u0553\7+\2")
        buf.write(u"\2\u0552\u0554\5d\63\2\u0553\u0552\3\2\2\2\u0553\u0554")
        buf.write(u"\3\2\2\2\u0554\u055b\3\2\2\2\u0555\u0557\7\u010a\2\2")
        buf.write(u"\u0556\u0558\5d\63\2\u0557\u0556\3\2\2\2\u0557\u0558")
        buf.write(u"\3\2\2\2\u0558\u055b\3\2\2\2\u0559\u055b\7\u010b\2\2")
        buf.write(u"\u055a\u054f\3\2\2\2\u055a\u0550\3\2\2\2\u055a\u0551")
        buf.write(u"\3\2\2\2\u055a\u0555\3\2\2\2\u055a\u0559\3\2\2\2\u055b")
        buf.write(u"\u05d6\3\2\2\2\u055c\u055d\7\u00c9\2\2\u055d\u055f\7")
        buf.write(u"+\2\2\u055e\u0560\5d\63\2\u055f\u055e\3\2\2\2\u055f\u0560")
        buf.write(u"\3\2\2\2\u0560\u05d6\3\2\2\2\u0561\u0562\7d\2\2\u0562")
        buf.write(u"\u0563\7+\2\2\u0563\u0565\5d\63\2\u0564\u0566\7\u00cf")
        buf.write(u"\2\2\u0565\u0564\3\2\2\2\u0565\u0566\3\2\2\2\u0566\u05d6")
        buf.write(u"\3\2\2\2\u0567\u0568\7Z\2\2\u0568\u0569\7+\2\2\u0569")
        buf.write(u"\u05d6\5X-\2\u056a\u056b\7\u00ef\2\2\u056b\u05d6\t\30")
        buf.write(u"\2\2\u056c\u056d\7\u0095\2\2\u056d\u05d6\t\30\2\2\u056e")
        buf.write(u"\u0570\7j\2\2\u056f\u0571\7[\2\2\u0570\u056f\3\2\2\2")
        buf.write(u"\u0570\u0571\3\2\2\2\u0571\u0572\3\2\2\2\u0572\u05d6")
        buf.write(u"\t\30\2\2\u0573\u0574\7\u00c0\2\2\u0574\u0585\7+\2\2")
        buf.write(u"\u0575\u0586\5d\63\2\u0576\u0578\7\u00ca\2\2\u0577\u0576")
        buf.write(u"\3\2\2\2\u0577\u0578\3\2\2\2\u0578\u0579\3\2\2\2\u0579")
        buf.write(u"\u057c\5d\63\2\u057a\u057b\7\u00a2\2\2\u057b\u057d\5")
        buf.write(u"d\63\2\u057c\u057a\3\2\2\2\u057c\u057d\3\2\2\2\u057d")
        buf.write(u"\u0580\3\2\2\2\u057e\u057f\7-\2\2\u057f\u0581\5d\63\2")
        buf.write(u"\u0580\u057e\3\2\2\2\u0580\u0581\3\2\2\2\u0581\u0583")
        buf.write(u"\3\2\2\2\u0582\u0584\t\21\2\2\u0583\u0582\3\2\2\2\u0583")
        buf.write(u"\u0584\3\2\2\2\u0584\u0586\3\2\2\2\u0585\u0575\3\2\2")
        buf.write(u"\2\u0585\u0577\3\2\2\2\u0585\u0586\3\2\2\2\u0586\u05d6")
        buf.write(u"\3\2\2\2\u0587\u0597\7\u0085\2\2\u0588\u058a\7\63\2\2")
        buf.write(u"\u0589\u058b\7\u0086\2\2\u058a\u0589\3\2\2\2\u058a\u058b")
        buf.write(u"\3\2\2\2\u058b\u0598\3\2\2\2\u058c\u0598\7\64\2\2\u058d")
        buf.write(u"\u0595\7+\2\2\u058e\u0596\7\u00e0\2\2\u058f\u0590\7D")
        buf.write(u"\2\2\u0590\u0596\5d\63\2\u0591\u0593\5d\63\2\u0592\u0594")
        buf.write(u"\7\u00cf\2\2\u0593\u0592\3\2\2\2\u0593\u0594\3\2\2\2")
        buf.write(u"\u0594\u0596\3\2\2\2\u0595\u058e\3\2\2\2\u0595\u058f")
        buf.write(u"\3\2\2\2\u0595\u0591\3\2\2\2\u0595\u0596\3\2\2\2\u0596")
        buf.write(u"\u0598\3\2\2\2\u0597\u0588\3\2\2\2\u0597\u058c\3\2\2")
        buf.write(u"\2\u0597\u058d\3\2\2\2\u0598\u05d6\3\2\2\2\u0599\u059a")
        buf.write(u"\7L\2\2\u059a\u059b\7+\2\2\u059b\u05a0\5d\63\2\u059c")
        buf.write(u"\u059d\7 \2\2\u059d\u059f\5d\63\2\u059e\u059c\3\2\2\2")
        buf.write(u"\u059f\u05a2\3\2\2\2\u05a0\u059e\3\2\2\2\u05a0\u05a1")
        buf.write(u"\3\2\2\2\u05a1\u05a4\3\2\2\2\u05a2\u05a0\3\2\2\2\u05a3")
        buf.write(u"\u05a5\7\u00cf\2\2\u05a4\u05a3\3\2\2\2\u05a4\u05a5\3")
        buf.write(u"\2\2\2\u05a5\u05d6\3\2\2\2\u05a6\u05a7\7\\\2\2\u05a7")
        buf.write(u"\u05a8\7+\2\2\u05a8\u05ab\5X-\2\u05a9\u05aa\7 \2\2\u05aa")
        buf.write(u"\u05ac\5X-\2\u05ab\u05a9\3\2\2\2\u05ab\u05ac\3\2\2\2")
        buf.write(u"\u05ac\u05d6\3\2\2\2\u05ad\u05ae\7\u010e\2\2\u05ae\u05af")
        buf.write(u"\7+\2\2\u05af\u05b0\5X-\2\u05b0\u05b1\7\u0090\2\2\u05b1")
        buf.write(u"\u05b4\5d\63\2\u05b2\u05b3\7-\2\2\u05b3\u05b5\5d\63\2")
        buf.write(u"\u05b4\u05b2\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5\u05b7")
        buf.write(u"\3\2\2\2\u05b6\u05b8\7\u00cf\2\2\u05b7\u05b6\3\2\2\2")
        buf.write(u"\u05b7\u05b8\3\2\2\2\u05b8\u05d6\3\2\2\2\u05b9\u05ba")
        buf.write(u"\7W\2\2\u05ba\u05d6\t\30\2\2\u05bb\u05bd\7X\2\2\u05bc")
        buf.write(u"\u05be\7Y\2\2\u05bd\u05bc\3\2\2\2\u05bd\u05be\3\2\2\2")
        buf.write(u"\u05be\u05bf\3\2\2\2\u05bf\u05d6\t\30\2\2\u05c0\u05ca")
        buf.write(u"\7n\2\2\u05c1\u05cb\7\63\2\2\u05c2\u05cb\7\64\2\2\u05c3")
        buf.write(u"\u05c6\7+\2\2\u05c4\u05c7\7\u00e0\2\2\u05c5\u05c7\5X")
        buf.write(u"-\2\u05c6\u05c4\3\2\2\2\u05c6\u05c5\3\2\2\2\u05c6\u05c7")
        buf.write(u"\3\2\2\2\u05c7\u05cb\3\2\2\2\u05c8\u05cb\7\u00e1\2\2")
        buf.write(u"\u05c9\u05cb\7\u00e2\2\2\u05ca\u05c1\3\2\2\2\u05ca\u05c2")
        buf.write(u"\3\2\2\2\u05ca\u05c3\3\2\2\2\u05ca\u05c8\3\2\2\2\u05ca")
        buf.write(u"\u05c9\3\2\2\2\u05cb\u05d6\3\2\2\2\u05cc\u05cd\7B\2\2")
        buf.write(u"\u05cd\u05d6\t\30\2\2\u05ce\u05cf\7\u010c\2\2\u05cf\u05d6")
        buf.write(u"\t\30\2\2\u05d0\u05d1\7\u00be\2\2\u05d1\u05d2\7+\2\2")
        buf.write(u"\u05d2\u05d6\5X-\2\u05d3\u05d4\7\u00c8\2\2\u05d4\u05d6")
        buf.write(u"\t\30\2\2\u05d5\u04f8\3\2\2\2\u05d5\u0502\3\2\2\2\u05d5")
        buf.write(u"\u0504\3\2\2\2\u05d5\u050b\3\2\2\2\u05d5\u0518\3\2\2")
        buf.write(u"\2\u05d5\u0526\3\2\2\2\u05d5\u0533\3\2\2\2\u05d5\u0538")
        buf.write(u"\3\2\2\2\u05d5\u053a\3\2\2\2\u05d5\u053f\3\2\2\2\u05d5")
        buf.write(u"\u0541\3\2\2\2\u05d5\u0543\3\2\2\2\u05d5\u0545\3\2\2")
        buf.write(u"\2\u05d5\u054e\3\2\2\2\u05d5\u055c\3\2\2\2\u05d5\u0561")
        buf.write(u"\3\2\2\2\u05d5\u0567\3\2\2\2\u05d5\u056a\3\2\2\2\u05d5")
        buf.write(u"\u056c\3\2\2\2\u05d5\u056e\3\2\2\2\u05d5\u0573\3\2\2")
        buf.write(u"\2\u05d5\u0587\3\2\2\2\u05d5\u0599\3\2\2\2\u05d5\u05a6")
        buf.write(u"\3\2\2\2\u05d5\u05ad\3\2\2\2\u05d5\u05b9\3\2\2\2\u05d5")
        buf.write(u"\u05bb\3\2\2\2\u05d5\u05c0\3\2\2\2\u05d5\u05cc\3\2\2")
        buf.write(u"\2\u05d5\u05ce\3\2\2\2\u05d5\u05d0\3\2\2\2\u05d5\u05d3")
        buf.write(u"\3\2\2\2\u05d6I\3\2\2\2\u05d7\u05d8\5h\65\2\u05d8\u05d9")
        buf.write(u"\5n8\2\u05d9\u05df\3\2\2\2\u05da\u05dc\5j\66\2\u05db")
        buf.write(u"\u05dd\5N(\2\u05dc\u05db\3\2\2\2\u05dc\u05dd\3\2\2\2")
        buf.write(u"\u05dd\u05df\3\2\2\2\u05de\u05d7\3\2\2\2\u05de\u05da")
        buf.write(u"\3\2\2\2\u05dfK\3\2\2\2\u05e0\u05e1\7.\2\2\u05e1\u05e2")
        buf.write(u"\5p9\2\u05e2M\3\2\2\2\u05e3\u05e6\5L\'\2\u05e4\u05e5")
        buf.write(u"\7\u00a2\2\2\u05e5\u05e7\5d\63\2\u05e6\u05e4\3\2\2\2")
        buf.write(u"\u05e6\u05e7\3\2\2\2\u05e7O\3\2\2\2\u05e8\u05ed\5X-\2")
        buf.write(u"\u05e9\u05ea\7 \2\2\u05ea\u05ec\5X-\2\u05eb\u05e9\3\2")
        buf.write(u"\2\2\u05ec\u05ef\3\2\2\2\u05ed\u05eb\3\2\2\2\u05ed\u05ee")
        buf.write(u"\3\2\2\2\u05ee\u05f1\3\2\2\2\u05ef\u05ed\3\2\2\2\u05f0")
        buf.write(u"\u05f2\7 \2\2\u05f1\u05f0\3\2\2\2\u05f1\u05f2\3\2\2\2")
        buf.write(u"\u05f2Q\3\2\2\2\u05f3\u05f8\5d\63\2\u05f4\u05f5\7 \2")
        buf.write(u"\2\u05f5\u05f7\5d\63\2\u05f6\u05f4\3\2\2\2\u05f7\u05fa")
        buf.write(u"\3\2\2\2\u05f8\u05f6\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9")
        buf.write(u"S\3\2\2\2\u05fa\u05f8\3\2\2\2\u05fb\u05fc\7\b\2\2\u05fc")
        buf.write(u"\u05fd\5j\66\2\u05fdU\3\2\2\2\u05fe\u05ff\7\7\2\2\u05ff")
        buf.write(u"\u0600\5t;\2\u0600W\3\2\2\2\u0601\u0602\b-\1\2\u0602")
        buf.write(u"\u0603\7\22\2\2\u0603\u0604\5X-\2\u0604\u0605\7\23\2")
        buf.write(u"\2\u0605\u0619\3\2\2\2\u0606\u0607\t\33\2\2\u0607\u0619")
        buf.write(u"\5X-\r\u0608\u0609\t\34\2\2\u0609\u0619\5X-\f\u060a\u0619")
        buf.write(u"\5f\64\2\u060b\u060c\7\u00ed\2\2\u060c\u060d\7\22\2\2")
        buf.write(u"\u060d\u060e\5X-\2\u060e\u060f\5L\'\2\u060f\u0610\7\23")
        buf.write(u"\2\2\u0610\u0619\3\2\2\2\u0611\u0613\7\r\2\2\u0612\u0611")
        buf.write(u"\3\2\2\2\u0612\u0613\3\2\2\2\u0613\u0614\3\2\2\2\u0614")
        buf.write(u"\u0616\5\\/\2\u0615\u0617\5^\60\2\u0616\u0615\3\2\2\2")
        buf.write(u"\u0616\u0617\3\2\2\2\u0617\u0619\3\2\2\2\u0618\u0601")
        buf.write(u"\3\2\2\2\u0618\u0606\3\2\2\2\u0618\u0608\3\2\2\2\u0618")
        buf.write(u"\u060a\3\2\2\2\u0618\u060b\3\2\2\2\u0618\u0612\3\2\2")
        buf.write(u"\2\u0619\u0632\3\2\2\2\u061a\u061e\f\13\2\2\u061b\u061c")
        buf.write(u"\7\t\2\2\u061c\u061f\7\t\2\2\u061d\u061f\7\37\2\2\u061e")
        buf.write(u"\u061b\3\2\2\2\u061e\u061d\3\2\2\2\u061f\u0620\3\2\2")
        buf.write(u"\2\u0620\u0631\5X-\f\u0621\u0622\f\n\2\2\u0622\u0623")
        buf.write(u"\t\35\2\2\u0623\u0631\5X-\13\u0624\u0625\f\t\2\2\u0625")
        buf.write(u"\u0626\7\35\2\2\u0626\u0631\5X-\n\u0627\u0628\f\b\2\2")
        buf.write(u"\u0628\u0629\t\33\2\2\u0629\u0631\5X-\t\u062a\u062b\f")
        buf.write(u"\7\2\2\u062b\u062c\t\36\2\2\u062c\u0631\5X-\b\u062d\u062e")
        buf.write(u"\f\6\2\2\u062e\u062f\t\37\2\2\u062f\u0631\5X-\7\u0630")
        buf.write(u"\u061a\3\2\2\2\u0630\u0621\3\2\2\2\u0630\u0624\3\2\2")
        buf.write(u"\2\u0630\u0627\3\2\2\2\u0630\u062a\3\2\2\2\u0630\u062d")
        buf.write(u"\3\2\2\2\u0631\u0634\3\2\2\2\u0632\u0630\3\2\2\2\u0632")
        buf.write(u"\u0633\3\2\2\2\u0633Y\3\2\2\2\u0634\u0632\3\2\2\2\u0635")
        buf.write(u"\u0637\7\r\2\2\u0636\u0635\3\2\2\2\u0636\u0637\3\2\2")
        buf.write(u"\2\u0637\u0638\3\2\2\2\u0638\u0639\5\\/\2\u0639\u063a")
        buf.write(u"\5^\60\2\u063a\u0641\3\2\2\2\u063b\u063c\7\r\2\2\u063c")
        buf.write(u"\u063e\5\\/\2\u063d\u063f\5^\60\2\u063e\u063d\3\2\2\2")
        buf.write(u"\u063e\u063f\3\2\2\2\u063f\u0641\3\2\2\2\u0640\u0636")
        buf.write(u"\3\2\2\2\u0640\u063b\3\2\2\2\u0641[\3\2\2\2\u0642\u0646")
        buf.write(u"\5t;\2\u0643\u0646\5T+\2\u0644\u0646\5V,\2\u0645\u0642")
        buf.write(u"\3\2\2\2\u0645\u0643\3\2\2\2\u0645\u0644\3\2\2\2\u0646")
        buf.write(u"]\3\2\2\2\u0647\u0649\7\22\2\2\u0648\u064a\5P)\2\u0649")
        buf.write(u"\u0648\3\2\2\2\u0649\u064a\3\2\2\2\u064a\u064b\3\2\2")
        buf.write(u"\2\u064b\u0652\7\23\2\2\u064c\u064e\7\16\2\2\u064d\u064f")
        buf.write(u"\5P)\2\u064e\u064d\3\2\2\2\u064e\u064f\3\2\2\2\u064f")
        buf.write(u"\u0650\3\2\2\2\u0650\u0652\7\17\2\2\u0651\u0647\3\2\2")
        buf.write(u"\2\u0651\u064c\3\2\2\2\u0652\u0654\3\2\2\2\u0653\u0655")
        buf.write(u"\5^\60\2\u0654\u0653\3\2\2\2\u0654\u0655\3\2\2\2\u0655")
        buf.write(u"\u065c\3\2\2\2\u0656\u0657\7\r\2\2\u0657\u0659\5t;\2")
        buf.write(u"\u0658\u065a\5^\60\2\u0659\u0658\3\2\2\2\u0659\u065a")
        buf.write(u"\3\2\2\2\u065a\u065c\3\2\2\2\u065b\u0651\3\2\2\2\u065b")
        buf.write(u"\u0656\3\2\2\2\u065c_\3\2\2\2\u065d\u065e\5t;\2\u065e")
        buf.write(u"\u065f\7\"\2\2\u065f\u0661\3\2\2\2\u0660\u065d\3\2\2")
        buf.write(u"\2\u0660\u0661\3\2\2\2\u0661\u0663\3\2\2\2\u0662\u0664")
        buf.write(u"\5b\62\2\u0663\u0662\3\2\2\2\u0664\u0665\3\2\2\2\u0665")
        buf.write(u"\u0666\3\2\2\2\u0665\u0663\3\2\2\2\u0666a\3\2\2\2\u0667")
        buf.write(u"\u0681\5t;\2\u0668\u0681\7\4\2\2\u0669\u0681\7\24\2\2")
        buf.write(u"\u066a\u0681\7\6\2\2\u066b\u0681\7\7\2\2\u066c\u0681")
        buf.write(u"\7\b\2\2\u066d\u0681\7\n\2\2\u066e\u0681\7\13\2\2\u066f")
        buf.write(u"\u0681\7\r\2\2\u0670\u0681\7\16\2\2\u0671\u0681\7\17")
        buf.write(u"\2\2\u0672\u0681\7\20\2\2\u0673\u0681\7\21\2\2\u0674")
        buf.write(u"\u0681\7\22\2\2\u0675\u0681\7\23\2\2\u0676\u0681\7\27")
        buf.write(u"\2\2\u0677\u0681\7\30\2\2\u0678\u0681\7\31\2\2\u0679")
        buf.write(u"\u0681\7\32\2\2\u067a\u0681\7\35\2\2\u067b\u0681\7\36")
        buf.write(u"\2\2\u067c\u0681\7\37\2\2\u067d\u0681\7 \2\2\u067e\u0681")
        buf.write(u"\7!\2\2\u067f\u0681\7\3\2\2\u0680\u0667\3\2\2\2\u0680")
        buf.write(u"\u0668\3\2\2\2\u0680\u0669\3\2\2\2\u0680\u066a\3\2\2")
        buf.write(u"\2\u0680\u066b\3\2\2\2\u0680\u066c\3\2\2\2\u0680\u066d")
        buf.write(u"\3\2\2\2\u0680\u066e\3\2\2\2\u0680\u066f\3\2\2\2\u0680")
        buf.write(u"\u0670\3\2\2\2\u0680\u0671\3\2\2\2\u0680\u0672\3\2\2")
        buf.write(u"\2\u0680\u0673\3\2\2\2\u0680\u0674\3\2\2\2\u0680\u0675")
        buf.write(u"\3\2\2\2\u0680\u0676\3\2\2\2\u0680\u0677\3\2\2\2\u0680")
        buf.write(u"\u0678\3\2\2\2\u0680\u0679\3\2\2\2\u0680\u067a\3\2\2")
        buf.write(u"\2\u0680\u067b\3\2\2\2\u0680\u067c\3\2\2\2\u0680\u067d")
        buf.write(u"\3\2\2\2\u0680\u067e\3\2\2\2\u0680\u067f\3\2\2\2\u0681")
        buf.write(u"c\3\2\2\2\u0682\u0685\5X-\2\u0683\u0685\5`\61\2\u0684")
        buf.write(u"\u0682\3\2\2\2\u0684\u0683\3\2\2\2\u0685e\3\2\2\2\u0686")
        buf.write(u"\u0688\7!\2\2\u0687\u0686\3\2\2\2\u0687\u0688\3\2\2\2")
        buf.write(u"\u0688\u0689\3\2\2\2\u0689\u06cf\7\4\2\2\u068a\u068b")
        buf.write(u"\7\r\2\2\u068b\u068c\t \2\2\u068c\u068f\7\r\2\2\u068d")
        buf.write(u"\u068f\7\u00d8\2\2\u068e\u068a\3\2\2\2\u068e\u068d\3")
        buf.write(u"\2\2\2\u068f\u06cf\3\2\2\2\u0690\u06b0\7\20\2\2\u0691")
        buf.write(u"\u0692\7\f\2\2\u0692\u06b1\7\f\2\2\u0693\u06b1\7\"\2")
        buf.write(u"\2\u0694\u069f\7\37\2\2\u0695\u0696\7\4\2\2\u0696\u0697")
        buf.write(u"\7\13\2\2\u0697\u0698\7\4\2\2\u0698\u0699\7\13\2\2\u0699")
        buf.write(u"\u06a0\7\4\2\2\u069a\u069b\7\4\2\2\u069b\u069c\7\f\2")
        buf.write(u"\2\u069c\u069d\7\4\2\2\u069d\u069e\7\f\2\2\u069e\u06a0")
        buf.write(u"\7\4\2\2\u069f\u0695\3\2\2\2\u069f\u069a\3\2\2\2\u06a0")
        buf.write(u"\u06ae\3\2\2\2\u06a1\u06a3\7 \2\2\u06a2\u06a1\3\2\2\2")
        buf.write(u"\u06a2\u06a3\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06ab")
        buf.write(u"\7\4\2\2\u06a5\u06a6\7\"\2\2\u06a6\u06a9\7\4\2\2\u06a7")
        buf.write(u"\u06a8\7\"\2\2\u06a8\u06aa\7\4\2\2\u06a9\u06a7\3\2\2")
        buf.write(u"\2\u06a9\u06aa\3\2\2\2\u06aa\u06ac\3\2\2\2\u06ab\u06a5")
        buf.write(u"\3\2\2\2\u06ab\u06ac\3\2\2\2\u06ac\u06ad\3\2\2\2\u06ad")
        buf.write(u"\u06af\5t;\2\u06ae\u06a2\3\2\2\2\u06ae\u06af\3\2\2\2")
        buf.write(u"\u06af\u06b1\3\2\2\2\u06b0\u0691\3\2\2\2\u06b0\u0693")
        buf.write(u"\3\2\2\2\u06b0\u0694\3\2\2\2\u06b0\u06b1\3\2\2\2\u06b1")
        buf.write(u"\u06b2\3\2\2\2\u06b2\u06cf\7\21\2\2\u06b3\u06b7\7%\2")
        buf.write(u"\2\u06b4\u06b6\n!\2\2\u06b5\u06b4\3\2\2\2\u06b6\u06b9")
        buf.write(u"\3\2\2\2\u06b7\u06b5\3\2\2\2\u06b7\u06b8\3\2\2\2\u06b8")
        buf.write(u"\u06ba\3\2\2\2\u06b9\u06b7\3\2\2\2\u06ba\u06cc\7%\2\2")
        buf.write(u"\u06bb\u06bf\7$\2\2\u06bc\u06be\n\"\2\2\u06bd\u06bc\3")
        buf.write(u"\2\2\2\u06be\u06c1\3\2\2\2\u06bf\u06bd\3\2\2\2\u06bf")
        buf.write(u"\u06c0\3\2\2\2\u06c0\u06c2\3\2\2\2\u06c1\u06bf\3\2\2")
        buf.write(u"\2\u06c2\u06cc\7$\2\2\u06c3\u06c7\7\16\2\2\u06c4\u06c6")
        buf.write(u"\n#\2\2\u06c5\u06c4\3\2\2\2\u06c6\u06c9\3\2\2\2\u06c7")
        buf.write(u"\u06c5\3\2\2\2\u06c7\u06c8\3\2\2\2\u06c8\u06ca\3\2\2")
        buf.write(u"\2\u06c9\u06c7\3\2\2\2\u06ca\u06cc\7\17\2\2\u06cb\u06b3")
        buf.write(u"\3\2\2\2\u06cb\u06bb\3\2\2\2\u06cb\u06c3\3\2\2\2\u06cc")
        buf.write(u"\u06cf\3\2\2\2\u06cd\u06cf\7\5\2\2\u06ce\u0687\3\2\2")
        buf.write(u"\2\u06ce\u068e\3\2\2\2\u06ce\u0690\3\2\2\2\u06ce\u06cb")
        buf.write(u"\3\2\2\2\u06ce\u06cd\3\2\2\2\u06cfg\3\2\2\2\u06d0\u06d2")
        buf.write(u"\7\r\2\2\u06d1\u06d0\3\2\2\2\u06d1\u06d2\3\2\2\2\u06d2")
        buf.write(u"\u06d3\3\2\2\2\u06d3\u06d8\5t;\2\u06d4\u06d5\7\r\2\2")
        buf.write(u"\u06d5\u06d7\5t;\2\u06d6\u06d4\3\2\2\2\u06d7\u06da\3")
        buf.write(u"\2\2\2\u06d8\u06d6\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9")
        buf.write(u"i\3\2\2\2\u06da\u06d8\3\2\2\2\u06db\u06dd\7\r\2\2\u06dc")
        buf.write(u"\u06db\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd\u06de\3\2\2")
        buf.write(u"\2\u06de\u06e0\5t;\2\u06df\u06e1\5^\60\2\u06e0\u06df")
        buf.write(u"\3\2\2\2\u06e0\u06e1\3\2\2\2\u06e1k\3\2\2\2\u06e2\u06e3")
        buf.write(u"\5X-\2\u06e3\u06e4\7 \2\2\u06e4\u06e5\5X-\2\u06e5m\3")
        buf.write(u"\2\2\2\u06e6\u06e9\7\22\2\2\u06e7\u06ea\5X-\2\u06e8\u06ea")
        buf.write(u"\5l\67\2\u06e9\u06e7\3\2\2\2\u06e9\u06e8\3\2\2\2\u06ea")
        buf.write(u"\u06eb\3\2\2\2\u06eb\u06ec\7\23\2\2\u06ec\u06f5\3\2\2")
        buf.write(u"\2\u06ed\u06f0\7\16\2\2\u06ee\u06f1\5X-\2\u06ef\u06f1")
        buf.write(u"\5l\67\2\u06f0\u06ee\3\2\2\2\u06f0\u06ef\3\2\2\2\u06f1")
        buf.write(u"\u06f2\3\2\2\2\u06f2\u06f3\7\17\2\2\u06f3\u06f5\3\2\2")
        buf.write(u"\2\u06f4\u06e6\3\2\2\2\u06f4\u06ed\3\2\2\2\u06f5o\3\2")
        buf.write(u"\2\2\u06f6\u06f7\5j\66\2\u06f7q\3\2\2\2\u06f8\u06ff\7")
        buf.write(u"t\2\2\u06f9\u06fa\7\u0091\2\2\u06fa\u06ff\5X-\2\u06fb")
        buf.write(u"\u06fc\7y\2\2\u06fc\u06ff\5X-\2\u06fd\u06ff\7\u0092\2")
        buf.write(u"\2\u06fe\u06f8\3\2\2\2\u06fe\u06f9\3\2\2\2\u06fe\u06fb")
        buf.write(u"\3\2\2\2\u06fe\u06fd\3\2\2\2\u06ffs\3\2\2\2\u0700\u0701")
        buf.write(u"\t$\2\2\u0701u\3\2\2\2\u011d|\u0084\u008c\u0098\u00ac")
        buf.write(u"\u00b5\u00b9\u00bb\u00bf\u00c1\u00ca\u00cf\u00d4\u00d8")
        buf.write(u"\u00df\u00e6\u00ee\u00f6\u00fe\u0102\u0109\u010d\u0113")
        buf.write(u"\u0116\u0121\u0124\u0129\u0132\u013e\u0149\u014e\u0150")
        buf.write(u"\u0165\u016b\u016f\u0174\u0186\u018a\u0196\u019a\u019f")
        buf.write(u"\u01aa\u01b2\u01b4\u01c6\u01c9\u01d2\u01d4\u01de\u01e2")
        buf.write(u"\u01e4\u01ee\u01f5\u01f9\u01fe\u0205\u020b\u020f\u0212")
        buf.write(u"\u0215\u0220\u0228\u022a\u0230\u0234\u0237\u023c\u0246")
        buf.write(u"\u024d\u0253\u0255\u025c\u0261\u0266\u0269\u0272\u0276")
        buf.write(u"\u027a\u027c\u027f\u028c\u0292\u0298\u029a\u02a4\u02a6")
        buf.write(u"\u02a8\u02aa\u02ae\u02b2\u02b8\u02bc\u02be\u02c2\u02c7")
        buf.write(u"\u02c9\u02ce\u02d4\u02d7\u02da\u02df\u02ea\u02f4\u02fe")
        buf.write(u"\u030c\u0310\u0314\u0316\u0319\u031c\u0322\u0326\u032c")
        buf.write(u"\u0330\u0334\u033a\u0347\u0358\u035d\u0361\u0365\u0369")
        buf.write(u"\u036e\u0373\u0375\u0379\u0382\u0385\u0389\u038f\u0399")
        buf.write(u"\u039b\u03a4\u03a7\u03aa\u03ad\u03b3\u03b5\u03bd\u03bf")
        buf.write(u"\u03c6\u03c8\u03d4\u03d8\u03dc\u03e4\u03ef\u03f5\u03fc")
        buf.write(u"\u0400\u0404\u0409\u0412\u0414\u0418\u0422\u0425\u0428")
        buf.write(u"\u042a\u042e\u0434\u0437\u043b\u043f\u0446\u044c\u0452")
        buf.write(u"\u0455\u0458\u045b\u0461\u0465\u046a\u046d\u0470\u0477")
        buf.write(u"\u047c\u047f\u0498\u049e\u04a4\u04aa\u04ad\u04af\u04b4")
        buf.write(u"\u04bb\u04be\u04c4\u04c9\u04d0\u04d5\u04dd\u04e4\u04e9")
        buf.write(u"\u04ec\u04f1\u04f6\u04fe\u0500\u0509\u0512\u0514\u0516")
        buf.write(u"\u051d\u0521\u0524\u052f\u0531\u0536\u053c\u054a\u054c")
        buf.write(u"\u0553\u0557\u055a\u055f\u0565\u0570\u0577\u057c\u0580")
        buf.write(u"\u0583\u0585\u058a\u0593\u0595\u0597\u05a0\u05a4\u05ab")
        buf.write(u"\u05b4\u05b7\u05bd\u05c6\u05ca\u05d5\u05dc\u05de\u05e6")
        buf.write(u"\u05ed\u05f1\u05f8\u0612\u0616\u0618\u061e\u0630\u0632")
        buf.write(u"\u0636\u063e\u0640\u0645\u0649\u064e\u0651\u0654\u0659")
        buf.write(u"\u065b\u0660\u0665\u0680\u0684\u0687\u068e\u069f\u06a2")
        buf.write(u"\u06a9\u06ab\u06ae\u06b0\u06b7\u06bf\u06c7\u06cb\u06ce")
        buf.write(u"\u06d1\u06d8\u06dc\u06e0\u06e9\u06f0\u06f4\u06fe")
        return buf.getvalue()


class VisualFoxpro9Parser ( Parser ):

    grammarFileName = "VisualFoxpro9.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"'_'", u"<INVALID>", u"<INVALID>", u"';'", 
                     u"'&'", u"'@'", u"'*'", u"'+'", u"'-'", u"'/'", u"'.'", 
                     u"'['", u"']'", u"'{'", u"'}'", u"'('", u"')'", u"'\\'", 
                     u"'<'", u"'>'", u"'!'", u"'#'", u"'=='", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"'%'", u"'='", u"'^'", 
                     u"','", u"'$'", u"':'", u"'?'", u"'\"'", u"'''", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"'\n'" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"NUMBER_LITERAL", u"BLOB_LITERAL", 
                      u"SEMICOLON", u"AMPERSAND", u"COMMERCIALAT", u"ASTERISK", 
                      u"PLUS_SIGN", u"MINUS_SIGN", u"FORWARDSLASH", u"PERIOD", 
                      u"LEFTBRACKET", u"RIGHTBRACKET", u"LEFTBRACE", u"RIGHTBRACE", 
                      u"LEFTPAREN", u"RIGHTPAREN", u"BACKSLASH", u"LESSTHAN", 
                      u"GREATERTHAN", u"EXCLAMATION", u"HASH", u"DOUBLEEQUALS", 
                      u"NOTEQUALS", u"GTEQ", u"LTEQ", u"MODULO", u"EQUALS", 
                      u"CARAT", u"COMMA", u"DOLLAR", u"COLON", u"QUESTION", 
                      u"DOUBLEQUOTE", u"SINGLEQUOTE", u"COMMENT", u"LINECONT", 
                      u"NOTE", u"ASSERT", u"ASSERTS", u"TO", u"DO", u"IN", 
                      u"AS", u"IF", u"ELIF", u"ELSE", u"ENDIF", u"ON", u"OFF", 
                      u"ERROR", u"WITH", u"STORE", u"EXTERNAL", u"ARRAY", 
                      u"DELETE", u"RECALL", u"FILE", u"SET", u"RELEASE", 
                      u"RECYCLE", u"CREATE", u"TABLE", u"TABLEPROMPT", u"DBF", 
                      u"NAME", u"FREE", u"SELECT", u"USE", u"READ", u"EVENTS", 
                      u"SHUTDOWN", u"CLEAR", u"PROCEDURE", u"ENDPROC", u"DEFINE", 
                      u"CLASS", u"ENDDEFINE", u"LOCATE", u"CONTINUE", u"FOR", 
                      u"ENDFOR", u"WHILE", u"NOOPTIMIZE", u"SAFETY", u"STATUS", 
                      u"BAR", u"MEMOWIDTH", u"CURSOR", u"REFRESH", u"BELL", 
                      u"CENTURY", u"COMPATIBLE", u"DATE", u"ADD", u"OBJECT", 
                      u"REPLACE", u"LIBRARY", u"SHARED", u"WAIT", u"WINDOW", 
                      u"NOWAIT", u"NOCLEAR", u"NOTIFY", u"ENDDO", u"DECLARE", 
                      u"ERASE", u"SYSMENU", u"CLOCK", u"RETURN", u"PARAMETER", 
                      u"ALTERNATE", u"EXACT", u"ALL", u"COUNT", u"GOTO", 
                      u"TOP", u"BOTTOM", u"RECORD", u"CLOSE", u"APPEND", 
                      u"BLANK", u"NOMENU", u"CASE", u"ENDCASE", u"OTHERWISE", 
                      u"FROM", u"REPORT", u"FORM", u"NOEJECT", u"PRINTER", 
                      u"PROMPT", u"NOPROMPT", u"DB4", u"FOXPLUS", u"NOCONSOLE", 
                      u"COPY", u"STRUCTURE", u"DELETED", u"SUM", u"DISTINCT", 
                      u"INTO", u"NEXT", u"REST", u"SKIPKW", u"EXCLUSIVE", 
                      u"NEAR", u"MKDIR", u"RMDIR", u"KEY", u"KEYBOARD", 
                      u"LABEL", u"PLAIN", u"MENU", u"AT", u"LINE", u"SCREEN", 
                      u"NOMARGIN", u"PAD", u"OF", u"COLOR", u"SCHEME", u"BEFORE", 
                      u"AFTER", u"NEGOTIATE", u"FONT", u"STYLE", u"MARK", 
                      u"MESSAGE", u"ACTIVATE", u"POPUP", u"EXTENDED", u"SHADOW", 
                      u"MARGIN", u"RELATIVE", u"SELECTION", u"DEACTIVATE", 
                      u"SAME", u"NOSHOW", u"STEP", u"THEN", u"UNDEFINE", 
                      u"IFDEF", u"PUSH", u"POP", u"TIMEOUT", u"ENDWITH", 
                      u"TYPEAHEAD", u"ALIAS", u"ORDER", u"SEEK", u"WHERE", 
                      u"FILTER", u"RENAME", u"INCLUDE", u"CLASSLIB", u"BY", 
                      u"UNIQUE", u"INDEX", u"TAG", u"COMPACT", u"ASCENDING", 
                      u"DESCENDING", u"CANDIDATE", u"ADDITIVE", u"DIMENSION", 
                      u"NOT", u"AND", u"OTHERAND", u"OR", u"OTHEROR", u"SCAN", 
                      u"ENDSCAN", u"NULL", u"BOOLEANCHAR", u"NODEFAULT", 
                      u"DLLS", u"MACROS", u"NUMBER", u"ZAP", u"ROLLOVER", 
                      u"DEFAULT", u"SAVE", u"NOSAVE", u"DATABASE", u"TABLES", 
                      u"INDEXES", u"PACK", u"REINDEX", u"MEMO", u"PROGRAM", 
                      u"SCOPE", u"THROW", u"EACH", u"CAST", u"RUN", u"MULTILOCKS", 
                      u"TRY", u"CATCH", u"FINALLY", u"ENDTRY", u"BROWSE", 
                      u"INSERT", u"VALUES", u"MEMVAR", u"TYPE", u"CHDIR", 
                      u"SCATTER", u"GATHER", u"EXCEPT", u"LIKE", u"FIELDS", 
                      u"ALTER", u"COLUMN", u"DROP", u"DEBUG", u"GETS", u"DEBUGOUT", 
                      u"MEMORY", u"MENUS", u"RESOURCES", u"HELP", u"SAY", 
                      u"COLLECTION", u"SYSTEM", u"TALK", u"PROGRAMCONTROL", 
                      u"RELATION", u"ID", u"NL", u"WS", u"UNMATCHED" ]

    RULE_preprocessorCode = 0
    RULE_preprocessorLines = 1
    RULE_preprocessorLine = 2
    RULE_prg = 3
    RULE_lineComment = 4
    RULE_line = 5
    RULE_lineEnd = 6
    RULE_lines = 7
    RULE_classDefStart = 8
    RULE_classDef = 9
    RULE_classProperty = 10
    RULE_parameter = 11
    RULE_parameters = 12
    RULE_funcDefStart = 13
    RULE_funcDef = 14
    RULE_ifStart = 15
    RULE_ifStmt = 16
    RULE_forStart = 17
    RULE_forEnd = 18
    RULE_forStmt = 19
    RULE_singleCase = 20
    RULE_otherwise = 21
    RULE_caseStmt = 22
    RULE_whileStart = 23
    RULE_whileStmt = 24
    RULE_withStmt = 25
    RULE_scanStmt = 26
    RULE_tryStmt = 27
    RULE_controlStmt = 28
    RULE_cmd = 29
    RULE_queryCondition = 30
    RULE_dllArgs = 31
    RULE_dllArg = 32
    RULE_onError = 33
    RULE_onShutdown = 34
    RULE_setCmd = 35
    RULE_declarationItem = 36
    RULE_asType = 37
    RULE_asTypeOf = 38
    RULE_args = 39
    RULE_specialArgs = 40
    RULE_reference = 41
    RULE_argReplace = 42
    RULE_expr = 43
    RULE_complexId = 44
    RULE_atom = 45
    RULE_trailer = 46
    RULE_pathname = 47
    RULE_pathElement = 48
    RULE_specialExpr = 49
    RULE_constant = 50
    RULE_idAttr2 = 51
    RULE_idAttr = 52
    RULE_twoExpr = 53
    RULE_arrayIndex = 54
    RULE_datatype = 55
    RULE_scopeClause = 56
    RULE_identifier = 57

    ruleNames =  [ u"preprocessorCode", u"preprocessorLines", u"preprocessorLine", 
                   u"prg", u"lineComment", u"line", u"lineEnd", u"lines", 
                   u"classDefStart", u"classDef", u"classProperty", u"parameter", 
                   u"parameters", u"funcDefStart", u"funcDef", u"ifStart", 
                   u"ifStmt", u"forStart", u"forEnd", u"forStmt", u"singleCase", 
                   u"otherwise", u"caseStmt", u"whileStart", u"whileStmt", 
                   u"withStmt", u"scanStmt", u"tryStmt", u"controlStmt", 
                   u"cmd", u"queryCondition", u"dllArgs", u"dllArg", u"onError", 
                   u"onShutdown", u"setCmd", u"declarationItem", u"asType", 
                   u"asTypeOf", u"args", u"specialArgs", u"reference", u"argReplace", 
                   u"expr", u"complexId", u"atom", u"trailer", u"pathname", 
                   u"pathElement", u"specialExpr", u"constant", u"idAttr2", 
                   u"idAttr", u"twoExpr", u"arrayIndex", u"datatype", u"scopeClause", 
                   u"identifier" ]

    EOF = Token.EOF
    T__0=1
    NUMBER_LITERAL=2
    BLOB_LITERAL=3
    SEMICOLON=4
    AMPERSAND=5
    COMMERCIALAT=6
    ASTERISK=7
    PLUS_SIGN=8
    MINUS_SIGN=9
    FORWARDSLASH=10
    PERIOD=11
    LEFTBRACKET=12
    RIGHTBRACKET=13
    LEFTBRACE=14
    RIGHTBRACE=15
    LEFTPAREN=16
    RIGHTPAREN=17
    BACKSLASH=18
    LESSTHAN=19
    GREATERTHAN=20
    EXCLAMATION=21
    HASH=22
    DOUBLEEQUALS=23
    NOTEQUALS=24
    GTEQ=25
    LTEQ=26
    MODULO=27
    EQUALS=28
    CARAT=29
    COMMA=30
    DOLLAR=31
    COLON=32
    QUESTION=33
    DOUBLEQUOTE=34
    SINGLEQUOTE=35
    COMMENT=36
    LINECONT=37
    NOTE=38
    ASSERT=39
    ASSERTS=40
    TO=41
    DO=42
    IN=43
    AS=44
    IF=45
    ELIF=46
    ELSE=47
    ENDIF=48
    ON=49
    OFF=50
    ERROR=51
    WITH=52
    STORE=53
    EXTERNAL=54
    ARRAY=55
    DELETE=56
    RECALL=57
    FILE=58
    SET=59
    RELEASE=60
    RECYCLE=61
    CREATE=62
    TABLE=63
    TABLEPROMPT=64
    DBF=65
    NAME=66
    FREE=67
    SELECT=68
    USE=69
    READ=70
    EVENTS=71
    SHUTDOWN=72
    CLEAR=73
    PROCEDURE=74
    ENDPROC=75
    DEFINE=76
    CLASS=77
    ENDDEFINE=78
    LOCATE=79
    CONTINUE=80
    FOR=81
    ENDFOR=82
    WHILE=83
    NOOPTIMIZE=84
    SAFETY=85
    STATUS=86
    BAR=87
    MEMOWIDTH=88
    CURSOR=89
    REFRESH=90
    BELL=91
    CENTURY=92
    COMPATIBLE=93
    DATE=94
    ADD=95
    OBJECT=96
    REPLACE=97
    LIBRARY=98
    SHARED=99
    WAIT=100
    WINDOW=101
    NOWAIT=102
    NOCLEAR=103
    NOTIFY=104
    ENDDO=105
    DECLARE=106
    ERASE=107
    SYSMENU=108
    CLOCK=109
    RETURN=110
    PARAMETER=111
    ALTERNATE=112
    EXACT=113
    ALL=114
    COUNT=115
    GOTO=116
    TOP=117
    BOTTOM=118
    RECORD=119
    CLOSE=120
    APPEND=121
    BLANK=122
    NOMENU=123
    CASE=124
    ENDCASE=125
    OTHERWISE=126
    FROM=127
    REPORT=128
    FORM=129
    NOEJECT=130
    PRINTER=131
    PROMPT=132
    NOPROMPT=133
    DB4=134
    FOXPLUS=135
    NOCONSOLE=136
    COPY=137
    STRUCTURE=138
    DELETED=139
    SUM=140
    DISTINCT=141
    INTO=142
    NEXT=143
    REST=144
    SKIPKW=145
    EXCLUSIVE=146
    NEAR=147
    MKDIR=148
    RMDIR=149
    KEY=150
    KEYBOARD=151
    LABEL=152
    PLAIN=153
    MENU=154
    AT=155
    LINE=156
    SCREEN=157
    NOMARGIN=158
    PAD=159
    OF=160
    COLOR=161
    SCHEME=162
    BEFORE=163
    AFTER=164
    NEGOTIATE=165
    FONT=166
    STYLE=167
    MARK=168
    MESSAGE=169
    ACTIVATE=170
    POPUP=171
    EXTENDED=172
    SHADOW=173
    MARGIN=174
    RELATIVE=175
    SELECTION=176
    DEACTIVATE=177
    SAME=178
    NOSHOW=179
    STEP=180
    THEN=181
    UNDEFINE=182
    IFDEF=183
    PUSH=184
    POP=185
    TIMEOUT=186
    ENDWITH=187
    TYPEAHEAD=188
    ALIAS=189
    ORDER=190
    SEEK=191
    WHERE=192
    FILTER=193
    RENAME=194
    INCLUDE=195
    CLASSLIB=196
    BY=197
    UNIQUE=198
    INDEX=199
    TAG=200
    COMPACT=201
    ASCENDING=202
    DESCENDING=203
    CANDIDATE=204
    ADDITIVE=205
    DIMENSION=206
    NOT=207
    AND=208
    OTHERAND=209
    OR=210
    OTHEROR=211
    SCAN=212
    ENDSCAN=213
    NULL=214
    BOOLEANCHAR=215
    NODEFAULT=216
    DLLS=217
    MACROS=218
    NUMBER=219
    ZAP=220
    ROLLOVER=221
    DEFAULT=222
    SAVE=223
    NOSAVE=224
    DATABASE=225
    TABLES=226
    INDEXES=227
    PACK=228
    REINDEX=229
    MEMO=230
    PROGRAM=231
    SCOPE=232
    THROW=233
    EACH=234
    CAST=235
    RUN=236
    MULTILOCKS=237
    TRY=238
    CATCH=239
    FINALLY=240
    ENDTRY=241
    BROWSE=242
    INSERT=243
    VALUES=244
    MEMVAR=245
    TYPE=246
    CHDIR=247
    SCATTER=248
    GATHER=249
    EXCEPT=250
    LIKE=251
    FIELDS=252
    ALTER=253
    COLUMN=254
    DROP=255
    DEBUG=256
    GETS=257
    DEBUGOUT=258
    MEMORY=259
    MENUS=260
    RESOURCES=261
    HELP=262
    SAY=263
    COLLECTION=264
    SYSTEM=265
    TALK=266
    PROGRAMCONTROL=267
    RELATION=268
    ID=269
    NL=270
    WS=271
    UNMATCHED=272

    def __init__(self, input, output=sys.stdout):
        super(VisualFoxpro9Parser, self).__init__(input, output=output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class PreprocessorCodeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PreprocessorCodeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def preprocessorLines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.PreprocessorLinesContext,0)


        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_preprocessorCode

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorCode"):
                return visitor.visitPreprocessorCode(self)
            else:
                return visitor.visitChildren(self)




    def preprocessorCode(self):

        localctx = VisualFoxpro9Parser.PreprocessorCodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_preprocessorCode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 116
            self.preprocessorLines()
            self.state = 117
            self.match(VisualFoxpro9Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PreprocessorLinesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PreprocessorLinesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def preprocessorLine(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.PreprocessorLineContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.PreprocessorLineContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_preprocessorLines

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorLines"):
                return visitor.visitPreprocessorLines(self)
            else:
                return visitor.visitChildren(self)




    def preprocessorLines(self):

        localctx = VisualFoxpro9Parser.PreprocessorLinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_preprocessorLines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 122
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 119
                    self.preprocessorLine() 
                self.state = 124
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PreprocessorLineContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PreprocessorLineContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_preprocessorLine

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.PreprocessorLineContext, self).copyFrom(ctx)



    class NonpreprocessorLineContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.NonpreprocessorLineContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)
        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitNonpreprocessorLine"):
                return visitor.visitNonpreprocessorLine(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorUndefineContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorUndefineContext, self).__init__(parser)
            self.copyFrom(ctx)

        def UNDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.UNDEFINE, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorUndefine"):
                return visitor.visitPreprocessorUndefine(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorIfContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorIfContext, self).__init__(parser)
            self.ifBody = None # PreprocessorLinesContext
            self.elseBody = None # PreprocessorLinesContext
            self.copyFrom(ctx)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)
        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)
        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def preprocessorLines(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.PreprocessorLinesContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.PreprocessorLinesContext,i)

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def IFDEF(self):
            return self.getToken(VisualFoxpro9Parser.IFDEF, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorIf"):
                return visitor.visitPreprocessorIf(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorJunkContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorJunkContext, self).__init__(parser)
            self.copyFrom(ctx)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)
        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)
        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)
        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def INCLUDE(self):
            return self.getToken(VisualFoxpro9Parser.INCLUDE, 0)
        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorJunk"):
                return visitor.visitPreprocessorJunk(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorDefineContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorDefineContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorDefine"):
                return visitor.visitPreprocessorDefine(self)
            else:
                return visitor.visitChildren(self)


    class PreprocessorIncludeContext(PreprocessorLineContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.PreprocessorLineContext)
            super(VisualFoxpro9Parser.PreprocessorIncludeContext, self).__init__(parser)
            self.copyFrom(ctx)

        def INCLUDE(self):
            return self.getToken(VisualFoxpro9Parser.INCLUDE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitPreprocessorInclude"):
                return visitor.visitPreprocessorInclude(self)
            else:
                return visitor.visitChildren(self)



    def preprocessorLine(self):

        localctx = VisualFoxpro9Parser.PreprocessorLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_preprocessorLine)
        self._la = 0 # Token type
        try:
            self.state = 185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.PreprocessorIfContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 125
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 130
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.IF]:
                    self.state = 126
                    self.match(VisualFoxpro9Parser.IF)
                    self.state = 127
                    self.expr(0)
                    pass
                elif token in [VisualFoxpro9Parser.IFDEF]:
                    self.state = 128
                    self.match(VisualFoxpro9Parser.IFDEF)
                    self.state = 129
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 132
                self.match(VisualFoxpro9Parser.NL)
                self.state = 133
                localctx.ifBody = self.preprocessorLines()
                self.state = 138
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 134
                    self.match(VisualFoxpro9Parser.HASH)
                    self.state = 135
                    self.match(VisualFoxpro9Parser.ELSE)
                    self.state = 136
                    self.match(VisualFoxpro9Parser.NL)
                    self.state = 137
                    localctx.elseBody = self.preprocessorLines()


                self.state = 140
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 141
                self.match(VisualFoxpro9Parser.ENDIF)
                self.state = 142
                self.lineEnd()
                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.PreprocessorDefineContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 144
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 145
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 146
                self.identifier()
                self.state = 150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)) | (1 << (VisualFoxpro9Parser.ORDER - 128)) | (1 << (VisualFoxpro9Parser.SEEK - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)) | (1 << (VisualFoxpro9Parser.DROP - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 147
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 152
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 153
                self.lineEnd()
                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.PreprocessorUndefineContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 155
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 156
                self.match(VisualFoxpro9Parser.UNDEFINE)
                self.state = 157
                self.identifier()
                self.state = 158
                self.lineEnd()
                pass

            elif la_ == 4:
                localctx = VisualFoxpro9Parser.PreprocessorIncludeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 160
                self.match(VisualFoxpro9Parser.HASH)
                self.state = 161
                self.match(VisualFoxpro9Parser.INCLUDE)
                self.state = 162
                self.specialExpr()
                self.state = 163
                self.lineEnd()
                pass

            elif la_ == 5:
                localctx = VisualFoxpro9Parser.PreprocessorJunkContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 165
                self.match(VisualFoxpro9Parser.HASH)

                self.state = 166
                _la = self._input.LA(1)
                if _la <= 0 or ((((_la - 45)) & ~0x3f) == 0 and ((1 << (_la - 45)) & ((1 << (VisualFoxpro9Parser.IF - 45)) | (1 << (VisualFoxpro9Parser.ELSE - 45)) | (1 << (VisualFoxpro9Parser.ENDIF - 45)) | (1 << (VisualFoxpro9Parser.DEFINE - 45)))) != 0) or _la==VisualFoxpro9Parser.INCLUDE or _la==VisualFoxpro9Parser.NL:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)) | (1 << (VisualFoxpro9Parser.ORDER - 128)) | (1 << (VisualFoxpro9Parser.SEEK - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)) | (1 << (VisualFoxpro9Parser.DROP - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 167
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 172
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 173
                self.lineEnd()
                pass

            elif la_ == 6:
                localctx = VisualFoxpro9Parser.NonpreprocessorLineContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 183
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.NL]:
                    self.state = 174
                    self.match(VisualFoxpro9Parser.NL)
                    pass
                elif token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.ASTERISK, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.FORWARDSLASH, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.LESSTHAN, VisualFoxpro9Parser.GREATERTHAN, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.GTEQ, VisualFoxpro9Parser.LTEQ, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.COLON, VisualFoxpro9Parser.QUESTION, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.COMMENT, VisualFoxpro9Parser.LINECONT, VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.ASSERTS, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.TABLEPROMPT, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.SAFETY, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OTHERAND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.OTHEROR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.NODEFAULT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.MEMO, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.MULTILOCKS, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.CHDIR, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.DEBUG, VisualFoxpro9Parser.GETS, VisualFoxpro9Parser.DEBUGOUT, VisualFoxpro9Parser.MEMORY, VisualFoxpro9Parser.MENUS, VisualFoxpro9Parser.RESOURCES, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.ID, VisualFoxpro9Parser.WS, VisualFoxpro9Parser.UNMATCHED]:
                    self.state = 175
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.EOF or _la==VisualFoxpro9Parser.HASH or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 179
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)) | (1 << (VisualFoxpro9Parser.ORDER - 128)) | (1 << (VisualFoxpro9Parser.SEEK - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)) | (1 << (VisualFoxpro9Parser.DROP - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                        self.state = 176
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 181
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 182
                    self.lineEnd()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrgContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PrgContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def classDef(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ClassDefContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ClassDefContext,i)


        def funcDef(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.FuncDefContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDefContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_prg

        def accept(self, visitor):
            if hasattr(visitor, "visitPrg"):
                return visitor.visitPrg(self)
            else:
                return visitor.visitChildren(self)




    def prg(self):

        localctx = VisualFoxpro9Parser.PrgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_prg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.PROCEDURE or _la==VisualFoxpro9Parser.DEFINE or _la==VisualFoxpro9Parser.SCOPE:
                self.state = 189
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.DEFINE]:
                    self.state = 187
                    self.classDef()
                    pass
                elif token in [VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.SCOPE]:
                    self.state = 188
                    self.funcDef()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 193
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 194
            self.match(VisualFoxpro9Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LineCommentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.LineCommentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def NOTE(self):
            return self.getToken(VisualFoxpro9Parser.NOTE, 0)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_lineComment

        def accept(self, visitor):
            if hasattr(visitor, "visitLineComment"):
                return visitor.visitLineComment(self)
            else:
                return visitor.visitChildren(self)




    def lineComment(self):

        localctx = VisualFoxpro9Parser.LineCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_lineComment)
        self._la = 0 # Token type
        try:
            self.state = 205
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ASTERISK, VisualFoxpro9Parser.NOTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 196
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ASTERISK or _la==VisualFoxpro9Parser.NOTE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)) | (1 << (VisualFoxpro9Parser.ORDER - 128)) | (1 << (VisualFoxpro9Parser.SEEK - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)) | (1 << (VisualFoxpro9Parser.DROP - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 197
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 202
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 203
                self.lineEnd()
                pass
            elif token in [VisualFoxpro9Parser.NL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 204
                self.match(VisualFoxpro9Parser.NL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LineContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.LineContext, self).__init__(parent, invokingState)
            self.parser = parser

        def lineComment(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,0)


        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def controlStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ControlStmtContext,0)


        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_line

        def accept(self, visitor):
            if hasattr(visitor, "visitLine"):
                return visitor.visitLine(self)
            else:
                return visitor.visitChildren(self)




    def line(self):

        localctx = VisualFoxpro9Parser.LineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_line)
        try:
            self.state = 214
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ASTERISK, VisualFoxpro9Parser.NOTE, VisualFoxpro9Parser.NL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 207
                self.lineComment()
                pass
            elif token in [VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.QUESTION, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.NODEFAULT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.CHDIR, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.DEBUGOUT, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 210
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 208
                    self.controlStmt()
                    pass

                elif la_ == 2:
                    self.state = 209
                    self.cmd()
                    pass


                self.state = 212
                self.lineEnd()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LineEndContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.LineEndContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def EOF(self):
            return self.getToken(VisualFoxpro9Parser.EOF, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_lineEnd

        def accept(self, visitor):
            if hasattr(visitor, "visitLineEnd"):
                return visitor.visitLineEnd(self)
            else:
                return visitor.visitChildren(self)




    def lineEnd(self):

        localctx = VisualFoxpro9Parser.LineEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_lineEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            _la = self._input.LA(1)
            if not(_la==VisualFoxpro9Parser.EOF or _la==VisualFoxpro9Parser.NL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.LinesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def line(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_lines

        def accept(self, visitor):
            if hasattr(visitor, "visitLines"):
                return visitor.visitLines(self)
            else:
                return visitor.visitChildren(self)




    def lines(self):

        localctx = VisualFoxpro9Parser.LinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_lines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 218
                    self.line() 
                self.state = 223
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDefStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ClassDefStartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)

        def CLASS(self):
            return self.getToken(VisualFoxpro9Parser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def asTypeOf(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeOfContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_classDefStart

        def accept(self, visitor):
            if hasattr(visitor, "visitClassDefStart"):
                return visitor.visitClassDefStart(self)
            else:
                return visitor.visitChildren(self)




    def classDefStart(self):

        localctx = VisualFoxpro9Parser.ClassDefStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_classDefStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.match(VisualFoxpro9Parser.DEFINE)
            self.state = 225
            self.match(VisualFoxpro9Parser.CLASS)
            self.state = 226
            self.identifier()
            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.AS:
                self.state = 227
                self.asTypeOf()


            self.state = 230
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDefContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ClassDefContext, self).__init__(parent, invokingState)
            self.parser = parser

        def classDefStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ClassDefStartContext,0)


        def ENDDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.ENDDEFINE, 0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def classProperty(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ClassPropertyContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ClassPropertyContext,i)


        def lineComment(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineCommentContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_classDef

        def accept(self, visitor):
            if hasattr(visitor, "visitClassDef"):
                return visitor.visitClassDef(self)
            else:
                return visitor.visitChildren(self)




    def classDef(self):

        localctx = VisualFoxpro9Parser.ClassDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_classDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.classDefStart()
            self.state = 236
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 233
                    self.classProperty() 
                self.state = 238
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

            self.state = 239
            self.match(VisualFoxpro9Parser.ENDDEFINE)
            self.state = 240
            self.lineEnd()
            self.state = 244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.ASTERISK or _la==VisualFoxpro9Parser.NOTE or _la==VisualFoxpro9Parser.NL:
                self.state = 241
                self.lineComment()
                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassPropertyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ClassPropertyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lineComment(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,0)


        def funcDef(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDefContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_classProperty

        def accept(self, visitor):
            if hasattr(visitor, "visitClassProperty"):
                return visitor.visitClassProperty(self)
            else:
                return visitor.visitChildren(self)




    def classProperty(self):

        localctx = VisualFoxpro9Parser.ClassPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_classProperty)
        try:
            self.state = 252
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 247
                self.cmd()
                self.state = 248
                self.match(VisualFoxpro9Parser.NL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 250
                self.lineComment()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 251
                self.funcDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ParameterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_parameter

        def accept(self, visitor):
            if hasattr(visitor, "visitParameter"):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = VisualFoxpro9Parser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            self.idAttr()
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.AS:
                self.state = 255
                self.asType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ParametersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ParameterContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ParameterContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_parameters

        def accept(self, visitor):
            if hasattr(visitor, "visitParameters"):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = VisualFoxpro9Parser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            self.parameter()
            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.COMMA:
                self.state = 259
                self.match(VisualFoxpro9Parser.COMMA)
                self.state = 260
                self.parameter()
                self.state = 265
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncDefStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.FuncDefStartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def idAttr2(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttr2Context,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def SCOPE(self):
            return self.getToken(VisualFoxpro9Parser.SCOPE, 0)

        def parameters(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParametersContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_funcDefStart

        def accept(self, visitor):
            if hasattr(visitor, "visitFuncDefStart"):
                return visitor.visitFuncDefStart(self)
            else:
                return visitor.visitChildren(self)




    def funcDefStart(self):

        localctx = VisualFoxpro9Parser.FuncDefStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_funcDefStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.SCOPE:
                self.state = 266
                self.match(VisualFoxpro9Parser.SCOPE)


            self.state = 269
            self.match(VisualFoxpro9Parser.PROCEDURE)
            self.state = 270
            self.idAttr2()
            self.state = 276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.LEFTPAREN:
                self.state = 271
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 272
                    self.parameters()


                self.state = 275
                self.match(VisualFoxpro9Parser.RIGHTPAREN)


            self.state = 278
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncDefContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.FuncDefContext, self).__init__(parent, invokingState)
            self.parser = parser

        def funcDefStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.FuncDefStartContext,0)


        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDPROC(self):
            return self.getToken(VisualFoxpro9Parser.ENDPROC, 0)

        def lineEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LineEndContext,0)


        def lineComment(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineCommentContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_funcDef

        def accept(self, visitor):
            if hasattr(visitor, "visitFuncDef"):
                return visitor.visitFuncDef(self)
            else:
                return visitor.visitChildren(self)




    def funcDef(self):

        localctx = VisualFoxpro9Parser.FuncDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_funcDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.funcDefStart()
            self.state = 281
            self.lines()
            self.state = 290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 282
                self.match(VisualFoxpro9Parser.ENDPROC)
                self.state = 283
                self.lineEnd()
                self.state = 287
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 284
                        self.lineComment() 
                    self.state = 289
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,24,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IfStartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def THEN(self):
            return self.getToken(VisualFoxpro9Parser.THEN, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_ifStart

        def accept(self, visitor):
            if hasattr(visitor, "visitIfStart"):
                return visitor.visitIfStart(self)
            else:
                return visitor.visitChildren(self)




    def ifStart(self):

        localctx = VisualFoxpro9Parser.IfStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_ifStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.match(VisualFoxpro9Parser.IF)
            self.state = 293
            self.expr(0)
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.THEN:
                self.state = 294
                self.match(VisualFoxpro9Parser.THEN)


            self.state = 297
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IfStmtContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.ifBody = None # LinesContext
            self.elseBody = None # LinesContext

        def ifStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IfStartContext,0)


        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)

        def lines(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LinesContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,i)


        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_ifStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitIfStmt"):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = VisualFoxpro9Parser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.ifStart()
            self.state = 300
            localctx.ifBody = self.lines()
            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.ELSE:
                self.state = 301
                self.match(VisualFoxpro9Parser.ELSE)
                self.state = 302
                self.match(VisualFoxpro9Parser.NL)
                self.state = 303
                localctx.elseBody = self.lines()


            self.state = 306
            self.match(VisualFoxpro9Parser.ENDIF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ForStartContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.loopStart = None # ExprContext
            self.loopStop = None # ExprContext
            self.loopStep = None # ExprContext

        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def STEP(self):
            return self.getToken(VisualFoxpro9Parser.STEP, 0)

        def EACH(self):
            return self.getToken(VisualFoxpro9Parser.EACH, 0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_forStart

        def accept(self, visitor):
            if hasattr(visitor, "visitForStart"):
                return visitor.visitForStart(self)
            else:
                return visitor.visitChildren(self)




    def forStart(self):

        localctx = VisualFoxpro9Parser.ForStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_forStart)
        self._la = 0 # Token type
        try:
            self.state = 327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 308
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 309
                self.idAttr()
                self.state = 310
                self.match(VisualFoxpro9Parser.EQUALS)
                self.state = 311
                localctx.loopStart = self.expr(0)
                self.state = 312
                self.match(VisualFoxpro9Parser.TO)
                self.state = 313
                localctx.loopStop = self.expr(0)
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.STEP:
                    self.state = 314
                    self.match(VisualFoxpro9Parser.STEP)
                    self.state = 315
                    localctx.loopStep = self.expr(0)


                self.state = 318
                self.match(VisualFoxpro9Parser.NL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 320
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 321
                self.match(VisualFoxpro9Parser.EACH)
                self.state = 322
                self.idAttr()
                self.state = 323
                self.match(VisualFoxpro9Parser.IN)
                self.state = 324
                self.expr(0)
                self.state = 325
                self.match(VisualFoxpro9Parser.NL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForEndContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ForEndContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ENDFOR(self):
            return self.getToken(VisualFoxpro9Parser.ENDFOR, 0)

        def NEXT(self):
            return self.getToken(VisualFoxpro9Parser.NEXT, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_forEnd

        def accept(self, visitor):
            if hasattr(visitor, "visitForEnd"):
                return visitor.visitForEnd(self)
            else:
                return visitor.visitChildren(self)




    def forEnd(self):

        localctx = VisualFoxpro9Parser.ForEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_forEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ENDFOR]:
                self.state = 329
                self.match(VisualFoxpro9Parser.ENDFOR)
                pass
            elif token in [VisualFoxpro9Parser.NEXT]:
                self.state = 330
                self.match(VisualFoxpro9Parser.NEXT)
                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 331
                    self.idAttr()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ForStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def forStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ForStartContext,0)


        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def forEnd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ForEndContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_forStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitForStmt"):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = VisualFoxpro9Parser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.forStart()
            self.state = 337
            self.lines()
            self.state = 338
            self.forEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleCaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SingleCaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(VisualFoxpro9Parser.CASE, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_singleCase

        def accept(self, visitor):
            if hasattr(visitor, "visitSingleCase"):
                return visitor.visitSingleCase(self)
            else:
                return visitor.visitChildren(self)




    def singleCase(self):

        localctx = VisualFoxpro9Parser.SingleCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_singleCase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.match(VisualFoxpro9Parser.CASE)
            self.state = 341
            self.expr(0)
            self.state = 342
            self.match(VisualFoxpro9Parser.NL)
            self.state = 343
            self.lines()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OtherwiseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.OtherwiseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OTHERWISE(self):
            return self.getToken(VisualFoxpro9Parser.OTHERWISE, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_otherwise

        def accept(self, visitor):
            if hasattr(visitor, "visitOtherwise"):
                return visitor.visitOtherwise(self)
            else:
                return visitor.visitChildren(self)




    def otherwise(self):

        localctx = VisualFoxpro9Parser.OtherwiseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_otherwise)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(VisualFoxpro9Parser.OTHERWISE)
            self.state = 346
            self.match(VisualFoxpro9Parser.NL)
            self.state = 347
            self.lines()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.CaseStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)

        def CASE(self):
            return self.getToken(VisualFoxpro9Parser.CASE, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def ENDCASE(self):
            return self.getToken(VisualFoxpro9Parser.ENDCASE, 0)

        def lineComment(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LineCommentContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LineCommentContext,i)


        def singleCase(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SingleCaseContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SingleCaseContext,i)


        def otherwise(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.OtherwiseContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_caseStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitCaseStmt"):
                return visitor.visitCaseStmt(self)
            else:
                return visitor.visitChildren(self)




    def caseStmt(self):

        localctx = VisualFoxpro9Parser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_caseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self.match(VisualFoxpro9Parser.DO)
            self.state = 350
            self.match(VisualFoxpro9Parser.CASE)
            self.state = 351
            self.match(VisualFoxpro9Parser.NL)
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.ASTERISK or _la==VisualFoxpro9Parser.NOTE or _la==VisualFoxpro9Parser.NL:
                self.state = 352
                self.lineComment()
                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.CASE:
                self.state = 358
                self.singleCase()
                self.state = 363
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.OTHERWISE:
                self.state = 364
                self.otherwise()


            self.state = 367
            self.match(VisualFoxpro9Parser.ENDCASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.WhileStartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(VisualFoxpro9Parser.WHILE, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_whileStart

        def accept(self, visitor):
            if hasattr(visitor, "visitWhileStart"):
                return visitor.visitWhileStart(self)
            else:
                return visitor.visitChildren(self)




    def whileStart(self):

        localctx = VisualFoxpro9Parser.WhileStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_whileStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.DO:
                self.state = 369
                self.match(VisualFoxpro9Parser.DO)


            self.state = 372
            self.match(VisualFoxpro9Parser.WHILE)
            self.state = 373
            self.expr(0)
            self.state = 374
            self.match(VisualFoxpro9Parser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.WhileStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def whileStart(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.WhileStartContext,0)


        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDDO(self):
            return self.getToken(VisualFoxpro9Parser.ENDDO, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_whileStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitWhileStmt"):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = VisualFoxpro9Parser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.whileStart()
            self.state = 377
            self.lines()
            self.state = 378
            self.match(VisualFoxpro9Parser.ENDDO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WithStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.WithStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDWITH(self):
            return self.getToken(VisualFoxpro9Parser.ENDWITH, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_withStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitWithStmt"):
                return visitor.visitWithStmt(self)
            else:
                return visitor.visitChildren(self)




    def withStmt(self):

        localctx = VisualFoxpro9Parser.WithStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_withStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.match(VisualFoxpro9Parser.WITH)
            self.state = 381
            self.idAttr()
            self.state = 382
            self.match(VisualFoxpro9Parser.NL)
            self.state = 383
            self.lines()
            self.state = 384
            self.match(VisualFoxpro9Parser.ENDWITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScanStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ScanStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SCAN(self):
            return self.getToken(VisualFoxpro9Parser.SCAN, 0)

        def NL(self):
            return self.getToken(VisualFoxpro9Parser.NL, 0)

        def lines(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,0)


        def ENDSCAN(self):
            return self.getToken(VisualFoxpro9Parser.ENDSCAN, 0)

        def scopeClause(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScopeClauseContext,0)


        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_scanStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitScanStmt"):
                return visitor.visitScanStmt(self)
            else:
                return visitor.visitChildren(self)




    def scanStmt(self):

        localctx = VisualFoxpro9Parser.ScanStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_scanStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.match(VisualFoxpro9Parser.SCAN)
            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 114)) & ~0x3f) == 0 and ((1 << (_la - 114)) & ((1 << (VisualFoxpro9Parser.ALL - 114)) | (1 << (VisualFoxpro9Parser.RECORD - 114)) | (1 << (VisualFoxpro9Parser.NEXT - 114)) | (1 << (VisualFoxpro9Parser.REST - 114)))) != 0):
                self.state = 387
                self.scopeClause()


            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.FOR:
                self.state = 390
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 391
                self.expr(0)


            self.state = 394
            self.match(VisualFoxpro9Parser.NL)
            self.state = 395
            self.lines()
            self.state = 396
            self.match(VisualFoxpro9Parser.ENDSCAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.TryStmtContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.tryLines = None # LinesContext
            self.catchLines = None # LinesContext
            self.finallyLines = None # LinesContext

        def TRY(self):
            return self.getToken(VisualFoxpro9Parser.TRY, 0)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def ENDTRY(self):
            return self.getToken(VisualFoxpro9Parser.ENDTRY, 0)

        def lines(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.LinesContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.LinesContext,i)


        def CATCH(self):
            return self.getToken(VisualFoxpro9Parser.CATCH, 0)

        def FINALLY(self):
            return self.getToken(VisualFoxpro9Parser.FINALLY, 0)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_tryStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitTryStmt"):
                return visitor.visitTryStmt(self)
            else:
                return visitor.visitChildren(self)




    def tryStmt(self):

        localctx = VisualFoxpro9Parser.TryStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_tryStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.match(VisualFoxpro9Parser.TRY)
            self.state = 399
            self.match(VisualFoxpro9Parser.NL)
            self.state = 400
            localctx.tryLines = self.lines()
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.CATCH:
                self.state = 401
                self.match(VisualFoxpro9Parser.CATCH)
                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.TO:
                    self.state = 402
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 403
                    self.identifier()


                self.state = 406
                self.match(VisualFoxpro9Parser.NL)
                self.state = 407
                localctx.catchLines = self.lines()


            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.FINALLY:
                self.state = 410
                self.match(VisualFoxpro9Parser.FINALLY)
                self.state = 411
                self.match(VisualFoxpro9Parser.NL)
                self.state = 412
                localctx.finallyLines = self.lines()


            self.state = 415
            self.match(VisualFoxpro9Parser.ENDTRY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ControlStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ControlStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def whileStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.WhileStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IfStmtContext,0)


        def caseStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CaseStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ForStmtContext,0)


        def withStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.WithStmtContext,0)


        def scanStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScanStmtContext,0)


        def tryStmt(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TryStmtContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_controlStmt

        def accept(self, visitor):
            if hasattr(visitor, "visitControlStmt"):
                return visitor.visitControlStmt(self)
            else:
                return visitor.visitChildren(self)




    def controlStmt(self):

        localctx = VisualFoxpro9Parser.ControlStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_controlStmt)
        try:
            self.state = 424
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 417
                self.whileStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 418
                self.ifStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 419
                self.caseStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 420
                self.forStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 421
                self.withStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 422
                self.scanStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 423
                self.tryStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CmdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.CmdContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_cmd

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.CmdContext, self).copyFrom(ctx)



    class PushKeyContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.PushKeyContext, self).__init__(parser)
            self.copyFrom(ctx)

        def PUSH(self):
            return self.getToken(VisualFoxpro9Parser.PUSH, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitPushKey"):
                return visitor.visitPushKey(self)
            else:
                return visitor.visitChildren(self)


    class ThrowErrorContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ThrowErrorContext, self).__init__(parser)
            self.copyFrom(ctx)

        def THROW(self):
            return self.getToken(VisualFoxpro9Parser.THROW, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitThrowError"):
                return visitor.visitThrowError(self)
            else:
                return visitor.visitChildren(self)


    class SelectContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.SelectContext, self).__init__(parser)
            self.tablename = None # SpecialExprContext
            self.fromExpr = None # SpecialExprContext
            self.whereExpr = None # ExprContext
            self.intoExpr = None # SpecialExprContext
            self.orderbyid = None # IdentifierContext
            self.copyFrom(ctx)

        def SELECT(self):
            return self.getToken(VisualFoxpro9Parser.SELECT, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def specialArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,0)

        def DISTINCT(self):
            return self.getToken(VisualFoxpro9Parser.DISTINCT, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def WHERE(self):
            return self.getToken(VisualFoxpro9Parser.WHERE, 0)
        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)
        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)
        def BY(self):
            return self.getToken(VisualFoxpro9Parser.BY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)
        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitSelect"):
                return visitor.visitSelect(self)
            else:
                return visitor.visitChildren(self)


    class DefineMenuContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DefineMenuContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def NOMARGIN(self):
            return self.getToken(VisualFoxpro9Parser.NOMARGIN, 0)
        def AT(self):
            return self.getToken(VisualFoxpro9Parser.AT, 0)
        def LINE(self):
            return self.getToken(VisualFoxpro9Parser.LINE, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)
        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefineMenu"):
                return visitor.visitDefineMenu(self)
            else:
                return visitor.visitChildren(self)


    class IndexOnContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.IndexOnContext, self).__init__(parser)
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(VisualFoxpro9Parser.INDEX, 0)
        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def COMPACT(self):
            return self.getToken(VisualFoxpro9Parser.COMPACT, 0)
        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)
        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)
        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)
        def UNIQUE(self):
            return self.getToken(VisualFoxpro9Parser.UNIQUE, 0)
        def CANDIDATE(self):
            return self.getToken(VisualFoxpro9Parser.CANDIDATE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitIndexOn"):
                return visitor.visitIndexOn(self)
            else:
                return visitor.visitChildren(self)


    class ReleaseContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ReleaseContext, self).__init__(parser)
            self.vartype = None # Token
            self.copyFrom(ctx)

        def RELEASE(self):
            return self.getToken(VisualFoxpro9Parser.RELEASE, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)

        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def EXTENDED(self):
            return self.getToken(VisualFoxpro9Parser.EXTENDED, 0)
        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)
        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitRelease"):
                return visitor.visitRelease(self)
            else:
                return visitor.visitChildren(self)


    class UseContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.UseContext, self).__init__(parser)
            self.workArea = None # SpecialExprContext
            self.name = None # SpecialExprContext
            self.aliasExpr = None # SpecialExprContext
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(VisualFoxpro9Parser.USE, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def ALIAS(self):
            return self.getToken(VisualFoxpro9Parser.ALIAS, 0)
        def SHARED(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SHARED)
            else:
                return self.getToken(VisualFoxpro9Parser.SHARED, i)
        def EXCLUSIVE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.EXCLUSIVE)
            else:
                return self.getToken(VisualFoxpro9Parser.EXCLUSIVE, i)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitUse"):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)


    class ReplaceContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ReplaceContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REPLACE(self):
            return self.getToken(VisualFoxpro9Parser.REPLACE, 0)
        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def WITH(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WITH)
            else:
                return self.getToken(VisualFoxpro9Parser.WITH, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitReplace"):
                return visitor.visitReplace(self)
            else:
                return visitor.visitChildren(self)


    class ClearStmtContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ClearStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def CLASS(self):
            return self.getToken(VisualFoxpro9Parser.CLASS, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def DEBUG(self):
            return self.getToken(VisualFoxpro9Parser.DEBUG, 0)
        def DLLS(self):
            return self.getToken(VisualFoxpro9Parser.DLLS, 0)
        def specialArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,0)

        def EVENTS(self):
            return self.getToken(VisualFoxpro9Parser.EVENTS, 0)
        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)
        def FIELDS(self):
            return self.getToken(VisualFoxpro9Parser.FIELDS, 0)
        def GETS(self):
            return self.getToken(VisualFoxpro9Parser.GETS, 0)
        def MACROS(self):
            return self.getToken(VisualFoxpro9Parser.MACROS, 0)
        def MEMORY(self):
            return self.getToken(VisualFoxpro9Parser.MEMORY, 0)
        def MENUS(self):
            return self.getToken(VisualFoxpro9Parser.MENUS, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def PROGRAM(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAM, 0)
        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)
        def READ(self):
            return self.getToken(VisualFoxpro9Parser.READ, 0)
        def RESOURCES(self):
            return self.getToken(VisualFoxpro9Parser.RESOURCES, 0)
        def TYPEAHEAD(self):
            return self.getToken(VisualFoxpro9Parser.TYPEAHEAD, 0)
        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitClearStmt"):
                return visitor.visitClearStmt(self)
            else:
                return visitor.visitChildren(self)


    class WaitCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.WaitCmdContext, self).__init__(parser)
            self.toExpr = None # ExprContext
            self.atExpr1 = None # ExprContext
            self.atExpr2 = None # ExprContext
            self.timeout = None # ExprContext
            self.message = None # ExprContext
            self.copyFrom(ctx)

        def WAIT(self):
            return self.getToken(VisualFoxpro9Parser.WAIT, 0)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def WINDOW(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WINDOW)
            else:
                return self.getToken(VisualFoxpro9Parser.WINDOW, i)
        def NOWAIT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOWAIT)
            else:
                return self.getToken(VisualFoxpro9Parser.NOWAIT, i)
        def CLEAR(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.CLEAR)
            else:
                return self.getToken(VisualFoxpro9Parser.CLEAR, i)
        def NOCLEAR(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOCLEAR)
            else:
                return self.getToken(VisualFoxpro9Parser.NOCLEAR, i)
        def TIMEOUT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TIMEOUT)
            else:
                return self.getToken(VisualFoxpro9Parser.TIMEOUT, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def AT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.AT)
            else:
                return self.getToken(VisualFoxpro9Parser.AT, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitWaitCmd"):
                return visitor.visitWaitCmd(self)
            else:
                return visitor.visitChildren(self)


    class DeactivateContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DeactivateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.DEACTIVATE, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def parameters(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParametersContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitDeactivate"):
                return visitor.visitDeactivate(self)
            else:
                return visitor.visitChildren(self)


    class CopyToContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.CopyToContext, self).__init__(parser)
            self.copyFrom(ctx)

        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)
        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def STRUCTURE(self):
            return self.getToken(VisualFoxpro9Parser.STRUCTURE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCopyTo"):
                return visitor.visitCopyTo(self)
            else:
                return visitor.visitChildren(self)


    class ReadEventContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ReadEventContext, self).__init__(parser)
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(VisualFoxpro9Parser.READ, 0)
        def EVENTS(self):
            return self.getToken(VisualFoxpro9Parser.EVENTS, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitReadEvent"):
                return visitor.visitReadEvent(self)
            else:
                return visitor.visitChildren(self)


    class ComplexIdCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ComplexIdCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def complexId(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ComplexIdContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitComplexIdCmd"):
                return visitor.visitComplexIdCmd(self)
            else:
                return visitor.visitChildren(self)


    class AppendFromContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AppendFromContext, self).__init__(parser)
            self.typeExpr = None # SpecialExprContext
            self.copyFrom(ctx)

        def APPEND(self):
            return self.getToken(VisualFoxpro9Parser.APPEND, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)
        def TYPE(self):
            return self.getToken(VisualFoxpro9Parser.TYPE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitAppendFrom"):
                return visitor.visitAppendFrom(self)
            else:
                return visitor.visitChildren(self)


    class ContinueLocateContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ContinueLocateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(VisualFoxpro9Parser.CONTINUE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitContinueLocate"):
                return visitor.visitContinueLocate(self)
            else:
                return visitor.visitChildren(self)


    class ShellRunContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ShellRunContext, self).__init__(parser)
            self.copyFrom(ctx)

        def RUN(self):
            return self.getToken(VisualFoxpro9Parser.RUN, 0)
        def EXCLAMATION(self):
            return self.getToken(VisualFoxpro9Parser.EXCLAMATION, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitShellRun"):
                return visitor.visitShellRun(self)
            else:
                return visitor.visitChildren(self)


    class SetStmtContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.SetStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(VisualFoxpro9Parser.SET, 0)
        def setCmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SetCmdContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitSetStmt"):
                return visitor.visitSetStmt(self)
            else:
                return visitor.visitChildren(self)


    class PopKeyContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.PopKeyContext, self).__init__(parser)
            self.copyFrom(ctx)

        def POP(self):
            return self.getToken(VisualFoxpro9Parser.POP, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitPopKey"):
                return visitor.visitPopKey(self)
            else:
                return visitor.visitChildren(self)


    class ReindexContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ReindexContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REINDEX(self):
            return self.getToken(VisualFoxpro9Parser.REINDEX, 0)
        def COMPACT(self):
            return self.getToken(VisualFoxpro9Parser.COMPACT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitReindex"):
                return visitor.visitReindex(self)
            else:
                return visitor.visitChildren(self)


    class CountContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.CountContext, self).__init__(parser)
            self.toExpr = None # ExprContext
            self.copyFrom(ctx)

        def COUNT(self):
            return self.getToken(VisualFoxpro9Parser.COUNT, 0)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitCount"):
                return visitor.visitCount(self)
            else:
                return visitor.visitChildren(self)


    class ReturnStmtContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ReturnStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(VisualFoxpro9Parser.RETURN, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitReturnStmt"):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)


    class OnShutdownCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.OnShutdownCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def onShutdown(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.OnShutdownContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitOnShutdownCmd"):
                return visitor.visitOnShutdownCmd(self)
            else:
                return visitor.visitChildren(self)


    class PackContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.PackContext, self).__init__(parser)
            self.workArea = None # SpecialExprContext
            self.tableName = None # SpecialExprContext
            self.copyFrom(ctx)

        def PACK(self):
            return self.getToken(VisualFoxpro9Parser.PACK, 0)
        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def MEMO(self):
            return self.getToken(VisualFoxpro9Parser.MEMO, 0)
        def DBF(self):
            return self.getToken(VisualFoxpro9Parser.DBF, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitPack"):
                return visitor.visitPack(self)
            else:
                return visitor.visitChildren(self)


    class AtSayContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AtSayContext, self).__init__(parser)
            self.sayExpr = None # ExprContext
            self.styleExpr = None # ExprContext
            self.copyFrom(ctx)

        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)

        def SAY(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.SAY)
            else:
                return self.getToken(VisualFoxpro9Parser.SAY, i)
        def STYLE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.STYLE)
            else:
                return self.getToken(VisualFoxpro9Parser.STYLE, i)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitAtSay"):
                return visitor.visitAtSay(self)
            else:
                return visitor.visitChildren(self)


    class ActivateMenuContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ActivateMenuContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def NOWAIT(self):
            return self.getToken(VisualFoxpro9Parser.NOWAIT, 0)
        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitActivateMenu"):
                return visitor.visitActivateMenu(self)
            else:
                return visitor.visitChildren(self)


    class RaiseErrorContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.RaiseErrorContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitRaiseError"):
                return visitor.visitRaiseError(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AlterTableContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(VisualFoxpro9Parser.ALTER, 0)
        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def ADD(self):
            return self.getToken(VisualFoxpro9Parser.ADD, 0)
        def COLUMN(self):
            return self.getToken(VisualFoxpro9Parser.COLUMN, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def arrayIndex(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArrayIndexContext,0)

        def DROP(self):
            return self.getToken(VisualFoxpro9Parser.DROP, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitAlterTable"):
                return visitor.visitAlterTable(self)
            else:
                return visitor.visitChildren(self)


    class BrowseContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.BrowseContext, self).__init__(parser)
            self.copyFrom(ctx)

        def BROWSE(self):
            return self.getToken(VisualFoxpro9Parser.BROWSE, 0)
        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitBrowse"):
                return visitor.visitBrowse(self)
            else:
                return visitor.visitChildren(self)


    class OnErrorCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.OnErrorCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def onError(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.OnErrorContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitOnErrorCmd"):
                return visitor.visitOnErrorCmd(self)
            else:
                return visitor.visitChildren(self)


    class GoRecordContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.GoRecordContext, self).__init__(parser)
            self.copyFrom(ctx)

        def GOTO(self):
            return self.getToken(VisualFoxpro9Parser.GOTO, 0)
        def TOP(self):
            return self.getToken(VisualFoxpro9Parser.TOP, 0)
        def BOTTOM(self):
            return self.getToken(VisualFoxpro9Parser.BOTTOM, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def RECORD(self):
            return self.getToken(VisualFoxpro9Parser.RECORD, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitGoRecord"):
                return visitor.visitGoRecord(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.CreateTableContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(VisualFoxpro9Parser.CREATE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def arrayIndex(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ArrayIndexContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ArrayIndexContext,i)

        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)
        def DBF(self):
            return self.getToken(VisualFoxpro9Parser.DBF, 0)
        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)
        def FREE(self):
            return self.getToken(VisualFoxpro9Parser.FREE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCreateTable"):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class LocateContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.LocateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def LOCATE(self):
            return self.getToken(VisualFoxpro9Parser.LOCATE, 0)
        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitLocate"):
                return visitor.visitLocate(self)
            else:
                return visitor.visitChildren(self)


    class InsertContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.InsertContext, self).__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(VisualFoxpro9Parser.INSERT, 0)
        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def VALUES(self):
            return self.getToken(VisualFoxpro9Parser.VALUES, 0)
        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)

        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def MEMVAR(self):
            return self.getToken(VisualFoxpro9Parser.MEMVAR, 0)
        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)
        def specialArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialArgsContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitInsert"):
                return visitor.visitInsert(self)
            else:
                return visitor.visitChildren(self)


    class SumContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.SumContext, self).__init__(parser)
            self.toExpr = None # ExprContext
            self.sumExpr = None # ExprContext
            self.copyFrom(ctx)

        def SUM(self):
            return self.getToken(VisualFoxpro9Parser.SUM, 0)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitSum"):
                return visitor.visitSum(self)
            else:
                return visitor.visitChildren(self)


    class OnKeyContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.OnKeyContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)

        def LABEL(self):
            return self.getToken(VisualFoxpro9Parser.LABEL, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitOnKey"):
                return visitor.visitOnKey(self)
            else:
                return visitor.visitChildren(self)


    class OnSelectionBarContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.OnSelectionBarContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def SELECTION(self):
            return self.getToken(VisualFoxpro9Parser.SELECTION, 0)
        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitOnSelectionBar"):
                return visitor.visitOnSelectionBar(self)
            else:
                return visitor.visitChildren(self)


    class ChMkRmDirContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ChMkRmDirContext, self).__init__(parser)
            self.copyFrom(ctx)

        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def CHDIR(self):
            return self.getToken(VisualFoxpro9Parser.CHDIR, 0)
        def MKDIR(self):
            return self.getToken(VisualFoxpro9Parser.MKDIR, 0)
        def RMDIR(self):
            return self.getToken(VisualFoxpro9Parser.RMDIR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitChMkRmDir"):
                return visitor.visitChMkRmDir(self)
            else:
                return visitor.visitChildren(self)


    class ZapTableContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ZapTableContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ZAP(self):
            return self.getToken(VisualFoxpro9Parser.ZAP, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitZapTable"):
                return visitor.visitZapTable(self)
            else:
                return visitor.visitChildren(self)


    class DllDeclareContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DllDeclareContext, self).__init__(parser)
            self.returnType = None # DatatypeContext
            self.alias = None # IdentifierContext
            self.copyFrom(ctx)

        def DECLARE(self):
            return self.getToken(VisualFoxpro9Parser.DECLARE, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)
        def dllArgs(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DllArgsContext,0)

        def datatype(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DatatypeContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitDllDeclare"):
                return visitor.visitDllDeclare(self)
            else:
                return visitor.visitChildren(self)


    class SeekRecordContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.SeekRecordContext, self).__init__(parser)
            self.seekExpr = None # ExprContext
            self.orderExpr = None # ExprContext
            self.tagName = None # SpecialExprContext
            self.cdxFileExpr = None # SpecialExprContext
            self.idxFileExpr = None # SpecialExprContext
            self.tablenameExpr = None # SpecialExprContext
            self.copyFrom(ctx)

        def SEEK(self):
            return self.getToken(VisualFoxpro9Parser.SEEK, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)
        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)
        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)
        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitSeekRecord"):
                return visitor.visitSeekRecord(self)
            else:
                return visitor.visitChildren(self)


    class ActivateWindowContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ActivateWindowContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def WINDOW(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.WINDOW)
            else:
                return self.getToken(VisualFoxpro9Parser.WINDOW, i)
        def parameters(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ParametersContext,0)

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def NOSHOW(self):
            return self.getToken(VisualFoxpro9Parser.NOSHOW, 0)
        def BOTTOM(self):
            return self.getToken(VisualFoxpro9Parser.BOTTOM, 0)
        def TOP(self):
            return self.getToken(VisualFoxpro9Parser.TOP, 0)
        def SAME(self):
            return self.getToken(VisualFoxpro9Parser.SAME, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitActivateWindow"):
                return visitor.visitActivateWindow(self)
            else:
                return visitor.visitChildren(self)


    class AssertContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AssertContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ASSERT(self):
            return self.getToken(VisualFoxpro9Parser.ASSERT, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitAssert"):
                return visitor.visitAssert(self)
            else:
                return visitor.visitChildren(self)


    class GatherExprContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.GatherExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def GATHER(self):
            return self.getToken(VisualFoxpro9Parser.GATHER, 0)
        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)
        def MEMVAR(self):
            return self.getToken(VisualFoxpro9Parser.MEMVAR, 0)
        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def FIELDS(self):
            return self.getToken(VisualFoxpro9Parser.FIELDS, 0)
        def MEMO(self):
            return self.getToken(VisualFoxpro9Parser.MEMO, 0)
        def LIKE(self):
            return self.getToken(VisualFoxpro9Parser.LIKE, 0)
        def EXCEPT(self):
            return self.getToken(VisualFoxpro9Parser.EXCEPT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitGatherExpr"):
                return visitor.visitGatherExpr(self)
            else:
                return visitor.visitChildren(self)


    class FuncDoContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.FuncDoContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)
        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)
        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitFuncDo"):
                return visitor.visitFuncDo(self)
            else:
                return visitor.visitChildren(self)


    class CloseStmtContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.CloseStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CLOSE(self):
            return self.getToken(VisualFoxpro9Parser.CLOSE, 0)
        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)
        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)
        def INDEXES(self):
            return self.getToken(VisualFoxpro9Parser.INDEXES, 0)
        def TABLES(self):
            return self.getToken(VisualFoxpro9Parser.TABLES, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCloseStmt"):
                return visitor.visitCloseStmt(self)
            else:
                return visitor.visitChildren(self)


    class DeleteFileContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DeleteFileContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ERASE(self):
            return self.getToken(VisualFoxpro9Parser.ERASE, 0)
        def DELETE(self):
            return self.getToken(VisualFoxpro9Parser.DELETE, 0)
        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def RECYCLE(self):
            return self.getToken(VisualFoxpro9Parser.RECYCLE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDeleteFile"):
                return visitor.visitDeleteFile(self)
            else:
                return visitor.visitChildren(self)


    class DefinePopupContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DefinePopupContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def SHADOW(self):
            return self.getToken(VisualFoxpro9Parser.SHADOW, 0)
        def MARGIN(self):
            return self.getToken(VisualFoxpro9Parser.MARGIN, 0)
        def RELATIVE(self):
            return self.getToken(VisualFoxpro9Parser.RELATIVE, 0)
        def COLOR(self):
            return self.getToken(VisualFoxpro9Parser.COLOR, 0)
        def SCHEME(self):
            return self.getToken(VisualFoxpro9Parser.SCHEME, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefinePopup"):
                return visitor.visitDefinePopup(self)
            else:
                return visitor.visitChildren(self)


    class KeyboardContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.KeyboardContext, self).__init__(parser)
            self.copyFrom(ctx)

        def KEYBOARD(self):
            return self.getToken(VisualFoxpro9Parser.KEYBOARD, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def PLAIN(self):
            return self.getToken(VisualFoxpro9Parser.PLAIN, 0)
        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitKeyboard"):
                return visitor.visitKeyboard(self)
            else:
                return visitor.visitChildren(self)


    class ProgramControlContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ProgramControlContext, self).__init__(parser)
            self.copyFrom(ctx)

        def PROGRAMCONTROL(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAMCONTROL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitProgramControl"):
                return visitor.visitProgramControl(self)
            else:
                return visitor.visitChildren(self)


    class SkipRecordContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.SkipRecordContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SKIPKW(self):
            return self.getToken(VisualFoxpro9Parser.SKIPKW, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitSkipRecord"):
                return visitor.visitSkipRecord(self)
            else:
                return visitor.visitChildren(self)


    class DeclarationContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DeclarationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def declarationItem(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.DeclarationItemContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.DeclarationItemContext,i)

        def EXTERNAL(self):
            return self.getToken(VisualFoxpro9Parser.EXTERNAL, 0)
        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def DIMENSION(self):
            return self.getToken(VisualFoxpro9Parser.DIMENSION, 0)
        def DECLARE(self):
            return self.getToken(VisualFoxpro9Parser.DECLARE, 0)
        def PARAMETER(self):
            return self.getToken(VisualFoxpro9Parser.PARAMETER, 0)
        def SCOPE(self):
            return self.getToken(VisualFoxpro9Parser.SCOPE, 0)
        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDeclaration"):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)


    class DefinePadContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DefinePadContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)
        def AT(self):
            return self.getToken(VisualFoxpro9Parser.AT, 0)
        def NUMBER_LITERAL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NUMBER_LITERAL)
            else:
                return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, i)
        def BEFORE(self):
            return self.getToken(VisualFoxpro9Parser.BEFORE, 0)
        def AFTER(self):
            return self.getToken(VisualFoxpro9Parser.AFTER, 0)
        def NEGOTIATE(self):
            return self.getToken(VisualFoxpro9Parser.NEGOTIATE, 0)
        def FONT(self):
            return self.getToken(VisualFoxpro9Parser.FONT, 0)
        def STYLE(self):
            return self.getToken(VisualFoxpro9Parser.STYLE, 0)
        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)
        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)
        def MARK(self):
            return self.getToken(VisualFoxpro9Parser.MARK, 0)
        def SKIPKW(self):
            return self.getToken(VisualFoxpro9Parser.SKIPKW, 0)
        def COLOR(self):
            return self.getToken(VisualFoxpro9Parser.COLOR, 0)
        def SCHEME(self):
            return self.getToken(VisualFoxpro9Parser.SCHEME, 0)
        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefinePad"):
                return visitor.visitDefinePad(self)
            else:
                return visitor.visitChildren(self)


    class DefineBarContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DefineBarContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)
        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefineBar"):
                return visitor.visitDefineBar(self)
            else:
                return visitor.visitChildren(self)


    class PrintStmtContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.PrintStmtContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEBUGOUT(self):
            return self.getToken(VisualFoxpro9Parser.DEBUGOUT, 0)
        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitPrintStmt"):
                return visitor.visitPrintStmt(self)
            else:
                return visitor.visitChildren(self)


    class CopyMoveFileContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.CopyMoveFileContext, self).__init__(parser)
            self.copyFrom(ctx)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def RENAME(self):
            return self.getToken(VisualFoxpro9Parser.RENAME, 0)
        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)
        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitCopyMoveFile"):
                return visitor.visitCopyMoveFile(self)
            else:
                return visitor.visitChildren(self)


    class AddObjectContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AddObjectContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(VisualFoxpro9Parser.ADD, 0)
        def OBJECT(self):
            return self.getToken(VisualFoxpro9Parser.OBJECT, 0)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)

        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)
        def idAttr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdAttrContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitAddObject"):
                return visitor.visitAddObject(self)
            else:
                return visitor.visitChildren(self)


    class ReportContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ReportContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REPORT(self):
            return self.getToken(VisualFoxpro9Parser.REPORT, 0)
        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def NOEJECT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOEJECT)
            else:
                return self.getToken(VisualFoxpro9Parser.NOEJECT, i)
        def TO(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.TO)
            else:
                return self.getToken(VisualFoxpro9Parser.TO, i)
        def PRINTER(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.PRINTER)
            else:
                return self.getToken(VisualFoxpro9Parser.PRINTER, i)
        def NOCONSOLE(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NOCONSOLE)
            else:
                return self.getToken(VisualFoxpro9Parser.NOCONSOLE, i)
        def PROMPT(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.PROMPT)
            else:
                return self.getToken(VisualFoxpro9Parser.PROMPT, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitReport"):
                return visitor.visitReport(self)
            else:
                return visitor.visitChildren(self)


    class OnPadContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.OnPadContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitOnPad"):
                return visitor.visitOnPad(self)
            else:
                return visitor.visitChildren(self)


    class OnBarContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.OnBarContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)
        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)
        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)
        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)
        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)
        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)
        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitOnBar"):
                return visitor.visitOnBar(self)
            else:
                return visitor.visitChildren(self)


    class NodefaultContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.NodefaultContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NODEFAULT(self):
            return self.getToken(VisualFoxpro9Parser.NODEFAULT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitNodefault"):
                return visitor.visitNodefault(self)
            else:
                return visitor.visitChildren(self)


    class AppendContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AppendContext, self).__init__(parser)
            self.copyFrom(ctx)

        def APPEND(self):
            return self.getToken(VisualFoxpro9Parser.APPEND, 0)
        def BLANK(self):
            return self.getToken(VisualFoxpro9Parser.BLANK, 0)
        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)
        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)

        def NOMENU(self):
            return self.getToken(VisualFoxpro9Parser.NOMENU, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitAppend"):
                return visitor.visitAppend(self)
            else:
                return visitor.visitChildren(self)


    class ScatterExprContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ScatterExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SCATTER(self):
            return self.getToken(VisualFoxpro9Parser.SCATTER, 0)
        def MEMVAR(self):
            return self.getToken(VisualFoxpro9Parser.MEMVAR, 0)
        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def FIELDS(self):
            return self.getToken(VisualFoxpro9Parser.FIELDS, 0)
        def MEMO(self):
            return self.getToken(VisualFoxpro9Parser.MEMO, 0)
        def BLANK(self):
            return self.getToken(VisualFoxpro9Parser.BLANK, 0)
        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)
        def LIKE(self):
            return self.getToken(VisualFoxpro9Parser.LIKE, 0)
        def EXCEPT(self):
            return self.getToken(VisualFoxpro9Parser.EXCEPT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitScatterExpr"):
                return visitor.visitScatterExpr(self)
            else:
                return visitor.visitChildren(self)


    class AssignContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.AssignContext, self).__init__(parser)
            self.copyFrom(ctx)

        def STORE(self):
            return self.getToken(VisualFoxpro9Parser.STORE, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)
        def idAttr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdAttrContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitAssign"):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)


    class DeleteRecordContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.DeleteRecordContext, self).__init__(parser)
            self.inExpr = None # SpecialExprContext
            self.copyFrom(ctx)

        def RECALL(self):
            return self.getToken(VisualFoxpro9Parser.RECALL, 0)
        def DELETE(self):
            return self.getToken(VisualFoxpro9Parser.DELETE, 0)
        def queryCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.QueryConditionContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.QueryConditionContext,i)

        def IN(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.IN)
            else:
                return self.getToken(VisualFoxpro9Parser.IN, i)
        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitDeleteRecord"):
                return visitor.visitDeleteRecord(self)
            else:
                return visitor.visitChildren(self)


    class ExprCmdContext(CmdContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.CmdContext)
            super(VisualFoxpro9Parser.ExprCmdContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitExprCmd"):
                return visitor.visitExprCmd(self)
            else:
                return visitor.visitChildren(self)



    def cmd(self):

        localctx = VisualFoxpro9Parser.CmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_cmd)
        self._la = 0 # Token type
        try:
            self.state = 1235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.OnKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 426
                self.match(VisualFoxpro9Parser.ON)
                self.state = 427
                self.match(VisualFoxpro9Parser.KEY)
                self.state = 434
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 428
                    self.match(VisualFoxpro9Parser.LABEL)
                    self.state = 429
                    self.identifier()
                    self.state = 432
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.PLUS_SIGN:
                        self.state = 430
                        self.match(VisualFoxpro9Parser.PLUS_SIGN)
                        self.state = 431
                        self.identifier()




                self.state = 436
                self.cmd()
                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.AddObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 437
                self.match(VisualFoxpro9Parser.ADD)
                self.state = 438
                self.match(VisualFoxpro9Parser.OBJECT)
                self.state = 439
                self.identifier()
                self.state = 440
                self.asType()
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.WITH:
                    self.state = 441
                    self.match(VisualFoxpro9Parser.WITH)
                    self.state = 442
                    self.idAttr()
                    self.state = 443
                    self.match(VisualFoxpro9Parser.EQUALS)
                    self.state = 444
                    self.expr(0)
                    self.state = 452
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==VisualFoxpro9Parser.COMMA:
                        self.state = 445
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 446
                        self.idAttr()
                        self.state = 447
                        self.match(VisualFoxpro9Parser.EQUALS)
                        self.state = 448
                        self.expr(0)
                        self.state = 454
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.ProgramControlContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 457
                self.match(VisualFoxpro9Parser.PROGRAMCONTROL)
                pass

            elif la_ == 4:
                localctx = VisualFoxpro9Parser.AtSayContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 458
                self.match(VisualFoxpro9Parser.COMMERCIALAT)
                self.state = 459
                self.args()
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.STYLE or _la==VisualFoxpro9Parser.SAY:
                    self.state = 464
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.SAY]:
                        self.state = 460
                        self.match(VisualFoxpro9Parser.SAY)
                        self.state = 461
                        localctx.sayExpr = self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.STYLE]:
                        self.state = 462
                        self.match(VisualFoxpro9Parser.STYLE)
                        self.state = 463
                        localctx.styleExpr = self.expr(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 468
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                localctx = VisualFoxpro9Parser.FuncDoContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 482
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 469
                    self.match(VisualFoxpro9Parser.DO)
                    self.state = 470
                    self.match(VisualFoxpro9Parser.FORM)
                    self.state = 471
                    self.specialExpr()
                    pass

                elif la_ == 2:
                    self.state = 472
                    self.match(VisualFoxpro9Parser.DO)
                    self.state = 473
                    self.specialExpr()
                    self.state = 476
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.IN:
                        self.state = 474
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 475
                        self.specialExpr()


                    self.state = 480
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.WITH:
                        self.state = 478
                        self.match(VisualFoxpro9Parser.WITH)
                        self.state = 479
                        self.args()


                    pass


                pass

            elif la_ == 6:
                localctx = VisualFoxpro9Parser.AssignContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 499
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 484
                    self.match(VisualFoxpro9Parser.STORE)
                    self.state = 485
                    self.expr(0)
                    self.state = 486
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 487
                    self.idAttr()
                    self.state = 492
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==VisualFoxpro9Parser.COMMA:
                        self.state = 488
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 489
                        self.idAttr()
                        self.state = 494
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 495
                    self.idAttr()
                    self.state = 496
                    self.match(VisualFoxpro9Parser.EQUALS)
                    self.state = 497
                    self.expr(0)
                    pass


                pass

            elif la_ == 7:
                localctx = VisualFoxpro9Parser.DeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 521
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 508
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.SCOPE]:
                        self.state = 501
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.EXTERNAL or _la==VisualFoxpro9Parser.SCOPE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 503
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                        if la_ == 1:
                            self.state = 502
                            _la = self._input.LA(1)
                            if not(_la==VisualFoxpro9Parser.ARRAY or _la==VisualFoxpro9Parser.DECLARE or _la==VisualFoxpro9Parser.DIMENSION):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        pass
                    elif token in [VisualFoxpro9Parser.DIMENSION]:
                        self.state = 505
                        self.match(VisualFoxpro9Parser.DIMENSION)
                        pass
                    elif token in [VisualFoxpro9Parser.DECLARE]:
                        self.state = 506
                        self.match(VisualFoxpro9Parser.DECLARE)
                        pass
                    elif token in [VisualFoxpro9Parser.PARAMETER]:
                        self.state = 507
                        self.match(VisualFoxpro9Parser.PARAMETER)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 510
                    self.declarationItem()
                    self.state = 515
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==VisualFoxpro9Parser.COMMA:
                        self.state = 511
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 512
                        self.declarationItem()
                        self.state = 517
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 518
                    self.match(VisualFoxpro9Parser.EXTERNAL)
                    self.state = 519
                    self.match(VisualFoxpro9Parser.PROCEDURE)
                    self.state = 520
                    self.specialExpr()
                    pass


                pass

            elif la_ == 8:
                localctx = VisualFoxpro9Parser.PrintStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 528
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.QUESTION]:
                    self.state = 523
                    self.match(VisualFoxpro9Parser.QUESTION)
                    self.state = 525
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.QUESTION:
                        self.state = 524
                        self.match(VisualFoxpro9Parser.QUESTION)


                    pass
                elif token in [VisualFoxpro9Parser.DEBUGOUT]:
                    self.state = 527
                    self.match(VisualFoxpro9Parser.DEBUGOUT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 530
                    self.args()


                pass

            elif la_ == 9:
                localctx = VisualFoxpro9Parser.WaitCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 533
                self.match(VisualFoxpro9Parser.WAIT)
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 550
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                    if la_ == 1:
                        self.state = 534
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 535
                        localctx.toExpr = self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 536
                        self.match(VisualFoxpro9Parser.WINDOW)
                        self.state = 542
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                        if la_ == 1:
                            self.state = 537
                            self.match(VisualFoxpro9Parser.AT)
                            self.state = 538
                            localctx.atExpr1 = self.expr(0)
                            self.state = 539
                            self.match(VisualFoxpro9Parser.COMMA)
                            self.state = 540
                            localctx.atExpr2 = self.expr(0)


                        pass

                    elif la_ == 3:
                        self.state = 544
                        self.match(VisualFoxpro9Parser.NOWAIT)
                        pass

                    elif la_ == 4:
                        self.state = 545
                        self.match(VisualFoxpro9Parser.CLEAR)
                        pass

                    elif la_ == 5:
                        self.state = 546
                        self.match(VisualFoxpro9Parser.NOCLEAR)
                        pass

                    elif la_ == 6:
                        self.state = 547
                        self.match(VisualFoxpro9Parser.TIMEOUT)
                        self.state = 548
                        localctx.timeout = self.expr(0)
                        pass

                    elif la_ == 7:
                        self.state = 549
                        localctx.message = self.expr(0)
                        pass


                    self.state = 554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 10:
                localctx = VisualFoxpro9Parser.DeleteFileContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 558
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ERASE]:
                    self.state = 555
                    self.match(VisualFoxpro9Parser.ERASE)
                    pass
                elif token in [VisualFoxpro9Parser.DELETE]:
                    self.state = 556
                    self.match(VisualFoxpro9Parser.DELETE)
                    self.state = 557
                    self.match(VisualFoxpro9Parser.FILE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 562
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.HASH, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.NODEFAULT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.ID]:
                    self.state = 560
                    self.specialExpr()
                    pass
                elif token in [VisualFoxpro9Parser.QUESTION]:
                    self.state = 561
                    self.match(VisualFoxpro9Parser.QUESTION)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.RECYCLE:
                    self.state = 564
                    self.match(VisualFoxpro9Parser.RECYCLE)


                pass

            elif la_ == 11:
                localctx = VisualFoxpro9Parser.CopyMoveFileContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 570
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.RENAME]:
                    self.state = 567
                    self.match(VisualFoxpro9Parser.RENAME)
                    pass
                elif token in [VisualFoxpro9Parser.COPY]:
                    self.state = 568
                    self.match(VisualFoxpro9Parser.COPY)
                    self.state = 569
                    self.match(VisualFoxpro9Parser.FILE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 572
                self.specialExpr()
                self.state = 573
                self.match(VisualFoxpro9Parser.TO)
                self.state = 574
                self.specialExpr()
                pass

            elif la_ == 12:
                localctx = VisualFoxpro9Parser.ChMkRmDirContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 576
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.MKDIR or _la==VisualFoxpro9Parser.RMDIR or _la==VisualFoxpro9Parser.CHDIR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 577
                self.specialExpr()
                pass

            elif la_ == 13:
                localctx = VisualFoxpro9Parser.ReturnStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 578
                self.match(VisualFoxpro9Parser.RETURN)
                self.state = 580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 579
                    self.expr(0)


                pass

            elif la_ == 14:
                localctx = VisualFoxpro9Parser.OnErrorCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 582
                self.onError()
                pass

            elif la_ == 15:
                localctx = VisualFoxpro9Parser.OnShutdownCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 583
                self.onShutdown()
                pass

            elif la_ == 16:
                localctx = VisualFoxpro9Parser.ReleaseContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 584
                self.match(VisualFoxpro9Parser.RELEASE)
                self.state = 595
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 585
                    self.match(VisualFoxpro9Parser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 587
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                    if la_ == 1:
                        self.state = 586
                        localctx.vartype = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.PROCEDURE or _la==VisualFoxpro9Parser.CLASSLIB):
                            localctx.vartype = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 589
                    self.args()
                    pass

                elif la_ == 3:
                    self.state = 590
                    self.match(VisualFoxpro9Parser.POPUP)
                    self.state = 591
                    self.args()
                    self.state = 593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.EXTENDED:
                        self.state = 592
                        self.match(VisualFoxpro9Parser.EXTENDED)


                    pass


                pass

            elif la_ == 17:
                localctx = VisualFoxpro9Parser.SetStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 597
                self.match(VisualFoxpro9Parser.SET)
                self.state = 598
                self.setCmd()
                pass

            elif la_ == 18:
                localctx = VisualFoxpro9Parser.PushKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 599
                self.match(VisualFoxpro9Parser.PUSH)
                self.state = 600
                self.match(VisualFoxpro9Parser.KEY)
                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.CLEAR:
                    self.state = 601
                    self.match(VisualFoxpro9Parser.CLEAR)


                pass

            elif la_ == 19:
                localctx = VisualFoxpro9Parser.PopKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 604
                self.match(VisualFoxpro9Parser.POP)
                self.state = 605
                self.match(VisualFoxpro9Parser.KEY)
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ALL:
                    self.state = 606
                    self.match(VisualFoxpro9Parser.ALL)


                pass

            elif la_ == 20:
                localctx = VisualFoxpro9Parser.KeyboardContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 609
                self.match(VisualFoxpro9Parser.KEYBOARD)
                self.state = 610
                self.expr(0)
                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.PLAIN:
                    self.state = 611
                    self.match(VisualFoxpro9Parser.PLAIN)


                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.CLEAR:
                    self.state = 614
                    self.match(VisualFoxpro9Parser.CLEAR)


                pass

            elif la_ == 21:
                localctx = VisualFoxpro9Parser.DefineMenuContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 617
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 618
                self.match(VisualFoxpro9Parser.MENU)
                self.state = 619
                self.identifier()

                self.state = 620
                self.match(VisualFoxpro9Parser.BAR)
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.AT:
                    self.state = 621
                    self.match(VisualFoxpro9Parser.AT)
                    self.state = 622
                    self.match(VisualFoxpro9Parser.LINE)
                    self.state = 623
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 626
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 632
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                    if la_ == 1:
                        self.state = 628
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                        if la_ == 1:
                            self.state = 627
                            self.match(VisualFoxpro9Parser.WINDOW)


                        self.state = 630
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 631
                        self.match(VisualFoxpro9Parser.SCREEN)
                        pass




                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NOMARGIN:
                    self.state = 636
                    self.match(VisualFoxpro9Parser.NOMARGIN)


                pass

            elif la_ == 22:
                localctx = VisualFoxpro9Parser.DefinePadContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 639
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 640
                self.match(VisualFoxpro9Parser.PAD)
                self.state = 641
                self.identifier()
                self.state = 642
                self.match(VisualFoxpro9Parser.OF)
                self.state = 643
                self.expr(0)
                self.state = 644
                self.match(VisualFoxpro9Parser.PROMPT)
                self.state = 645
                self.expr(0)
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.AT:
                    self.state = 646
                    self.match(VisualFoxpro9Parser.AT)
                    self.state = 647
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                    self.state = 648
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 649
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                self.state = 656
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.BEFORE]:
                    self.state = 652
                    self.match(VisualFoxpro9Parser.BEFORE)
                    self.state = 653
                    self.identifier()
                    pass
                elif token in [VisualFoxpro9Parser.AFTER]:
                    self.state = 654
                    self.match(VisualFoxpro9Parser.AFTER)
                    self.state = 655
                    self.identifier()
                    pass
                elif token in [VisualFoxpro9Parser.EOF, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.NL]:
                    pass
                else:
                    pass
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NEGOTIATE:
                    self.state = 658
                    self.match(VisualFoxpro9Parser.NEGOTIATE)
                    self.state = 659
                    self.identifier()
                    self.state = 662
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.COMMA:
                        self.state = 660
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 661
                        self.identifier()




                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.FONT:
                    self.state = 666
                    self.match(VisualFoxpro9Parser.FONT)
                    self.state = 667
                    self.identifier()
                    self.state = 678
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.COMMA:
                        self.state = 668
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 669
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 676
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.COMMA:
                            self.state = 670
                            self.match(VisualFoxpro9Parser.COMMA)
                            self.state = 671
                            self.expr(0)
                            self.state = 674
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==VisualFoxpro9Parser.COMMA:
                                self.state = 672
                                self.match(VisualFoxpro9Parser.COMMA)
                                self.state = 673
                                self.identifier()








                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.STYLE:
                    self.state = 682
                    self.match(VisualFoxpro9Parser.STYLE)
                    self.state = 683
                    self.identifier()


                self.state = 688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MESSAGE:
                    self.state = 686
                    self.match(VisualFoxpro9Parser.MESSAGE)
                    self.state = 687
                    self.expr(0)


                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.KEY:
                    self.state = 690
                    self.match(VisualFoxpro9Parser.KEY)
                    self.state = 691
                    self.identifier()
                    self.state = 694
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.PLUS_SIGN:
                        self.state = 692
                        self.match(VisualFoxpro9Parser.PLUS_SIGN)
                        self.state = 693
                        self.identifier()


                    self.state = 698
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.COMMA:
                        self.state = 696
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 697
                        self.expr(0)




                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MARK:
                    self.state = 702
                    self.match(VisualFoxpro9Parser.MARK)
                    self.state = 703
                    self.identifier()


                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.SKIPKW:
                    self.state = 706
                    self.match(VisualFoxpro9Parser.SKIPKW)
                    self.state = 709
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.FOR:
                        self.state = 707
                        self.match(VisualFoxpro9Parser.FOR)
                        self.state = 708
                        self.expr(0)




                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COLOR:
                    self.state = 713
                    self.match(VisualFoxpro9Parser.COLOR)
                    self.state = 714
                    self.match(VisualFoxpro9Parser.SCHEME)
                    self.state = 715
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                pass

            elif la_ == 23:
                localctx = VisualFoxpro9Parser.DefinePopupContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 718
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 719
                self.match(VisualFoxpro9Parser.POPUP)
                self.state = 720
                self.identifier()
                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.SHADOW:
                    self.state = 721
                    self.match(VisualFoxpro9Parser.SHADOW)


                self.state = 725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MARGIN:
                    self.state = 724
                    self.match(VisualFoxpro9Parser.MARGIN)


                self.state = 728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.RELATIVE:
                    self.state = 727
                    self.match(VisualFoxpro9Parser.RELATIVE)


                self.state = 733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COLOR:
                    self.state = 730
                    self.match(VisualFoxpro9Parser.COLOR)
                    self.state = 731
                    self.match(VisualFoxpro9Parser.SCHEME)
                    self.state = 732
                    self.match(VisualFoxpro9Parser.NUMBER_LITERAL)


                pass

            elif la_ == 24:
                localctx = VisualFoxpro9Parser.DefineBarContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 735
                self.match(VisualFoxpro9Parser.DEFINE)
                self.state = 736
                self.match(VisualFoxpro9Parser.BAR)
                self.state = 737
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                self.state = 738
                self.match(VisualFoxpro9Parser.OF)
                self.state = 739
                self.identifier()
                self.state = 740
                self.match(VisualFoxpro9Parser.PROMPT)
                self.state = 741
                self.expr(0)
                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MESSAGE:
                    self.state = 742
                    self.match(VisualFoxpro9Parser.MESSAGE)
                    self.state = 743
                    self.expr(0)


                pass

            elif la_ == 25:
                localctx = VisualFoxpro9Parser.OnPadContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 746
                self.match(VisualFoxpro9Parser.ON)
                self.state = 747
                self.match(VisualFoxpro9Parser.PAD)
                self.state = 748
                self.identifier()
                self.state = 749
                self.match(VisualFoxpro9Parser.OF)
                self.state = 750
                self.identifier()
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ACTIVATE:
                    self.state = 751
                    self.match(VisualFoxpro9Parser.ACTIVATE)
                    self.state = 752
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.MENU or _la==VisualFoxpro9Parser.POPUP):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 753
                    self.identifier()


                pass

            elif la_ == 26:
                localctx = VisualFoxpro9Parser.OnBarContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 756
                self.match(VisualFoxpro9Parser.ON)
                self.state = 757
                self.match(VisualFoxpro9Parser.BAR)
                self.state = 758
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                self.state = 759
                self.match(VisualFoxpro9Parser.OF)
                self.state = 760
                self.identifier()
                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ACTIVATE:
                    self.state = 761
                    self.match(VisualFoxpro9Parser.ACTIVATE)
                    self.state = 762
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.MENU or _la==VisualFoxpro9Parser.POPUP):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 763
                    self.identifier()


                pass

            elif la_ == 27:
                localctx = VisualFoxpro9Parser.OnSelectionBarContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 766
                self.match(VisualFoxpro9Parser.ON)
                self.state = 767
                self.match(VisualFoxpro9Parser.SELECTION)
                self.state = 768
                self.match(VisualFoxpro9Parser.BAR)
                self.state = 769
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                self.state = 770
                self.match(VisualFoxpro9Parser.OF)
                self.state = 771
                self.identifier()
                self.state = 772
                self.cmd()
                pass

            elif la_ == 28:
                localctx = VisualFoxpro9Parser.ActivateWindowContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 774
                self.match(VisualFoxpro9Parser.ACTIVATE)
                self.state = 775
                self.match(VisualFoxpro9Parser.WINDOW)
                self.state = 778
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 776
                    self.parameters()
                    pass

                elif la_ == 2:
                    self.state = 777
                    self.match(VisualFoxpro9Parser.ALL)
                    pass


                self.state = 788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 780
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 786
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                    if la_ == 1:
                        self.state = 782
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                        if la_ == 1:
                            self.state = 781
                            self.match(VisualFoxpro9Parser.WINDOW)


                        self.state = 784
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 785
                        self.match(VisualFoxpro9Parser.SCREEN)
                        pass




                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (VisualFoxpro9Parser.TOP - 117)) | (1 << (VisualFoxpro9Parser.BOTTOM - 117)) | (1 << (VisualFoxpro9Parser.SAME - 117)))) != 0):
                    self.state = 790
                    _la = self._input.LA(1)
                    if not(((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (VisualFoxpro9Parser.TOP - 117)) | (1 << (VisualFoxpro9Parser.BOTTOM - 117)) | (1 << (VisualFoxpro9Parser.SAME - 117)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NOSHOW:
                    self.state = 793
                    self.match(VisualFoxpro9Parser.NOSHOW)


                pass

            elif la_ == 29:
                localctx = VisualFoxpro9Parser.ActivateMenuContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 796
                self.match(VisualFoxpro9Parser.ACTIVATE)
                self.state = 797
                self.match(VisualFoxpro9Parser.MENU)
                self.state = 798
                self.identifier()
                self.state = 800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.NOWAIT:
                    self.state = 799
                    self.match(VisualFoxpro9Parser.NOWAIT)


                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.PAD:
                    self.state = 802
                    self.match(VisualFoxpro9Parser.PAD)
                    self.state = 803
                    self.identifier()


                pass

            elif la_ == 30:
                localctx = VisualFoxpro9Parser.DeactivateContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 806
                self.match(VisualFoxpro9Parser.DEACTIVATE)
                self.state = 807
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.MENU or _la==VisualFoxpro9Parser.POPUP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 810
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 808
                    self.match(VisualFoxpro9Parser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 809
                    self.parameters()
                    pass


                pass

            elif la_ == 31:
                localctx = VisualFoxpro9Parser.RaiseErrorContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 812
                self.match(VisualFoxpro9Parser.ERROR)
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 813
                    self.expr(0)


                pass

            elif la_ == 32:
                localctx = VisualFoxpro9Parser.ThrowErrorContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 816
                self.match(VisualFoxpro9Parser.THROW)
                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 817
                    self.expr(0)


                pass

            elif la_ == 33:
                localctx = VisualFoxpro9Parser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 820
                self.match(VisualFoxpro9Parser.CREATE)
                self.state = 821
                _la = self._input.LA(1)
                if not(((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & ((1 << (VisualFoxpro9Parser.TABLE - 63)) | (1 << (VisualFoxpro9Parser.DBF - 63)) | (1 << (VisualFoxpro9Parser.CURSOR - 63)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 822
                self.specialExpr()
                self.state = 824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.FREE:
                    self.state = 823
                    self.match(VisualFoxpro9Parser.FREE)


                self.state = 826
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 827
                self.identifier()
                self.state = 828
                self.identifier()
                self.state = 829
                self.arrayIndex()
                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.COMMA:
                    self.state = 830
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 831
                    self.identifier()
                    self.state = 832
                    self.identifier()
                    self.state = 833
                    self.arrayIndex()
                    self.state = 839
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 840
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass

            elif la_ == 34:
                localctx = VisualFoxpro9Parser.AlterTableContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 842
                self.match(VisualFoxpro9Parser.ALTER)
                self.state = 843
                self.match(VisualFoxpro9Parser.TABLE)
                self.state = 844
                self.specialExpr()
                self.state = 854
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ADD]:
                    self.state = 845
                    self.match(VisualFoxpro9Parser.ADD)
                    self.state = 846
                    self.match(VisualFoxpro9Parser.COLUMN)
                    self.state = 847
                    self.identifier()
                    self.state = 848
                    self.identifier()
                    self.state = 849
                    self.arrayIndex()
                    pass
                elif token in [VisualFoxpro9Parser.DROP]:
                    self.state = 851
                    self.match(VisualFoxpro9Parser.DROP)
                    self.state = 852
                    self.match(VisualFoxpro9Parser.COLUMN)
                    self.state = 853
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 35:
                localctx = VisualFoxpro9Parser.SelectContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 856
                self.match(VisualFoxpro9Parser.SELECT)
                self.state = 883
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                if la_ == 1:
                    self.state = 857
                    localctx.tablename = self.specialExpr()
                    pass

                elif la_ == 2:
                    self.state = 859
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                    if la_ == 1:
                        self.state = 858
                        self.match(VisualFoxpro9Parser.DISTINCT)


                    self.state = 863
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.HASH, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.NODEFAULT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.ID]:
                        self.state = 861
                        self.specialArgs()
                        pass
                    elif token in [VisualFoxpro9Parser.ASTERISK]:
                        self.state = 862
                        self.match(VisualFoxpro9Parser.ASTERISK)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 867
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.FROM:
                        self.state = 865
                        self.match(VisualFoxpro9Parser.FROM)
                        self.state = 866
                        localctx.fromExpr = self.specialExpr()


                    self.state = 871
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.WHERE:
                        self.state = 869
                        self.match(VisualFoxpro9Parser.WHERE)
                        self.state = 870
                        localctx.whereExpr = self.expr(0)


                    self.state = 876
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.INTO:
                        self.state = 873
                        self.match(VisualFoxpro9Parser.INTO)
                        self.state = 874
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.TABLE or _la==VisualFoxpro9Parser.CURSOR):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 875
                        localctx.intoExpr = self.specialExpr()


                    self.state = 881
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ORDER:
                        self.state = 878
                        self.match(VisualFoxpro9Parser.ORDER)
                        self.state = 879
                        self.match(VisualFoxpro9Parser.BY)
                        self.state = 880
                        localctx.orderbyid = self.identifier()


                    pass


                pass

            elif la_ == 36:
                localctx = VisualFoxpro9Parser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 885
                self.match(VisualFoxpro9Parser.USE)
                self.state = 887
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 886
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.SHARED or _la==VisualFoxpro9Parser.EXCLUSIVE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 896
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                if la_ == 1:
                    self.state = 889
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 890
                    localctx.workArea = self.specialExpr()

                elif la_ == 2:
                    self.state = 891
                    localctx.name = self.specialExpr()
                    self.state = 892
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 893
                    localctx.workArea = self.specialExpr()

                elif la_ == 3:
                    self.state = 895
                    localctx.name = self.specialExpr()


                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.SHARED or _la==VisualFoxpro9Parser.EXCLUSIVE:
                    self.state = 898
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.SHARED or _la==VisualFoxpro9Parser.EXCLUSIVE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ALIAS:
                    self.state = 901
                    self.match(VisualFoxpro9Parser.ALIAS)
                    self.state = 902
                    localctx.aliasExpr = self.specialExpr()


                pass

            elif la_ == 37:
                localctx = VisualFoxpro9Parser.LocateContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 905
                self.match(VisualFoxpro9Parser.LOCATE)
                self.state = 909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (VisualFoxpro9Parser.FOR - 81)) | (1 << (VisualFoxpro9Parser.WHILE - 81)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 81)) | (1 << (VisualFoxpro9Parser.ALL - 81)) | (1 << (VisualFoxpro9Parser.RECORD - 81)) | (1 << (VisualFoxpro9Parser.NEXT - 81)) | (1 << (VisualFoxpro9Parser.REST - 81)))) != 0):
                    self.state = 906
                    self.queryCondition()
                    self.state = 911
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 38:
                localctx = VisualFoxpro9Parser.ContinueLocateContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 912
                self.match(VisualFoxpro9Parser.CONTINUE)
                pass

            elif la_ == 39:
                localctx = VisualFoxpro9Parser.ReplaceContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 913
                self.match(VisualFoxpro9Parser.REPLACE)
                self.state = 921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 919
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                    if la_ == 1:
                        self.state = 914
                        self.queryCondition()
                        pass

                    elif la_ == 2:
                        self.state = 915
                        self.specialExpr()
                        self.state = 916
                        self.match(VisualFoxpro9Parser.WITH)
                        self.state = 917
                        self.expr(0)
                        pass


                    self.state = 923
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 40:
                localctx = VisualFoxpro9Parser.IndexOnContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 924
                self.match(VisualFoxpro9Parser.INDEX)
                self.state = 925
                self.match(VisualFoxpro9Parser.ON)
                self.state = 926
                self.specialExpr()
                self.state = 927
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.TO or _la==VisualFoxpro9Parser.TAG):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 928
                self.specialExpr()
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COMPACT:
                    self.state = 929
                    self.match(VisualFoxpro9Parser.COMPACT)


                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING:
                    self.state = 932
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.UNIQUE or _la==VisualFoxpro9Parser.CANDIDATE:
                    self.state = 935
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.UNIQUE or _la==VisualFoxpro9Parser.CANDIDATE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 938
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass

            elif la_ == 41:
                localctx = VisualFoxpro9Parser.CountContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 941
                self.match(VisualFoxpro9Parser.COUNT)
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.TO or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (VisualFoxpro9Parser.FOR - 81)) | (1 << (VisualFoxpro9Parser.WHILE - 81)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 81)) | (1 << (VisualFoxpro9Parser.ALL - 81)) | (1 << (VisualFoxpro9Parser.RECORD - 81)) | (1 << (VisualFoxpro9Parser.NEXT - 81)) | (1 << (VisualFoxpro9Parser.REST - 81)))) != 0):
                    self.state = 945
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.TO]:
                        self.state = 942
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 943
                        localctx.toExpr = self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST]:
                        self.state = 944
                        self.queryCondition()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 949
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 42:
                localctx = VisualFoxpro9Parser.SumContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 950
                self.match(VisualFoxpro9Parser.SUM)
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 955
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                    if la_ == 1:
                        self.state = 951
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 952
                        localctx.toExpr = self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 953
                        self.queryCondition()
                        pass

                    elif la_ == 3:
                        self.state = 954
                        localctx.sumExpr = self.expr(0)
                        pass


                    self.state = 959
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 43:
                localctx = VisualFoxpro9Parser.DeleteRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 960
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.DELETE or _la==VisualFoxpro9Parser.RECALL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.IN or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (VisualFoxpro9Parser.FOR - 81)) | (1 << (VisualFoxpro9Parser.WHILE - 81)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 81)) | (1 << (VisualFoxpro9Parser.ALL - 81)) | (1 << (VisualFoxpro9Parser.RECORD - 81)) | (1 << (VisualFoxpro9Parser.NEXT - 81)) | (1 << (VisualFoxpro9Parser.REST - 81)))) != 0):
                    self.state = 964
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST]:
                        self.state = 961
                        self.queryCondition()
                        pass
                    elif token in [VisualFoxpro9Parser.IN]:
                        self.state = 962
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 963
                        localctx.inExpr = self.specialExpr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 968
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 44:
                localctx = VisualFoxpro9Parser.AppendFromContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 969
                self.match(VisualFoxpro9Parser.APPEND)
                self.state = 970
                self.match(VisualFoxpro9Parser.FROM)
                self.state = 978
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                if la_ == 1:
                    self.state = 971
                    self.match(VisualFoxpro9Parser.ARRAY)
                    self.state = 972
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 973
                    self.specialExpr()
                    self.state = 974
                    self.match(VisualFoxpro9Parser.FOR)
                    self.state = 975
                    self.expr(0)
                    pass

                elif la_ == 3:
                    self.state = 977
                    self.specialExpr()
                    pass


                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.TYPE:
                    self.state = 980
                    self.match(VisualFoxpro9Parser.TYPE)
                    self.state = 981
                    localctx.typeExpr = self.specialExpr()


                pass

            elif la_ == 45:
                localctx = VisualFoxpro9Parser.AppendContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 984
                self.match(VisualFoxpro9Parser.APPEND)
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.BLANK:
                    self.state = 985
                    self.match(VisualFoxpro9Parser.BLANK)


                self.state = 994
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 988
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 989
                    self.specialExpr()
                    self.state = 990
                    self.match(VisualFoxpro9Parser.NOMENU)

                elif la_ == 2:
                    self.state = 992
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 993
                    self.specialExpr()


                pass

            elif la_ == 46:
                localctx = VisualFoxpro9Parser.InsertContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 996
                self.match(VisualFoxpro9Parser.INSERT)
                self.state = 997
                self.match(VisualFoxpro9Parser.INTO)
                self.state = 998
                self.specialExpr()
                self.state = 1018
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.FROM]:
                    self.state = 999
                    self.match(VisualFoxpro9Parser.FROM)
                    self.state = 1005
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.ARRAY]:
                        self.state = 1000
                        self.match(VisualFoxpro9Parser.ARRAY)
                        self.state = 1001
                        self.expr(0)
                        pass
                    elif token in [VisualFoxpro9Parser.MEMVAR]:
                        self.state = 1002
                        self.match(VisualFoxpro9Parser.MEMVAR)
                        pass
                    elif token in [VisualFoxpro9Parser.NAME]:
                        self.state = 1003
                        self.match(VisualFoxpro9Parser.NAME)
                        self.state = 1004
                        self.expr(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.VALUES]:
                    self.state = 1011
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.LEFTPAREN:
                        self.state = 1007
                        self.match(VisualFoxpro9Parser.LEFTPAREN)
                        self.state = 1008
                        self.specialArgs()
                        self.state = 1009
                        self.match(VisualFoxpro9Parser.RIGHTPAREN)


                    self.state = 1013
                    self.match(VisualFoxpro9Parser.VALUES)
                    self.state = 1014
                    self.match(VisualFoxpro9Parser.LEFTPAREN)
                    self.state = 1015
                    self.args()
                    self.state = 1016
                    self.match(VisualFoxpro9Parser.RIGHTPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 47:
                localctx = VisualFoxpro9Parser.SkipRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 1020
                self.match(VisualFoxpro9Parser.SKIPKW)
                self.state = 1022
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                if la_ == 1:
                    self.state = 1021
                    self.expr(0)


                self.state = 1026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1024
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1025
                    self.specialExpr()


                pass

            elif la_ == 48:
                localctx = VisualFoxpro9Parser.PackContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 1028
                self.match(VisualFoxpro9Parser.PACK)
                self.state = 1042
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                if la_ == 1:
                    self.state = 1029
                    self.match(VisualFoxpro9Parser.DATABASE)
                    pass

                elif la_ == 2:
                    self.state = 1031
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                    if la_ == 1:
                        self.state = 1030
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.DBF or _la==VisualFoxpro9Parser.MEMO):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1040
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                    if la_ == 1:
                        self.state = 1033
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1034
                        localctx.workArea = self.specialExpr()

                    elif la_ == 2:
                        self.state = 1035
                        localctx.tableName = self.specialExpr()
                        self.state = 1036
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1037
                        localctx.workArea = self.specialExpr()

                    elif la_ == 3:
                        self.state = 1039
                        localctx.tableName = self.specialExpr()


                    pass


                pass

            elif la_ == 49:
                localctx = VisualFoxpro9Parser.ReindexContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 1044
                self.match(VisualFoxpro9Parser.REINDEX)
                self.state = 1046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COMPACT:
                    self.state = 1045
                    self.match(VisualFoxpro9Parser.COMPACT)


                pass

            elif la_ == 50:
                localctx = VisualFoxpro9Parser.SeekRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 1048
                self.match(VisualFoxpro9Parser.SEEK)
                self.state = 1049
                localctx.seekExpr = self.expr(0)
                self.state = 1064
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1059
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                    if la_ == 1:
                        self.state = 1050
                        self.match(VisualFoxpro9Parser.ORDER)
                        self.state = 1051
                        localctx.orderExpr = self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 1052
                        self.match(VisualFoxpro9Parser.TAG)
                        self.state = 1053
                        localctx.tagName = self.specialExpr()
                        self.state = 1056
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.OF:
                            self.state = 1054
                            self.match(VisualFoxpro9Parser.OF)
                            self.state = 1055
                            localctx.cdxFileExpr = self.specialExpr()


                        pass

                    elif la_ == 3:
                        self.state = 1058
                        localctx.idxFileExpr = self.specialExpr()
                        pass


                    self.state = 1062
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING:
                        self.state = 1061
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1066
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1067
                    localctx.tablenameExpr = self.specialExpr()


                pass

            elif la_ == 51:
                localctx = VisualFoxpro9Parser.GoRecordContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 1070
                self.match(VisualFoxpro9Parser.GOTO)
                self.state = 1077
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                if la_ == 1:
                    self.state = 1071
                    self.match(VisualFoxpro9Parser.TOP)
                    pass

                elif la_ == 2:
                    self.state = 1072
                    self.match(VisualFoxpro9Parser.BOTTOM)
                    pass

                elif la_ == 3:
                    self.state = 1074
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                    if la_ == 1:
                        self.state = 1073
                        self.match(VisualFoxpro9Parser.RECORD)


                    self.state = 1076
                    self.expr(0)
                    pass


                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1079
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1080
                    self.specialExpr()


                pass

            elif la_ == 52:
                localctx = VisualFoxpro9Parser.CopyToContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 1083
                self.match(VisualFoxpro9Parser.COPY)
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.STRUCTURE:
                    self.state = 1084
                    self.match(VisualFoxpro9Parser.STRUCTURE)


                self.state = 1087
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1088
                self.specialExpr()
                pass

            elif la_ == 53:
                localctx = VisualFoxpro9Parser.ZapTableContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 1089
                self.match(VisualFoxpro9Parser.ZAP)
                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1090
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1091
                    self.specialExpr()


                pass

            elif la_ == 54:
                localctx = VisualFoxpro9Parser.BrowseContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 1094
                self.match(VisualFoxpro9Parser.BROWSE)
                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)) | (1 << (VisualFoxpro9Parser.ORDER - 128)) | (1 << (VisualFoxpro9Parser.SEEK - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)) | (1 << (VisualFoxpro9Parser.DROP - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 1095
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1100
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 55:
                localctx = VisualFoxpro9Parser.ScatterExprContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 1101
                self.match(VisualFoxpro9Parser.SCATTER)
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.FIELDS:
                    self.state = 1102
                    self.match(VisualFoxpro9Parser.FIELDS)
                    self.state = 1104
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                    if la_ == 1:
                        self.state = 1103
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.EXCEPT or _la==VisualFoxpro9Parser.LIKE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1106
                    self.expr(0)


                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MEMO:
                    self.state = 1109
                    self.match(VisualFoxpro9Parser.MEMO)


                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.BLANK:
                    self.state = 1112
                    self.match(VisualFoxpro9Parser.BLANK)


                self.state = 1123
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.MEMVAR]:
                    self.state = 1115
                    self.match(VisualFoxpro9Parser.MEMVAR)
                    pass
                elif token in [VisualFoxpro9Parser.NAME]:
                    self.state = 1116
                    self.match(VisualFoxpro9Parser.NAME)
                    self.state = 1117
                    self.expr(0)
                    self.state = 1119
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ADDITIVE:
                        self.state = 1118
                        self.match(VisualFoxpro9Parser.ADDITIVE)


                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1121
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1122
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 56:
                localctx = VisualFoxpro9Parser.GatherExprContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 1125
                self.match(VisualFoxpro9Parser.GATHER)
                self.state = 1131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.FIELDS:
                    self.state = 1126
                    self.match(VisualFoxpro9Parser.FIELDS)
                    self.state = 1128
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                    if la_ == 1:
                        self.state = 1127
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.EXCEPT or _la==VisualFoxpro9Parser.LIKE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1130
                    self.expr(0)


                self.state = 1134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MEMO:
                    self.state = 1133
                    self.match(VisualFoxpro9Parser.MEMO)


                self.state = 1136
                self.match(VisualFoxpro9Parser.FROM)
                self.state = 1141
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                if la_ == 1:
                    self.state = 1137
                    self.match(VisualFoxpro9Parser.MEMVAR)
                    pass

                elif la_ == 2:
                    self.state = 1138
                    self.match(VisualFoxpro9Parser.NAME)
                    self.state = 1139
                    self.expr(0)
                    pass

                elif la_ == 3:
                    self.state = 1140
                    self.expr(0)
                    pass


                pass

            elif la_ == 57:
                localctx = VisualFoxpro9Parser.CloseStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 57)
                self.state = 1143
                self.match(VisualFoxpro9Parser.CLOSE)
                self.state = 1149
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES]:
                    self.state = 1144
                    _la = self._input.LA(1)
                    if not(((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (VisualFoxpro9Parser.DATABASE - 225)) | (1 << (VisualFoxpro9Parser.TABLES - 225)) | (1 << (VisualFoxpro9Parser.INDEXES - 225)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1146
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ALL:
                        self.state = 1145
                        self.match(VisualFoxpro9Parser.ALL)


                    pass
                elif token in [VisualFoxpro9Parser.ALL]:
                    self.state = 1148
                    self.match(VisualFoxpro9Parser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 58:
                localctx = VisualFoxpro9Parser.ReadEventContext(self, localctx)
                self.enterOuterAlt(localctx, 58)
                self.state = 1151
                self.match(VisualFoxpro9Parser.READ)
                self.state = 1152
                self.match(VisualFoxpro9Parser.EVENTS)
                pass

            elif la_ == 59:
                localctx = VisualFoxpro9Parser.ClearStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 59)
                self.state = 1153
                self.match(VisualFoxpro9Parser.CLEAR)
                self.state = 1180
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ALL]:
                    self.state = 1154
                    self.match(VisualFoxpro9Parser.ALL)
                    pass
                elif token in [VisualFoxpro9Parser.CLASS]:
                    self.state = 1155
                    self.match(VisualFoxpro9Parser.CLASS)
                    self.state = 1156
                    self.expr(0)
                    pass
                elif token in [VisualFoxpro9Parser.CLASSLIB]:
                    self.state = 1157
                    self.match(VisualFoxpro9Parser.CLASSLIB)
                    self.state = 1158
                    self.specialExpr()
                    pass
                elif token in [VisualFoxpro9Parser.DEBUG]:
                    self.state = 1159
                    self.match(VisualFoxpro9Parser.DEBUG)
                    pass
                elif token in [VisualFoxpro9Parser.DLLS]:
                    self.state = 1160
                    self.match(VisualFoxpro9Parser.DLLS)
                    self.state = 1161
                    self.specialArgs()
                    pass
                elif token in [VisualFoxpro9Parser.EVENTS]:
                    self.state = 1162
                    self.match(VisualFoxpro9Parser.EVENTS)
                    pass
                elif token in [VisualFoxpro9Parser.ERROR]:
                    self.state = 1163
                    self.match(VisualFoxpro9Parser.ERROR)
                    pass
                elif token in [VisualFoxpro9Parser.FIELDS]:
                    self.state = 1164
                    self.match(VisualFoxpro9Parser.FIELDS)
                    pass
                elif token in [VisualFoxpro9Parser.GETS]:
                    self.state = 1165
                    self.match(VisualFoxpro9Parser.GETS)
                    pass
                elif token in [VisualFoxpro9Parser.MACROS]:
                    self.state = 1166
                    self.match(VisualFoxpro9Parser.MACROS)
                    pass
                elif token in [VisualFoxpro9Parser.MEMORY]:
                    self.state = 1167
                    self.match(VisualFoxpro9Parser.MEMORY)
                    pass
                elif token in [VisualFoxpro9Parser.MENUS]:
                    self.state = 1168
                    self.match(VisualFoxpro9Parser.MENUS)
                    pass
                elif token in [VisualFoxpro9Parser.POPUP]:
                    self.state = 1169
                    self.match(VisualFoxpro9Parser.POPUP)
                    pass
                elif token in [VisualFoxpro9Parser.PROGRAM]:
                    self.state = 1170
                    self.match(VisualFoxpro9Parser.PROGRAM)
                    pass
                elif token in [VisualFoxpro9Parser.PROMPT]:
                    self.state = 1171
                    self.match(VisualFoxpro9Parser.PROMPT)
                    pass
                elif token in [VisualFoxpro9Parser.READ]:
                    self.state = 1172
                    self.match(VisualFoxpro9Parser.READ)
                    self.state = 1174
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ALL:
                        self.state = 1173
                        self.match(VisualFoxpro9Parser.ALL)


                    pass
                elif token in [VisualFoxpro9Parser.RESOURCES]:
                    self.state = 1176
                    self.match(VisualFoxpro9Parser.RESOURCES)
                    self.state = 1177
                    self.expr(0)
                    pass
                elif token in [VisualFoxpro9Parser.TYPEAHEAD]:
                    self.state = 1178
                    self.match(VisualFoxpro9Parser.TYPEAHEAD)
                    pass
                elif token in [VisualFoxpro9Parser.WINDOW]:
                    self.state = 1179
                    self.match(VisualFoxpro9Parser.WINDOW)
                    pass
                elif token in [VisualFoxpro9Parser.EOF, VisualFoxpro9Parser.NL]:
                    pass
                else:
                    pass
                pass

            elif la_ == 60:
                localctx = VisualFoxpro9Parser.ReportContext(self, localctx)
                self.enterOuterAlt(localctx, 60)
                self.state = 1182
                self.match(VisualFoxpro9Parser.REPORT)
                self.state = 1183
                self.match(VisualFoxpro9Parser.FORM)
                self.state = 1186
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.QUESTION]:
                    self.state = 1184
                    self.match(VisualFoxpro9Parser.QUESTION)
                    pass
                elif token in [VisualFoxpro9Parser.T__0, VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.BLOB_LITERAL, VisualFoxpro9Parser.SEMICOLON, VisualFoxpro9Parser.AMPERSAND, VisualFoxpro9Parser.COMMERCIALAT, VisualFoxpro9Parser.PLUS_SIGN, VisualFoxpro9Parser.MINUS_SIGN, VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.RIGHTBRACKET, VisualFoxpro9Parser.LEFTBRACE, VisualFoxpro9Parser.RIGHTBRACE, VisualFoxpro9Parser.LEFTPAREN, VisualFoxpro9Parser.RIGHTPAREN, VisualFoxpro9Parser.BACKSLASH, VisualFoxpro9Parser.EXCLAMATION, VisualFoxpro9Parser.HASH, VisualFoxpro9Parser.DOUBLEEQUALS, VisualFoxpro9Parser.NOTEQUALS, VisualFoxpro9Parser.MODULO, VisualFoxpro9Parser.EQUALS, VisualFoxpro9Parser.CARAT, VisualFoxpro9Parser.COMMA, VisualFoxpro9Parser.DOLLAR, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE, VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.NODEFAULT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.ID]:
                    self.state = 1185
                    self.specialExpr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.TO or _la==VisualFoxpro9Parser.NOEJECT or _la==VisualFoxpro9Parser.NOCONSOLE:
                    self.state = 1195
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualFoxpro9Parser.NOEJECT]:
                        self.state = 1188
                        self.match(VisualFoxpro9Parser.NOEJECT)
                        pass
                    elif token in [VisualFoxpro9Parser.TO]:
                        self.state = 1189
                        self.match(VisualFoxpro9Parser.TO)
                        self.state = 1190
                        self.match(VisualFoxpro9Parser.PRINTER)
                        self.state = 1192
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.PROMPT:
                            self.state = 1191
                            self.match(VisualFoxpro9Parser.PROMPT)


                        pass
                    elif token in [VisualFoxpro9Parser.NOCONSOLE]:
                        self.state = 1194
                        self.match(VisualFoxpro9Parser.NOCONSOLE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1199
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 61:
                localctx = VisualFoxpro9Parser.DllDeclareContext(self, localctx)
                self.enterOuterAlt(localctx, 61)
                self.state = 1200
                self.match(VisualFoxpro9Parser.DECLARE)
                self.state = 1202
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                if la_ == 1:
                    self.state = 1201
                    localctx.returnType = self.datatype()


                self.state = 1204
                self.identifier()
                self.state = 1205
                self.match(VisualFoxpro9Parser.IN)
                self.state = 1206
                self.specialExpr()
                self.state = 1209
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1207
                    self.match(VisualFoxpro9Parser.AS)
                    self.state = 1208
                    localctx.alias = self.identifier()


                self.state = 1212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 1211
                    self.dllArgs()


                pass

            elif la_ == 62:
                localctx = VisualFoxpro9Parser.NodefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 62)
                self.state = 1214
                self.match(VisualFoxpro9Parser.NODEFAULT)
                pass

            elif la_ == 63:
                localctx = VisualFoxpro9Parser.ShellRunContext(self, localctx)
                self.enterOuterAlt(localctx, 63)
                self.state = 1215
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.EXCLAMATION or _la==VisualFoxpro9Parser.RUN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1218
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                if la_ == 1:
                    self.state = 1216
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    self.state = 1217
                    self.identifier()


                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)) | (1 << (VisualFoxpro9Parser.ORDER - 128)) | (1 << (VisualFoxpro9Parser.SEEK - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)) | (1 << (VisualFoxpro9Parser.DROP - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                    self.state = 1220
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==VisualFoxpro9Parser.NL:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1225
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 64:
                localctx = VisualFoxpro9Parser.AssertContext(self, localctx)
                self.enterOuterAlt(localctx, 64)
                self.state = 1226
                self.match(VisualFoxpro9Parser.ASSERT)
                self.state = 1227
                self.expr(0)
                self.state = 1230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.MESSAGE:
                    self.state = 1228
                    self.match(VisualFoxpro9Parser.MESSAGE)
                    self.state = 1229
                    self.expr(0)


                pass

            elif la_ == 65:
                localctx = VisualFoxpro9Parser.ExprCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 65)
                self.state = 1232
                self.match(VisualFoxpro9Parser.EQUALS)
                self.state = 1233
                self.expr(0)
                pass

            elif la_ == 66:
                localctx = VisualFoxpro9Parser.ComplexIdCmdContext(self, localctx)
                self.enterOuterAlt(localctx, 66)
                self.state = 1234
                self.complexId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryConditionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.QueryConditionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def scopeClause(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ScopeClauseContext,0)


        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def WHILE(self):
            return self.getToken(VisualFoxpro9Parser.WHILE, 0)

        def NOOPTIMIZE(self):
            return self.getToken(VisualFoxpro9Parser.NOOPTIMIZE, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_queryCondition

        def accept(self, visitor):
            if hasattr(visitor, "visitQueryCondition"):
                return visitor.visitQueryCondition(self)
            else:
                return visitor.visitChildren(self)




    def queryCondition(self):

        localctx = VisualFoxpro9Parser.QueryConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_queryCondition)
        try:
            self.state = 1243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1237
                self.scopeClause()
                pass
            elif token in [VisualFoxpro9Parser.FOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1238
                self.match(VisualFoxpro9Parser.FOR)
                self.state = 1239
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.WHILE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1240
                self.match(VisualFoxpro9Parser.WHILE)
                self.state = 1241
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.NOOPTIMIZE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1242
                self.match(VisualFoxpro9Parser.NOOPTIMIZE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DllArgsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DllArgsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def dllArg(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.DllArgContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.DllArgContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_dllArgs

        def accept(self, visitor):
            if hasattr(visitor, "visitDllArgs"):
                return visitor.visitDllArgs(self)
            else:
                return visitor.visitChildren(self)




    def dllArgs(self):

        localctx = VisualFoxpro9Parser.DllArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_dllArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            self.dllArg()
            self.state = 1250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.COMMA:
                self.state = 1246
                self.match(VisualFoxpro9Parser.COMMA)
                self.state = 1247
                self.dllArg()
                self.state = 1252
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DllArgContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DllArgContext, self).__init__(parent, invokingState)
            self.parser = parser

        def datatype(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DatatypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_dllArg

        def accept(self, visitor):
            if hasattr(visitor, "visitDllArg"):
                return visitor.visitDllArg(self)
            else:
                return visitor.visitChildren(self)




    def dllArg(self):

        localctx = VisualFoxpro9Parser.DllArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dllArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            self.datatype()
            self.state = 1255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.COMMERCIALAT:
                self.state = 1254
                self.match(VisualFoxpro9Parser.COMMERCIALAT)


            self.state = 1258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (VisualFoxpro9Parser.ASSERT - 39)) | (1 << (VisualFoxpro9Parser.TO - 39)) | (1 << (VisualFoxpro9Parser.DO - 39)) | (1 << (VisualFoxpro9Parser.IN - 39)) | (1 << (VisualFoxpro9Parser.AS - 39)) | (1 << (VisualFoxpro9Parser.IF - 39)) | (1 << (VisualFoxpro9Parser.ELIF - 39)) | (1 << (VisualFoxpro9Parser.ELSE - 39)) | (1 << (VisualFoxpro9Parser.ENDIF - 39)) | (1 << (VisualFoxpro9Parser.ON - 39)) | (1 << (VisualFoxpro9Parser.OFF - 39)) | (1 << (VisualFoxpro9Parser.ERROR - 39)) | (1 << (VisualFoxpro9Parser.WITH - 39)) | (1 << (VisualFoxpro9Parser.STORE - 39)) | (1 << (VisualFoxpro9Parser.EXTERNAL - 39)) | (1 << (VisualFoxpro9Parser.ARRAY - 39)) | (1 << (VisualFoxpro9Parser.DELETE - 39)) | (1 << (VisualFoxpro9Parser.RECALL - 39)) | (1 << (VisualFoxpro9Parser.FILE - 39)) | (1 << (VisualFoxpro9Parser.SET - 39)) | (1 << (VisualFoxpro9Parser.RELEASE - 39)) | (1 << (VisualFoxpro9Parser.RECYCLE - 39)) | (1 << (VisualFoxpro9Parser.CREATE - 39)) | (1 << (VisualFoxpro9Parser.TABLE - 39)) | (1 << (VisualFoxpro9Parser.DBF - 39)) | (1 << (VisualFoxpro9Parser.NAME - 39)) | (1 << (VisualFoxpro9Parser.FREE - 39)) | (1 << (VisualFoxpro9Parser.SELECT - 39)) | (1 << (VisualFoxpro9Parser.USE - 39)) | (1 << (VisualFoxpro9Parser.READ - 39)) | (1 << (VisualFoxpro9Parser.EVENTS - 39)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 39)) | (1 << (VisualFoxpro9Parser.CLEAR - 39)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 39)) | (1 << (VisualFoxpro9Parser.ENDPROC - 39)) | (1 << (VisualFoxpro9Parser.DEFINE - 39)) | (1 << (VisualFoxpro9Parser.CLASS - 39)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 39)) | (1 << (VisualFoxpro9Parser.LOCATE - 39)) | (1 << (VisualFoxpro9Parser.CONTINUE - 39)) | (1 << (VisualFoxpro9Parser.FOR - 39)) | (1 << (VisualFoxpro9Parser.ENDFOR - 39)) | (1 << (VisualFoxpro9Parser.WHILE - 39)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 39)) | (1 << (VisualFoxpro9Parser.STATUS - 39)) | (1 << (VisualFoxpro9Parser.BAR - 39)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 39)) | (1 << (VisualFoxpro9Parser.CURSOR - 39)) | (1 << (VisualFoxpro9Parser.REFRESH - 39)) | (1 << (VisualFoxpro9Parser.BELL - 39)) | (1 << (VisualFoxpro9Parser.CENTURY - 39)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 39)) | (1 << (VisualFoxpro9Parser.DATE - 39)) | (1 << (VisualFoxpro9Parser.ADD - 39)) | (1 << (VisualFoxpro9Parser.OBJECT - 39)) | (1 << (VisualFoxpro9Parser.REPLACE - 39)) | (1 << (VisualFoxpro9Parser.LIBRARY - 39)) | (1 << (VisualFoxpro9Parser.SHARED - 39)) | (1 << (VisualFoxpro9Parser.WAIT - 39)) | (1 << (VisualFoxpro9Parser.WINDOW - 39)) | (1 << (VisualFoxpro9Parser.NOWAIT - 39)))) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (VisualFoxpro9Parser.NOCLEAR - 103)) | (1 << (VisualFoxpro9Parser.NOTIFY - 103)) | (1 << (VisualFoxpro9Parser.ENDDO - 103)) | (1 << (VisualFoxpro9Parser.DECLARE - 103)) | (1 << (VisualFoxpro9Parser.ERASE - 103)) | (1 << (VisualFoxpro9Parser.SYSMENU - 103)) | (1 << (VisualFoxpro9Parser.CLOCK - 103)) | (1 << (VisualFoxpro9Parser.RETURN - 103)) | (1 << (VisualFoxpro9Parser.PARAMETER - 103)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 103)) | (1 << (VisualFoxpro9Parser.EXACT - 103)) | (1 << (VisualFoxpro9Parser.ALL - 103)) | (1 << (VisualFoxpro9Parser.COUNT - 103)) | (1 << (VisualFoxpro9Parser.GOTO - 103)) | (1 << (VisualFoxpro9Parser.TOP - 103)) | (1 << (VisualFoxpro9Parser.BOTTOM - 103)) | (1 << (VisualFoxpro9Parser.RECORD - 103)) | (1 << (VisualFoxpro9Parser.CLOSE - 103)) | (1 << (VisualFoxpro9Parser.APPEND - 103)) | (1 << (VisualFoxpro9Parser.BLANK - 103)) | (1 << (VisualFoxpro9Parser.NOMENU - 103)) | (1 << (VisualFoxpro9Parser.CASE - 103)) | (1 << (VisualFoxpro9Parser.ENDCASE - 103)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 103)) | (1 << (VisualFoxpro9Parser.FROM - 103)) | (1 << (VisualFoxpro9Parser.REPORT - 103)) | (1 << (VisualFoxpro9Parser.FORM - 103)) | (1 << (VisualFoxpro9Parser.NOEJECT - 103)) | (1 << (VisualFoxpro9Parser.PRINTER - 103)) | (1 << (VisualFoxpro9Parser.PROMPT - 103)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 103)) | (1 << (VisualFoxpro9Parser.DB4 - 103)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 103)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 103)) | (1 << (VisualFoxpro9Parser.COPY - 103)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 103)) | (1 << (VisualFoxpro9Parser.DELETED - 103)) | (1 << (VisualFoxpro9Parser.SUM - 103)) | (1 << (VisualFoxpro9Parser.DISTINCT - 103)) | (1 << (VisualFoxpro9Parser.INTO - 103)) | (1 << (VisualFoxpro9Parser.NEXT - 103)) | (1 << (VisualFoxpro9Parser.REST - 103)) | (1 << (VisualFoxpro9Parser.SKIPKW - 103)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 103)) | (1 << (VisualFoxpro9Parser.NEAR - 103)) | (1 << (VisualFoxpro9Parser.MKDIR - 103)) | (1 << (VisualFoxpro9Parser.RMDIR - 103)) | (1 << (VisualFoxpro9Parser.KEY - 103)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 103)) | (1 << (VisualFoxpro9Parser.LABEL - 103)) | (1 << (VisualFoxpro9Parser.PLAIN - 103)) | (1 << (VisualFoxpro9Parser.MENU - 103)) | (1 << (VisualFoxpro9Parser.AT - 103)) | (1 << (VisualFoxpro9Parser.LINE - 103)) | (1 << (VisualFoxpro9Parser.SCREEN - 103)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 103)) | (1 << (VisualFoxpro9Parser.PAD - 103)) | (1 << (VisualFoxpro9Parser.OF - 103)) | (1 << (VisualFoxpro9Parser.COLOR - 103)) | (1 << (VisualFoxpro9Parser.SCHEME - 103)) | (1 << (VisualFoxpro9Parser.BEFORE - 103)) | (1 << (VisualFoxpro9Parser.AFTER - 103)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 103)) | (1 << (VisualFoxpro9Parser.FONT - 103)))) != 0) or ((((_la - 167)) & ~0x3f) == 0 and ((1 << (_la - 167)) & ((1 << (VisualFoxpro9Parser.STYLE - 167)) | (1 << (VisualFoxpro9Parser.MARK - 167)) | (1 << (VisualFoxpro9Parser.MESSAGE - 167)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 167)) | (1 << (VisualFoxpro9Parser.POPUP - 167)) | (1 << (VisualFoxpro9Parser.EXTENDED - 167)) | (1 << (VisualFoxpro9Parser.SHADOW - 167)) | (1 << (VisualFoxpro9Parser.MARGIN - 167)) | (1 << (VisualFoxpro9Parser.RELATIVE - 167)) | (1 << (VisualFoxpro9Parser.SELECTION - 167)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 167)) | (1 << (VisualFoxpro9Parser.SAME - 167)) | (1 << (VisualFoxpro9Parser.NOSHOW - 167)) | (1 << (VisualFoxpro9Parser.STEP - 167)) | (1 << (VisualFoxpro9Parser.THEN - 167)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 167)) | (1 << (VisualFoxpro9Parser.IFDEF - 167)) | (1 << (VisualFoxpro9Parser.PUSH - 167)) | (1 << (VisualFoxpro9Parser.POP - 167)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 167)) | (1 << (VisualFoxpro9Parser.ENDWITH - 167)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 167)) | (1 << (VisualFoxpro9Parser.ALIAS - 167)) | (1 << (VisualFoxpro9Parser.ORDER - 167)) | (1 << (VisualFoxpro9Parser.SEEK - 167)) | (1 << (VisualFoxpro9Parser.WHERE - 167)) | (1 << (VisualFoxpro9Parser.FILTER - 167)) | (1 << (VisualFoxpro9Parser.RENAME - 167)) | (1 << (VisualFoxpro9Parser.INCLUDE - 167)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 167)) | (1 << (VisualFoxpro9Parser.BY - 167)) | (1 << (VisualFoxpro9Parser.UNIQUE - 167)) | (1 << (VisualFoxpro9Parser.INDEX - 167)) | (1 << (VisualFoxpro9Parser.TAG - 167)) | (1 << (VisualFoxpro9Parser.COMPACT - 167)) | (1 << (VisualFoxpro9Parser.ASCENDING - 167)) | (1 << (VisualFoxpro9Parser.DESCENDING - 167)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 167)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 167)) | (1 << (VisualFoxpro9Parser.DIMENSION - 167)) | (1 << (VisualFoxpro9Parser.NOT - 167)) | (1 << (VisualFoxpro9Parser.AND - 167)) | (1 << (VisualFoxpro9Parser.OR - 167)) | (1 << (VisualFoxpro9Parser.SCAN - 167)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 167)) | (1 << (VisualFoxpro9Parser.NULL - 167)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 167)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 167)) | (1 << (VisualFoxpro9Parser.DLLS - 167)) | (1 << (VisualFoxpro9Parser.MACROS - 167)) | (1 << (VisualFoxpro9Parser.NUMBER - 167)) | (1 << (VisualFoxpro9Parser.ZAP - 167)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 167)) | (1 << (VisualFoxpro9Parser.DEFAULT - 167)) | (1 << (VisualFoxpro9Parser.SAVE - 167)) | (1 << (VisualFoxpro9Parser.NOSAVE - 167)) | (1 << (VisualFoxpro9Parser.DATABASE - 167)) | (1 << (VisualFoxpro9Parser.TABLES - 167)) | (1 << (VisualFoxpro9Parser.INDEXES - 167)) | (1 << (VisualFoxpro9Parser.PACK - 167)) | (1 << (VisualFoxpro9Parser.REINDEX - 167)))) != 0) or ((((_la - 231)) & ~0x3f) == 0 and ((1 << (_la - 231)) & ((1 << (VisualFoxpro9Parser.PROGRAM - 231)) | (1 << (VisualFoxpro9Parser.SCOPE - 231)) | (1 << (VisualFoxpro9Parser.THROW - 231)) | (1 << (VisualFoxpro9Parser.EACH - 231)) | (1 << (VisualFoxpro9Parser.CAST - 231)) | (1 << (VisualFoxpro9Parser.RUN - 231)) | (1 << (VisualFoxpro9Parser.TRY - 231)) | (1 << (VisualFoxpro9Parser.CATCH - 231)) | (1 << (VisualFoxpro9Parser.FINALLY - 231)) | (1 << (VisualFoxpro9Parser.ENDTRY - 231)) | (1 << (VisualFoxpro9Parser.BROWSE - 231)) | (1 << (VisualFoxpro9Parser.INSERT - 231)) | (1 << (VisualFoxpro9Parser.VALUES - 231)) | (1 << (VisualFoxpro9Parser.MEMVAR - 231)) | (1 << (VisualFoxpro9Parser.TYPE - 231)) | (1 << (VisualFoxpro9Parser.SCATTER - 231)) | (1 << (VisualFoxpro9Parser.GATHER - 231)) | (1 << (VisualFoxpro9Parser.EXCEPT - 231)) | (1 << (VisualFoxpro9Parser.LIKE - 231)) | (1 << (VisualFoxpro9Parser.FIELDS - 231)) | (1 << (VisualFoxpro9Parser.ALTER - 231)) | (1 << (VisualFoxpro9Parser.COLUMN - 231)) | (1 << (VisualFoxpro9Parser.DROP - 231)) | (1 << (VisualFoxpro9Parser.HELP - 231)) | (1 << (VisualFoxpro9Parser.SAY - 231)) | (1 << (VisualFoxpro9Parser.COLLECTION - 231)) | (1 << (VisualFoxpro9Parser.SYSTEM - 231)) | (1 << (VisualFoxpro9Parser.TALK - 231)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 231)) | (1 << (VisualFoxpro9Parser.RELATION - 231)) | (1 << (VisualFoxpro9Parser.ID - 231)))) != 0):
                self.state = 1257
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OnErrorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.OnErrorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)

        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)

        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_onError

        def accept(self, visitor):
            if hasattr(visitor, "visitOnError"):
                return visitor.visitOnError(self)
            else:
                return visitor.visitChildren(self)




    def onError(self):

        localctx = VisualFoxpro9Parser.OnErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_onError)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.match(VisualFoxpro9Parser.ON)
            self.state = 1261
            self.match(VisualFoxpro9Parser.ERROR)
            self.state = 1263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.CHDIR - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (VisualFoxpro9Parser.DEBUGOUT - 258)) | (1 << (VisualFoxpro9Parser.HELP - 258)) | (1 << (VisualFoxpro9Parser.SAY - 258)) | (1 << (VisualFoxpro9Parser.COLLECTION - 258)) | (1 << (VisualFoxpro9Parser.SYSTEM - 258)) | (1 << (VisualFoxpro9Parser.TALK - 258)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 258)) | (1 << (VisualFoxpro9Parser.RELATION - 258)) | (1 << (VisualFoxpro9Parser.ID - 258)))) != 0):
                self.state = 1262
                self.cmd()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OnShutdownContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.OnShutdownContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)

        def SHUTDOWN(self):
            return self.getToken(VisualFoxpro9Parser.SHUTDOWN, 0)

        def cmd(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.CmdContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_onShutdown

        def accept(self, visitor):
            if hasattr(visitor, "visitOnShutdown"):
                return visitor.visitOnShutdown(self)
            else:
                return visitor.visitChildren(self)




    def onShutdown(self):

        localctx = VisualFoxpro9Parser.OnShutdownContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_onShutdown)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1265
            self.match(VisualFoxpro9Parser.ON)
            self.state = 1266
            self.match(VisualFoxpro9Parser.SHUTDOWN)
            self.state = 1268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.CHDIR - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (VisualFoxpro9Parser.DEBUGOUT - 258)) | (1 << (VisualFoxpro9Parser.HELP - 258)) | (1 << (VisualFoxpro9Parser.SAY - 258)) | (1 << (VisualFoxpro9Parser.COLLECTION - 258)) | (1 << (VisualFoxpro9Parser.SYSTEM - 258)) | (1 << (VisualFoxpro9Parser.TALK - 258)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 258)) | (1 << (VisualFoxpro9Parser.RELATION - 258)) | (1 << (VisualFoxpro9Parser.ID - 258)))) != 0):
                self.state = 1267
                self.cmd()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetCmdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SetCmdContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.setword = None # Token
            self.ofExpr = None # SpecialExprContext
            self.inExpr = None # SpecialExprContext

        def ALTERNATE(self):
            return self.getToken(VisualFoxpro9Parser.ALTERNATE, 0)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)

        def OFF(self):
            return self.getToken(VisualFoxpro9Parser.OFF, 0)

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)

        def ASSERTS(self):
            return self.getToken(VisualFoxpro9Parser.ASSERTS, 0)

        def BELL(self):
            return self.getToken(VisualFoxpro9Parser.BELL, 0)

        def CENTURY(self):
            return self.getToken(VisualFoxpro9Parser.CENTURY, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def ROLLOVER(self):
            return self.getToken(VisualFoxpro9Parser.ROLLOVER, 0)

        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)

        def ALIAS(self):
            return self.getToken(VisualFoxpro9Parser.ALIAS, 0)

        def CLOCK(self):
            return self.getToken(VisualFoxpro9Parser.CLOCK, 0)

        def STATUS(self):
            return self.getToken(VisualFoxpro9Parser.STATUS, 0)

        def COMPATIBLE(self):
            return self.getToken(VisualFoxpro9Parser.COMPATIBLE, 0)

        def DB4(self):
            return self.getToken(VisualFoxpro9Parser.DB4, 0)

        def FOXPLUS(self):
            return self.getToken(VisualFoxpro9Parser.FOXPLUS, 0)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)

        def NOPROMPT(self):
            return self.getToken(VisualFoxpro9Parser.NOPROMPT, 0)

        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def DATE(self):
            return self.getToken(VisualFoxpro9Parser.DATE, 0)

        def DELETED(self):
            return self.getToken(VisualFoxpro9Parser.DELETED, 0)

        def EXACT(self):
            return self.getToken(VisualFoxpro9Parser.EXACT, 0)

        def EXCLUSIVE(self):
            return self.getToken(VisualFoxpro9Parser.EXCLUSIVE, 0)

        def FILTER(self):
            return self.getToken(VisualFoxpro9Parser.FILTER, 0)

        def HELP(self):
            return self.getToken(VisualFoxpro9Parser.HELP, 0)

        def COLLECTION(self):
            return self.getToken(VisualFoxpro9Parser.COLLECTION, 0)

        def SYSTEM(self):
            return self.getToken(VisualFoxpro9Parser.SYSTEM, 0)

        def INDEX(self):
            return self.getToken(VisualFoxpro9Parser.INDEX, 0)

        def LIBRARY(self):
            return self.getToken(VisualFoxpro9Parser.LIBRARY, 0)

        def MEMOWIDTH(self):
            return self.getToken(VisualFoxpro9Parser.MEMOWIDTH, 0)

        def MULTILOCKS(self):
            return self.getToken(VisualFoxpro9Parser.MULTILOCKS, 0)

        def NEAR(self):
            return self.getToken(VisualFoxpro9Parser.NEAR, 0)

        def NOTIFY(self):
            return self.getToken(VisualFoxpro9Parser.NOTIFY, 0)

        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)

        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)

        def PRINTER(self):
            return self.getToken(VisualFoxpro9Parser.PRINTER, 0)

        def DEFAULT(self):
            return self.getToken(VisualFoxpro9Parser.DEFAULT, 0)

        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def REFRESH(self):
            return self.getToken(VisualFoxpro9Parser.REFRESH, 0)

        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)

        def RELATION(self):
            return self.getToken(VisualFoxpro9Parser.RELATION, 0)

        def SAFETY(self):
            return self.getToken(VisualFoxpro9Parser.SAFETY, 0)

        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)

        def SYSMENU(self):
            return self.getToken(VisualFoxpro9Parser.SYSMENU, 0)

        def SAVE(self):
            return self.getToken(VisualFoxpro9Parser.SAVE, 0)

        def NOSAVE(self):
            return self.getToken(VisualFoxpro9Parser.NOSAVE, 0)

        def TABLEPROMPT(self):
            return self.getToken(VisualFoxpro9Parser.TABLEPROMPT, 0)

        def TALK(self):
            return self.getToken(VisualFoxpro9Parser.TALK, 0)

        def TYPEAHEAD(self):
            return self.getToken(VisualFoxpro9Parser.TYPEAHEAD, 0)

        def UNIQUE(self):
            return self.getToken(VisualFoxpro9Parser.UNIQUE, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_setCmd

        def accept(self, visitor):
            if hasattr(visitor, "visitSetCmd"):
                return visitor.visitSetCmd(self)
            else:
                return visitor.visitChildren(self)




    def setCmd(self):

        localctx = VisualFoxpro9Parser.SetCmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_setCmd)
        self._la = 0 # Token type
        try:
            self.state = 1491
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ALTERNATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1270
                localctx.setword = self.match(VisualFoxpro9Parser.ALTERNATE)
                self.state = 1278
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1271
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1272
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1273
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1274
                    self.specialExpr()
                    self.state = 1276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ADDITIVE:
                        self.state = 1275
                        self.match(VisualFoxpro9Parser.ADDITIVE)


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.ASSERTS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1280
                localctx.setword = self.match(VisualFoxpro9Parser.ASSERTS)
                self.state = 1281
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.BELL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1282
                localctx.setword = self.match(VisualFoxpro9Parser.BELL)
                self.state = 1287
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1283
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1284
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1285
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1286
                    self.specialExpr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.CENTURY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1289
                localctx.setword = self.match(VisualFoxpro9Parser.CENTURY)
                self.state = 1300
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1290
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1291
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1292
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1298
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                        self.state = 1293
                        self.expr(0)
                        self.state = 1296
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.ROLLOVER:
                            self.state = 1294
                            self.match(VisualFoxpro9Parser.ROLLOVER)
                            self.state = 1295
                            self.expr(0)




                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.CLASSLIB]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1302
                localctx.setword = self.match(VisualFoxpro9Parser.CLASSLIB)
                self.state = 1303
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1304
                self.specialExpr()
                self.state = 1307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1305
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1306
                    self.specialExpr()


                self.state = 1311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ALIAS:
                    self.state = 1309
                    self.match(VisualFoxpro9Parser.ALIAS)
                    self.state = 1310
                    self.specialExpr()


                self.state = 1314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1313
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [VisualFoxpro9Parser.CLOCK]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1316
                localctx.setword = self.match(VisualFoxpro9Parser.CLOCK)
                self.state = 1327
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1317
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1318
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.STATUS]:
                    self.state = 1319
                    self.match(VisualFoxpro9Parser.STATUS)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1320
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1325
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                        self.state = 1321
                        self.expr(0)
                        self.state = 1322
                        self.match(VisualFoxpro9Parser.COMMA)
                        self.state = 1323
                        self.expr(0)


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.COMPATIBLE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1329
                localctx.setword = self.match(VisualFoxpro9Parser.COMPATIBLE)
                self.state = 1330
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF or _la==VisualFoxpro9Parser.DB4 or _la==VisualFoxpro9Parser.FOXPLUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.PROMPT or _la==VisualFoxpro9Parser.NOPROMPT:
                    self.state = 1331
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.PROMPT or _la==VisualFoxpro9Parser.NOPROMPT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [VisualFoxpro9Parser.CURSOR]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1334
                localctx.setword = self.match(VisualFoxpro9Parser.CURSOR)
                self.state = 1335
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.DATE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1336
                localctx.setword = self.match(VisualFoxpro9Parser.DATE)
                self.state = 1338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                if la_ == 1:
                    self.state = 1337
                    self.match(VisualFoxpro9Parser.TO)


                self.state = 1340
                self.identifier()
                pass
            elif token in [VisualFoxpro9Parser.DELETED]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1341
                localctx.setword = self.match(VisualFoxpro9Parser.DELETED)
                self.state = 1342
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.EXACT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1343
                localctx.setword = self.match(VisualFoxpro9Parser.EXACT)
                self.state = 1344
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.EXCLUSIVE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1345
                localctx.setword = self.match(VisualFoxpro9Parser.EXCLUSIVE)
                self.state = 1346
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.FILTER]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1347
                localctx.setword = self.match(VisualFoxpro9Parser.FILTER)
                self.state = 1348
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 1349
                    self.specialExpr()
                    self.state = 1352
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.IN:
                        self.state = 1350
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1351
                        self.specialExpr()




                pass
            elif token in [VisualFoxpro9Parser.HELP]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1356
                localctx.setword = self.match(VisualFoxpro9Parser.HELP)
                self.state = 1368
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1357
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1358
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1359
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1361
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                        self.state = 1360
                        self.specialExpr()


                    pass
                elif token in [VisualFoxpro9Parser.COLLECTION]:
                    self.state = 1363
                    self.match(VisualFoxpro9Parser.COLLECTION)
                    self.state = 1365
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                        self.state = 1364
                        self.specialExpr()


                    pass
                elif token in [VisualFoxpro9Parser.SYSTEM]:
                    self.state = 1367
                    self.match(VisualFoxpro9Parser.SYSTEM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.INDEX]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1370
                localctx.setword = self.match(VisualFoxpro9Parser.INDEX)
                self.state = 1371
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                    self.state = 1372
                    self.specialExpr()


                pass
            elif token in [VisualFoxpro9Parser.LIBRARY]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1375
                localctx.setword = self.match(VisualFoxpro9Parser.LIBRARY)
                self.state = 1376
                self.match(VisualFoxpro9Parser.TO)

                self.state = 1377
                self.specialExpr()
                self.state = 1379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1378
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [VisualFoxpro9Parser.MEMOWIDTH]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1381
                localctx.setword = self.match(VisualFoxpro9Parser.MEMOWIDTH)
                self.state = 1382
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1383
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.MULTILOCKS]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1384
                localctx.setword = self.match(VisualFoxpro9Parser.MULTILOCKS)
                self.state = 1385
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.NEAR]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1386
                localctx.setword = self.match(VisualFoxpro9Parser.NEAR)
                self.state = 1387
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.NOTIFY]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1388
                localctx.setword = self.match(VisualFoxpro9Parser.NOTIFY)
                self.state = 1390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.CURSOR:
                    self.state = 1389
                    self.match(VisualFoxpro9Parser.CURSOR)


                self.state = 1392
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.ORDER]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1393
                localctx.setword = self.match(VisualFoxpro9Parser.ORDER)
                self.state = 1394
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1411
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                if la_ == 1:
                    self.state = 1395
                    self.specialExpr()

                elif la_ == 2:
                    self.state = 1397
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
                    if la_ == 1:
                        self.state = 1396
                        self.match(VisualFoxpro9Parser.TAG)


                    self.state = 1399
                    self.specialExpr()
                    self.state = 1402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.OF:
                        self.state = 1400
                        self.match(VisualFoxpro9Parser.OF)
                        self.state = 1401
                        localctx.ofExpr = self.specialExpr()


                    self.state = 1406
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.IN:
                        self.state = 1404
                        self.match(VisualFoxpro9Parser.IN)
                        self.state = 1405
                        localctx.inExpr = self.specialExpr()


                    self.state = 1409
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING:
                        self.state = 1408
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.ASCENDING or _la==VisualFoxpro9Parser.DESCENDING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                pass
            elif token in [VisualFoxpro9Parser.PRINTER]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1413
                localctx.setword = self.match(VisualFoxpro9Parser.PRINTER)
                self.state = 1429
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1414
                    self.match(VisualFoxpro9Parser.ON)
                    self.state = 1416
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.PROMPT:
                        self.state = 1415
                        self.match(VisualFoxpro9Parser.PROMPT)


                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1418
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1419
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1427
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                    if la_ == 1:
                        self.state = 1420
                        self.match(VisualFoxpro9Parser.DEFAULT)

                    elif la_ == 2:
                        self.state = 1421
                        self.match(VisualFoxpro9Parser.NAME)
                        self.state = 1422
                        self.specialExpr()

                    elif la_ == 3:
                        self.state = 1423
                        self.specialExpr()
                        self.state = 1425
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.ADDITIVE:
                            self.state = 1424
                            self.match(VisualFoxpro9Parser.ADDITIVE)




                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.PROCEDURE]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1431
                localctx.setword = self.match(VisualFoxpro9Parser.PROCEDURE)
                self.state = 1432
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1433
                self.specialExpr()
                self.state = 1438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualFoxpro9Parser.COMMA:
                    self.state = 1434
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1435
                    self.specialExpr()
                    self.state = 1440
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1441
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [VisualFoxpro9Parser.REFRESH]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1444
                localctx.setword = self.match(VisualFoxpro9Parser.REFRESH)
                self.state = 1445
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1446
                self.expr(0)
                self.state = 1449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.COMMA:
                    self.state = 1447
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1448
                    self.expr(0)


                pass
            elif token in [VisualFoxpro9Parser.RELATION]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1451
                localctx.setword = self.match(VisualFoxpro9Parser.RELATION)
                self.state = 1452
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1453
                self.expr(0)
                self.state = 1454
                self.match(VisualFoxpro9Parser.INTO)
                self.state = 1455
                self.specialExpr()
                self.state = 1458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.IN:
                    self.state = 1456
                    self.match(VisualFoxpro9Parser.IN)
                    self.state = 1457
                    self.specialExpr()


                self.state = 1461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.ADDITIVE:
                    self.state = 1460
                    self.match(VisualFoxpro9Parser.ADDITIVE)


                pass
            elif token in [VisualFoxpro9Parser.SAFETY]:
                self.enterOuterAlt(localctx, 26)
                self.state = 1463
                localctx.setword = self.match(VisualFoxpro9Parser.SAFETY)
                self.state = 1464
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.STATUS]:
                self.enterOuterAlt(localctx, 27)
                self.state = 1465
                localctx.setword = self.match(VisualFoxpro9Parser.STATUS)
                self.state = 1467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.BAR:
                    self.state = 1466
                    self.match(VisualFoxpro9Parser.BAR)


                self.state = 1469
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.SYSMENU]:
                self.enterOuterAlt(localctx, 28)
                self.state = 1470
                localctx.setword = self.match(VisualFoxpro9Parser.SYSMENU)
                self.state = 1480
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.ON]:
                    self.state = 1471
                    self.match(VisualFoxpro9Parser.ON)
                    pass
                elif token in [VisualFoxpro9Parser.OFF]:
                    self.state = 1472
                    self.match(VisualFoxpro9Parser.OFF)
                    pass
                elif token in [VisualFoxpro9Parser.TO]:
                    self.state = 1473
                    self.match(VisualFoxpro9Parser.TO)
                    self.state = 1476
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                    if la_ == 1:
                        self.state = 1474
                        self.match(VisualFoxpro9Parser.DEFAULT)

                    elif la_ == 2:
                        self.state = 1475
                        self.expr(0)


                    pass
                elif token in [VisualFoxpro9Parser.SAVE]:
                    self.state = 1478
                    self.match(VisualFoxpro9Parser.SAVE)
                    pass
                elif token in [VisualFoxpro9Parser.NOSAVE]:
                    self.state = 1479
                    self.match(VisualFoxpro9Parser.NOSAVE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.TABLEPROMPT]:
                self.enterOuterAlt(localctx, 29)
                self.state = 1482
                localctx.setword = self.match(VisualFoxpro9Parser.TABLEPROMPT)
                self.state = 1483
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.TALK]:
                self.enterOuterAlt(localctx, 30)
                self.state = 1484
                localctx.setword = self.match(VisualFoxpro9Parser.TALK)
                self.state = 1485
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualFoxpro9Parser.TYPEAHEAD]:
                self.enterOuterAlt(localctx, 31)
                self.state = 1486
                localctx.setword = self.match(VisualFoxpro9Parser.TYPEAHEAD)
                self.state = 1487
                self.match(VisualFoxpro9Parser.TO)
                self.state = 1488
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.UNIQUE]:
                self.enterOuterAlt(localctx, 32)
                self.state = 1489
                localctx.setword = self.match(VisualFoxpro9Parser.UNIQUE)
                self.state = 1490
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.ON or _la==VisualFoxpro9Parser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationItemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DeclarationItemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def idAttr2(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttr2Context,0)


        def arrayIndex(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArrayIndexContext,0)


        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def asTypeOf(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeOfContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_declarationItem

        def accept(self, visitor):
            if hasattr(visitor, "visitDeclarationItem"):
                return visitor.visitDeclarationItem(self)
            else:
                return visitor.visitChildren(self)




    def declarationItem(self):

        localctx = VisualFoxpro9Parser.DeclarationItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_declarationItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.state = 1493
                self.idAttr2()
                self.state = 1494
                self.arrayIndex()
                pass

            elif la_ == 2:
                self.state = 1496
                self.idAttr()
                self.state = 1498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.AS:
                    self.state = 1497
                    self.asTypeOf()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AsTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.AsTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)

        def datatype(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.DatatypeContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_asType

        def accept(self, visitor):
            if hasattr(visitor, "visitAsType"):
                return visitor.visitAsType(self)
            else:
                return visitor.visitChildren(self)




    def asType(self):

        localctx = VisualFoxpro9Parser.AsTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_asType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1502
            self.match(VisualFoxpro9Parser.AS)
            self.state = 1503
            self.datatype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AsTypeOfContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.AsTypeOfContext, self).__init__(parent, invokingState)
            self.parser = parser

        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)


        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def specialExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_asTypeOf

        def accept(self, visitor):
            if hasattr(visitor, "visitAsTypeOf"):
                return visitor.visitAsTypeOf(self)
            else:
                return visitor.visitChildren(self)




    def asTypeOf(self):

        localctx = VisualFoxpro9Parser.AsTypeOfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_asTypeOf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1505
            self.asType()
            self.state = 1508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.OF:
                self.state = 1506
                self.match(VisualFoxpro9Parser.OF)
                self.state = 1507
                self.specialExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ArgsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_args

        def accept(self, visitor):
            if hasattr(visitor, "visitArgs"):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = VisualFoxpro9Parser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_args)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self.expr(0)
            self.state = 1515
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,239,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1511
                    self.match(VisualFoxpro9Parser.COMMA)
                    self.state = 1512
                    self.expr(0) 
                self.state = 1517
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,239,self._ctx)

            self.state = 1519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.COMMA:
                self.state = 1518
                self.match(VisualFoxpro9Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecialArgsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SpecialArgsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def specialExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.SpecialExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.SpecialExprContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_specialArgs

        def accept(self, visitor):
            if hasattr(visitor, "visitSpecialArgs"):
                return visitor.visitSpecialArgs(self)
            else:
                return visitor.visitChildren(self)




    def specialArgs(self):

        localctx = VisualFoxpro9Parser.SpecialArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_specialArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1521
            self.specialExpr()
            self.state = 1526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.COMMA:
                self.state = 1522
                self.match(VisualFoxpro9Parser.COMMA)
                self.state = 1523
                self.specialExpr()
                self.state = 1528
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ReferenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_reference

        def accept(self, visitor):
            if hasattr(visitor, "visitReference"):
                return visitor.visitReference(self)
            else:
                return visitor.visitChildren(self)




    def reference(self):

        localctx = VisualFoxpro9Parser.ReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1529
            self.match(VisualFoxpro9Parser.COMMERCIALAT)
            self.state = 1530
            self.idAttr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgReplaceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ArgReplaceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_argReplace

        def accept(self, visitor):
            if hasattr(visitor, "visitArgReplace"):
                return visitor.visitArgReplace(self)
            else:
                return visitor.visitChildren(self)




    def argReplace(self):

        localctx = VisualFoxpro9Parser.ArgReplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_argReplace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1532
            self.match(VisualFoxpro9Parser.AMPERSAND)
            self.state = 1533
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ExprContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_expr

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.ExprContext, self).copyFrom(ctx)


    class ComparisonContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.ComparisonContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def NOTEQUALS(self):
            return self.getToken(VisualFoxpro9Parser.NOTEQUALS, 0)
        def GTEQ(self):
            return self.getToken(VisualFoxpro9Parser.GTEQ, 0)
        def LTEQ(self):
            return self.getToken(VisualFoxpro9Parser.LTEQ, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitComparison"):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)


    class CastExprContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.CastExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(VisualFoxpro9Parser.CAST, 0)
        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def asType(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AsTypeContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitCastExpr"):
                return visitor.visitCastExpr(self)
            else:
                return visitor.visitChildren(self)


    class UnaryNegationContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.UnaryNegationContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitUnaryNegation"):
                return visitor.visitUnaryNegation(self)
            else:
                return visitor.visitChildren(self)


    class AtomExprContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.AtomExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def atom(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AtomContext,0)

        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)
        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitAtomExpr"):
                return visitor.visitAtomExpr(self)
            else:
                return visitor.visitChildren(self)


    class PowerContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.PowerContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitPower"):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)


    class MultiplicationContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.MultiplicationContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitMultiplication"):
                return visitor.visitMultiplication(self)
            else:
                return visitor.visitChildren(self)


    class BooleanOperationContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.BooleanOperationContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)

        def OR(self):
            return self.getToken(VisualFoxpro9Parser.OR, 0)
        def OTHEROR(self):
            return self.getToken(VisualFoxpro9Parser.OTHEROR, 0)
        def AND(self):
            return self.getToken(VisualFoxpro9Parser.AND, 0)
        def OTHERAND(self):
            return self.getToken(VisualFoxpro9Parser.OTHERAND, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitBooleanOperation"):
                return visitor.visitBooleanOperation(self)
            else:
                return visitor.visitChildren(self)


    class SubExprContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.SubExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitSubExpr"):
                return visitor.visitSubExpr(self)
            else:
                return visitor.visitChildren(self)


    class ModuloContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.ModuloContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitModulo"):
                return visitor.visitModulo(self)
            else:
                return visitor.visitChildren(self)


    class BooleanNegationContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.BooleanNegationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)

        def NOT(self):
            return self.getToken(VisualFoxpro9Parser.NOT, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitBooleanNegation"):
                return visitor.visitBooleanNegation(self)
            else:
                return visitor.visitChildren(self)


    class ConstantExprContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.ConstantExprContext, self).__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ConstantContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitConstantExpr"):
                return visitor.visitConstantExpr(self)
            else:
                return visitor.visitChildren(self)


    class AdditionContext(ExprContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ExprContext)
            super(VisualFoxpro9Parser.AdditionContext, self).__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def accept(self, visitor):
            if hasattr(visitor, "visitAddition"):
                return visitor.visitAddition(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VisualFoxpro9Parser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 86
        self.enterRecursionRule(localctx, 86, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                localctx = VisualFoxpro9Parser.SubExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1536
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 1537
                self.expr(0)
                self.state = 1538
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass

            elif la_ == 2:
                localctx = VisualFoxpro9Parser.UnaryNegationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1540
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.PLUS_SIGN or _la==VisualFoxpro9Parser.MINUS_SIGN):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1541
                self.expr(11)
                pass

            elif la_ == 3:
                localctx = VisualFoxpro9Parser.BooleanNegationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1542
                _la = self._input.LA(1)
                if not(_la==VisualFoxpro9Parser.EXCLAMATION or _la==VisualFoxpro9Parser.NOT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1543
                self.expr(10)
                pass

            elif la_ == 4:
                localctx = VisualFoxpro9Parser.ConstantExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1544
                self.constant()
                pass

            elif la_ == 5:
                localctx = VisualFoxpro9Parser.CastExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1545
                self.match(VisualFoxpro9Parser.CAST)
                self.state = 1546
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 1547
                self.expr(0)
                self.state = 1548
                self.asType()
                self.state = 1549
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass

            elif la_ == 6:
                localctx = VisualFoxpro9Parser.AtomExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.PERIOD:
                    self.state = 1551
                    self.match(VisualFoxpro9Parser.PERIOD)


                self.state = 1554
                self.atom()
                self.state = 1556
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                if la_ == 1:
                    self.state = 1555
                    self.trailer()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1584
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,247,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1582
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                    if la_ == 1:
                        localctx = VisualFoxpro9Parser.PowerContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1560
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1564
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [VisualFoxpro9Parser.ASTERISK]:
                            self.state = 1561
                            self.match(VisualFoxpro9Parser.ASTERISK)
                            self.state = 1562
                            self.match(VisualFoxpro9Parser.ASTERISK)
                            pass
                        elif token in [VisualFoxpro9Parser.CARAT]:
                            self.state = 1563
                            self.match(VisualFoxpro9Parser.CARAT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1566
                        self.expr(10)
                        pass

                    elif la_ == 2:
                        localctx = VisualFoxpro9Parser.MultiplicationContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1567
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1568
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.ASTERISK or _la==VisualFoxpro9Parser.FORWARDSLASH):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1569
                        self.expr(9)
                        pass

                    elif la_ == 3:
                        localctx = VisualFoxpro9Parser.ModuloContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1570
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1571
                        self.match(VisualFoxpro9Parser.MODULO)
                        self.state = 1572
                        self.expr(8)
                        pass

                    elif la_ == 4:
                        localctx = VisualFoxpro9Parser.AdditionContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1573
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1574
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==VisualFoxpro9Parser.PLUS_SIGN or _la==VisualFoxpro9Parser.MINUS_SIGN):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1575
                        self.expr(7)
                        pass

                    elif la_ == 5:
                        localctx = VisualFoxpro9Parser.ComparisonContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1576
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1577
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.DOLLAR))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1578
                        self.expr(6)
                        pass

                    elif la_ == 6:
                        localctx = VisualFoxpro9Parser.BooleanOperationContext(self, VisualFoxpro9Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1579
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1580
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 208)) & ~0x3f) == 0 and ((1 << (_la - 208)) & ((1 << (VisualFoxpro9Parser.AND - 208)) | (1 << (VisualFoxpro9Parser.OTHERAND - 208)) | (1 << (VisualFoxpro9Parser.OR - 208)) | (1 << (VisualFoxpro9Parser.OTHEROR - 208)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1581
                        self.expr(5)
                        pass

             
                self.state = 1586
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,247,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ComplexIdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ComplexIdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.AtomContext,0)


        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_complexId

        def accept(self, visitor):
            if hasattr(visitor, "visitComplexId"):
                return visitor.visitComplexId(self)
            else:
                return visitor.visitChildren(self)




    def complexId(self):

        localctx = VisualFoxpro9Parser.ComplexIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_complexId)
        self._la = 0 # Token type
        try:
            self.state = 1598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.PERIOD:
                    self.state = 1587
                    self.match(VisualFoxpro9Parser.PERIOD)


                self.state = 1590
                self.atom()
                self.state = 1591
                self.trailer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1593
                self.match(VisualFoxpro9Parser.PERIOD)
                self.state = 1594
                self.atom()
                self.state = 1596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTPAREN))) != 0):
                    self.state = 1595
                    self.trailer()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.AtomContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def reference(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ReferenceContext,0)


        def argReplace(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgReplaceContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_atom

        def accept(self, visitor):
            if hasattr(visitor, "visitAtom"):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = VisualFoxpro9Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_atom)
        try:
            self.state = 1603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.NODEFAULT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1600
                self.identifier()
                pass
            elif token in [VisualFoxpro9Parser.COMMERCIALAT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1601
                self.reference()
                pass
            elif token in [VisualFoxpro9Parser.AMPERSAND]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1602
                self.argReplace()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.TrailerContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_trailer

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.TrailerContext, self).copyFrom(ctx)



    class FuncCallTrailerContext(TrailerContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.TrailerContext)
            super(VisualFoxpro9Parser.FuncCallTrailerContext, self).__init__(parser)
            self.copyFrom(ctx)

        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)

        def args(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ArgsContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitFuncCallTrailer"):
                return visitor.visitFuncCallTrailer(self)
            else:
                return visitor.visitChildren(self)


    class IdentTrailerContext(TrailerContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.TrailerContext)
            super(VisualFoxpro9Parser.IdentTrailerContext, self).__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)

        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitIdentTrailer"):
                return visitor.visitIdentTrailer(self)
            else:
                return visitor.visitChildren(self)



    def trailer(self):

        localctx = VisualFoxpro9Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 1625
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.LEFTPAREN]:
                localctx = VisualFoxpro9Parser.FuncCallTrailerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1615
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.LEFTPAREN]:
                    self.state = 1605
                    self.match(VisualFoxpro9Parser.LEFTPAREN)
                    self.state = 1607
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                        self.state = 1606
                        self.args()


                    self.state = 1609
                    self.match(VisualFoxpro9Parser.RIGHTPAREN)
                    pass
                elif token in [VisualFoxpro9Parser.LEFTBRACKET]:
                    self.state = 1610
                    self.match(VisualFoxpro9Parser.LEFTBRACKET)
                    self.state = 1612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (VisualFoxpro9Parser.DBF - 65)) | (1 << (VisualFoxpro9Parser.NAME - 65)) | (1 << (VisualFoxpro9Parser.FREE - 65)) | (1 << (VisualFoxpro9Parser.SELECT - 65)) | (1 << (VisualFoxpro9Parser.USE - 65)) | (1 << (VisualFoxpro9Parser.READ - 65)) | (1 << (VisualFoxpro9Parser.EVENTS - 65)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 65)) | (1 << (VisualFoxpro9Parser.CLEAR - 65)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 65)) | (1 << (VisualFoxpro9Parser.ENDPROC - 65)) | (1 << (VisualFoxpro9Parser.DEFINE - 65)) | (1 << (VisualFoxpro9Parser.CLASS - 65)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 65)) | (1 << (VisualFoxpro9Parser.LOCATE - 65)) | (1 << (VisualFoxpro9Parser.CONTINUE - 65)) | (1 << (VisualFoxpro9Parser.FOR - 65)) | (1 << (VisualFoxpro9Parser.ENDFOR - 65)) | (1 << (VisualFoxpro9Parser.WHILE - 65)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 65)) | (1 << (VisualFoxpro9Parser.STATUS - 65)) | (1 << (VisualFoxpro9Parser.BAR - 65)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 65)) | (1 << (VisualFoxpro9Parser.CURSOR - 65)) | (1 << (VisualFoxpro9Parser.REFRESH - 65)) | (1 << (VisualFoxpro9Parser.BELL - 65)) | (1 << (VisualFoxpro9Parser.CENTURY - 65)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 65)) | (1 << (VisualFoxpro9Parser.DATE - 65)) | (1 << (VisualFoxpro9Parser.ADD - 65)) | (1 << (VisualFoxpro9Parser.OBJECT - 65)) | (1 << (VisualFoxpro9Parser.REPLACE - 65)) | (1 << (VisualFoxpro9Parser.LIBRARY - 65)) | (1 << (VisualFoxpro9Parser.SHARED - 65)) | (1 << (VisualFoxpro9Parser.WAIT - 65)) | (1 << (VisualFoxpro9Parser.WINDOW - 65)) | (1 << (VisualFoxpro9Parser.NOWAIT - 65)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 65)) | (1 << (VisualFoxpro9Parser.NOTIFY - 65)) | (1 << (VisualFoxpro9Parser.ENDDO - 65)) | (1 << (VisualFoxpro9Parser.DECLARE - 65)) | (1 << (VisualFoxpro9Parser.ERASE - 65)) | (1 << (VisualFoxpro9Parser.SYSMENU - 65)) | (1 << (VisualFoxpro9Parser.CLOCK - 65)) | (1 << (VisualFoxpro9Parser.RETURN - 65)) | (1 << (VisualFoxpro9Parser.PARAMETER - 65)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 65)) | (1 << (VisualFoxpro9Parser.EXACT - 65)) | (1 << (VisualFoxpro9Parser.ALL - 65)) | (1 << (VisualFoxpro9Parser.COUNT - 65)) | (1 << (VisualFoxpro9Parser.GOTO - 65)) | (1 << (VisualFoxpro9Parser.TOP - 65)) | (1 << (VisualFoxpro9Parser.BOTTOM - 65)) | (1 << (VisualFoxpro9Parser.RECORD - 65)) | (1 << (VisualFoxpro9Parser.CLOSE - 65)) | (1 << (VisualFoxpro9Parser.APPEND - 65)) | (1 << (VisualFoxpro9Parser.BLANK - 65)) | (1 << (VisualFoxpro9Parser.NOMENU - 65)) | (1 << (VisualFoxpro9Parser.CASE - 65)) | (1 << (VisualFoxpro9Parser.ENDCASE - 65)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 65)) | (1 << (VisualFoxpro9Parser.FROM - 65)) | (1 << (VisualFoxpro9Parser.REPORT - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualFoxpro9Parser.FORM - 129)) | (1 << (VisualFoxpro9Parser.NOEJECT - 129)) | (1 << (VisualFoxpro9Parser.PRINTER - 129)) | (1 << (VisualFoxpro9Parser.PROMPT - 129)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 129)) | (1 << (VisualFoxpro9Parser.DB4 - 129)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 129)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 129)) | (1 << (VisualFoxpro9Parser.COPY - 129)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 129)) | (1 << (VisualFoxpro9Parser.DELETED - 129)) | (1 << (VisualFoxpro9Parser.SUM - 129)) | (1 << (VisualFoxpro9Parser.DISTINCT - 129)) | (1 << (VisualFoxpro9Parser.INTO - 129)) | (1 << (VisualFoxpro9Parser.NEXT - 129)) | (1 << (VisualFoxpro9Parser.REST - 129)) | (1 << (VisualFoxpro9Parser.SKIPKW - 129)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 129)) | (1 << (VisualFoxpro9Parser.NEAR - 129)) | (1 << (VisualFoxpro9Parser.MKDIR - 129)) | (1 << (VisualFoxpro9Parser.RMDIR - 129)) | (1 << (VisualFoxpro9Parser.KEY - 129)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 129)) | (1 << (VisualFoxpro9Parser.LABEL - 129)) | (1 << (VisualFoxpro9Parser.PLAIN - 129)) | (1 << (VisualFoxpro9Parser.MENU - 129)) | (1 << (VisualFoxpro9Parser.AT - 129)) | (1 << (VisualFoxpro9Parser.LINE - 129)) | (1 << (VisualFoxpro9Parser.SCREEN - 129)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 129)) | (1 << (VisualFoxpro9Parser.PAD - 129)) | (1 << (VisualFoxpro9Parser.OF - 129)) | (1 << (VisualFoxpro9Parser.COLOR - 129)) | (1 << (VisualFoxpro9Parser.SCHEME - 129)) | (1 << (VisualFoxpro9Parser.BEFORE - 129)) | (1 << (VisualFoxpro9Parser.AFTER - 129)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 129)) | (1 << (VisualFoxpro9Parser.FONT - 129)) | (1 << (VisualFoxpro9Parser.STYLE - 129)) | (1 << (VisualFoxpro9Parser.MARK - 129)) | (1 << (VisualFoxpro9Parser.MESSAGE - 129)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.POPUP - 129)) | (1 << (VisualFoxpro9Parser.EXTENDED - 129)) | (1 << (VisualFoxpro9Parser.SHADOW - 129)) | (1 << (VisualFoxpro9Parser.MARGIN - 129)) | (1 << (VisualFoxpro9Parser.RELATIVE - 129)) | (1 << (VisualFoxpro9Parser.SELECTION - 129)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 129)) | (1 << (VisualFoxpro9Parser.SAME - 129)) | (1 << (VisualFoxpro9Parser.NOSHOW - 129)) | (1 << (VisualFoxpro9Parser.STEP - 129)) | (1 << (VisualFoxpro9Parser.THEN - 129)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 129)) | (1 << (VisualFoxpro9Parser.IFDEF - 129)) | (1 << (VisualFoxpro9Parser.PUSH - 129)) | (1 << (VisualFoxpro9Parser.POP - 129)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 129)) | (1 << (VisualFoxpro9Parser.ENDWITH - 129)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 129)) | (1 << (VisualFoxpro9Parser.ALIAS - 129)) | (1 << (VisualFoxpro9Parser.ORDER - 129)) | (1 << (VisualFoxpro9Parser.SEEK - 129)) | (1 << (VisualFoxpro9Parser.WHERE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (VisualFoxpro9Parser.FILTER - 193)) | (1 << (VisualFoxpro9Parser.RENAME - 193)) | (1 << (VisualFoxpro9Parser.INCLUDE - 193)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 193)) | (1 << (VisualFoxpro9Parser.BY - 193)) | (1 << (VisualFoxpro9Parser.UNIQUE - 193)) | (1 << (VisualFoxpro9Parser.INDEX - 193)) | (1 << (VisualFoxpro9Parser.TAG - 193)) | (1 << (VisualFoxpro9Parser.COMPACT - 193)) | (1 << (VisualFoxpro9Parser.ASCENDING - 193)) | (1 << (VisualFoxpro9Parser.DESCENDING - 193)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 193)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 193)) | (1 << (VisualFoxpro9Parser.DIMENSION - 193)) | (1 << (VisualFoxpro9Parser.NOT - 193)) | (1 << (VisualFoxpro9Parser.AND - 193)) | (1 << (VisualFoxpro9Parser.OR - 193)) | (1 << (VisualFoxpro9Parser.SCAN - 193)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 193)) | (1 << (VisualFoxpro9Parser.NULL - 193)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 193)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 193)) | (1 << (VisualFoxpro9Parser.DLLS - 193)) | (1 << (VisualFoxpro9Parser.MACROS - 193)) | (1 << (VisualFoxpro9Parser.NUMBER - 193)) | (1 << (VisualFoxpro9Parser.ZAP - 193)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 193)) | (1 << (VisualFoxpro9Parser.DEFAULT - 193)) | (1 << (VisualFoxpro9Parser.SAVE - 193)) | (1 << (VisualFoxpro9Parser.NOSAVE - 193)) | (1 << (VisualFoxpro9Parser.DATABASE - 193)) | (1 << (VisualFoxpro9Parser.TABLES - 193)) | (1 << (VisualFoxpro9Parser.INDEXES - 193)) | (1 << (VisualFoxpro9Parser.PACK - 193)) | (1 << (VisualFoxpro9Parser.REINDEX - 193)) | (1 << (VisualFoxpro9Parser.PROGRAM - 193)) | (1 << (VisualFoxpro9Parser.SCOPE - 193)) | (1 << (VisualFoxpro9Parser.THROW - 193)) | (1 << (VisualFoxpro9Parser.EACH - 193)) | (1 << (VisualFoxpro9Parser.CAST - 193)) | (1 << (VisualFoxpro9Parser.RUN - 193)) | (1 << (VisualFoxpro9Parser.TRY - 193)) | (1 << (VisualFoxpro9Parser.CATCH - 193)) | (1 << (VisualFoxpro9Parser.FINALLY - 193)) | (1 << (VisualFoxpro9Parser.ENDTRY - 193)) | (1 << (VisualFoxpro9Parser.BROWSE - 193)) | (1 << (VisualFoxpro9Parser.INSERT - 193)) | (1 << (VisualFoxpro9Parser.VALUES - 193)) | (1 << (VisualFoxpro9Parser.MEMVAR - 193)) | (1 << (VisualFoxpro9Parser.TYPE - 193)) | (1 << (VisualFoxpro9Parser.SCATTER - 193)) | (1 << (VisualFoxpro9Parser.GATHER - 193)) | (1 << (VisualFoxpro9Parser.EXCEPT - 193)) | (1 << (VisualFoxpro9Parser.LIKE - 193)) | (1 << (VisualFoxpro9Parser.FIELDS - 193)) | (1 << (VisualFoxpro9Parser.ALTER - 193)) | (1 << (VisualFoxpro9Parser.COLUMN - 193)) | (1 << (VisualFoxpro9Parser.DROP - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (VisualFoxpro9Parser.HELP - 262)) | (1 << (VisualFoxpro9Parser.SAY - 262)) | (1 << (VisualFoxpro9Parser.COLLECTION - 262)) | (1 << (VisualFoxpro9Parser.SYSTEM - 262)) | (1 << (VisualFoxpro9Parser.TALK - 262)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 262)) | (1 << (VisualFoxpro9Parser.RELATION - 262)) | (1 << (VisualFoxpro9Parser.ID - 262)))) != 0):
                        self.state = 1611
                        self.args()


                    self.state = 1614
                    self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1618
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
                if la_ == 1:
                    self.state = 1617
                    self.trailer()


                pass
            elif token in [VisualFoxpro9Parser.PERIOD]:
                localctx = VisualFoxpro9Parser.IdentTrailerContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1620
                self.match(VisualFoxpro9Parser.PERIOD)
                self.state = 1621
                self.identifier()
                self.state = 1623
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 1622
                    self.trailer()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathnameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PathnameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def pathElement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.PathElementContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.PathElementContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_pathname

        def accept(self, visitor):
            if hasattr(visitor, "visitPathname"):
                return visitor.visitPathname(self)
            else:
                return visitor.visitChildren(self)




    def pathname(self):

        localctx = VisualFoxpro9Parser.PathnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_pathname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                self.state = 1627
                self.identifier()
                self.state = 1628
                self.match(VisualFoxpro9Parser.COLON)


            self.state = 1633 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 1632
                    self.pathElement()

                else:
                    raise NoViableAltException(self)
                self.state = 1635 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.PathElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)

        def BACKSLASH(self):
            return self.getToken(VisualFoxpro9Parser.BACKSLASH, 0)

        def NOTEQUALS(self):
            return self.getToken(VisualFoxpro9Parser.NOTEQUALS, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_pathElement

        def accept(self, visitor):
            if hasattr(visitor, "visitPathElement"):
                return visitor.visitPathElement(self)
            else:
                return visitor.visitChildren(self)




    def pathElement(self):

        localctx = VisualFoxpro9Parser.PathElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_pathElement)
        try:
            self.state = 1662
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ASSERT, VisualFoxpro9Parser.TO, VisualFoxpro9Parser.DO, VisualFoxpro9Parser.IN, VisualFoxpro9Parser.AS, VisualFoxpro9Parser.IF, VisualFoxpro9Parser.ELIF, VisualFoxpro9Parser.ELSE, VisualFoxpro9Parser.ENDIF, VisualFoxpro9Parser.ON, VisualFoxpro9Parser.OFF, VisualFoxpro9Parser.ERROR, VisualFoxpro9Parser.WITH, VisualFoxpro9Parser.STORE, VisualFoxpro9Parser.EXTERNAL, VisualFoxpro9Parser.ARRAY, VisualFoxpro9Parser.DELETE, VisualFoxpro9Parser.RECALL, VisualFoxpro9Parser.FILE, VisualFoxpro9Parser.SET, VisualFoxpro9Parser.RELEASE, VisualFoxpro9Parser.RECYCLE, VisualFoxpro9Parser.CREATE, VisualFoxpro9Parser.TABLE, VisualFoxpro9Parser.DBF, VisualFoxpro9Parser.NAME, VisualFoxpro9Parser.FREE, VisualFoxpro9Parser.SELECT, VisualFoxpro9Parser.USE, VisualFoxpro9Parser.READ, VisualFoxpro9Parser.EVENTS, VisualFoxpro9Parser.SHUTDOWN, VisualFoxpro9Parser.CLEAR, VisualFoxpro9Parser.PROCEDURE, VisualFoxpro9Parser.ENDPROC, VisualFoxpro9Parser.DEFINE, VisualFoxpro9Parser.CLASS, VisualFoxpro9Parser.ENDDEFINE, VisualFoxpro9Parser.LOCATE, VisualFoxpro9Parser.CONTINUE, VisualFoxpro9Parser.FOR, VisualFoxpro9Parser.ENDFOR, VisualFoxpro9Parser.WHILE, VisualFoxpro9Parser.NOOPTIMIZE, VisualFoxpro9Parser.STATUS, VisualFoxpro9Parser.BAR, VisualFoxpro9Parser.MEMOWIDTH, VisualFoxpro9Parser.CURSOR, VisualFoxpro9Parser.REFRESH, VisualFoxpro9Parser.BELL, VisualFoxpro9Parser.CENTURY, VisualFoxpro9Parser.COMPATIBLE, VisualFoxpro9Parser.DATE, VisualFoxpro9Parser.ADD, VisualFoxpro9Parser.OBJECT, VisualFoxpro9Parser.REPLACE, VisualFoxpro9Parser.LIBRARY, VisualFoxpro9Parser.SHARED, VisualFoxpro9Parser.WAIT, VisualFoxpro9Parser.WINDOW, VisualFoxpro9Parser.NOWAIT, VisualFoxpro9Parser.NOCLEAR, VisualFoxpro9Parser.NOTIFY, VisualFoxpro9Parser.ENDDO, VisualFoxpro9Parser.DECLARE, VisualFoxpro9Parser.ERASE, VisualFoxpro9Parser.SYSMENU, VisualFoxpro9Parser.CLOCK, VisualFoxpro9Parser.RETURN, VisualFoxpro9Parser.PARAMETER, VisualFoxpro9Parser.ALTERNATE, VisualFoxpro9Parser.EXACT, VisualFoxpro9Parser.ALL, VisualFoxpro9Parser.COUNT, VisualFoxpro9Parser.GOTO, VisualFoxpro9Parser.TOP, VisualFoxpro9Parser.BOTTOM, VisualFoxpro9Parser.RECORD, VisualFoxpro9Parser.CLOSE, VisualFoxpro9Parser.APPEND, VisualFoxpro9Parser.BLANK, VisualFoxpro9Parser.NOMENU, VisualFoxpro9Parser.CASE, VisualFoxpro9Parser.ENDCASE, VisualFoxpro9Parser.OTHERWISE, VisualFoxpro9Parser.FROM, VisualFoxpro9Parser.REPORT, VisualFoxpro9Parser.FORM, VisualFoxpro9Parser.NOEJECT, VisualFoxpro9Parser.PRINTER, VisualFoxpro9Parser.PROMPT, VisualFoxpro9Parser.NOPROMPT, VisualFoxpro9Parser.DB4, VisualFoxpro9Parser.FOXPLUS, VisualFoxpro9Parser.NOCONSOLE, VisualFoxpro9Parser.COPY, VisualFoxpro9Parser.STRUCTURE, VisualFoxpro9Parser.DELETED, VisualFoxpro9Parser.SUM, VisualFoxpro9Parser.DISTINCT, VisualFoxpro9Parser.INTO, VisualFoxpro9Parser.NEXT, VisualFoxpro9Parser.REST, VisualFoxpro9Parser.SKIPKW, VisualFoxpro9Parser.EXCLUSIVE, VisualFoxpro9Parser.NEAR, VisualFoxpro9Parser.MKDIR, VisualFoxpro9Parser.RMDIR, VisualFoxpro9Parser.KEY, VisualFoxpro9Parser.KEYBOARD, VisualFoxpro9Parser.LABEL, VisualFoxpro9Parser.PLAIN, VisualFoxpro9Parser.MENU, VisualFoxpro9Parser.AT, VisualFoxpro9Parser.LINE, VisualFoxpro9Parser.SCREEN, VisualFoxpro9Parser.NOMARGIN, VisualFoxpro9Parser.PAD, VisualFoxpro9Parser.OF, VisualFoxpro9Parser.COLOR, VisualFoxpro9Parser.SCHEME, VisualFoxpro9Parser.BEFORE, VisualFoxpro9Parser.AFTER, VisualFoxpro9Parser.NEGOTIATE, VisualFoxpro9Parser.FONT, VisualFoxpro9Parser.STYLE, VisualFoxpro9Parser.MARK, VisualFoxpro9Parser.MESSAGE, VisualFoxpro9Parser.ACTIVATE, VisualFoxpro9Parser.POPUP, VisualFoxpro9Parser.EXTENDED, VisualFoxpro9Parser.SHADOW, VisualFoxpro9Parser.MARGIN, VisualFoxpro9Parser.RELATIVE, VisualFoxpro9Parser.SELECTION, VisualFoxpro9Parser.DEACTIVATE, VisualFoxpro9Parser.SAME, VisualFoxpro9Parser.NOSHOW, VisualFoxpro9Parser.STEP, VisualFoxpro9Parser.THEN, VisualFoxpro9Parser.UNDEFINE, VisualFoxpro9Parser.IFDEF, VisualFoxpro9Parser.PUSH, VisualFoxpro9Parser.POP, VisualFoxpro9Parser.TIMEOUT, VisualFoxpro9Parser.ENDWITH, VisualFoxpro9Parser.TYPEAHEAD, VisualFoxpro9Parser.ALIAS, VisualFoxpro9Parser.ORDER, VisualFoxpro9Parser.SEEK, VisualFoxpro9Parser.WHERE, VisualFoxpro9Parser.FILTER, VisualFoxpro9Parser.RENAME, VisualFoxpro9Parser.INCLUDE, VisualFoxpro9Parser.CLASSLIB, VisualFoxpro9Parser.BY, VisualFoxpro9Parser.UNIQUE, VisualFoxpro9Parser.INDEX, VisualFoxpro9Parser.TAG, VisualFoxpro9Parser.COMPACT, VisualFoxpro9Parser.ASCENDING, VisualFoxpro9Parser.DESCENDING, VisualFoxpro9Parser.CANDIDATE, VisualFoxpro9Parser.ADDITIVE, VisualFoxpro9Parser.DIMENSION, VisualFoxpro9Parser.NOT, VisualFoxpro9Parser.AND, VisualFoxpro9Parser.OR, VisualFoxpro9Parser.SCAN, VisualFoxpro9Parser.ENDSCAN, VisualFoxpro9Parser.NULL, VisualFoxpro9Parser.BOOLEANCHAR, VisualFoxpro9Parser.NODEFAULT, VisualFoxpro9Parser.DLLS, VisualFoxpro9Parser.MACROS, VisualFoxpro9Parser.NUMBER, VisualFoxpro9Parser.ZAP, VisualFoxpro9Parser.ROLLOVER, VisualFoxpro9Parser.DEFAULT, VisualFoxpro9Parser.SAVE, VisualFoxpro9Parser.NOSAVE, VisualFoxpro9Parser.DATABASE, VisualFoxpro9Parser.TABLES, VisualFoxpro9Parser.INDEXES, VisualFoxpro9Parser.PACK, VisualFoxpro9Parser.REINDEX, VisualFoxpro9Parser.PROGRAM, VisualFoxpro9Parser.SCOPE, VisualFoxpro9Parser.THROW, VisualFoxpro9Parser.EACH, VisualFoxpro9Parser.CAST, VisualFoxpro9Parser.RUN, VisualFoxpro9Parser.TRY, VisualFoxpro9Parser.CATCH, VisualFoxpro9Parser.FINALLY, VisualFoxpro9Parser.ENDTRY, VisualFoxpro9Parser.BROWSE, VisualFoxpro9Parser.INSERT, VisualFoxpro9Parser.VALUES, VisualFoxpro9Parser.MEMVAR, VisualFoxpro9Parser.TYPE, VisualFoxpro9Parser.SCATTER, VisualFoxpro9Parser.GATHER, VisualFoxpro9Parser.EXCEPT, VisualFoxpro9Parser.LIKE, VisualFoxpro9Parser.FIELDS, VisualFoxpro9Parser.ALTER, VisualFoxpro9Parser.COLUMN, VisualFoxpro9Parser.DROP, VisualFoxpro9Parser.HELP, VisualFoxpro9Parser.SAY, VisualFoxpro9Parser.COLLECTION, VisualFoxpro9Parser.SYSTEM, VisualFoxpro9Parser.TALK, VisualFoxpro9Parser.PROGRAMCONTROL, VisualFoxpro9Parser.RELATION, VisualFoxpro9Parser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1637
                self.identifier()
                pass
            elif token in [VisualFoxpro9Parser.NUMBER_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1638
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                pass
            elif token in [VisualFoxpro9Parser.BACKSLASH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1639
                self.match(VisualFoxpro9Parser.BACKSLASH)
                pass
            elif token in [VisualFoxpro9Parser.SEMICOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1640
                self.match(VisualFoxpro9Parser.SEMICOLON)
                pass
            elif token in [VisualFoxpro9Parser.AMPERSAND]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1641
                self.match(VisualFoxpro9Parser.AMPERSAND)
                pass
            elif token in [VisualFoxpro9Parser.COMMERCIALAT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1642
                self.match(VisualFoxpro9Parser.COMMERCIALAT)
                pass
            elif token in [VisualFoxpro9Parser.PLUS_SIGN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1643
                self.match(VisualFoxpro9Parser.PLUS_SIGN)
                pass
            elif token in [VisualFoxpro9Parser.MINUS_SIGN]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1644
                self.match(VisualFoxpro9Parser.MINUS_SIGN)
                pass
            elif token in [VisualFoxpro9Parser.PERIOD]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1645
                self.match(VisualFoxpro9Parser.PERIOD)
                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACKET]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1646
                self.match(VisualFoxpro9Parser.LEFTBRACKET)
                pass
            elif token in [VisualFoxpro9Parser.RIGHTBRACKET]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1647
                self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1648
                self.match(VisualFoxpro9Parser.LEFTBRACE)
                pass
            elif token in [VisualFoxpro9Parser.RIGHTBRACE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1649
                self.match(VisualFoxpro9Parser.RIGHTBRACE)
                pass
            elif token in [VisualFoxpro9Parser.LEFTPAREN]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1650
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                pass
            elif token in [VisualFoxpro9Parser.RIGHTPAREN]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1651
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass
            elif token in [VisualFoxpro9Parser.EXCLAMATION]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1652
                self.match(VisualFoxpro9Parser.EXCLAMATION)
                pass
            elif token in [VisualFoxpro9Parser.HASH]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1653
                self.match(VisualFoxpro9Parser.HASH)
                pass
            elif token in [VisualFoxpro9Parser.DOUBLEEQUALS]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1654
                self.match(VisualFoxpro9Parser.DOUBLEEQUALS)
                pass
            elif token in [VisualFoxpro9Parser.NOTEQUALS]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1655
                self.match(VisualFoxpro9Parser.NOTEQUALS)
                pass
            elif token in [VisualFoxpro9Parser.MODULO]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1656
                self.match(VisualFoxpro9Parser.MODULO)
                pass
            elif token in [VisualFoxpro9Parser.EQUALS]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1657
                self.match(VisualFoxpro9Parser.EQUALS)
                pass
            elif token in [VisualFoxpro9Parser.CARAT]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1658
                self.match(VisualFoxpro9Parser.CARAT)
                pass
            elif token in [VisualFoxpro9Parser.COMMA]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1659
                self.match(VisualFoxpro9Parser.COMMA)
                pass
            elif token in [VisualFoxpro9Parser.DOLLAR]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1660
                self.match(VisualFoxpro9Parser.DOLLAR)
                pass
            elif token in [VisualFoxpro9Parser.T__0]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1661
                self.match(VisualFoxpro9Parser.T__0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecialExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.SpecialExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def pathname(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.PathnameContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_specialExpr

        def accept(self, visitor):
            if hasattr(visitor, "visitSpecialExpr"):
                return visitor.visitSpecialExpr(self)
            else:
                return visitor.visitChildren(self)




    def specialExpr(self):

        localctx = VisualFoxpro9Parser.SpecialExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_specialExpr)
        try:
            self.state = 1666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1664
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1665
                self.pathname()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ConstantContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_constant

     
        def copyFrom(self, ctx):
            super(VisualFoxpro9Parser.ConstantContext, self).copyFrom(ctx)



    class DateContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.DateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NUMBER_LITERAL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NUMBER_LITERAL)
            else:
                return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, i)
        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def accept(self, visitor):
            if hasattr(visitor, "visitDate"):
                return visitor.visitDate(self)
            else:
                return visitor.visitChildren(self)


    class BoolOrNullContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.BoolOrNullContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(VisualFoxpro9Parser.NULL, 0)
        def BOOLEANCHAR(self):
            return self.getToken(VisualFoxpro9Parser.BOOLEANCHAR, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitBoolOrNull"):
                return visitor.visitBoolOrNull(self)
            else:
                return visitor.visitChildren(self)


    class BlobContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.BlobContext, self).__init__(parser)
            self.copyFrom(ctx)

        def BLOB_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.BLOB_LITERAL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitBlob"):
                return visitor.visitBlob(self)
            else:
                return visitor.visitChildren(self)


    class StringContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.StringContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NL(self, i=None):
            if i is None:
                return self.getTokens(VisualFoxpro9Parser.NL)
            else:
                return self.getToken(VisualFoxpro9Parser.NL, i)

        def accept(self, visitor):
            if hasattr(visitor, "visitString"):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)


    class NumberOrCurrencyContext(ConstantContext):

        def __init__(self, parser, ctx): # actually a VisualFoxpro9Parser.ConstantContext)
            super(VisualFoxpro9Parser.NumberOrCurrencyContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NUMBER_LITERAL(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER_LITERAL, 0)

        def accept(self, visitor):
            if hasattr(visitor, "visitNumberOrCurrency"):
                return visitor.visitNumberOrCurrency(self)
            else:
                return visitor.visitChildren(self)



    def constant(self):

        localctx = VisualFoxpro9Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 1740
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.NUMBER_LITERAL, VisualFoxpro9Parser.DOLLAR]:
                localctx = VisualFoxpro9Parser.NumberOrCurrencyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualFoxpro9Parser.DOLLAR:
                    self.state = 1668
                    self.match(VisualFoxpro9Parser.DOLLAR)


                self.state = 1671
                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                pass
            elif token in [VisualFoxpro9Parser.PERIOD, VisualFoxpro9Parser.NULL]:
                localctx = VisualFoxpro9Parser.BoolOrNullContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1676
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.PERIOD]:
                    self.state = 1672
                    self.match(VisualFoxpro9Parser.PERIOD)
                    self.state = 1673
                    _la = self._input.LA(1)
                    if not(_la==VisualFoxpro9Parser.NULL or _la==VisualFoxpro9Parser.BOOLEANCHAR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1674
                    self.match(VisualFoxpro9Parser.PERIOD)
                    pass
                elif token in [VisualFoxpro9Parser.NULL]:
                    self.state = 1675
                    self.match(VisualFoxpro9Parser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACE]:
                localctx = VisualFoxpro9Parser.DateContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1678
                self.match(VisualFoxpro9Parser.LEFTBRACE)
                self.state = 1710
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.FORWARDSLASH]:
                    self.state = 1679
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    self.state = 1680
                    self.match(VisualFoxpro9Parser.FORWARDSLASH)
                    pass
                elif token in [VisualFoxpro9Parser.COLON]:
                    self.state = 1681
                    self.match(VisualFoxpro9Parser.COLON)
                    pass
                elif token in [VisualFoxpro9Parser.CARAT]:
                    self.state = 1682
                    self.match(VisualFoxpro9Parser.CARAT)
                    self.state = 1693
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                    if la_ == 1:
                        self.state = 1683
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 1684
                        self.match(VisualFoxpro9Parser.MINUS_SIGN)
                        self.state = 1685
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 1686
                        self.match(VisualFoxpro9Parser.MINUS_SIGN)
                        self.state = 1687
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        pass

                    elif la_ == 2:
                        self.state = 1688
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 1689
                        self.match(VisualFoxpro9Parser.FORWARDSLASH)
                        self.state = 1690
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 1691
                        self.match(VisualFoxpro9Parser.FORWARDSLASH)
                        self.state = 1692
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        pass


                    self.state = 1708
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualFoxpro9Parser.NUMBER_LITERAL or _la==VisualFoxpro9Parser.COMMA:
                        self.state = 1696
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.COMMA:
                            self.state = 1695
                            self.match(VisualFoxpro9Parser.COMMA)


                        self.state = 1698
                        self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                        self.state = 1705
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualFoxpro9Parser.COLON:
                            self.state = 1699
                            self.match(VisualFoxpro9Parser.COLON)
                            self.state = 1700
                            self.match(VisualFoxpro9Parser.NUMBER_LITERAL)
                            self.state = 1703
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==VisualFoxpro9Parser.COLON:
                                self.state = 1701
                                self.match(VisualFoxpro9Parser.COLON)
                                self.state = 1702
                                self.match(VisualFoxpro9Parser.NUMBER_LITERAL)




                        self.state = 1707
                        self.identifier()


                    pass
                elif token in [VisualFoxpro9Parser.RIGHTBRACE]:
                    pass
                else:
                    pass
                self.state = 1712
                self.match(VisualFoxpro9Parser.RIGHTBRACE)
                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACKET, VisualFoxpro9Parser.DOUBLEQUOTE, VisualFoxpro9Parser.SINGLEQUOTE]:
                localctx = VisualFoxpro9Parser.StringContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1737
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualFoxpro9Parser.SINGLEQUOTE]:
                    self.state = 1713
                    self.match(VisualFoxpro9Parser.SINGLEQUOTE)
                    self.state = 1717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)) | (1 << (VisualFoxpro9Parser.ORDER - 128)) | (1 << (VisualFoxpro9Parser.SEEK - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)) | (1 << (VisualFoxpro9Parser.DROP - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                        self.state = 1714
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==VisualFoxpro9Parser.SINGLEQUOTE or _la==VisualFoxpro9Parser.NL:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1719
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1720
                    self.match(VisualFoxpro9Parser.SINGLEQUOTE)
                    pass
                elif token in [VisualFoxpro9Parser.DOUBLEQUOTE]:
                    self.state = 1721
                    self.match(VisualFoxpro9Parser.DOUBLEQUOTE)
                    self.state = 1725
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.RIGHTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)) | (1 << (VisualFoxpro9Parser.ORDER - 128)) | (1 << (VisualFoxpro9Parser.SEEK - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)) | (1 << (VisualFoxpro9Parser.DROP - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                        self.state = 1722
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==VisualFoxpro9Parser.DOUBLEQUOTE or _la==VisualFoxpro9Parser.NL:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1727
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1728
                    self.match(VisualFoxpro9Parser.DOUBLEQUOTE)
                    pass
                elif token in [VisualFoxpro9Parser.LEFTBRACKET]:
                    self.state = 1729
                    self.match(VisualFoxpro9Parser.LEFTBRACKET)
                    self.state = 1733
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualFoxpro9Parser.T__0) | (1 << VisualFoxpro9Parser.NUMBER_LITERAL) | (1 << VisualFoxpro9Parser.BLOB_LITERAL) | (1 << VisualFoxpro9Parser.SEMICOLON) | (1 << VisualFoxpro9Parser.AMPERSAND) | (1 << VisualFoxpro9Parser.COMMERCIALAT) | (1 << VisualFoxpro9Parser.ASTERISK) | (1 << VisualFoxpro9Parser.PLUS_SIGN) | (1 << VisualFoxpro9Parser.MINUS_SIGN) | (1 << VisualFoxpro9Parser.FORWARDSLASH) | (1 << VisualFoxpro9Parser.PERIOD) | (1 << VisualFoxpro9Parser.LEFTBRACKET) | (1 << VisualFoxpro9Parser.LEFTBRACE) | (1 << VisualFoxpro9Parser.RIGHTBRACE) | (1 << VisualFoxpro9Parser.LEFTPAREN) | (1 << VisualFoxpro9Parser.RIGHTPAREN) | (1 << VisualFoxpro9Parser.BACKSLASH) | (1 << VisualFoxpro9Parser.LESSTHAN) | (1 << VisualFoxpro9Parser.GREATERTHAN) | (1 << VisualFoxpro9Parser.EXCLAMATION) | (1 << VisualFoxpro9Parser.HASH) | (1 << VisualFoxpro9Parser.DOUBLEEQUALS) | (1 << VisualFoxpro9Parser.NOTEQUALS) | (1 << VisualFoxpro9Parser.GTEQ) | (1 << VisualFoxpro9Parser.LTEQ) | (1 << VisualFoxpro9Parser.MODULO) | (1 << VisualFoxpro9Parser.EQUALS) | (1 << VisualFoxpro9Parser.CARAT) | (1 << VisualFoxpro9Parser.COMMA) | (1 << VisualFoxpro9Parser.DOLLAR) | (1 << VisualFoxpro9Parser.COLON) | (1 << VisualFoxpro9Parser.QUESTION) | (1 << VisualFoxpro9Parser.DOUBLEQUOTE) | (1 << VisualFoxpro9Parser.SINGLEQUOTE) | (1 << VisualFoxpro9Parser.COMMENT) | (1 << VisualFoxpro9Parser.LINECONT) | (1 << VisualFoxpro9Parser.NOTE) | (1 << VisualFoxpro9Parser.ASSERT) | (1 << VisualFoxpro9Parser.ASSERTS) | (1 << VisualFoxpro9Parser.TO) | (1 << VisualFoxpro9Parser.DO) | (1 << VisualFoxpro9Parser.IN) | (1 << VisualFoxpro9Parser.AS) | (1 << VisualFoxpro9Parser.IF) | (1 << VisualFoxpro9Parser.ELIF) | (1 << VisualFoxpro9Parser.ELSE) | (1 << VisualFoxpro9Parser.ENDIF) | (1 << VisualFoxpro9Parser.ON) | (1 << VisualFoxpro9Parser.OFF) | (1 << VisualFoxpro9Parser.ERROR) | (1 << VisualFoxpro9Parser.WITH) | (1 << VisualFoxpro9Parser.STORE) | (1 << VisualFoxpro9Parser.EXTERNAL) | (1 << VisualFoxpro9Parser.ARRAY) | (1 << VisualFoxpro9Parser.DELETE) | (1 << VisualFoxpro9Parser.RECALL) | (1 << VisualFoxpro9Parser.FILE) | (1 << VisualFoxpro9Parser.SET) | (1 << VisualFoxpro9Parser.RELEASE) | (1 << VisualFoxpro9Parser.RECYCLE) | (1 << VisualFoxpro9Parser.CREATE) | (1 << VisualFoxpro9Parser.TABLE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualFoxpro9Parser.TABLEPROMPT - 64)) | (1 << (VisualFoxpro9Parser.DBF - 64)) | (1 << (VisualFoxpro9Parser.NAME - 64)) | (1 << (VisualFoxpro9Parser.FREE - 64)) | (1 << (VisualFoxpro9Parser.SELECT - 64)) | (1 << (VisualFoxpro9Parser.USE - 64)) | (1 << (VisualFoxpro9Parser.READ - 64)) | (1 << (VisualFoxpro9Parser.EVENTS - 64)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 64)) | (1 << (VisualFoxpro9Parser.CLEAR - 64)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 64)) | (1 << (VisualFoxpro9Parser.ENDPROC - 64)) | (1 << (VisualFoxpro9Parser.DEFINE - 64)) | (1 << (VisualFoxpro9Parser.CLASS - 64)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 64)) | (1 << (VisualFoxpro9Parser.LOCATE - 64)) | (1 << (VisualFoxpro9Parser.CONTINUE - 64)) | (1 << (VisualFoxpro9Parser.FOR - 64)) | (1 << (VisualFoxpro9Parser.ENDFOR - 64)) | (1 << (VisualFoxpro9Parser.WHILE - 64)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 64)) | (1 << (VisualFoxpro9Parser.SAFETY - 64)) | (1 << (VisualFoxpro9Parser.STATUS - 64)) | (1 << (VisualFoxpro9Parser.BAR - 64)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 64)) | (1 << (VisualFoxpro9Parser.CURSOR - 64)) | (1 << (VisualFoxpro9Parser.REFRESH - 64)) | (1 << (VisualFoxpro9Parser.BELL - 64)) | (1 << (VisualFoxpro9Parser.CENTURY - 64)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 64)) | (1 << (VisualFoxpro9Parser.DATE - 64)) | (1 << (VisualFoxpro9Parser.ADD - 64)) | (1 << (VisualFoxpro9Parser.OBJECT - 64)) | (1 << (VisualFoxpro9Parser.REPLACE - 64)) | (1 << (VisualFoxpro9Parser.LIBRARY - 64)) | (1 << (VisualFoxpro9Parser.SHARED - 64)) | (1 << (VisualFoxpro9Parser.WAIT - 64)) | (1 << (VisualFoxpro9Parser.WINDOW - 64)) | (1 << (VisualFoxpro9Parser.NOWAIT - 64)) | (1 << (VisualFoxpro9Parser.NOCLEAR - 64)) | (1 << (VisualFoxpro9Parser.NOTIFY - 64)) | (1 << (VisualFoxpro9Parser.ENDDO - 64)) | (1 << (VisualFoxpro9Parser.DECLARE - 64)) | (1 << (VisualFoxpro9Parser.ERASE - 64)) | (1 << (VisualFoxpro9Parser.SYSMENU - 64)) | (1 << (VisualFoxpro9Parser.CLOCK - 64)) | (1 << (VisualFoxpro9Parser.RETURN - 64)) | (1 << (VisualFoxpro9Parser.PARAMETER - 64)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 64)) | (1 << (VisualFoxpro9Parser.EXACT - 64)) | (1 << (VisualFoxpro9Parser.ALL - 64)) | (1 << (VisualFoxpro9Parser.COUNT - 64)) | (1 << (VisualFoxpro9Parser.GOTO - 64)) | (1 << (VisualFoxpro9Parser.TOP - 64)) | (1 << (VisualFoxpro9Parser.BOTTOM - 64)) | (1 << (VisualFoxpro9Parser.RECORD - 64)) | (1 << (VisualFoxpro9Parser.CLOSE - 64)) | (1 << (VisualFoxpro9Parser.APPEND - 64)) | (1 << (VisualFoxpro9Parser.BLANK - 64)) | (1 << (VisualFoxpro9Parser.NOMENU - 64)) | (1 << (VisualFoxpro9Parser.CASE - 64)) | (1 << (VisualFoxpro9Parser.ENDCASE - 64)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 64)) | (1 << (VisualFoxpro9Parser.FROM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualFoxpro9Parser.REPORT - 128)) | (1 << (VisualFoxpro9Parser.FORM - 128)) | (1 << (VisualFoxpro9Parser.NOEJECT - 128)) | (1 << (VisualFoxpro9Parser.PRINTER - 128)) | (1 << (VisualFoxpro9Parser.PROMPT - 128)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 128)) | (1 << (VisualFoxpro9Parser.DB4 - 128)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 128)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 128)) | (1 << (VisualFoxpro9Parser.COPY - 128)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 128)) | (1 << (VisualFoxpro9Parser.DELETED - 128)) | (1 << (VisualFoxpro9Parser.SUM - 128)) | (1 << (VisualFoxpro9Parser.DISTINCT - 128)) | (1 << (VisualFoxpro9Parser.INTO - 128)) | (1 << (VisualFoxpro9Parser.NEXT - 128)) | (1 << (VisualFoxpro9Parser.REST - 128)) | (1 << (VisualFoxpro9Parser.SKIPKW - 128)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 128)) | (1 << (VisualFoxpro9Parser.NEAR - 128)) | (1 << (VisualFoxpro9Parser.MKDIR - 128)) | (1 << (VisualFoxpro9Parser.RMDIR - 128)) | (1 << (VisualFoxpro9Parser.KEY - 128)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 128)) | (1 << (VisualFoxpro9Parser.LABEL - 128)) | (1 << (VisualFoxpro9Parser.PLAIN - 128)) | (1 << (VisualFoxpro9Parser.MENU - 128)) | (1 << (VisualFoxpro9Parser.AT - 128)) | (1 << (VisualFoxpro9Parser.LINE - 128)) | (1 << (VisualFoxpro9Parser.SCREEN - 128)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 128)) | (1 << (VisualFoxpro9Parser.PAD - 128)) | (1 << (VisualFoxpro9Parser.OF - 128)) | (1 << (VisualFoxpro9Parser.COLOR - 128)) | (1 << (VisualFoxpro9Parser.SCHEME - 128)) | (1 << (VisualFoxpro9Parser.BEFORE - 128)) | (1 << (VisualFoxpro9Parser.AFTER - 128)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 128)) | (1 << (VisualFoxpro9Parser.FONT - 128)) | (1 << (VisualFoxpro9Parser.STYLE - 128)) | (1 << (VisualFoxpro9Parser.MARK - 128)) | (1 << (VisualFoxpro9Parser.MESSAGE - 128)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.POPUP - 128)) | (1 << (VisualFoxpro9Parser.EXTENDED - 128)) | (1 << (VisualFoxpro9Parser.SHADOW - 128)) | (1 << (VisualFoxpro9Parser.MARGIN - 128)) | (1 << (VisualFoxpro9Parser.RELATIVE - 128)) | (1 << (VisualFoxpro9Parser.SELECTION - 128)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 128)) | (1 << (VisualFoxpro9Parser.SAME - 128)) | (1 << (VisualFoxpro9Parser.NOSHOW - 128)) | (1 << (VisualFoxpro9Parser.STEP - 128)) | (1 << (VisualFoxpro9Parser.THEN - 128)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 128)) | (1 << (VisualFoxpro9Parser.IFDEF - 128)) | (1 << (VisualFoxpro9Parser.PUSH - 128)) | (1 << (VisualFoxpro9Parser.POP - 128)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 128)) | (1 << (VisualFoxpro9Parser.ENDWITH - 128)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 128)) | (1 << (VisualFoxpro9Parser.ALIAS - 128)) | (1 << (VisualFoxpro9Parser.ORDER - 128)) | (1 << (VisualFoxpro9Parser.SEEK - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (VisualFoxpro9Parser.WHERE - 192)) | (1 << (VisualFoxpro9Parser.FILTER - 192)) | (1 << (VisualFoxpro9Parser.RENAME - 192)) | (1 << (VisualFoxpro9Parser.INCLUDE - 192)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 192)) | (1 << (VisualFoxpro9Parser.BY - 192)) | (1 << (VisualFoxpro9Parser.UNIQUE - 192)) | (1 << (VisualFoxpro9Parser.INDEX - 192)) | (1 << (VisualFoxpro9Parser.TAG - 192)) | (1 << (VisualFoxpro9Parser.COMPACT - 192)) | (1 << (VisualFoxpro9Parser.ASCENDING - 192)) | (1 << (VisualFoxpro9Parser.DESCENDING - 192)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 192)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 192)) | (1 << (VisualFoxpro9Parser.DIMENSION - 192)) | (1 << (VisualFoxpro9Parser.NOT - 192)) | (1 << (VisualFoxpro9Parser.AND - 192)) | (1 << (VisualFoxpro9Parser.OTHERAND - 192)) | (1 << (VisualFoxpro9Parser.OR - 192)) | (1 << (VisualFoxpro9Parser.OTHEROR - 192)) | (1 << (VisualFoxpro9Parser.SCAN - 192)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 192)) | (1 << (VisualFoxpro9Parser.NULL - 192)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 192)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 192)) | (1 << (VisualFoxpro9Parser.DLLS - 192)) | (1 << (VisualFoxpro9Parser.MACROS - 192)) | (1 << (VisualFoxpro9Parser.NUMBER - 192)) | (1 << (VisualFoxpro9Parser.ZAP - 192)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 192)) | (1 << (VisualFoxpro9Parser.DEFAULT - 192)) | (1 << (VisualFoxpro9Parser.SAVE - 192)) | (1 << (VisualFoxpro9Parser.NOSAVE - 192)) | (1 << (VisualFoxpro9Parser.DATABASE - 192)) | (1 << (VisualFoxpro9Parser.TABLES - 192)) | (1 << (VisualFoxpro9Parser.INDEXES - 192)) | (1 << (VisualFoxpro9Parser.PACK - 192)) | (1 << (VisualFoxpro9Parser.REINDEX - 192)) | (1 << (VisualFoxpro9Parser.MEMO - 192)) | (1 << (VisualFoxpro9Parser.PROGRAM - 192)) | (1 << (VisualFoxpro9Parser.SCOPE - 192)) | (1 << (VisualFoxpro9Parser.THROW - 192)) | (1 << (VisualFoxpro9Parser.EACH - 192)) | (1 << (VisualFoxpro9Parser.CAST - 192)) | (1 << (VisualFoxpro9Parser.RUN - 192)) | (1 << (VisualFoxpro9Parser.MULTILOCKS - 192)) | (1 << (VisualFoxpro9Parser.TRY - 192)) | (1 << (VisualFoxpro9Parser.CATCH - 192)) | (1 << (VisualFoxpro9Parser.FINALLY - 192)) | (1 << (VisualFoxpro9Parser.ENDTRY - 192)) | (1 << (VisualFoxpro9Parser.BROWSE - 192)) | (1 << (VisualFoxpro9Parser.INSERT - 192)) | (1 << (VisualFoxpro9Parser.VALUES - 192)) | (1 << (VisualFoxpro9Parser.MEMVAR - 192)) | (1 << (VisualFoxpro9Parser.TYPE - 192)) | (1 << (VisualFoxpro9Parser.CHDIR - 192)) | (1 << (VisualFoxpro9Parser.SCATTER - 192)) | (1 << (VisualFoxpro9Parser.GATHER - 192)) | (1 << (VisualFoxpro9Parser.EXCEPT - 192)) | (1 << (VisualFoxpro9Parser.LIKE - 192)) | (1 << (VisualFoxpro9Parser.FIELDS - 192)) | (1 << (VisualFoxpro9Parser.ALTER - 192)) | (1 << (VisualFoxpro9Parser.COLUMN - 192)) | (1 << (VisualFoxpro9Parser.DROP - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (VisualFoxpro9Parser.DEBUG - 256)) | (1 << (VisualFoxpro9Parser.GETS - 256)) | (1 << (VisualFoxpro9Parser.DEBUGOUT - 256)) | (1 << (VisualFoxpro9Parser.MEMORY - 256)) | (1 << (VisualFoxpro9Parser.MENUS - 256)) | (1 << (VisualFoxpro9Parser.RESOURCES - 256)) | (1 << (VisualFoxpro9Parser.HELP - 256)) | (1 << (VisualFoxpro9Parser.SAY - 256)) | (1 << (VisualFoxpro9Parser.COLLECTION - 256)) | (1 << (VisualFoxpro9Parser.SYSTEM - 256)) | (1 << (VisualFoxpro9Parser.TALK - 256)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 256)) | (1 << (VisualFoxpro9Parser.RELATION - 256)) | (1 << (VisualFoxpro9Parser.ID - 256)) | (1 << (VisualFoxpro9Parser.WS - 256)) | (1 << (VisualFoxpro9Parser.UNMATCHED - 256)))) != 0):
                        self.state = 1730
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==VisualFoxpro9Parser.RIGHTBRACKET or _la==VisualFoxpro9Parser.NL:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1735
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1736
                    self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VisualFoxpro9Parser.BLOB_LITERAL]:
                localctx = VisualFoxpro9Parser.BlobContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1739
                self.match(VisualFoxpro9Parser.BLOB_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdAttr2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IdAttr2Context, self).__init__(parent, invokingState)
            self.parser = parser
            self.startPeriod = None # Token

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_idAttr2

        def accept(self, visitor):
            if hasattr(visitor, "visitIdAttr2"):
                return visitor.visitIdAttr2(self)
            else:
                return visitor.visitChildren(self)




    def idAttr2(self):

        localctx = VisualFoxpro9Parser.IdAttr2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_idAttr2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.PERIOD:
                self.state = 1742
                localctx.startPeriod = self.match(VisualFoxpro9Parser.PERIOD)


            self.state = 1745
            self.identifier()
            self.state = 1750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualFoxpro9Parser.PERIOD:
                self.state = 1746
                self.match(VisualFoxpro9Parser.PERIOD)
                self.state = 1747
                self.identifier()
                self.state = 1752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdAttrContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IdAttrContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdentifierContext,0)


        def PERIOD(self):
            return self.getToken(VisualFoxpro9Parser.PERIOD, 0)

        def trailer(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TrailerContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_idAttr

        def accept(self, visitor):
            if hasattr(visitor, "visitIdAttr"):
                return visitor.visitIdAttr(self)
            else:
                return visitor.visitChildren(self)




    def idAttr(self):

        localctx = VisualFoxpro9Parser.IdAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_idAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualFoxpro9Parser.PERIOD:
                self.state = 1753
                self.match(VisualFoxpro9Parser.PERIOD)


            self.state = 1756
            self.identifier()
            self.state = 1758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.state = 1757
                self.trailer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TwoExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.TwoExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(VisualFoxpro9Parser.ExprContext)
            else:
                return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,i)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_twoExpr

        def accept(self, visitor):
            if hasattr(visitor, "visitTwoExpr"):
                return visitor.visitTwoExpr(self)
            else:
                return visitor.visitChildren(self)




    def twoExpr(self):

        localctx = VisualFoxpro9Parser.TwoExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_twoExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1760
            self.expr(0)
            self.state = 1761
            self.match(VisualFoxpro9Parser.COMMA)
            self.state = 1762
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayIndexContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ArrayIndexContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def twoExpr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.TwoExprContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_arrayIndex

        def accept(self, visitor):
            if hasattr(visitor, "visitArrayIndex"):
                return visitor.visitArrayIndex(self)
            else:
                return visitor.visitChildren(self)




    def arrayIndex(self):

        localctx = VisualFoxpro9Parser.ArrayIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_arrayIndex)
        try:
            self.state = 1778
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.LEFTPAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1764
                self.match(VisualFoxpro9Parser.LEFTPAREN)
                self.state = 1767
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
                if la_ == 1:
                    self.state = 1765
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 1766
                    self.twoExpr()
                    pass


                self.state = 1769
                self.match(VisualFoxpro9Parser.RIGHTPAREN)
                pass
            elif token in [VisualFoxpro9Parser.LEFTBRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1771
                self.match(VisualFoxpro9Parser.LEFTBRACKET)
                self.state = 1774
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
                if la_ == 1:
                    self.state = 1772
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 1773
                    self.twoExpr()
                    pass


                self.state = 1776
                self.match(VisualFoxpro9Parser.RIGHTBRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatatypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.DatatypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def idAttr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.IdAttrContext,0)


        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_datatype

        def accept(self, visitor):
            if hasattr(visitor, "visitDatatype"):
                return visitor.visitDatatype(self)
            else:
                return visitor.visitChildren(self)




    def datatype(self):

        localctx = VisualFoxpro9Parser.DatatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_datatype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1780
            self.idAttr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScopeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.ScopeClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)

        def NEXT(self):
            return self.getToken(VisualFoxpro9Parser.NEXT, 0)

        def expr(self):
            return self.getTypedRuleContext(VisualFoxpro9Parser.ExprContext,0)


        def RECORD(self):
            return self.getToken(VisualFoxpro9Parser.RECORD, 0)

        def REST(self):
            return self.getToken(VisualFoxpro9Parser.REST, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_scopeClause

        def accept(self, visitor):
            if hasattr(visitor, "visitScopeClause"):
                return visitor.visitScopeClause(self)
            else:
                return visitor.visitChildren(self)




    def scopeClause(self):

        localctx = VisualFoxpro9Parser.ScopeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_scopeClause)
        try:
            self.state = 1788
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualFoxpro9Parser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1782
                self.match(VisualFoxpro9Parser.ALL)
                pass
            elif token in [VisualFoxpro9Parser.NEXT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1783
                self.match(VisualFoxpro9Parser.NEXT)
                self.state = 1784
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.RECORD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1785
                self.match(VisualFoxpro9Parser.RECORD)
                self.state = 1786
                self.expr(0)
                pass
            elif token in [VisualFoxpro9Parser.REST]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1787
                self.match(VisualFoxpro9Parser.REST)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(VisualFoxpro9Parser.IdentifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(VisualFoxpro9Parser.TO, 0)

        def DO(self):
            return self.getToken(VisualFoxpro9Parser.DO, 0)

        def IN(self):
            return self.getToken(VisualFoxpro9Parser.IN, 0)

        def AS(self):
            return self.getToken(VisualFoxpro9Parser.AS, 0)

        def IF(self):
            return self.getToken(VisualFoxpro9Parser.IF, 0)

        def ELIF(self):
            return self.getToken(VisualFoxpro9Parser.ELIF, 0)

        def ELSE(self):
            return self.getToken(VisualFoxpro9Parser.ELSE, 0)

        def ENDIF(self):
            return self.getToken(VisualFoxpro9Parser.ENDIF, 0)

        def ON(self):
            return self.getToken(VisualFoxpro9Parser.ON, 0)

        def OFF(self):
            return self.getToken(VisualFoxpro9Parser.OFF, 0)

        def ERROR(self):
            return self.getToken(VisualFoxpro9Parser.ERROR, 0)

        def WITH(self):
            return self.getToken(VisualFoxpro9Parser.WITH, 0)

        def STORE(self):
            return self.getToken(VisualFoxpro9Parser.STORE, 0)

        def EXTERNAL(self):
            return self.getToken(VisualFoxpro9Parser.EXTERNAL, 0)

        def SCOPE(self):
            return self.getToken(VisualFoxpro9Parser.SCOPE, 0)

        def ARRAY(self):
            return self.getToken(VisualFoxpro9Parser.ARRAY, 0)

        def RECALL(self):
            return self.getToken(VisualFoxpro9Parser.RECALL, 0)

        def DELETE(self):
            return self.getToken(VisualFoxpro9Parser.DELETE, 0)

        def FILE(self):
            return self.getToken(VisualFoxpro9Parser.FILE, 0)

        def SET(self):
            return self.getToken(VisualFoxpro9Parser.SET, 0)

        def RELEASE(self):
            return self.getToken(VisualFoxpro9Parser.RELEASE, 0)

        def RECYCLE(self):
            return self.getToken(VisualFoxpro9Parser.RECYCLE, 0)

        def CREATE(self):
            return self.getToken(VisualFoxpro9Parser.CREATE, 0)

        def TABLE(self):
            return self.getToken(VisualFoxpro9Parser.TABLE, 0)

        def DATABASE(self):
            return self.getToken(VisualFoxpro9Parser.DATABASE, 0)

        def DBF(self):
            return self.getToken(VisualFoxpro9Parser.DBF, 0)

        def NAME(self):
            return self.getToken(VisualFoxpro9Parser.NAME, 0)

        def FREE(self):
            return self.getToken(VisualFoxpro9Parser.FREE, 0)

        def SELECT(self):
            return self.getToken(VisualFoxpro9Parser.SELECT, 0)

        def USE(self):
            return self.getToken(VisualFoxpro9Parser.USE, 0)

        def READ(self):
            return self.getToken(VisualFoxpro9Parser.READ, 0)

        def EVENTS(self):
            return self.getToken(VisualFoxpro9Parser.EVENTS, 0)

        def SHUTDOWN(self):
            return self.getToken(VisualFoxpro9Parser.SHUTDOWN, 0)

        def CLEAR(self):
            return self.getToken(VisualFoxpro9Parser.CLEAR, 0)

        def PROCEDURE(self):
            return self.getToken(VisualFoxpro9Parser.PROCEDURE, 0)

        def DEFINE(self):
            return self.getToken(VisualFoxpro9Parser.DEFINE, 0)

        def CLASS(self):
            return self.getToken(VisualFoxpro9Parser.CLASS, 0)

        def ENDDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.ENDDEFINE, 0)

        def LOCATE(self):
            return self.getToken(VisualFoxpro9Parser.LOCATE, 0)

        def CONTINUE(self):
            return self.getToken(VisualFoxpro9Parser.CONTINUE, 0)

        def FOR(self):
            return self.getToken(VisualFoxpro9Parser.FOR, 0)

        def ENDFOR(self):
            return self.getToken(VisualFoxpro9Parser.ENDFOR, 0)

        def WHILE(self):
            return self.getToken(VisualFoxpro9Parser.WHILE, 0)

        def NOOPTIMIZE(self):
            return self.getToken(VisualFoxpro9Parser.NOOPTIMIZE, 0)

        def STATUS(self):
            return self.getToken(VisualFoxpro9Parser.STATUS, 0)

        def BAR(self):
            return self.getToken(VisualFoxpro9Parser.BAR, 0)

        def MEMOWIDTH(self):
            return self.getToken(VisualFoxpro9Parser.MEMOWIDTH, 0)

        def CURSOR(self):
            return self.getToken(VisualFoxpro9Parser.CURSOR, 0)

        def REFRESH(self):
            return self.getToken(VisualFoxpro9Parser.REFRESH, 0)

        def BELL(self):
            return self.getToken(VisualFoxpro9Parser.BELL, 0)

        def CENTURY(self):
            return self.getToken(VisualFoxpro9Parser.CENTURY, 0)

        def DATE(self):
            return self.getToken(VisualFoxpro9Parser.DATE, 0)

        def ADD(self):
            return self.getToken(VisualFoxpro9Parser.ADD, 0)

        def OBJECT(self):
            return self.getToken(VisualFoxpro9Parser.OBJECT, 0)

        def REPLACE(self):
            return self.getToken(VisualFoxpro9Parser.REPLACE, 0)

        def LIBRARY(self):
            return self.getToken(VisualFoxpro9Parser.LIBRARY, 0)

        def SHARED(self):
            return self.getToken(VisualFoxpro9Parser.SHARED, 0)

        def WAIT(self):
            return self.getToken(VisualFoxpro9Parser.WAIT, 0)

        def WINDOW(self):
            return self.getToken(VisualFoxpro9Parser.WINDOW, 0)

        def NOWAIT(self):
            return self.getToken(VisualFoxpro9Parser.NOWAIT, 0)

        def NOCLEAR(self):
            return self.getToken(VisualFoxpro9Parser.NOCLEAR, 0)

        def NOTIFY(self):
            return self.getToken(VisualFoxpro9Parser.NOTIFY, 0)

        def ENDDO(self):
            return self.getToken(VisualFoxpro9Parser.ENDDO, 0)

        def DECLARE(self):
            return self.getToken(VisualFoxpro9Parser.DECLARE, 0)

        def ERASE(self):
            return self.getToken(VisualFoxpro9Parser.ERASE, 0)

        def SYSMENU(self):
            return self.getToken(VisualFoxpro9Parser.SYSMENU, 0)

        def CLOCK(self):
            return self.getToken(VisualFoxpro9Parser.CLOCK, 0)

        def RETURN(self):
            return self.getToken(VisualFoxpro9Parser.RETURN, 0)

        def PARAMETER(self):
            return self.getToken(VisualFoxpro9Parser.PARAMETER, 0)

        def ALTERNATE(self):
            return self.getToken(VisualFoxpro9Parser.ALTERNATE, 0)

        def EXACT(self):
            return self.getToken(VisualFoxpro9Parser.EXACT, 0)

        def ALL(self):
            return self.getToken(VisualFoxpro9Parser.ALL, 0)

        def COUNT(self):
            return self.getToken(VisualFoxpro9Parser.COUNT, 0)

        def GOTO(self):
            return self.getToken(VisualFoxpro9Parser.GOTO, 0)

        def TOP(self):
            return self.getToken(VisualFoxpro9Parser.TOP, 0)

        def BOTTOM(self):
            return self.getToken(VisualFoxpro9Parser.BOTTOM, 0)

        def RECORD(self):
            return self.getToken(VisualFoxpro9Parser.RECORD, 0)

        def CLOSE(self):
            return self.getToken(VisualFoxpro9Parser.CLOSE, 0)

        def APPEND(self):
            return self.getToken(VisualFoxpro9Parser.APPEND, 0)

        def BLANK(self):
            return self.getToken(VisualFoxpro9Parser.BLANK, 0)

        def NOMENU(self):
            return self.getToken(VisualFoxpro9Parser.NOMENU, 0)

        def CASE(self):
            return self.getToken(VisualFoxpro9Parser.CASE, 0)

        def FROM(self):
            return self.getToken(VisualFoxpro9Parser.FROM, 0)

        def REPORT(self):
            return self.getToken(VisualFoxpro9Parser.REPORT, 0)

        def FORM(self):
            return self.getToken(VisualFoxpro9Parser.FORM, 0)

        def NOEJECT(self):
            return self.getToken(VisualFoxpro9Parser.NOEJECT, 0)

        def PRINTER(self):
            return self.getToken(VisualFoxpro9Parser.PRINTER, 0)

        def PROMPT(self):
            return self.getToken(VisualFoxpro9Parser.PROMPT, 0)

        def NOPROMPT(self):
            return self.getToken(VisualFoxpro9Parser.NOPROMPT, 0)

        def NOCONSOLE(self):
            return self.getToken(VisualFoxpro9Parser.NOCONSOLE, 0)

        def COPY(self):
            return self.getToken(VisualFoxpro9Parser.COPY, 0)

        def STRUCTURE(self):
            return self.getToken(VisualFoxpro9Parser.STRUCTURE, 0)

        def DELETED(self):
            return self.getToken(VisualFoxpro9Parser.DELETED, 0)

        def SUM(self):
            return self.getToken(VisualFoxpro9Parser.SUM, 0)

        def DISTINCT(self):
            return self.getToken(VisualFoxpro9Parser.DISTINCT, 0)

        def INTO(self):
            return self.getToken(VisualFoxpro9Parser.INTO, 0)

        def NEXT(self):
            return self.getToken(VisualFoxpro9Parser.NEXT, 0)

        def REST(self):
            return self.getToken(VisualFoxpro9Parser.REST, 0)

        def SKIPKW(self):
            return self.getToken(VisualFoxpro9Parser.SKIPKW, 0)

        def PACK(self):
            return self.getToken(VisualFoxpro9Parser.PACK, 0)

        def EXCLUSIVE(self):
            return self.getToken(VisualFoxpro9Parser.EXCLUSIVE, 0)

        def NEAR(self):
            return self.getToken(VisualFoxpro9Parser.NEAR, 0)

        def MKDIR(self):
            return self.getToken(VisualFoxpro9Parser.MKDIR, 0)

        def RMDIR(self):
            return self.getToken(VisualFoxpro9Parser.RMDIR, 0)

        def KEY(self):
            return self.getToken(VisualFoxpro9Parser.KEY, 0)

        def KEYBOARD(self):
            return self.getToken(VisualFoxpro9Parser.KEYBOARD, 0)

        def LABEL(self):
            return self.getToken(VisualFoxpro9Parser.LABEL, 0)

        def PLAIN(self):
            return self.getToken(VisualFoxpro9Parser.PLAIN, 0)

        def MENU(self):
            return self.getToken(VisualFoxpro9Parser.MENU, 0)

        def AT(self):
            return self.getToken(VisualFoxpro9Parser.AT, 0)

        def LINE(self):
            return self.getToken(VisualFoxpro9Parser.LINE, 0)

        def SCREEN(self):
            return self.getToken(VisualFoxpro9Parser.SCREEN, 0)

        def NOMARGIN(self):
            return self.getToken(VisualFoxpro9Parser.NOMARGIN, 0)

        def PAD(self):
            return self.getToken(VisualFoxpro9Parser.PAD, 0)

        def OF(self):
            return self.getToken(VisualFoxpro9Parser.OF, 0)

        def COLOR(self):
            return self.getToken(VisualFoxpro9Parser.COLOR, 0)

        def SCHEME(self):
            return self.getToken(VisualFoxpro9Parser.SCHEME, 0)

        def BEFORE(self):
            return self.getToken(VisualFoxpro9Parser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(VisualFoxpro9Parser.AFTER, 0)

        def NEGOTIATE(self):
            return self.getToken(VisualFoxpro9Parser.NEGOTIATE, 0)

        def FONT(self):
            return self.getToken(VisualFoxpro9Parser.FONT, 0)

        def STYLE(self):
            return self.getToken(VisualFoxpro9Parser.STYLE, 0)

        def MARK(self):
            return self.getToken(VisualFoxpro9Parser.MARK, 0)

        def MESSAGE(self):
            return self.getToken(VisualFoxpro9Parser.MESSAGE, 0)

        def ACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.ACTIVATE, 0)

        def POPUP(self):
            return self.getToken(VisualFoxpro9Parser.POPUP, 0)

        def SHADOW(self):
            return self.getToken(VisualFoxpro9Parser.SHADOW, 0)

        def MARGIN(self):
            return self.getToken(VisualFoxpro9Parser.MARGIN, 0)

        def RELATIVE(self):
            return self.getToken(VisualFoxpro9Parser.RELATIVE, 0)

        def SELECTION(self):
            return self.getToken(VisualFoxpro9Parser.SELECTION, 0)

        def DEACTIVATE(self):
            return self.getToken(VisualFoxpro9Parser.DEACTIVATE, 0)

        def SAME(self):
            return self.getToken(VisualFoxpro9Parser.SAME, 0)

        def NOSHOW(self):
            return self.getToken(VisualFoxpro9Parser.NOSHOW, 0)

        def STEP(self):
            return self.getToken(VisualFoxpro9Parser.STEP, 0)

        def THEN(self):
            return self.getToken(VisualFoxpro9Parser.THEN, 0)

        def UNDEFINE(self):
            return self.getToken(VisualFoxpro9Parser.UNDEFINE, 0)

        def IFDEF(self):
            return self.getToken(VisualFoxpro9Parser.IFDEF, 0)

        def PUSH(self):
            return self.getToken(VisualFoxpro9Parser.PUSH, 0)

        def POP(self):
            return self.getToken(VisualFoxpro9Parser.POP, 0)

        def TIMEOUT(self):
            return self.getToken(VisualFoxpro9Parser.TIMEOUT, 0)

        def ENDWITH(self):
            return self.getToken(VisualFoxpro9Parser.ENDWITH, 0)

        def TYPEAHEAD(self):
            return self.getToken(VisualFoxpro9Parser.TYPEAHEAD, 0)

        def ALIAS(self):
            return self.getToken(VisualFoxpro9Parser.ALIAS, 0)

        def ORDER(self):
            return self.getToken(VisualFoxpro9Parser.ORDER, 0)

        def SEEK(self):
            return self.getToken(VisualFoxpro9Parser.SEEK, 0)

        def WHERE(self):
            return self.getToken(VisualFoxpro9Parser.WHERE, 0)

        def FILTER(self):
            return self.getToken(VisualFoxpro9Parser.FILTER, 0)

        def RENAME(self):
            return self.getToken(VisualFoxpro9Parser.RENAME, 0)

        def INCLUDE(self):
            return self.getToken(VisualFoxpro9Parser.INCLUDE, 0)

        def CLASSLIB(self):
            return self.getToken(VisualFoxpro9Parser.CLASSLIB, 0)

        def BY(self):
            return self.getToken(VisualFoxpro9Parser.BY, 0)

        def UNIQUE(self):
            return self.getToken(VisualFoxpro9Parser.UNIQUE, 0)

        def INDEX(self):
            return self.getToken(VisualFoxpro9Parser.INDEX, 0)

        def TAG(self):
            return self.getToken(VisualFoxpro9Parser.TAG, 0)

        def COMPACT(self):
            return self.getToken(VisualFoxpro9Parser.COMPACT, 0)

        def ASCENDING(self):
            return self.getToken(VisualFoxpro9Parser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(VisualFoxpro9Parser.DESCENDING, 0)

        def CANDIDATE(self):
            return self.getToken(VisualFoxpro9Parser.CANDIDATE, 0)

        def ADDITIVE(self):
            return self.getToken(VisualFoxpro9Parser.ADDITIVE, 0)

        def DIMENSION(self):
            return self.getToken(VisualFoxpro9Parser.DIMENSION, 0)

        def NOT(self):
            return self.getToken(VisualFoxpro9Parser.NOT, 0)

        def AND(self):
            return self.getToken(VisualFoxpro9Parser.AND, 0)

        def OR(self):
            return self.getToken(VisualFoxpro9Parser.OR, 0)

        def SCAN(self):
            return self.getToken(VisualFoxpro9Parser.SCAN, 0)

        def ENDSCAN(self):
            return self.getToken(VisualFoxpro9Parser.ENDSCAN, 0)

        def NULL(self):
            return self.getToken(VisualFoxpro9Parser.NULL, 0)

        def BOOLEANCHAR(self):
            return self.getToken(VisualFoxpro9Parser.BOOLEANCHAR, 0)

        def NODEFAULT(self):
            return self.getToken(VisualFoxpro9Parser.NODEFAULT, 0)

        def DLLS(self):
            return self.getToken(VisualFoxpro9Parser.DLLS, 0)

        def MACROS(self):
            return self.getToken(VisualFoxpro9Parser.MACROS, 0)

        def NUMBER(self):
            return self.getToken(VisualFoxpro9Parser.NUMBER, 0)

        def ZAP(self):
            return self.getToken(VisualFoxpro9Parser.ZAP, 0)

        def ROLLOVER(self):
            return self.getToken(VisualFoxpro9Parser.ROLLOVER, 0)

        def DEFAULT(self):
            return self.getToken(VisualFoxpro9Parser.DEFAULT, 0)

        def SAVE(self):
            return self.getToken(VisualFoxpro9Parser.SAVE, 0)

        def NOSAVE(self):
            return self.getToken(VisualFoxpro9Parser.NOSAVE, 0)

        def PROGRAM(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAM, 0)

        def THROW(self):
            return self.getToken(VisualFoxpro9Parser.THROW, 0)

        def TABLES(self):
            return self.getToken(VisualFoxpro9Parser.TABLES, 0)

        def EACH(self):
            return self.getToken(VisualFoxpro9Parser.EACH, 0)

        def CAST(self):
            return self.getToken(VisualFoxpro9Parser.CAST, 0)

        def ENDCASE(self):
            return self.getToken(VisualFoxpro9Parser.ENDCASE, 0)

        def ENDPROC(self):
            return self.getToken(VisualFoxpro9Parser.ENDPROC, 0)

        def REINDEX(self):
            return self.getToken(VisualFoxpro9Parser.REINDEX, 0)

        def INDEXES(self):
            return self.getToken(VisualFoxpro9Parser.INDEXES, 0)

        def OTHERWISE(self):
            return self.getToken(VisualFoxpro9Parser.OTHERWISE, 0)

        def RUN(self):
            return self.getToken(VisualFoxpro9Parser.RUN, 0)

        def EXTENDED(self):
            return self.getToken(VisualFoxpro9Parser.EXTENDED, 0)

        def ASSERT(self):
            return self.getToken(VisualFoxpro9Parser.ASSERT, 0)

        def TRY(self):
            return self.getToken(VisualFoxpro9Parser.TRY, 0)

        def CATCH(self):
            return self.getToken(VisualFoxpro9Parser.CATCH, 0)

        def FINALLY(self):
            return self.getToken(VisualFoxpro9Parser.FINALLY, 0)

        def ENDTRY(self):
            return self.getToken(VisualFoxpro9Parser.ENDTRY, 0)

        def BROWSE(self):
            return self.getToken(VisualFoxpro9Parser.BROWSE, 0)

        def INSERT(self):
            return self.getToken(VisualFoxpro9Parser.INSERT, 0)

        def VALUES(self):
            return self.getToken(VisualFoxpro9Parser.VALUES, 0)

        def MEMVAR(self):
            return self.getToken(VisualFoxpro9Parser.MEMVAR, 0)

        def COMPATIBLE(self):
            return self.getToken(VisualFoxpro9Parser.COMPATIBLE, 0)

        def DB4(self):
            return self.getToken(VisualFoxpro9Parser.DB4, 0)

        def FOXPLUS(self):
            return self.getToken(VisualFoxpro9Parser.FOXPLUS, 0)

        def TYPE(self):
            return self.getToken(VisualFoxpro9Parser.TYPE, 0)

        def SCATTER(self):
            return self.getToken(VisualFoxpro9Parser.SCATTER, 0)

        def GATHER(self):
            return self.getToken(VisualFoxpro9Parser.GATHER, 0)

        def EXCEPT(self):
            return self.getToken(VisualFoxpro9Parser.EXCEPT, 0)

        def LIKE(self):
            return self.getToken(VisualFoxpro9Parser.LIKE, 0)

        def FIELDS(self):
            return self.getToken(VisualFoxpro9Parser.FIELDS, 0)

        def ALTER(self):
            return self.getToken(VisualFoxpro9Parser.ALTER, 0)

        def COLUMN(self):
            return self.getToken(VisualFoxpro9Parser.COLUMN, 0)

        def DROP(self):
            return self.getToken(VisualFoxpro9Parser.DROP, 0)

        def ID(self):
            return self.getToken(VisualFoxpro9Parser.ID, 0)

        def HELP(self):
            return self.getToken(VisualFoxpro9Parser.HELP, 0)

        def SAY(self):
            return self.getToken(VisualFoxpro9Parser.SAY, 0)

        def COLLECTION(self):
            return self.getToken(VisualFoxpro9Parser.COLLECTION, 0)

        def SYSTEM(self):
            return self.getToken(VisualFoxpro9Parser.SYSTEM, 0)

        def TALK(self):
            return self.getToken(VisualFoxpro9Parser.TALK, 0)

        def PROGRAMCONTROL(self):
            return self.getToken(VisualFoxpro9Parser.PROGRAMCONTROL, 0)

        def RELATION(self):
            return self.getToken(VisualFoxpro9Parser.RELATION, 0)

        def getRuleIndex(self):
            return VisualFoxpro9Parser.RULE_identifier

        def accept(self, visitor):
            if hasattr(visitor, "visitIdentifier"):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = VisualFoxpro9Parser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1790
            _la = self._input.LA(1)
            if not(((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (VisualFoxpro9Parser.ASSERT - 39)) | (1 << (VisualFoxpro9Parser.TO - 39)) | (1 << (VisualFoxpro9Parser.DO - 39)) | (1 << (VisualFoxpro9Parser.IN - 39)) | (1 << (VisualFoxpro9Parser.AS - 39)) | (1 << (VisualFoxpro9Parser.IF - 39)) | (1 << (VisualFoxpro9Parser.ELIF - 39)) | (1 << (VisualFoxpro9Parser.ELSE - 39)) | (1 << (VisualFoxpro9Parser.ENDIF - 39)) | (1 << (VisualFoxpro9Parser.ON - 39)) | (1 << (VisualFoxpro9Parser.OFF - 39)) | (1 << (VisualFoxpro9Parser.ERROR - 39)) | (1 << (VisualFoxpro9Parser.WITH - 39)) | (1 << (VisualFoxpro9Parser.STORE - 39)) | (1 << (VisualFoxpro9Parser.EXTERNAL - 39)) | (1 << (VisualFoxpro9Parser.ARRAY - 39)) | (1 << (VisualFoxpro9Parser.DELETE - 39)) | (1 << (VisualFoxpro9Parser.RECALL - 39)) | (1 << (VisualFoxpro9Parser.FILE - 39)) | (1 << (VisualFoxpro9Parser.SET - 39)) | (1 << (VisualFoxpro9Parser.RELEASE - 39)) | (1 << (VisualFoxpro9Parser.RECYCLE - 39)) | (1 << (VisualFoxpro9Parser.CREATE - 39)) | (1 << (VisualFoxpro9Parser.TABLE - 39)) | (1 << (VisualFoxpro9Parser.DBF - 39)) | (1 << (VisualFoxpro9Parser.NAME - 39)) | (1 << (VisualFoxpro9Parser.FREE - 39)) | (1 << (VisualFoxpro9Parser.SELECT - 39)) | (1 << (VisualFoxpro9Parser.USE - 39)) | (1 << (VisualFoxpro9Parser.READ - 39)) | (1 << (VisualFoxpro9Parser.EVENTS - 39)) | (1 << (VisualFoxpro9Parser.SHUTDOWN - 39)) | (1 << (VisualFoxpro9Parser.CLEAR - 39)) | (1 << (VisualFoxpro9Parser.PROCEDURE - 39)) | (1 << (VisualFoxpro9Parser.ENDPROC - 39)) | (1 << (VisualFoxpro9Parser.DEFINE - 39)) | (1 << (VisualFoxpro9Parser.CLASS - 39)) | (1 << (VisualFoxpro9Parser.ENDDEFINE - 39)) | (1 << (VisualFoxpro9Parser.LOCATE - 39)) | (1 << (VisualFoxpro9Parser.CONTINUE - 39)) | (1 << (VisualFoxpro9Parser.FOR - 39)) | (1 << (VisualFoxpro9Parser.ENDFOR - 39)) | (1 << (VisualFoxpro9Parser.WHILE - 39)) | (1 << (VisualFoxpro9Parser.NOOPTIMIZE - 39)) | (1 << (VisualFoxpro9Parser.STATUS - 39)) | (1 << (VisualFoxpro9Parser.BAR - 39)) | (1 << (VisualFoxpro9Parser.MEMOWIDTH - 39)) | (1 << (VisualFoxpro9Parser.CURSOR - 39)) | (1 << (VisualFoxpro9Parser.REFRESH - 39)) | (1 << (VisualFoxpro9Parser.BELL - 39)) | (1 << (VisualFoxpro9Parser.CENTURY - 39)) | (1 << (VisualFoxpro9Parser.COMPATIBLE - 39)) | (1 << (VisualFoxpro9Parser.DATE - 39)) | (1 << (VisualFoxpro9Parser.ADD - 39)) | (1 << (VisualFoxpro9Parser.OBJECT - 39)) | (1 << (VisualFoxpro9Parser.REPLACE - 39)) | (1 << (VisualFoxpro9Parser.LIBRARY - 39)) | (1 << (VisualFoxpro9Parser.SHARED - 39)) | (1 << (VisualFoxpro9Parser.WAIT - 39)) | (1 << (VisualFoxpro9Parser.WINDOW - 39)) | (1 << (VisualFoxpro9Parser.NOWAIT - 39)))) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (VisualFoxpro9Parser.NOCLEAR - 103)) | (1 << (VisualFoxpro9Parser.NOTIFY - 103)) | (1 << (VisualFoxpro9Parser.ENDDO - 103)) | (1 << (VisualFoxpro9Parser.DECLARE - 103)) | (1 << (VisualFoxpro9Parser.ERASE - 103)) | (1 << (VisualFoxpro9Parser.SYSMENU - 103)) | (1 << (VisualFoxpro9Parser.CLOCK - 103)) | (1 << (VisualFoxpro9Parser.RETURN - 103)) | (1 << (VisualFoxpro9Parser.PARAMETER - 103)) | (1 << (VisualFoxpro9Parser.ALTERNATE - 103)) | (1 << (VisualFoxpro9Parser.EXACT - 103)) | (1 << (VisualFoxpro9Parser.ALL - 103)) | (1 << (VisualFoxpro9Parser.COUNT - 103)) | (1 << (VisualFoxpro9Parser.GOTO - 103)) | (1 << (VisualFoxpro9Parser.TOP - 103)) | (1 << (VisualFoxpro9Parser.BOTTOM - 103)) | (1 << (VisualFoxpro9Parser.RECORD - 103)) | (1 << (VisualFoxpro9Parser.CLOSE - 103)) | (1 << (VisualFoxpro9Parser.APPEND - 103)) | (1 << (VisualFoxpro9Parser.BLANK - 103)) | (1 << (VisualFoxpro9Parser.NOMENU - 103)) | (1 << (VisualFoxpro9Parser.CASE - 103)) | (1 << (VisualFoxpro9Parser.ENDCASE - 103)) | (1 << (VisualFoxpro9Parser.OTHERWISE - 103)) | (1 << (VisualFoxpro9Parser.FROM - 103)) | (1 << (VisualFoxpro9Parser.REPORT - 103)) | (1 << (VisualFoxpro9Parser.FORM - 103)) | (1 << (VisualFoxpro9Parser.NOEJECT - 103)) | (1 << (VisualFoxpro9Parser.PRINTER - 103)) | (1 << (VisualFoxpro9Parser.PROMPT - 103)) | (1 << (VisualFoxpro9Parser.NOPROMPT - 103)) | (1 << (VisualFoxpro9Parser.DB4 - 103)) | (1 << (VisualFoxpro9Parser.FOXPLUS - 103)) | (1 << (VisualFoxpro9Parser.NOCONSOLE - 103)) | (1 << (VisualFoxpro9Parser.COPY - 103)) | (1 << (VisualFoxpro9Parser.STRUCTURE - 103)) | (1 << (VisualFoxpro9Parser.DELETED - 103)) | (1 << (VisualFoxpro9Parser.SUM - 103)) | (1 << (VisualFoxpro9Parser.DISTINCT - 103)) | (1 << (VisualFoxpro9Parser.INTO - 103)) | (1 << (VisualFoxpro9Parser.NEXT - 103)) | (1 << (VisualFoxpro9Parser.REST - 103)) | (1 << (VisualFoxpro9Parser.SKIPKW - 103)) | (1 << (VisualFoxpro9Parser.EXCLUSIVE - 103)) | (1 << (VisualFoxpro9Parser.NEAR - 103)) | (1 << (VisualFoxpro9Parser.MKDIR - 103)) | (1 << (VisualFoxpro9Parser.RMDIR - 103)) | (1 << (VisualFoxpro9Parser.KEY - 103)) | (1 << (VisualFoxpro9Parser.KEYBOARD - 103)) | (1 << (VisualFoxpro9Parser.LABEL - 103)) | (1 << (VisualFoxpro9Parser.PLAIN - 103)) | (1 << (VisualFoxpro9Parser.MENU - 103)) | (1 << (VisualFoxpro9Parser.AT - 103)) | (1 << (VisualFoxpro9Parser.LINE - 103)) | (1 << (VisualFoxpro9Parser.SCREEN - 103)) | (1 << (VisualFoxpro9Parser.NOMARGIN - 103)) | (1 << (VisualFoxpro9Parser.PAD - 103)) | (1 << (VisualFoxpro9Parser.OF - 103)) | (1 << (VisualFoxpro9Parser.COLOR - 103)) | (1 << (VisualFoxpro9Parser.SCHEME - 103)) | (1 << (VisualFoxpro9Parser.BEFORE - 103)) | (1 << (VisualFoxpro9Parser.AFTER - 103)) | (1 << (VisualFoxpro9Parser.NEGOTIATE - 103)) | (1 << (VisualFoxpro9Parser.FONT - 103)))) != 0) or ((((_la - 167)) & ~0x3f) == 0 and ((1 << (_la - 167)) & ((1 << (VisualFoxpro9Parser.STYLE - 167)) | (1 << (VisualFoxpro9Parser.MARK - 167)) | (1 << (VisualFoxpro9Parser.MESSAGE - 167)) | (1 << (VisualFoxpro9Parser.ACTIVATE - 167)) | (1 << (VisualFoxpro9Parser.POPUP - 167)) | (1 << (VisualFoxpro9Parser.EXTENDED - 167)) | (1 << (VisualFoxpro9Parser.SHADOW - 167)) | (1 << (VisualFoxpro9Parser.MARGIN - 167)) | (1 << (VisualFoxpro9Parser.RELATIVE - 167)) | (1 << (VisualFoxpro9Parser.SELECTION - 167)) | (1 << (VisualFoxpro9Parser.DEACTIVATE - 167)) | (1 << (VisualFoxpro9Parser.SAME - 167)) | (1 << (VisualFoxpro9Parser.NOSHOW - 167)) | (1 << (VisualFoxpro9Parser.STEP - 167)) | (1 << (VisualFoxpro9Parser.THEN - 167)) | (1 << (VisualFoxpro9Parser.UNDEFINE - 167)) | (1 << (VisualFoxpro9Parser.IFDEF - 167)) | (1 << (VisualFoxpro9Parser.PUSH - 167)) | (1 << (VisualFoxpro9Parser.POP - 167)) | (1 << (VisualFoxpro9Parser.TIMEOUT - 167)) | (1 << (VisualFoxpro9Parser.ENDWITH - 167)) | (1 << (VisualFoxpro9Parser.TYPEAHEAD - 167)) | (1 << (VisualFoxpro9Parser.ALIAS - 167)) | (1 << (VisualFoxpro9Parser.ORDER - 167)) | (1 << (VisualFoxpro9Parser.SEEK - 167)) | (1 << (VisualFoxpro9Parser.WHERE - 167)) | (1 << (VisualFoxpro9Parser.FILTER - 167)) | (1 << (VisualFoxpro9Parser.RENAME - 167)) | (1 << (VisualFoxpro9Parser.INCLUDE - 167)) | (1 << (VisualFoxpro9Parser.CLASSLIB - 167)) | (1 << (VisualFoxpro9Parser.BY - 167)) | (1 << (VisualFoxpro9Parser.UNIQUE - 167)) | (1 << (VisualFoxpro9Parser.INDEX - 167)) | (1 << (VisualFoxpro9Parser.TAG - 167)) | (1 << (VisualFoxpro9Parser.COMPACT - 167)) | (1 << (VisualFoxpro9Parser.ASCENDING - 167)) | (1 << (VisualFoxpro9Parser.DESCENDING - 167)) | (1 << (VisualFoxpro9Parser.CANDIDATE - 167)) | (1 << (VisualFoxpro9Parser.ADDITIVE - 167)) | (1 << (VisualFoxpro9Parser.DIMENSION - 167)) | (1 << (VisualFoxpro9Parser.NOT - 167)) | (1 << (VisualFoxpro9Parser.AND - 167)) | (1 << (VisualFoxpro9Parser.OR - 167)) | (1 << (VisualFoxpro9Parser.SCAN - 167)) | (1 << (VisualFoxpro9Parser.ENDSCAN - 167)) | (1 << (VisualFoxpro9Parser.NULL - 167)) | (1 << (VisualFoxpro9Parser.BOOLEANCHAR - 167)) | (1 << (VisualFoxpro9Parser.NODEFAULT - 167)) | (1 << (VisualFoxpro9Parser.DLLS - 167)) | (1 << (VisualFoxpro9Parser.MACROS - 167)) | (1 << (VisualFoxpro9Parser.NUMBER - 167)) | (1 << (VisualFoxpro9Parser.ZAP - 167)) | (1 << (VisualFoxpro9Parser.ROLLOVER - 167)) | (1 << (VisualFoxpro9Parser.DEFAULT - 167)) | (1 << (VisualFoxpro9Parser.SAVE - 167)) | (1 << (VisualFoxpro9Parser.NOSAVE - 167)) | (1 << (VisualFoxpro9Parser.DATABASE - 167)) | (1 << (VisualFoxpro9Parser.TABLES - 167)) | (1 << (VisualFoxpro9Parser.INDEXES - 167)) | (1 << (VisualFoxpro9Parser.PACK - 167)) | (1 << (VisualFoxpro9Parser.REINDEX - 167)))) != 0) or ((((_la - 231)) & ~0x3f) == 0 and ((1 << (_la - 231)) & ((1 << (VisualFoxpro9Parser.PROGRAM - 231)) | (1 << (VisualFoxpro9Parser.SCOPE - 231)) | (1 << (VisualFoxpro9Parser.THROW - 231)) | (1 << (VisualFoxpro9Parser.EACH - 231)) | (1 << (VisualFoxpro9Parser.CAST - 231)) | (1 << (VisualFoxpro9Parser.RUN - 231)) | (1 << (VisualFoxpro9Parser.TRY - 231)) | (1 << (VisualFoxpro9Parser.CATCH - 231)) | (1 << (VisualFoxpro9Parser.FINALLY - 231)) | (1 << (VisualFoxpro9Parser.ENDTRY - 231)) | (1 << (VisualFoxpro9Parser.BROWSE - 231)) | (1 << (VisualFoxpro9Parser.INSERT - 231)) | (1 << (VisualFoxpro9Parser.VALUES - 231)) | (1 << (VisualFoxpro9Parser.MEMVAR - 231)) | (1 << (VisualFoxpro9Parser.TYPE - 231)) | (1 << (VisualFoxpro9Parser.SCATTER - 231)) | (1 << (VisualFoxpro9Parser.GATHER - 231)) | (1 << (VisualFoxpro9Parser.EXCEPT - 231)) | (1 << (VisualFoxpro9Parser.LIKE - 231)) | (1 << (VisualFoxpro9Parser.FIELDS - 231)) | (1 << (VisualFoxpro9Parser.ALTER - 231)) | (1 << (VisualFoxpro9Parser.COLUMN - 231)) | (1 << (VisualFoxpro9Parser.DROP - 231)) | (1 << (VisualFoxpro9Parser.HELP - 231)) | (1 << (VisualFoxpro9Parser.SAY - 231)) | (1 << (VisualFoxpro9Parser.COLLECTION - 231)) | (1 << (VisualFoxpro9Parser.SYSTEM - 231)) | (1 << (VisualFoxpro9Parser.TALK - 231)) | (1 << (VisualFoxpro9Parser.PROGRAMCONTROL - 231)) | (1 << (VisualFoxpro9Parser.RELATION - 231)) | (1 << (VisualFoxpro9Parser.ID - 231)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx, ruleIndex, predIndex):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[43] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx, predIndex):
            if predIndex == 0:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         




